import { Injectable } from '@angular/core';
import { Headers, Http, Response } from '@angular/http';
import 'rxjs/add/operator/toPromise';

import { RecipeOverviewModel, RecipeDetailModel, RecipeEditModel, IngredientModel, MeasurementModel, AuthorModel, SeoTagModel, FormResultModel, CategoryEditModel } from 'app/models';

@Injectable()
export class CmsService {
	private headers = new Headers({ 'Content-Type': 'application/json' });

	constructor(private http: Http) { }

	getRecipes(page: number): Promise<RecipeOverviewModel> {
		var url: string = '/api/cms/Recipes?page=' + page;

		return this.http.get(url, { headers: this.headers })
			.toPromise()
			.then(response => response.json() as RecipeOverviewModel)
			.catch(this.handleError);
	}

	getRecipe(id: number): Promise<RecipeEditModel> {
		return this.http.get('/api/cms/Recipe/' + id, { headers: this.headers })
			.toPromise()
			.then(response => response.json() as RecipeEditModel)
			.catch(this.handleError);
	}

	saveRecipe(data: RecipeEditModel): Promise<FormResultModel> {
		var url: string = '/api/CMS/Recipe';

		let myData = JSON.stringify(data);
		return this.http.post(url, myData, { headers: this.headers })
			.toPromise()
			.then(response => response.json() as FormResultModel)
			.catch(this.handleError);
	}

	deleteRecipe(id: number): Promise<FormResultModel> {
		return this.http.delete('/api/cms/Recipe/' + id, { headers: this.headers })
			.toPromise()
			.then(response => response.json() as FormResultModel)
			.catch(this.handleError);
	}

	getIngredients(): Promise<IngredientModel[]> {
		var url: string = '/api/cms/Ingredients';

		return this.http.get(url, { headers: this.headers })
			.toPromise()
			.then(response => response.json() as IngredientModel[])
			.catch(this.handleError);
	}

	getIngredientsForIds(ids: string): Promise<IngredientModel[]> {
		var url: string = '/api/cms/Ingredients/' + ids;

		return this.http.get(url, { headers: this.headers })
			.toPromise()
			.then(response => response.json() as IngredientModel[])
			.catch(this.handleError);
	}

	putIngredients(ids: string, name: string): Promise<boolean> {
		var url: string = '/api/cms/Ingredients/' + encodeURIComponent(ids) + '/' + encodeURIComponent(name);

		return this.http.put(url, { headers: this.headers })
			.toPromise()
			.then(response => response.json() as boolean)
			.catch(this.handleError);
	}

	getMeasurements(): Promise<MeasurementModel[]> {
		var url: string = '/api/cms/Measurements';

		return this.http.get(url, { headers: this.headers })
			.toPromise()
			.then(response => response.json() as MeasurementModel[])
			.catch(this.handleError);
	}

	getAuthors(): Promise<AuthorModel[]> {
		var url: string = '/api/cms/Authors';

		return this.http.get(url, { headers: this.headers })
			.toPromise()
			.then(response => response.json() as AuthorModel[])
			.catch(this.handleError);
	}

	getSeoTags(): Promise<SeoTagModel[]> {
		var url: string = '/api/cms/SeoTags';

		return this.http.get(url, { headers: this.headers })
			.toPromise()
			.then(response => response.json() as SeoTagModel[])
			.catch(this.handleError);
	}

	getCategories(): Promise<CategoryEditModel> {
		var url: string = '/api/CMS/Category';

		return this.http.get(url, { headers: this.headers })
			.toPromise()
			.then(response => response.json() as CategoryEditModel)
			.catch(this.handleError);

		//return this.http.post('/api/CMS/Category/Load', '').map((res: Response) => res.json());
	}

	saveCategories(data: CategoryEditModel): Promise<FormResultModel> {
		var url: string = '/api/CMS/Category';

		let myData = JSON.stringify(data);
		return this.http.post(url, myData, { headers: this.headers })
			.toPromise()
			.then(response => response.json() as FormResultModel)
			.catch(this.handleError);
		/*
	var requestOptions = new RequestOptions({
		method: RequestMethod.Post,
		url: '/api/CMS/Category/Save',
		search: 'data=' + encodeURIComponent(JSON.stringify(data))
	});

	return this.http.post('/api/CMS/Category/Save', "", requestOptions).map((res: Response) => res.json());
	*/
	}

	private handleError(error: any): Promise<any> {
		console.error('An error occurred', error); // for demo purposes only
		return Promise.reject(error.message || error);
	}
}