using LudwigsRecipe.Data.DBContext;
using LudwigsRecipe.Data.DataModels.Recipe;
using System;
using System.Collections.Generic;
using System.Linq;
using LudwigsRecipe.Data.DBContext.Models;
using LudwigsRecipe.Data.DataModels.Measurement;
using LudwigsRecipe.Data.Helper;
using Microsoft.EntityFrameworkCore;

namespace LudwigsRecipe.Data.Repositories.RecipeRepository
{
	public class RecipeRepository : IRecipeRepository
	{
		ApplicationDbContext ctx;

		public RecipeRepository(ApplicationDbContext applicationDbContext)
		{
			ctx = applicationDbContext;
		}
		
		public List<IRecipeOverviewData> LoadOverviewRecipes(IRequestRecipe requestData)
		{
			List<IRecipeOverviewData> data = new List<IRecipeOverviewData>();

			var recipeQuery = ctx.Recipes.AsQueryable();

			if (!String.IsNullOrEmpty(requestData.SearchTerm))
			{
				recipeQuery = recipeQuery.Where(x => x.Name.Contains(requestData.SearchTerm));
			}

			if (!String.IsNullOrEmpty(requestData.CategoryUrl))
			{
				Category category = ctx.Categories.FirstOrDefault(x => x.Url == requestData.CategoryUrl);
				if(category != null)
				{
					recipeQuery = recipeQuery.Include(x => x.RecipesToCategories).Where(x => x.RecipesToCategories.FirstOrDefault(y => y.CategoryId == category.Id) != null);
				}
				
			}
			
			if (!String.IsNullOrEmpty(requestData.SubCategoryUrl))
			{
				SubCategory subCategory = ctx.SubCategories.FirstOrDefault(x => x.Url == requestData.SubCategoryUrl);
				if (subCategory != null)
				{
					recipeQuery = recipeQuery.Include(x => x.RecipesToSubCategories).Where(x => x.RecipesToSubCategories.FirstOrDefault(y => y.SubCategoryId == subCategory.Id) != null);
				}
			}

			
			if (requestData.ForPublicWeb)
			{
				recipeQuery = recipeQuery.Where(x => x.IsPublished == true && x.PublishDate <= DateTime.Now);
			}

			if (!requestData.IsFriend)
			{
				recipeQuery = recipeQuery.Where(x => x.IsOnlyForFriends == false);
			}

			recipeQuery = recipeQuery.OrderByDescending(x => x.PublishDate);
			
			if (requestData.Skip > 0)
			{
				recipeQuery = recipeQuery.Skip(requestData.Skip);
			}
			if (requestData.Top > 0)
			{
				recipeQuery = recipeQuery.Take(requestData.Top);
			}
			try
			{
				var recipes = recipeQuery.ToList();

				foreach (var recipe in recipes)
				{
					data.Add(new RecipeOverviewData()
					{
						Id = recipe.Id,
						Name = recipe.Name,
						Url = recipe.Url,
						Description = recipe.Description,
						PublishDate = recipe.PublishDate,
						TeaserImageUrl = recipe.TeaserImageUrl
					});
				}
			}
			catch (Exception exception)
			{
			}

			return data;
		}

		public int LoadOverviewRecipesCount(IRequestRecipe requestData)
		{
			List<IRecipeOverviewData> data = new List<IRecipeOverviewData>();

			var recipeQuery = ctx.Recipes.AsQueryable();
			
			if (!String.IsNullOrEmpty(requestData.CategoryUrl))
			{
				Category category = ctx.Categories.FirstOrDefault(x => x.Url == requestData.CategoryUrl);
				if (category != null)
				{
					recipeQuery = recipeQuery.Include(x => x.RecipesToCategories).Where(x => x.RecipesToCategories.FirstOrDefault(y => y.CategoryId == category.Id) != null);
				}

			}

			int subCategoryId = 0;
			if (!String.IsNullOrEmpty(requestData.SubCategoryUrl))
			{
				SubCategory subCategory = ctx.SubCategories.FirstOrDefault(x => x.Url == requestData.SubCategoryUrl);
				if (subCategory != null)
				{
					recipeQuery = recipeQuery.Include(x => x.RecipesToSubCategories).Where(x => x.RecipesToSubCategories.FirstOrDefault(y => y.SubCategoryId == subCategory.Id) != null);
				}
			}

			if (requestData.ForPublicWeb)
			{
				recipeQuery = recipeQuery.Where(x => x.IsPublished == true && x.PublishDate <= DateTime.Now);
			}

			if (!requestData.IsFriend)
			{
				recipeQuery = recipeQuery.Where(x => x.IsOnlyForFriends == false);
			}

			try
			{
				var recipes = recipeQuery.ToList();
				return recipes.Count();
			}
			catch (Exception exception)
			{
			}

			return 0;
		}

		public IRecipeDetailData LoadRecipeDetail(int id, bool forPublicWeb, bool isFriend)
		{
			IRecipeDetailData recipe = null;

			var dbRecipeQuery = ctx.Recipes.Include(b => b.Measurement).Include(b => b.RecipesToCategories).ThenInclude(b => b.Category).AsQueryable();

			dbRecipeQuery = dbRecipeQuery.Where(x => x.Id == id);

			if (forPublicWeb)
			{
				dbRecipeQuery = dbRecipeQuery.Where(x => x.IsPublished == true && x.PublishDate <= DateTime.Now);
			}
			if (!isFriend)
			{
				dbRecipeQuery = dbRecipeQuery.Where(x => x.IsOnlyForFriends == false);
			}

			var dbRecipe = dbRecipeQuery.FirstOrDefault();

			if (dbRecipe != null)
			{
				recipe = new RecipeDetailData()
				{
					Id = dbRecipe.Id,
					Name = dbRecipe.Name,
					Description = dbRecipe.Description,
					Content = dbRecipe.Content,
					PublishDate = dbRecipe.PublishDate,
					Url = dbRecipe.Url,
					TeaserImageUrl = dbRecipe.TeaserImageUrl,
					IngredientCount = dbRecipe.IngredientCount,
					Measurement = (dbRecipe.Measurement != null) ? new MeasurementData() { Id = dbRecipe.Measurement.Id, Name = dbRecipe.Measurement.Name } : null,
					PreparationTime = dbRecipe.PreparationTime,
					WaitingTime = dbRecipe.WaitingTime
				};
			}

			return recipe;
		}

		public IRecipeData LoadRecipe(int id)
		{
			IRecipeData recipe = null;

			try
			{
				var dbRecipeQuery = ctx.Recipes.Include(b => b.Measurement).Include(b => b.RecipesToCategories).ThenInclude(b => b.Category).AsQueryable();

				dbRecipeQuery = dbRecipeQuery.Where(x => x.Id == id);

				var dbRecipe = dbRecipeQuery.FirstOrDefault();

				if (dbRecipe != null)
				{
					recipe = new RecipeData()
					{
						Id = dbRecipe.Id,
						IsPublished = dbRecipe.IsPublished,
						IsOnlyForFriends = dbRecipe.IsOnlyForFriends,
						Name = dbRecipe.Name,
						Description = dbRecipe.Description,
						Content = dbRecipe.Content,
						PublishDate = dbRecipe.PublishDate,
						Url = dbRecipe.Url,
						TeaserImageUrl = dbRecipe.TeaserImageUrl,
						IngredientCount = dbRecipe.IngredientCount,
						Measurement = (dbRecipe.Measurement != null) ? new MeasurementData() { Id = dbRecipe.Measurement.Id, Name = dbRecipe.Measurement.Name } : new MeasurementData(),
						PreparationTime = dbRecipe.PreparationTime,
						WaitingTime = dbRecipe.WaitingTime
					};
				}
			}
			catch (Exception e)
			{
			}
			return recipe;
		}
		public int AddRecipe(IRecipeData recipe)
		{
			Measurement measurement = null;
			if(recipe.Measurement != null && recipe.Measurement.Id != 0)
			{
				measurement = ctx.Measurements.FirstOrDefault(x => x.Id == recipe.Measurement.Id);
			}
			
			Recipe dbRecipe = new Recipe()
			{
				Name = recipe.Name,
				Description = recipe.Description,
				Content = recipe.Content,
				IsPublished = recipe.IsPublished,
				IsOnlyForFriends = recipe.IsOnlyForFriends,
				PublishDate = recipe.PublishDate,
				Url = recipe.Url,
				IngredientCount = recipe.IngredientCount,
				Measurement = measurement,
				PreparationTime = recipe.PreparationTime,
				WaitingTime = recipe.WaitingTime
			};
			ctx.Recipes.Add(dbRecipe);
			ctx.SaveChanges();

			recipe.Id = dbRecipe.Id;
			return recipe.Id;
		}

		public void EditRecipe(IRecipeData recipe)
		{
			Recipe dbRecipe = ctx.Recipes.FirstOrDefault(x => x.Id == recipe.Id);
			if (dbRecipe == null)
			{
				return;
			}

			Measurement measurement = ctx.Measurements.FirstOrDefault(x => x.Id == recipe.Measurement.Id);

			dbRecipe.Name = recipe.Name;
			dbRecipe.Description = recipe.Description;
			dbRecipe.Content = recipe.Content;
			dbRecipe.IsPublished = recipe.IsPublished;
			dbRecipe.IsOnlyForFriends = recipe.IsOnlyForFriends;
			dbRecipe.PublishDate = recipe.PublishDate;
			dbRecipe.Url = recipe.Url;
			dbRecipe.IngredientCount = recipe.IngredientCount;
			dbRecipe.Measurement = measurement;
			dbRecipe.PreparationTime = recipe.PreparationTime;
			dbRecipe.WaitingTime = recipe.WaitingTime;
			ctx.SaveChanges();
		}

		public void DeleteRecipe(int id)
		{
			ctx.Recipes.Remove(ctx.Recipes.FirstOrDefault(x => x.Id == id));
			ctx.SaveChanges();
		}

		public void EditTeaserImage(int recipeId, string teaserImageUrl)
		{
			Recipe dbRecipe = ctx.Recipes.FirstOrDefault(x => x.Id == recipeId);
			if (dbRecipe == null)
			{
				return;
			}

			dbRecipe.TeaserImageUrl = teaserImageUrl;

			ctx.SaveChanges();
		}
	}
}