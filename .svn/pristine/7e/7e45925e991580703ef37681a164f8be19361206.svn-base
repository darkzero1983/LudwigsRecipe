import { Component, Input, Output, EventEmitter } from '@angular/core';
import { SimpleSelectBoxInterface } from 'app/models'

@Component({
	selector: 'formularselectornewtextbox-directive',
	template: `
	<select class="form-control" [(ngModel)]="selectId" (change)="changeSelect(this.selectId);">
		<option value="0">-- Neu --</option>
		<option *ngFor="let item of selectItems" [(value)]="item.id">{{item.name}}</option>
	</select>
	<input type="text" class="form-control input-md" placeholder="{{placeholder}}" [(ngModel)]="name" [hidden]="selectId != 0" (change)="changeTextbox(this.name);">
`
})

export class FormularSelectOrNewTextboxDirective {
	private name: string;
	@Input() selectId: number;
	@Input() selectItems: SimpleSelectBoxInterface[];
	@Input() placeholder: string;
	
	@Output() changeSelectId: EventEmitter<number> = new EventEmitter<number>();
	@Output() changeSelectName: EventEmitter<string> = new EventEmitter<string>();

	changeSelect(id: number)
	{
		this.changeSelectId.emit(id);
		var result: SimpleSelectBoxInterface = this.selectItems.find(x => x.id == id);
		if (result != undefined) {
			this.changeSelectName.emit(result.name);
			name = result.name;
		}
	}

	changeTextbox(newName: string) {
		this.changeSelectName.emit(newName);
		var result: SimpleSelectBoxInterface = this.selectItems.find(x => x.name.toLowerCase() == newName.toLocaleLowerCase());
		if (result != undefined)
		{
			this.changeSelectId.emit(result.id);
		}
	}
}