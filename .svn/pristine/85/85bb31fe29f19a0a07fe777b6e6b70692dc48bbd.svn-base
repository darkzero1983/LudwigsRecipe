(function(){ var curSystem = typeof System != 'undefined' ? System : undefined;
(function(global) {
  'use strict';
  if (global.$traceurRuntime) {
    return;
  }
  function setupGlobals(global) {
    global.Reflect = global.Reflect || {};
    global.Reflect.global = global.Reflect.global || global;
  }
  setupGlobals(global);
  var typeOf = function(x) {
    return typeof x;
  };
  global.$traceurRuntime = {
    options: {},
    setupGlobals: setupGlobals,
    typeof: typeOf
  };
})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function() {
  function buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
    var out = [];
    if (opt_scheme) {
      out.push(opt_scheme, ':');
    }
    if (opt_domain) {
      out.push('//');
      if (opt_userInfo) {
        out.push(opt_userInfo, '@');
      }
      out.push(opt_domain);
      if (opt_port) {
        out.push(':', opt_port);
      }
    }
    if (opt_path) {
      out.push(opt_path);
    }
    if (opt_queryData) {
      out.push('?', opt_queryData);
    }
    if (opt_fragment) {
      out.push('#', opt_fragment);
    }
    return out.join('');
  }
  var splitRe = new RegExp('^' + '(?:' + '([^:/?#.]+)' + ':)?' + '(?://' + '(?:([^/?#]*)@)?' + '([\\w\\d\\-\\u0100-\\uffff.%]*)' + '(?::([0-9]+))?' + ')?' + '([^?#]+)?' + '(?:\\?([^#]*))?' + '(?:#(.*))?' + '$');
  var ComponentIndex = {
    SCHEME: 1,
    USER_INFO: 2,
    DOMAIN: 3,
    PORT: 4,
    PATH: 5,
    QUERY_DATA: 6,
    FRAGMENT: 7
  };
  function split(uri) {
    return (uri.match(splitRe));
  }
  function removeDotSegments(path) {
    if (path === '/')
      return '/';
    var leadingSlash = path[0] === '/' ? '/' : '';
    var trailingSlash = path.slice(-1) === '/' ? '/' : '';
    var segments = path.split('/');
    var out = [];
    var up = 0;
    for (var pos = 0; pos < segments.length; pos++) {
      var segment = segments[pos];
      switch (segment) {
        case '':
        case '.':
          break;
        case '..':
          if (out.length)
            out.pop();
          else
            up++;
          break;
        default:
          out.push(segment);
      }
    }
    if (!leadingSlash) {
      while (up-- > 0) {
        out.unshift('..');
      }
      if (out.length === 0)
        out.push('.');
    }
    return leadingSlash + out.join('/') + trailingSlash;
  }
  function joinAndCanonicalizePath(parts) {
    var path = parts[ComponentIndex.PATH] || '';
    path = removeDotSegments(path);
    parts[ComponentIndex.PATH] = path;
    return buildFromEncodedParts(parts[ComponentIndex.SCHEME], parts[ComponentIndex.USER_INFO], parts[ComponentIndex.DOMAIN], parts[ComponentIndex.PORT], parts[ComponentIndex.PATH], parts[ComponentIndex.QUERY_DATA], parts[ComponentIndex.FRAGMENT]);
  }
  function canonicalizeUrl(url) {
    var parts = split(url);
    return joinAndCanonicalizePath(parts);
  }
  function resolveUrl(base, url) {
    var parts = split(url);
    var baseParts = split(base);
    if (parts[ComponentIndex.SCHEME]) {
      return joinAndCanonicalizePath(parts);
    } else {
      parts[ComponentIndex.SCHEME] = baseParts[ComponentIndex.SCHEME];
    }
    for (var i = ComponentIndex.SCHEME; i <= ComponentIndex.PORT; i++) {
      if (!parts[i]) {
        parts[i] = baseParts[i];
      }
    }
    if (parts[ComponentIndex.PATH][0] == '/') {
      return joinAndCanonicalizePath(parts);
    }
    var path = baseParts[ComponentIndex.PATH];
    var index = path.lastIndexOf('/');
    path = path.slice(0, index + 1) + parts[ComponentIndex.PATH];
    parts[ComponentIndex.PATH] = path;
    return joinAndCanonicalizePath(parts);
  }
  function isAbsolute(name) {
    if (!name)
      return false;
    if (name[0] === '/')
      return true;
    var parts = split(name);
    if (parts[ComponentIndex.SCHEME])
      return true;
    return false;
  }
  $traceurRuntime.canonicalizeUrl = canonicalizeUrl;
  $traceurRuntime.isAbsolute = isAbsolute;
  $traceurRuntime.removeDotSegments = removeDotSegments;
  $traceurRuntime.resolveUrl = resolveUrl;
})();
(function(global) {
  'use strict';
  var $__3 = $traceurRuntime,
      canonicalizeUrl = $__3.canonicalizeUrl,
      resolveUrl = $__3.resolveUrl,
      isAbsolute = $__3.isAbsolute;
  var moduleInstantiators = Object.create(null);
  var baseURL;
  if (global.location && global.location.href)
    baseURL = resolveUrl(global.location.href, './');
  else
    baseURL = '';
  function UncoatedModuleEntry(url, uncoatedModule) {
    this.url = url;
    this.value_ = uncoatedModule;
  }
  function ModuleEvaluationError(erroneousModuleName, cause) {
    this.message = this.constructor.name + ': ' + this.stripCause(cause) + ' in ' + erroneousModuleName;
    if (!(cause instanceof ModuleEvaluationError) && cause.stack)
      this.stack = this.stripStack(cause.stack);
    else
      this.stack = '';
  }
  ModuleEvaluationError.prototype = Object.create(Error.prototype);
  ModuleEvaluationError.prototype.constructor = ModuleEvaluationError;
  ModuleEvaluationError.prototype.stripError = function(message) {
    return message.replace(/.*Error:/, this.constructor.name + ':');
  };
  ModuleEvaluationError.prototype.stripCause = function(cause) {
    if (!cause)
      return '';
    if (!cause.message)
      return cause + '';
    return this.stripError(cause.message);
  };
  ModuleEvaluationError.prototype.loadedBy = function(moduleName) {
    this.stack += '\n loaded by ' + moduleName;
  };
  ModuleEvaluationError.prototype.stripStack = function(causeStack) {
    var stack = [];
    causeStack.split('\n').some(function(frame) {
      if (/UncoatedModuleInstantiator/.test(frame))
        return true;
      stack.push(frame);
    });
    stack[0] = this.stripError(stack[0]);
    return stack.join('\n');
  };
  function beforeLines(lines, number) {
    var result = [];
    var first = number - 3;
    if (first < 0)
      first = 0;
    for (var i = first; i < number; i++) {
      result.push(lines[i]);
    }
    return result;
  }
  function afterLines(lines, number) {
    var last = number + 1;
    if (last > lines.length - 1)
      last = lines.length - 1;
    var result = [];
    for (var i = number; i <= last; i++) {
      result.push(lines[i]);
    }
    return result;
  }
  function columnSpacing(columns) {
    var result = '';
    for (var i = 0; i < columns - 1; i++) {
      result += '-';
    }
    return result;
  }
  function UncoatedModuleInstantiator(url, func) {
    UncoatedModuleEntry.call(this, url, null);
    this.func = func;
  }
  UncoatedModuleInstantiator.prototype = Object.create(UncoatedModuleEntry.prototype);
  UncoatedModuleInstantiator.prototype.getUncoatedModule = function() {
    var $__2 = this;
    if (this.value_)
      return this.value_;
    try {
      var relativeRequire;
      if (typeof $traceurRuntime !== undefined && $traceurRuntime.require) {
        relativeRequire = $traceurRuntime.require.bind(null, this.url);
      }
      return this.value_ = this.func.call(global, relativeRequire);
    } catch (ex) {
      if (ex instanceof ModuleEvaluationError) {
        ex.loadedBy(this.url);
        throw ex;
      }
      if (ex.stack) {
        var lines = this.func.toString().split('\n');
        var evaled = [];
        ex.stack.split('\n').some(function(frame, index) {
          if (frame.indexOf('UncoatedModuleInstantiator.getUncoatedModule') > 0)
            return true;
          var m = /(at\s[^\s]*\s).*>:(\d*):(\d*)\)/.exec(frame);
          if (m) {
            var line = parseInt(m[2], 10);
            evaled = evaled.concat(beforeLines(lines, line));
            if (index === 1) {
              evaled.push(columnSpacing(m[3]) + '^ ' + $__2.url);
            } else {
              evaled.push(columnSpacing(m[3]) + '^');
            }
            evaled = evaled.concat(afterLines(lines, line));
            evaled.push('= = = = = = = = =');
          } else {
            evaled.push(frame);
          }
        });
        ex.stack = evaled.join('\n');
      }
      throw new ModuleEvaluationError(this.url, ex);
    }
  };
  function getUncoatedModuleInstantiator(name) {
    if (!name)
      return;
    var url = ModuleStore.normalize(name);
    return moduleInstantiators[url];
  }
  ;
  var moduleInstances = Object.create(null);
  var liveModuleSentinel = {};
  function Module(uncoatedModule) {
    var isLive = arguments[1];
    var coatedModule = Object.create(null);
    Object.getOwnPropertyNames(uncoatedModule).forEach(function(name) {
      var getter,
          value;
      if (isLive === liveModuleSentinel) {
        var descr = Object.getOwnPropertyDescriptor(uncoatedModule, name);
        if (descr.get)
          getter = descr.get;
      }
      if (!getter) {
        value = uncoatedModule[name];
        getter = function() {
          return value;
        };
      }
      Object.defineProperty(coatedModule, name, {
        get: getter,
        enumerable: true
      });
    });
    Object.preventExtensions(coatedModule);
    return coatedModule;
  }
  var ModuleStore = {
    normalize: function(name, refererName, refererAddress) {
      if (typeof name !== 'string')
        throw new TypeError('module name must be a string, not ' + typeof name);
      if (isAbsolute(name))
        return canonicalizeUrl(name);
      if (/[^\.]\/\.\.\//.test(name)) {
        throw new Error('module name embeds /../: ' + name);
      }
      if (name[0] === '.' && refererName)
        return resolveUrl(refererName, name);
      return canonicalizeUrl(name);
    },
    get: function(normalizedName) {
      var m = getUncoatedModuleInstantiator(normalizedName);
      if (!m)
        return undefined;
      var moduleInstance = moduleInstances[m.url];
      if (moduleInstance)
        return moduleInstance;
      moduleInstance = Module(m.getUncoatedModule(), liveModuleSentinel);
      return moduleInstances[m.url] = moduleInstance;
    },
    set: function(normalizedName, module) {
      normalizedName = String(normalizedName);
      moduleInstantiators[normalizedName] = new UncoatedModuleInstantiator(normalizedName, function() {
        return module;
      });
      moduleInstances[normalizedName] = module;
    },
    get baseURL() {
      return baseURL;
    },
    set baseURL(v) {
      baseURL = String(v);
    },
    registerModule: function(name, deps, func) {
      var normalizedName = ModuleStore.normalize(name);
      if (moduleInstantiators[normalizedName])
        throw new Error('duplicate module named ' + normalizedName);
      moduleInstantiators[normalizedName] = new UncoatedModuleInstantiator(normalizedName, func);
    },
    bundleStore: Object.create(null),
    register: function(name, deps, func) {
      if (!deps || !deps.length && !func.length) {
        this.registerModule(name, deps, func);
      } else {
        this.bundleStore[name] = {
          deps: deps,
          execute: function() {
            var $__2 = arguments;
            var depMap = {};
            deps.forEach(function(dep, index) {
              return depMap[dep] = $__2[index];
            });
            var registryEntry = func.call(this, depMap);
            registryEntry.execute.call(this);
            return registryEntry.exports;
          }
        };
      }
    },
    getAnonymousModule: function(func) {
      return new Module(func(), liveModuleSentinel);
    }
  };
  var moduleStoreModule = new Module({ModuleStore: ModuleStore});
  ModuleStore.set('@traceur/src/runtime/ModuleStore.js', moduleStoreModule);
  var setupGlobals = $traceurRuntime.setupGlobals;
  $traceurRuntime.setupGlobals = function(global) {
    setupGlobals(global);
  };
  $traceurRuntime.ModuleStore = ModuleStore;
  $traceurRuntime.registerModule = ModuleStore.registerModule.bind(ModuleStore);
  $traceurRuntime.getModule = ModuleStore.get;
  $traceurRuntime.setModule = ModuleStore.set;
  $traceurRuntime.normalizeModuleName = ModuleStore.normalize;
})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/new-unique-string.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/new-unique-string.js";
  var random = Math.random;
  var counter = Date.now() % 1e9;
  function newUniqueString() {
    return '__$' + (random() * 1e9 >>> 1) + '$' + ++counter + '$__';
  }
  return {get default() {
      return newUniqueString;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/has-native-symbols.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/has-native-symbols.js";
  var v = !!Object.getOwnPropertySymbols && typeof Symbol === 'function';
  function hasNativeSymbol() {
    return v;
  }
  return {get default() {
      return hasNativeSymbol;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/symbols.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/symbols.js";
  var newUniqueString = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../new-unique-string.js", "traceur-runtime@0.0.111/src/runtime/modules/symbols.js")).default;
  var hasNativeSymbol = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../has-native-symbols.js", "traceur-runtime@0.0.111/src/runtime/modules/symbols.js")).default;
  var $create = Object.create;
  var $defineProperty = Object.defineProperty;
  var $freeze = Object.freeze;
  var $getOwnPropertyNames = Object.getOwnPropertyNames;
  var $keys = Object.keys;
  var $TypeError = TypeError;
  function nonEnum(value) {
    return {
      configurable: true,
      enumerable: false,
      value: value,
      writable: true
    };
  }
  var symbolInternalProperty = newUniqueString();
  var symbolDescriptionProperty = newUniqueString();
  var symbolDataProperty = newUniqueString();
  var symbolValues = $create(null);
  var SymbolImpl = function Symbol(description) {
    var value = new SymbolValue(description);
    if (!(this instanceof SymbolImpl))
      return value;
    throw new $TypeError('Symbol cannot be new\'ed');
  };
  $defineProperty(SymbolImpl.prototype, 'constructor', nonEnum(SymbolImpl));
  $defineProperty(SymbolImpl.prototype, 'toString', nonEnum(function() {
    var symbolValue = this[symbolDataProperty];
    return symbolValue[symbolInternalProperty];
  }));
  $defineProperty(SymbolImpl.prototype, 'valueOf', nonEnum(function() {
    var symbolValue = this[symbolDataProperty];
    if (!symbolValue)
      throw $TypeError('Conversion from symbol to string');
    return symbolValue[symbolInternalProperty];
  }));
  function SymbolValue(description) {
    var key = newUniqueString();
    $defineProperty(this, symbolDataProperty, {value: this});
    $defineProperty(this, symbolInternalProperty, {value: key});
    $defineProperty(this, symbolDescriptionProperty, {value: description});
    $freeze(this);
    symbolValues[key] = this;
  }
  $defineProperty(SymbolValue.prototype, 'constructor', nonEnum(SymbolImpl));
  $defineProperty(SymbolValue.prototype, 'toString', {
    value: SymbolImpl.prototype.toString,
    enumerable: false
  });
  $defineProperty(SymbolValue.prototype, 'valueOf', {
    value: SymbolImpl.prototype.valueOf,
    enumerable: false
  });
  $freeze(SymbolValue.prototype);
  function isSymbolString(s) {
    return symbolValues[s];
  }
  function removeSymbolKeys(array) {
    var rv = [];
    for (var i = 0; i < array.length; i++) {
      if (!isSymbolString(array[i])) {
        rv.push(array[i]);
      }
    }
    return rv;
  }
  function getOwnPropertyNames(object) {
    return removeSymbolKeys($getOwnPropertyNames(object));
  }
  function keys(object) {
    return removeSymbolKeys($keys(object));
  }
  function getOwnPropertySymbols(object) {
    var rv = [];
    var names = $getOwnPropertyNames(object);
    for (var i = 0; i < names.length; i++) {
      var symbol = symbolValues[names[i]];
      if (symbol) {
        rv.push(symbol);
      }
    }
    return rv;
  }
  function polyfillSymbol(global) {
    var Object = global.Object;
    if (!hasNativeSymbol()) {
      global.Symbol = SymbolImpl;
      Object.getOwnPropertyNames = getOwnPropertyNames;
      Object.keys = keys;
      $defineProperty(Object, 'getOwnPropertySymbols', nonEnum(getOwnPropertySymbols));
    }
    if (!global.Symbol.iterator) {
      global.Symbol.iterator = global.Symbol('Symbol.iterator');
    }
    if (!global.Symbol.observer) {
      global.Symbol.observer = global.Symbol('Symbol.observer');
    }
  }
  var g = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : (void 0);
  polyfillSymbol(g);
  var typeOf = hasNativeSymbol() ? function(x) {
    return typeof x;
  } : function(x) {
    return x instanceof SymbolValue ? 'symbol' : typeof x;
  };
  return {get typeof() {
      return typeOf;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/typeof.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/typeof.js";
  var $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_symbols_46_js__ = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./symbols.js", "traceur-runtime@0.0.111/src/runtime/modules/typeof.js"));
  return {get default() {
      return $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_symbols_46_js__.typeof;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/symbols.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/symbols.js";
  var t = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/typeof.js", "traceur-runtime@0.0.111/src/runtime/symbols.js")).default;
  $traceurRuntime.typeof = t;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/createClass.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/createClass.js";
  var $Object = Object;
  var $TypeError = TypeError;
  var $__1 = Object,
      create = $__1.create,
      defineProperties = $__1.defineProperties,
      defineProperty = $__1.defineProperty,
      getOwnPropertyDescriptor = $__1.getOwnPropertyDescriptor,
      getOwnPropertyNames = $__1.getOwnPropertyNames,
      getOwnPropertySymbols = $__1.getOwnPropertySymbols;
  function forEachPropertyKey(object, f) {
    getOwnPropertyNames(object).forEach(f);
    if (getOwnPropertySymbols) {
      getOwnPropertySymbols(object).forEach(f);
    }
  }
  function getDescriptors(object) {
    var descriptors = {};
    forEachPropertyKey(object, function(key) {
      descriptors[key] = getOwnPropertyDescriptor(object, key);
      descriptors[key].enumerable = false;
    });
    return descriptors;
  }
  var nonEnum = {enumerable: false};
  function makePropertiesNonEnumerable(object) {
    forEachPropertyKey(object, function(key) {
      defineProperty(object, key, nonEnum);
    });
  }
  function createClass(ctor, object, staticObject, superClass) {
    defineProperty(object, 'constructor', {
      value: ctor,
      configurable: true,
      enumerable: false,
      writable: true
    });
    if (arguments.length > 3) {
      if (typeof superClass === 'function')
        ctor.__proto__ = superClass;
      ctor.prototype = create(getProtoParent(superClass), getDescriptors(object));
    } else {
      makePropertiesNonEnumerable(object);
      ctor.prototype = object;
    }
    defineProperty(ctor, 'prototype', {
      configurable: false,
      writable: false
    });
    return defineProperties(ctor, getDescriptors(staticObject));
  }
  function getProtoParent(superClass) {
    if (typeof superClass === 'function') {
      var prototype = superClass.prototype;
      if ($Object(prototype) === prototype || prototype === null)
        return superClass.prototype;
      throw new $TypeError('super prototype must be an Object or null');
    }
    if (superClass === null)
      return null;
    throw new $TypeError(("Super expression must either be null or a function, not " + typeof superClass + "."));
  }
  return {get default() {
      return createClass;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/superConstructor.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/superConstructor.js";
  function superConstructor(ctor) {
    return ctor.__proto__;
  }
  return {get default() {
      return superConstructor;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/superDescriptor.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/superDescriptor.js";
  var $__0 = Object,
      getOwnPropertyDescriptor = $__0.getOwnPropertyDescriptor,
      getPrototypeOf = $__0.getPrototypeOf;
  function superDescriptor(homeObject, name) {
    var proto = getPrototypeOf(homeObject);
    do {
      var result = getOwnPropertyDescriptor(proto, name);
      if (result)
        return result;
      proto = getPrototypeOf(proto);
    } while (proto);
    return undefined;
  }
  return {get default() {
      return superDescriptor;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/superGet.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/superGet.js";
  var superDescriptor = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./superDescriptor.js", "traceur-runtime@0.0.111/src/runtime/modules/superGet.js")).default;
  function superGet(self, homeObject, name) {
    var descriptor = superDescriptor(homeObject, name);
    if (descriptor) {
      var value = descriptor.value;
      if (value)
        return value;
      if (!descriptor.get)
        return value;
      return descriptor.get.call(self);
    }
    return undefined;
  }
  return {get default() {
      return superGet;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/superSet.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/superSet.js";
  var superDescriptor = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./superDescriptor.js", "traceur-runtime@0.0.111/src/runtime/modules/superSet.js")).default;
  var $TypeError = TypeError;
  function superSet(self, homeObject, name, value) {
    var descriptor = superDescriptor(homeObject, name);
    if (descriptor && descriptor.set) {
      descriptor.set.call(self, value);
      return value;
    }
    throw $TypeError(("super has no setter '" + name + "'."));
  }
  return {get default() {
      return superSet;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/classes.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/classes.js";
  var createClass = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/createClass.js", "traceur-runtime@0.0.111/src/runtime/classes.js")).default;
  var superConstructor = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/superConstructor.js", "traceur-runtime@0.0.111/src/runtime/classes.js")).default;
  var superGet = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/superGet.js", "traceur-runtime@0.0.111/src/runtime/classes.js")).default;
  var superSet = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/superSet.js", "traceur-runtime@0.0.111/src/runtime/classes.js")).default;
  $traceurRuntime.createClass = createClass;
  $traceurRuntime.superConstructor = superConstructor;
  $traceurRuntime.superGet = superGet;
  $traceurRuntime.superSet = superSet;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/exportStar.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/exportStar.js";
  var $__1 = Object,
      defineProperty = $__1.defineProperty,
      getOwnPropertyNames = $__1.getOwnPropertyNames;
  function exportStar(object) {
    var $__2 = arguments,
        $__3 = function(i) {
          var mod = $__2[i];
          var names = getOwnPropertyNames(mod);
          var $__5 = function(j) {
            var name = names[j];
            if (name === '__esModule' || name === 'default') {
              return 0;
            }
            defineProperty(object, name, {
              get: function() {
                return mod[name];
              },
              enumerable: true
            });
          },
              $__6;
          $__4: for (var j = 0; j < names.length; j++) {
            $__6 = $__5(j);
            switch ($__6) {
              case 0:
                continue $__4;
            }
          }
        };
    for (var i = 1; i < arguments.length; i++) {
      $__3(i);
    }
    return object;
  }
  return {get default() {
      return exportStar;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/exportStar.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/exportStar.js";
  var exportStar = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/exportStar.js", "traceur-runtime@0.0.111/src/runtime/exportStar.js")).default;
  $traceurRuntime.exportStar = exportStar;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/private-symbol.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/private-symbol.js";
  var newUniqueString = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./new-unique-string.js", "traceur-runtime@0.0.111/src/runtime/private-symbol.js")).default;
  var $Symbol = typeof Symbol === 'function' ? Symbol : undefined;
  var $getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var $create = Object.create;
  var privateNames = $create(null);
  function isPrivateSymbol(s) {
    return privateNames[s];
  }
  ;
  function createPrivateSymbol() {
    var s = ($Symbol || newUniqueString)();
    privateNames[s] = true;
    return s;
  }
  ;
  function hasPrivate(obj, sym) {
    return hasOwnProperty.call(obj, sym);
  }
  ;
  function deletePrivate(obj, sym) {
    if (!hasPrivate(obj, sym)) {
      return false;
    }
    delete obj[sym];
    return true;
  }
  ;
  function setPrivate(obj, sym, val) {
    obj[sym] = val;
  }
  ;
  function getPrivate(obj, sym) {
    var val = obj[sym];
    if (val === undefined)
      return undefined;
    return hasOwnProperty.call(obj, sym) ? val : undefined;
  }
  ;
  function init() {
    if ($getOwnPropertySymbols) {
      Object.getOwnPropertySymbols = function getOwnPropertySymbols(object) {
        var rv = [];
        var symbols = $getOwnPropertySymbols(object);
        for (var i = 0; i < symbols.length; i++) {
          var symbol = symbols[i];
          if (!isPrivateSymbol(symbol)) {
            rv.push(symbol);
          }
        }
        return rv;
      };
    }
  }
  return {
    get isPrivateSymbol() {
      return isPrivateSymbol;
    },
    get createPrivateSymbol() {
      return createPrivateSymbol;
    },
    get hasPrivate() {
      return hasPrivate;
    },
    get deletePrivate() {
      return deletePrivate;
    },
    get setPrivate() {
      return setPrivate;
    },
    get getPrivate() {
      return getPrivate;
    },
    get init() {
      return init;
    }
  };
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/private-weak-map.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/private-weak-map.js";
  var $WeakMap = typeof WeakMap === 'function' ? WeakMap : undefined;
  function isPrivateSymbol(s) {
    return false;
  }
  function createPrivateSymbol() {
    return new $WeakMap();
  }
  function hasPrivate(obj, sym) {
    return sym.has(obj);
  }
  function deletePrivate(obj, sym) {
    return sym.delete(obj);
  }
  function setPrivate(obj, sym, val) {
    sym.set(obj, val);
  }
  function getPrivate(obj, sym) {
    return sym.get(obj);
  }
  function init() {}
  return {
    get isPrivateSymbol() {
      return isPrivateSymbol;
    },
    get createPrivateSymbol() {
      return createPrivateSymbol;
    },
    get hasPrivate() {
      return hasPrivate;
    },
    get deletePrivate() {
      return deletePrivate;
    },
    get setPrivate() {
      return setPrivate;
    },
    get getPrivate() {
      return getPrivate;
    },
    get init() {
      return init;
    }
  };
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/private.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/private.js";
  var sym = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./private-symbol.js", "traceur-runtime@0.0.111/src/runtime/private.js"));
  var weak = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./private-weak-map.js", "traceur-runtime@0.0.111/src/runtime/private.js"));
  var hasWeakMap = typeof WeakMap === 'function';
  var m = hasWeakMap ? weak : sym;
  var isPrivateSymbol = m.isPrivateSymbol;
  var createPrivateSymbol = m.createPrivateSymbol;
  var hasPrivate = m.hasPrivate;
  var deletePrivate = m.deletePrivate;
  var setPrivate = m.setPrivate;
  var getPrivate = m.getPrivate;
  m.init();
  return {
    get isPrivateSymbol() {
      return isPrivateSymbol;
    },
    get createPrivateSymbol() {
      return createPrivateSymbol;
    },
    get hasPrivate() {
      return hasPrivate;
    },
    get deletePrivate() {
      return deletePrivate;
    },
    get setPrivate() {
      return setPrivate;
    },
    get getPrivate() {
      return getPrivate;
    }
  };
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/properTailCalls.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/properTailCalls.js";
  var $__0 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../private.js", "traceur-runtime@0.0.111/src/runtime/modules/properTailCalls.js")),
      getPrivate = $__0.getPrivate,
      setPrivate = $__0.setPrivate,
      createPrivateSymbol = $__0.createPrivateSymbol;
  var $apply = Function.prototype.call.bind(Function.prototype.apply);
  var CONTINUATION_TYPE = Object.create(null);
  var isTailRecursiveName = null;
  function createContinuation(operand, thisArg, argsArray) {
    return [CONTINUATION_TYPE, operand, thisArg, argsArray];
  }
  function isContinuation(object) {
    return object && object[0] === CONTINUATION_TYPE;
  }
  function $bind(operand, thisArg, args) {
    var argArray = [thisArg];
    for (var i = 0; i < args.length; i++) {
      argArray[i + 1] = args[i];
    }
    var func = $apply(Function.prototype.bind, operand, argArray);
    return func;
  }
  function $construct(func, argArray) {
    var object = new ($bind(func, null, argArray));
    return object;
  }
  function isTailRecursive(func) {
    return !!getPrivate(func, isTailRecursiveName);
  }
  function tailCall(func, thisArg, argArray) {
    var continuation = argArray[0];
    if (isContinuation(continuation)) {
      continuation = $apply(func, thisArg, continuation[3]);
      return continuation;
    }
    continuation = createContinuation(func, thisArg, argArray);
    while (true) {
      if (isTailRecursive(func)) {
        continuation = $apply(func, continuation[2], [continuation]);
      } else {
        continuation = $apply(func, continuation[2], continuation[3]);
      }
      if (!isContinuation(continuation)) {
        return continuation;
      }
      func = continuation[1];
    }
  }
  function construct() {
    var object;
    if (isTailRecursive(this)) {
      object = $construct(this, [createContinuation(null, null, arguments)]);
    } else {
      object = $construct(this, arguments);
    }
    return object;
  }
  function setupProperTailCalls() {
    isTailRecursiveName = createPrivateSymbol();
    Function.prototype.call = initTailRecursiveFunction(function call(thisArg) {
      var result = tailCall(function(thisArg) {
        var argArray = [];
        for (var i = 1; i < arguments.length; ++i) {
          argArray[i - 1] = arguments[i];
        }
        var continuation = createContinuation(this, thisArg, argArray);
        return continuation;
      }, this, arguments);
      return result;
    });
    Function.prototype.apply = initTailRecursiveFunction(function apply(thisArg, argArray) {
      var result = tailCall(function(thisArg, argArray) {
        var continuation = createContinuation(this, thisArg, argArray);
        return continuation;
      }, this, arguments);
      return result;
    });
  }
  function initTailRecursiveFunction(func) {
    if (isTailRecursiveName === null) {
      setupProperTailCalls();
    }
    setPrivate(func, isTailRecursiveName, true);
    return func;
  }
  return {
    get createContinuation() {
      return createContinuation;
    },
    get tailCall() {
      return tailCall;
    },
    get construct() {
      return construct;
    },
    get initTailRecursiveFunction() {
      return initTailRecursiveFunction;
    }
  };
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/initTailRecursiveFunction.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/initTailRecursiveFunction.js";
  var $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_properTailCalls_46_js__ = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./properTailCalls.js", "traceur-runtime@0.0.111/src/runtime/modules/initTailRecursiveFunction.js"));
  return {get default() {
      return $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_properTailCalls_46_js__.initTailRecursiveFunction;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/call.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/call.js";
  var $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_properTailCalls_46_js__ = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./properTailCalls.js", "traceur-runtime@0.0.111/src/runtime/modules/call.js"));
  return {get default() {
      return $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_properTailCalls_46_js__.tailCall;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/continuation.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/continuation.js";
  var $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_properTailCalls_46_js__ = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./properTailCalls.js", "traceur-runtime@0.0.111/src/runtime/modules/continuation.js"));
  return {get default() {
      return $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_properTailCalls_46_js__.createContinuation;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/construct.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/construct.js";
  var $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_properTailCalls_46_js__ = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./properTailCalls.js", "traceur-runtime@0.0.111/src/runtime/modules/construct.js"));
  return {get default() {
      return $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_properTailCalls_46_js__.construct;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/properTailCalls.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/properTailCalls.js";
  var initTailRecursiveFunction = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/initTailRecursiveFunction.js", "traceur-runtime@0.0.111/src/runtime/properTailCalls.js")).default;
  var call = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/call.js", "traceur-runtime@0.0.111/src/runtime/properTailCalls.js")).default;
  var continuation = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/continuation.js", "traceur-runtime@0.0.111/src/runtime/properTailCalls.js")).default;
  var construct = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/construct.js", "traceur-runtime@0.0.111/src/runtime/properTailCalls.js")).default;
  $traceurRuntime.initTailRecursiveFunction = initTailRecursiveFunction;
  $traceurRuntime.call = call;
  $traceurRuntime.continuation = continuation;
  $traceurRuntime.construct = construct;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/relativeRequire.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/relativeRequire.js";
  var path;
  function relativeRequire(callerPath, requiredPath) {
    path = path || typeof require !== 'undefined' && require('path');
    function isDirectory(path) {
      return path.slice(-1) === '/';
    }
    function isAbsolute(path) {
      return path[0] === '/';
    }
    function isRelative(path) {
      return path[0] === '.';
    }
    if (isDirectory(requiredPath) || isAbsolute(requiredPath))
      return;
    return isRelative(requiredPath) ? require(path.resolve(path.dirname(callerPath), requiredPath)) : require(requiredPath);
  }
  $traceurRuntime.require = relativeRequire;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/checkObjectCoercible.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/checkObjectCoercible.js";
  var $TypeError = TypeError;
  function checkObjectCoercible(v) {
    if (v === null || v === undefined) {
      throw new $TypeError('Value cannot be converted to an Object');
    }
    return v;
  }
  return {get default() {
      return checkObjectCoercible;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/spread.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/spread.js";
  var checkObjectCoercible = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../checkObjectCoercible.js", "traceur-runtime@0.0.111/src/runtime/modules/spread.js")).default;
  function spread() {
    var rv = [],
        j = 0,
        iterResult;
    for (var i = 0; i < arguments.length; i++) {
      var valueToSpread = checkObjectCoercible(arguments[i]);
      if (typeof valueToSpread[Symbol.iterator] !== 'function') {
        throw new TypeError('Cannot spread non-iterable object.');
      }
      var iter = valueToSpread[Symbol.iterator]();
      while (!(iterResult = iter.next()).done) {
        rv[j++] = iterResult.value;
      }
    }
    return rv;
  }
  return {get default() {
      return spread;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/spread.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/spread.js";
  var spread = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/spread.js", "traceur-runtime@0.0.111/src/runtime/spread.js")).default;
  $traceurRuntime.spread = spread;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/iteratorToArray.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/iteratorToArray.js";
  function iteratorToArray(iter) {
    var rv = [];
    var i = 0;
    var tmp;
    while (!(tmp = iter.next()).done) {
      rv[i++] = tmp.value;
    }
    return rv;
  }
  return {get default() {
      return iteratorToArray;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/destructuring.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/destructuring.js";
  var iteratorToArray = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/iteratorToArray.js", "traceur-runtime@0.0.111/src/runtime/destructuring.js")).default;
  $traceurRuntime.iteratorToArray = iteratorToArray;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/async.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/async.js";
  var $__12 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../private.js", "traceur-runtime@0.0.111/src/runtime/modules/async.js")),
      createPrivateSymbol = $__12.createPrivateSymbol,
      getPrivate = $__12.getPrivate,
      setPrivate = $__12.setPrivate;
  var $__11 = Object,
      create = $__11.create,
      defineProperty = $__11.defineProperty;
  var observeName = createPrivateSymbol();
  function AsyncGeneratorFunction() {}
  function AsyncGeneratorFunctionPrototype() {}
  AsyncGeneratorFunction.prototype = AsyncGeneratorFunctionPrototype;
  AsyncGeneratorFunctionPrototype.constructor = AsyncGeneratorFunction;
  defineProperty(AsyncGeneratorFunctionPrototype, 'constructor', {enumerable: false});
  var AsyncGeneratorContext = function() {
    function AsyncGeneratorContext(observer) {
      var $__2 = this;
      this.decoratedObserver = createDecoratedGenerator(observer, function() {
        $__2.done = true;
      });
      this.done = false;
      this.inReturn = false;
    }
    return ($traceurRuntime.createClass)(AsyncGeneratorContext, {
      throw: function(error) {
        if (!this.inReturn) {
          throw error;
        }
      },
      yield: function(value) {
        if (this.done) {
          this.inReturn = true;
          throw undefined;
        }
        var result;
        try {
          result = this.decoratedObserver.next(value);
        } catch (e) {
          this.done = true;
          throw e;
        }
        if (result === undefined) {
          return;
        }
        if (result.done) {
          this.done = true;
          this.inReturn = true;
          throw undefined;
        }
        return result.value;
      },
      yieldFor: function(observable) {
        var ctx = this;
        return observeForEach(observable[Symbol.observer].bind(observable), function(value) {
          if (ctx.done) {
            this.return();
            return;
          }
          var result;
          try {
            result = ctx.decoratedObserver.next(value);
          } catch (e) {
            ctx.done = true;
            throw e;
          }
          if (result === undefined) {
            return;
          }
          if (result.done) {
            ctx.done = true;
          }
          return result;
        });
      }
    }, {});
  }();
  AsyncGeneratorFunctionPrototype.prototype[Symbol.observer] = function(observer) {
    var observe = getPrivate(this, observeName);
    var ctx = new AsyncGeneratorContext(observer);
    schedule(function() {
      return observe(ctx);
    }).then(function(value) {
      if (!ctx.done) {
        ctx.decoratedObserver.return(value);
      }
    }).catch(function(error) {
      if (!ctx.done) {
        ctx.decoratedObserver.throw(error);
      }
    });
    return ctx.decoratedObserver;
  };
  defineProperty(AsyncGeneratorFunctionPrototype.prototype, Symbol.observer, {enumerable: false});
  function initAsyncGeneratorFunction(functionObject) {
    functionObject.prototype = create(AsyncGeneratorFunctionPrototype.prototype);
    functionObject.__proto__ = AsyncGeneratorFunctionPrototype;
    return functionObject;
  }
  function createAsyncGeneratorInstance(observe, functionObject) {
    for (var args = [],
        $__10 = 2; $__10 < arguments.length; $__10++)
      args[$__10 - 2] = arguments[$__10];
    var object = create(functionObject.prototype);
    setPrivate(object, observeName, observe);
    return object;
  }
  function observeForEach(observe, next) {
    return new Promise(function(resolve, reject) {
      var generator = observe({
        next: function(value) {
          return next.call(generator, value);
        },
        throw: function(error) {
          reject(error);
        },
        return: function(value) {
          resolve(value);
        }
      });
    });
  }
  function schedule(asyncF) {
    return Promise.resolve().then(asyncF);
  }
  var generator = Symbol();
  var onDone = Symbol();
  var DecoratedGenerator = function() {
    function DecoratedGenerator(_generator, _onDone) {
      this[generator] = _generator;
      this[onDone] = _onDone;
    }
    return ($traceurRuntime.createClass)(DecoratedGenerator, {
      next: function(value) {
        var result = this[generator].next(value);
        if (result !== undefined && result.done) {
          this[onDone].call(this);
        }
        return result;
      },
      throw: function(error) {
        this[onDone].call(this);
        return this[generator].throw(error);
      },
      return: function(value) {
        this[onDone].call(this);
        return this[generator].return(value);
      }
    }, {});
  }();
  function createDecoratedGenerator(generator, onDone) {
    return new DecoratedGenerator(generator, onDone);
  }
  Array.prototype[Symbol.observer] = function(observer) {
    var done = false;
    var decoratedObserver = createDecoratedGenerator(observer, function() {
      return done = true;
    });
    var $__6 = true;
    var $__7 = false;
    var $__8 = undefined;
    try {
      for (var $__4 = void 0,
          $__3 = (this)[Symbol.iterator](); !($__6 = ($__4 = $__3.next()).done); $__6 = true) {
        var value = $__4.value;
        {
          decoratedObserver.next(value);
          if (done) {
            return;
          }
        }
      }
    } catch ($__9) {
      $__7 = true;
      $__8 = $__9;
    } finally {
      try {
        if (!$__6 && $__3.return != null) {
          $__3.return();
        }
      } finally {
        if ($__7) {
          throw $__8;
        }
      }
    }
    decoratedObserver.return();
    return decoratedObserver;
  };
  defineProperty(Array.prototype, Symbol.observer, {enumerable: false});
  return {
    get initAsyncGeneratorFunction() {
      return initAsyncGeneratorFunction;
    },
    get createAsyncGeneratorInstance() {
      return createAsyncGeneratorInstance;
    },
    get observeForEach() {
      return observeForEach;
    },
    get schedule() {
      return schedule;
    },
    get createDecoratedGenerator() {
      return createDecoratedGenerator;
    }
  };
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/initAsyncGeneratorFunction.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/initAsyncGeneratorFunction.js";
  var $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_async_46_js__ = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./async.js", "traceur-runtime@0.0.111/src/runtime/modules/initAsyncGeneratorFunction.js"));
  return {get default() {
      return $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_async_46_js__.initAsyncGeneratorFunction;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/createAsyncGeneratorInstance.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/createAsyncGeneratorInstance.js";
  var $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_async_46_js__ = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./async.js", "traceur-runtime@0.0.111/src/runtime/modules/createAsyncGeneratorInstance.js"));
  return {get default() {
      return $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_async_46_js__.createAsyncGeneratorInstance;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/observeForEach.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/observeForEach.js";
  var $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_async_46_js__ = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./async.js", "traceur-runtime@0.0.111/src/runtime/modules/observeForEach.js"));
  return {get default() {
      return $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_async_46_js__.observeForEach;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/schedule.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/schedule.js";
  var $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_async_46_js__ = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./async.js", "traceur-runtime@0.0.111/src/runtime/modules/schedule.js"));
  return {get default() {
      return $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_async_46_js__.schedule;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/createDecoratedGenerator.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/createDecoratedGenerator.js";
  var $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_async_46_js__ = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./async.js", "traceur-runtime@0.0.111/src/runtime/modules/createDecoratedGenerator.js"));
  return {get default() {
      return $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_async_46_js__.createDecoratedGenerator;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/async.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/async.js";
  var initAsyncGeneratorFunction = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/initAsyncGeneratorFunction.js", "traceur-runtime@0.0.111/src/runtime/async.js")).default;
  var createAsyncGeneratorInstance = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/createAsyncGeneratorInstance.js", "traceur-runtime@0.0.111/src/runtime/async.js")).default;
  var observeForEach = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/observeForEach.js", "traceur-runtime@0.0.111/src/runtime/async.js")).default;
  var schedule = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/schedule.js", "traceur-runtime@0.0.111/src/runtime/async.js")).default;
  var createDecoratedGenerator = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/createDecoratedGenerator.js", "traceur-runtime@0.0.111/src/runtime/async.js")).default;
  $traceurRuntime.initAsyncGeneratorFunction = initAsyncGeneratorFunction;
  $traceurRuntime.createAsyncGeneratorInstance = createAsyncGeneratorInstance;
  $traceurRuntime.observeForEach = observeForEach;
  $traceurRuntime.schedule = schedule;
  $traceurRuntime.createDecoratedGenerator = createDecoratedGenerator;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/generators.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/generators.js";
  var $__2 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../private.js", "traceur-runtime@0.0.111/src/runtime/modules/generators.js")),
      createPrivateSymbol = $__2.createPrivateSymbol,
      getPrivate = $__2.getPrivate,
      setPrivate = $__2.setPrivate;
  var $TypeError = TypeError;
  var $__1 = Object,
      create = $__1.create,
      defineProperties = $__1.defineProperties,
      defineProperty = $__1.defineProperty;
  function nonEnum(value) {
    return {
      configurable: true,
      enumerable: false,
      value: value,
      writable: true
    };
  }
  var ST_NEWBORN = 0;
  var ST_EXECUTING = 1;
  var ST_SUSPENDED = 2;
  var ST_CLOSED = 3;
  var END_STATE = -2;
  var RETHROW_STATE = -3;
  function getInternalError(state) {
    return new Error('Traceur compiler bug: invalid state in state machine: ' + state);
  }
  var RETURN_SENTINEL = {};
  function GeneratorContext() {
    this.state = 0;
    this.GState = ST_NEWBORN;
    this.storedException = undefined;
    this.finallyFallThrough = undefined;
    this.sent_ = undefined;
    this.returnValue = undefined;
    this.oldReturnValue = undefined;
    this.tryStack_ = [];
  }
  GeneratorContext.prototype = {
    pushTry: function(catchState, finallyState) {
      if (finallyState !== null) {
        var finallyFallThrough = null;
        for (var i = this.tryStack_.length - 1; i >= 0; i--) {
          if (this.tryStack_[i].catch !== undefined) {
            finallyFallThrough = this.tryStack_[i].catch;
            break;
          }
        }
        if (finallyFallThrough === null)
          finallyFallThrough = RETHROW_STATE;
        this.tryStack_.push({
          finally: finallyState,
          finallyFallThrough: finallyFallThrough
        });
      }
      if (catchState !== null) {
        this.tryStack_.push({catch: catchState});
      }
    },
    popTry: function() {
      this.tryStack_.pop();
    },
    maybeUncatchable: function() {
      if (this.storedException === RETURN_SENTINEL) {
        throw RETURN_SENTINEL;
      }
    },
    get sent() {
      this.maybeThrow();
      return this.sent_;
    },
    set sent(v) {
      this.sent_ = v;
    },
    get sentIgnoreThrow() {
      return this.sent_;
    },
    maybeThrow: function() {
      if (this.action === 'throw') {
        this.action = 'next';
        throw this.sent_;
      }
    },
    end: function() {
      switch (this.state) {
        case END_STATE:
          return this;
        case RETHROW_STATE:
          throw this.storedException;
        default:
          throw getInternalError(this.state);
      }
    },
    handleException: function(ex) {
      this.GState = ST_CLOSED;
      this.state = END_STATE;
      throw ex;
    },
    wrapYieldStar: function(iterator) {
      var ctx = this;
      return {
        next: function(v) {
          return iterator.next(v);
        },
        throw: function(e) {
          var result;
          if (e === RETURN_SENTINEL) {
            if (iterator.return) {
              result = iterator.return(ctx.returnValue);
              if (!result.done) {
                ctx.returnValue = ctx.oldReturnValue;
                return result;
              }
              ctx.returnValue = result.value;
            }
            throw e;
          }
          if (iterator.throw) {
            return iterator.throw(e);
          }
          iterator.return && iterator.return();
          throw $TypeError('Inner iterator does not have a throw method');
        }
      };
    }
  };
  function nextOrThrow(ctx, moveNext, action, x) {
    switch (ctx.GState) {
      case ST_EXECUTING:
        throw new Error(("\"" + action + "\" on executing generator"));
      case ST_CLOSED:
        if (action == 'next') {
          return {
            value: undefined,
            done: true
          };
        }
        if (x === RETURN_SENTINEL) {
          return {
            value: ctx.returnValue,
            done: true
          };
        }
        throw x;
      case ST_NEWBORN:
        if (action === 'throw') {
          ctx.GState = ST_CLOSED;
          if (x === RETURN_SENTINEL) {
            return {
              value: ctx.returnValue,
              done: true
            };
          }
          throw x;
        }
        if (x !== undefined)
          throw $TypeError('Sent value to newborn generator');
      case ST_SUSPENDED:
        ctx.GState = ST_EXECUTING;
        ctx.action = action;
        ctx.sent = x;
        var value;
        try {
          value = moveNext(ctx);
        } catch (ex) {
          if (ex === RETURN_SENTINEL) {
            value = ctx;
          } else {
            throw ex;
          }
        }
        var done = value === ctx;
        if (done)
          value = ctx.returnValue;
        ctx.GState = done ? ST_CLOSED : ST_SUSPENDED;
        return {
          value: value,
          done: done
        };
    }
  }
  var ctxName = createPrivateSymbol();
  var moveNextName = createPrivateSymbol();
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  defineProperty(GeneratorFunctionPrototype, 'constructor', nonEnum(GeneratorFunction));
  GeneratorFunctionPrototype.prototype = {
    constructor: GeneratorFunctionPrototype,
    next: function(v) {
      return nextOrThrow(getPrivate(this, ctxName), getPrivate(this, moveNextName), 'next', v);
    },
    throw: function(v) {
      return nextOrThrow(getPrivate(this, ctxName), getPrivate(this, moveNextName), 'throw', v);
    },
    return: function(v) {
      var ctx = getPrivate(this, ctxName);
      ctx.oldReturnValue = ctx.returnValue;
      ctx.returnValue = v;
      return nextOrThrow(ctx, getPrivate(this, moveNextName), 'throw', RETURN_SENTINEL);
    }
  };
  defineProperties(GeneratorFunctionPrototype.prototype, {
    constructor: {enumerable: false},
    next: {enumerable: false},
    throw: {enumerable: false},
    return: {enumerable: false}
  });
  Object.defineProperty(GeneratorFunctionPrototype.prototype, Symbol.iterator, nonEnum(function() {
    return this;
  }));
  function createGeneratorInstance(innerFunction, functionObject, self) {
    var moveNext = getMoveNext(innerFunction, self);
    var ctx = new GeneratorContext();
    var object = create(functionObject.prototype);
    setPrivate(object, ctxName, ctx);
    setPrivate(object, moveNextName, moveNext);
    return object;
  }
  function initGeneratorFunction(functionObject) {
    functionObject.prototype = create(GeneratorFunctionPrototype.prototype);
    functionObject.__proto__ = GeneratorFunctionPrototype;
    return functionObject;
  }
  function AsyncFunctionContext() {
    GeneratorContext.call(this);
    this.err = undefined;
    var ctx = this;
    ctx.result = new Promise(function(resolve, reject) {
      ctx.resolve = resolve;
      ctx.reject = reject;
    });
  }
  AsyncFunctionContext.prototype = create(GeneratorContext.prototype);
  AsyncFunctionContext.prototype.end = function() {
    switch (this.state) {
      case END_STATE:
        this.resolve(this.returnValue);
        break;
      case RETHROW_STATE:
        this.reject(this.storedException);
        break;
      default:
        this.reject(getInternalError(this.state));
    }
  };
  AsyncFunctionContext.prototype.handleException = function() {
    this.state = RETHROW_STATE;
  };
  function asyncWrap(innerFunction, self) {
    var moveNext = getMoveNext(innerFunction, self);
    var ctx = new AsyncFunctionContext();
    ctx.createCallback = function(newState) {
      return function(value) {
        ctx.state = newState;
        ctx.value = value;
        moveNext(ctx);
      };
    };
    ctx.errback = function(err) {
      handleCatch(ctx, err);
      moveNext(ctx);
    };
    moveNext(ctx);
    return ctx.result;
  }
  function getMoveNext(innerFunction, self) {
    return function(ctx) {
      while (true) {
        try {
          return innerFunction.call(self, ctx);
        } catch (ex) {
          handleCatch(ctx, ex);
        }
      }
    };
  }
  function handleCatch(ctx, ex) {
    ctx.storedException = ex;
    var last = ctx.tryStack_[ctx.tryStack_.length - 1];
    if (!last) {
      ctx.handleException(ex);
      return;
    }
    ctx.state = last.catch !== undefined ? last.catch : last.finally;
    if (last.finallyFallThrough !== undefined)
      ctx.finallyFallThrough = last.finallyFallThrough;
  }
  return {
    get createGeneratorInstance() {
      return createGeneratorInstance;
    },
    get initGeneratorFunction() {
      return initGeneratorFunction;
    },
    get asyncWrap() {
      return asyncWrap;
    }
  };
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/asyncWrap.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/asyncWrap.js";
  var $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_generators_46_js__ = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./generators.js", "traceur-runtime@0.0.111/src/runtime/modules/asyncWrap.js"));
  return {get default() {
      return $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_generators_46_js__.asyncWrap;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/initGeneratorFunction.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/initGeneratorFunction.js";
  var $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_generators_46_js__ = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./generators.js", "traceur-runtime@0.0.111/src/runtime/modules/initGeneratorFunction.js"));
  return {get default() {
      return $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_generators_46_js__.initGeneratorFunction;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/createGeneratorInstance.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/createGeneratorInstance.js";
  var $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_generators_46_js__ = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./generators.js", "traceur-runtime@0.0.111/src/runtime/modules/createGeneratorInstance.js"));
  return {get default() {
      return $__traceur_45_runtime_64_0_46_0_46_111_47_src_47_runtime_47_modules_47_generators_46_js__.createGeneratorInstance;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/generators.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/generators.js";
  var asyncWrap = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/asyncWrap.js", "traceur-runtime@0.0.111/src/runtime/generators.js")).default;
  var initGeneratorFunction = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/initGeneratorFunction.js", "traceur-runtime@0.0.111/src/runtime/generators.js")).default;
  var createGeneratorInstance = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/createGeneratorInstance.js", "traceur-runtime@0.0.111/src/runtime/generators.js")).default;
  $traceurRuntime.asyncWrap = asyncWrap;
  $traceurRuntime.initGeneratorFunction = initGeneratorFunction;
  $traceurRuntime.createGeneratorInstance = createGeneratorInstance;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/spawn.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/spawn.js";
  function spawn(self, args, gen) {
    return new Promise(function(resolve, reject) {
      function fulfill(v) {
        try {
          step(gen.next(v));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(v) {
        try {
          step(gen.throw(v));
        } catch (e) {
          reject(e);
        }
      }
      function step(res) {
        if (res.done) {
          resolve(res.value);
        } else {
          Promise.resolve(res.value).then(fulfill, rejected);
        }
      }
      step((gen = gen.apply(self, args)).next());
    });
  }
  return {get default() {
      return spawn;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/spawn.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/spawn.js";
  var spawn = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/spawn.js", "traceur-runtime@0.0.111/src/runtime/spawn.js")).default;
  $traceurRuntime.spawn = spawn;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/getTemplateObject.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/getTemplateObject.js";
  var $__1 = Object,
      defineProperty = $__1.defineProperty,
      freeze = $__1.freeze;
  var slice = Array.prototype.slice;
  var map = Object.create(null);
  function getTemplateObject(raw) {
    var cooked = arguments[1];
    var key = raw.join('${}');
    var templateObject = map[key];
    if (templateObject)
      return templateObject;
    if (!cooked) {
      cooked = slice.call(raw);
    }
    return map[key] = freeze(defineProperty(cooked, 'raw', {value: freeze(raw)}));
  }
  return {get default() {
      return getTemplateObject;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/template.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/template.js";
  var getTemplateObject = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/getTemplateObject.js", "traceur-runtime@0.0.111/src/runtime/template.js")).default;
  $traceurRuntime.getTemplateObject = getTemplateObject;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/modules/spreadProperties.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/modules/spreadProperties.js";
  var $__1 = Object,
      defineProperty = $__1.defineProperty,
      getOwnPropertyNames = $__1.getOwnPropertyNames,
      getOwnPropertySymbols = $__1.getOwnPropertySymbols,
      propertyIsEnumerable = $__1.propertyIsEnumerable;
  function createDataProperty(o, p, v) {
    defineProperty(o, p, {
      configurable: true,
      enumerable: true,
      value: v,
      writable: true
    });
  }
  function copyDataProperties(target, source) {
    if (source == null) {
      return;
    }
    var copy = function(keys) {
      for (var i = 0; i < keys.length; i++) {
        var nextKey = keys[i];
        if (propertyIsEnumerable.call(source, nextKey)) {
          var propValue = source[nextKey];
          createDataProperty(target, nextKey, propValue);
        }
      }
    };
    copy(getOwnPropertyNames(source));
    copy(getOwnPropertySymbols(source));
  }
  var $__default = function() {
    var target = arguments[0];
    for (var i = 1; i < arguments.length; i++) {
      copyDataProperties(target, arguments[i]);
    }
    return target;
  };
  return {get default() {
      return $__default;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/jsx.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/jsx.js";
  var spreadProperties = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./modules/spreadProperties.js", "traceur-runtime@0.0.111/src/runtime/jsx.js")).default;
  $traceurRuntime.spreadProperties = spreadProperties;
  return {};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/runtime-modules.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/runtime-modules.js";
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./symbols.js", "traceur-runtime@0.0.111/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./classes.js", "traceur-runtime@0.0.111/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./exportStar.js", "traceur-runtime@0.0.111/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./properTailCalls.js", "traceur-runtime@0.0.111/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./relativeRequire.js", "traceur-runtime@0.0.111/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./spread.js", "traceur-runtime@0.0.111/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./destructuring.js", "traceur-runtime@0.0.111/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./async.js", "traceur-runtime@0.0.111/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./generators.js", "traceur-runtime@0.0.111/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./spawn.js", "traceur-runtime@0.0.111/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./template.js", "traceur-runtime@0.0.111/src/runtime/runtime-modules.js"));
  $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./jsx.js", "traceur-runtime@0.0.111/src/runtime/runtime-modules.js"));
  return {};
});
$traceurRuntime.getModule("traceur-runtime@0.0.111/src/runtime/runtime-modules.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/frozen-data.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/frozen-data.js";
  function findIndex(arr, key) {
    for (var i = 0; i < arr.length; i += 2) {
      if (arr[i] === key) {
        return i;
      }
    }
    return -1;
  }
  function setFrozen(arr, key, val) {
    var i = findIndex(arr, key);
    if (i === -1) {
      arr.push(key, val);
    }
  }
  function getFrozen(arr, key) {
    var i = findIndex(arr, key);
    if (i !== -1) {
      return arr[i + 1];
    }
    return undefined;
  }
  function hasFrozen(arr, key) {
    return findIndex(arr, key) !== -1;
  }
  function deleteFrozen(arr, key) {
    var i = findIndex(arr, key);
    if (i !== -1) {
      arr.splice(i, 2);
      return true;
    }
    return false;
  }
  return {
    get setFrozen() {
      return setFrozen;
    },
    get getFrozen() {
      return getFrozen;
    },
    get hasFrozen() {
      return hasFrozen;
    },
    get deleteFrozen() {
      return deleteFrozen;
    }
  };
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/polyfills/utils.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/polyfills/utils.js";
  var $ceil = Math.ceil;
  var $floor = Math.floor;
  var $isFinite = isFinite;
  var $isNaN = isNaN;
  var $pow = Math.pow;
  var $min = Math.min;
  var $TypeError = TypeError;
  var $Object = Object;
  function toObject(x) {
    if (x == null) {
      throw $TypeError();
    }
    return $Object(x);
  }
  function toUint32(x) {
    return x >>> 0;
  }
  function isObject(x) {
    return x && (typeof x === 'object' || typeof x === 'function');
  }
  function isCallable(x) {
    return typeof x === 'function';
  }
  function isNumber(x) {
    return typeof x === 'number';
  }
  function toInteger(x) {
    x = +x;
    if ($isNaN(x))
      return 0;
    if (x === 0 || !$isFinite(x))
      return x;
    return x > 0 ? $floor(x) : $ceil(x);
  }
  var MAX_SAFE_LENGTH = $pow(2, 53) - 1;
  function toLength(x) {
    var len = toInteger(x);
    return len < 0 ? 0 : $min(len, MAX_SAFE_LENGTH);
  }
  function checkIterable(x) {
    return !isObject(x) ? undefined : x[Symbol.iterator];
  }
  function isConstructor(x) {
    return isCallable(x);
  }
  function createIteratorResultObject(value, done) {
    return {
      value: value,
      done: done
    };
  }
  function maybeDefine(object, name, descr) {
    if (!(name in object)) {
      Object.defineProperty(object, name, descr);
    }
  }
  function maybeDefineMethod(object, name, value) {
    maybeDefine(object, name, {
      value: value,
      configurable: true,
      enumerable: false,
      writable: true
    });
  }
  function maybeDefineConst(object, name, value) {
    maybeDefine(object, name, {
      value: value,
      configurable: false,
      enumerable: false,
      writable: false
    });
  }
  function maybeAddFunctions(object, functions) {
    for (var i = 0; i < functions.length; i += 2) {
      var name = functions[i];
      var value = functions[i + 1];
      maybeDefineMethod(object, name, value);
    }
  }
  function maybeAddConsts(object, consts) {
    for (var i = 0; i < consts.length; i += 2) {
      var name = consts[i];
      var value = consts[i + 1];
      maybeDefineConst(object, name, value);
    }
  }
  function maybeAddIterator(object, func, Symbol) {
    if (!Symbol || !Symbol.iterator || object[Symbol.iterator])
      return;
    if (object['@@iterator'])
      func = object['@@iterator'];
    Object.defineProperty(object, Symbol.iterator, {
      value: func,
      configurable: true,
      enumerable: false,
      writable: true
    });
  }
  var polyfills = [];
  function registerPolyfill(func) {
    polyfills.push(func);
  }
  function polyfillAll(global) {
    polyfills.forEach(function(f) {
      return f(global);
    });
  }
  return {
    get toObject() {
      return toObject;
    },
    get toUint32() {
      return toUint32;
    },
    get isObject() {
      return isObject;
    },
    get isCallable() {
      return isCallable;
    },
    get isNumber() {
      return isNumber;
    },
    get toInteger() {
      return toInteger;
    },
    get toLength() {
      return toLength;
    },
    get checkIterable() {
      return checkIterable;
    },
    get isConstructor() {
      return isConstructor;
    },
    get createIteratorResultObject() {
      return createIteratorResultObject;
    },
    get maybeDefine() {
      return maybeDefine;
    },
    get maybeDefineMethod() {
      return maybeDefineMethod;
    },
    get maybeDefineConst() {
      return maybeDefineConst;
    },
    get maybeAddFunctions() {
      return maybeAddFunctions;
    },
    get maybeAddConsts() {
      return maybeAddConsts;
    },
    get maybeAddIterator() {
      return maybeAddIterator;
    },
    get registerPolyfill() {
      return registerPolyfill;
    },
    get polyfillAll() {
      return polyfillAll;
    }
  };
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/polyfills/Map.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/polyfills/Map.js";
  var $__16 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../private.js", "traceur-runtime@0.0.111/src/runtime/polyfills/Map.js")),
      createPrivateSymbol = $__16.createPrivateSymbol,
      getPrivate = $__16.getPrivate,
      setPrivate = $__16.setPrivate;
  var $__17 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../frozen-data.js", "traceur-runtime@0.0.111/src/runtime/polyfills/Map.js")),
      deleteFrozen = $__17.deleteFrozen,
      getFrozen = $__17.getFrozen,
      setFrozen = $__17.setFrozen;
  var $__18 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.111/src/runtime/polyfills/Map.js")),
      isObject = $__18.isObject,
      registerPolyfill = $__18.registerPolyfill;
  var hasNativeSymbol = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../has-native-symbols.js", "traceur-runtime@0.0.111/src/runtime/polyfills/Map.js")).default;
  var $__9 = Object,
      defineProperty = $__9.defineProperty,
      getOwnPropertyDescriptor = $__9.getOwnPropertyDescriptor,
      hasOwnProperty = $__9.hasOwnProperty,
      isExtensible = $__9.isExtensible;
  var deletedSentinel = {};
  var counter = 1;
  var hashCodeName = createPrivateSymbol();
  function getHashCodeForObject(obj) {
    return getPrivate(obj, hashCodeName);
  }
  function getOrSetHashCodeForObject(obj) {
    var hash = getHashCodeForObject(obj);
    if (!hash) {
      hash = counter++;
      setPrivate(obj, hashCodeName, hash);
    }
    return hash;
  }
  function lookupIndex(map, key) {
    if (typeof key === 'string') {
      return map.stringIndex_[key];
    }
    if (isObject(key)) {
      if (!isExtensible(key)) {
        return getFrozen(map.frozenData_, key);
      }
      var hc = getHashCodeForObject(key);
      if (hc === undefined) {
        return undefined;
      }
      return map.objectIndex_[hc];
    }
    return map.primitiveIndex_[key];
  }
  function initMap(map) {
    map.entries_ = [];
    map.objectIndex_ = Object.create(null);
    map.stringIndex_ = Object.create(null);
    map.primitiveIndex_ = Object.create(null);
    map.frozenData_ = [];
    map.deletedCount_ = 0;
  }
  var Map = function() {
    function Map() {
      var $__11,
          $__12;
      var iterable = arguments[0];
      if (!isObject(this))
        throw new TypeError('Map called on incompatible type');
      if (hasOwnProperty.call(this, 'entries_')) {
        throw new TypeError('Map can not be reentrantly initialised');
      }
      initMap(this);
      if (iterable !== null && iterable !== undefined) {
        var $__5 = true;
        var $__6 = false;
        var $__7 = undefined;
        try {
          for (var $__3 = void 0,
              $__2 = (iterable)[Symbol.iterator](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {
            var $__10 = $__3.value,
                key = ($__11 = $__10[Symbol.iterator](), ($__12 = $__11.next()).done ? void 0 : $__12.value),
                value = ($__12 = $__11.next()).done ? void 0 : $__12.value;
            {
              this.set(key, value);
            }
          }
        } catch ($__8) {
          $__6 = true;
          $__7 = $__8;
        } finally {
          try {
            if (!$__5 && $__2.return != null) {
              $__2.return();
            }
          } finally {
            if ($__6) {
              throw $__7;
            }
          }
        }
      }
    }
    return ($traceurRuntime.createClass)(Map, {
      get size() {
        return this.entries_.length / 2 - this.deletedCount_;
      },
      get: function(key) {
        var index = lookupIndex(this, key);
        if (index !== undefined) {
          return this.entries_[index + 1];
        }
      },
      set: function(key, value) {
        var index = lookupIndex(this, key);
        if (index !== undefined) {
          this.entries_[index + 1] = value;
        } else {
          index = this.entries_.length;
          this.entries_[index] = key;
          this.entries_[index + 1] = value;
          if (isObject(key)) {
            if (!isExtensible(key)) {
              setFrozen(this.frozenData_, key, index);
            } else {
              var hash = getOrSetHashCodeForObject(key);
              this.objectIndex_[hash] = index;
            }
          } else if (typeof key === 'string') {
            this.stringIndex_[key] = index;
          } else {
            this.primitiveIndex_[key] = index;
          }
        }
        return this;
      },
      has: function(key) {
        return lookupIndex(this, key) !== undefined;
      },
      delete: function(key) {
        var index = lookupIndex(this, key);
        if (index === undefined) {
          return false;
        }
        this.entries_[index] = deletedSentinel;
        this.entries_[index + 1] = undefined;
        this.deletedCount_++;
        if (isObject(key)) {
          if (!isExtensible(key)) {
            deleteFrozen(this.frozenData_, key);
          } else {
            var hash = getHashCodeForObject(key);
            delete this.objectIndex_[hash];
          }
        } else if (typeof key === 'string') {
          delete this.stringIndex_[key];
        } else {
          delete this.primitiveIndex_[key];
        }
        return true;
      },
      clear: function() {
        initMap(this);
      },
      forEach: function(callbackFn) {
        var thisArg = arguments[1];
        for (var i = 0; i < this.entries_.length; i += 2) {
          var key = this.entries_[i];
          var value = this.entries_[i + 1];
          if (key === deletedSentinel)
            continue;
          callbackFn.call(thisArg, value, key, this);
        }
      },
      entries: $traceurRuntime.initGeneratorFunction(function $__13() {
        var i,
            key,
            value;
        return $traceurRuntime.createGeneratorInstance(function($ctx) {
          while (true)
            switch ($ctx.state) {
              case 0:
                i = 0;
                $ctx.state = 12;
                break;
              case 12:
                $ctx.state = (i < this.entries_.length) ? 8 : -2;
                break;
              case 4:
                i += 2;
                $ctx.state = 12;
                break;
              case 8:
                key = this.entries_[i];
                value = this.entries_[i + 1];
                $ctx.state = 9;
                break;
              case 9:
                $ctx.state = (key === deletedSentinel) ? 4 : 6;
                break;
              case 6:
                $ctx.state = 2;
                return [key, value];
              case 2:
                $ctx.maybeThrow();
                $ctx.state = 4;
                break;
              default:
                return $ctx.end();
            }
        }, $__13, this);
      }),
      keys: $traceurRuntime.initGeneratorFunction(function $__14() {
        var i,
            key,
            value;
        return $traceurRuntime.createGeneratorInstance(function($ctx) {
          while (true)
            switch ($ctx.state) {
              case 0:
                i = 0;
                $ctx.state = 12;
                break;
              case 12:
                $ctx.state = (i < this.entries_.length) ? 8 : -2;
                break;
              case 4:
                i += 2;
                $ctx.state = 12;
                break;
              case 8:
                key = this.entries_[i];
                value = this.entries_[i + 1];
                $ctx.state = 9;
                break;
              case 9:
                $ctx.state = (key === deletedSentinel) ? 4 : 6;
                break;
              case 6:
                $ctx.state = 2;
                return key;
              case 2:
                $ctx.maybeThrow();
                $ctx.state = 4;
                break;
              default:
                return $ctx.end();
            }
        }, $__14, this);
      }),
      values: $traceurRuntime.initGeneratorFunction(function $__15() {
        var i,
            key,
            value;
        return $traceurRuntime.createGeneratorInstance(function($ctx) {
          while (true)
            switch ($ctx.state) {
              case 0:
                i = 0;
                $ctx.state = 12;
                break;
              case 12:
                $ctx.state = (i < this.entries_.length) ? 8 : -2;
                break;
              case 4:
                i += 2;
                $ctx.state = 12;
                break;
              case 8:
                key = this.entries_[i];
                value = this.entries_[i + 1];
                $ctx.state = 9;
                break;
              case 9:
                $ctx.state = (key === deletedSentinel) ? 4 : 6;
                break;
              case 6:
                $ctx.state = 2;
                return value;
              case 2:
                $ctx.maybeThrow();
                $ctx.state = 4;
                break;
              default:
                return $ctx.end();
            }
        }, $__15, this);
      })
    }, {});
  }();
  defineProperty(Map.prototype, Symbol.iterator, {
    configurable: true,
    writable: true,
    value: Map.prototype.entries
  });
  function needsPolyfill(global) {
    var $__10 = global,
        Map = $__10.Map,
        Symbol = $__10.Symbol;
    if (!Map || !hasNativeSymbol() || !Map.prototype[Symbol.iterator] || !Map.prototype.entries) {
      return true;
    }
    try {
      return new Map([[]]).size !== 1;
    } catch (e) {
      return false;
    }
  }
  function polyfillMap(global) {
    if (needsPolyfill(global)) {
      global.Map = Map;
    }
  }
  registerPolyfill(polyfillMap);
  return {
    get Map() {
      return Map;
    },
    get polyfillMap() {
      return polyfillMap;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.111/src/runtime/polyfills/Map.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/polyfills/Set.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/polyfills/Set.js";
  var $__18 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.111/src/runtime/polyfills/Set.js")),
      isObject = $__18.isObject,
      registerPolyfill = $__18.registerPolyfill;
  var Map = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./Map.js", "traceur-runtime@0.0.111/src/runtime/polyfills/Set.js")).Map;
  var hasNativeSymbol = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../has-native-symbols.js", "traceur-runtime@0.0.111/src/runtime/polyfills/Set.js")).default;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var Set = function() {
    function Set() {
      var iterable = arguments[0];
      if (!isObject(this))
        throw new TypeError('Set called on incompatible type');
      if (hasOwnProperty.call(this, 'map_')) {
        throw new TypeError('Set can not be reentrantly initialised');
      }
      this.map_ = new Map();
      if (iterable !== null && iterable !== undefined) {
        var $__6 = true;
        var $__7 = false;
        var $__8 = undefined;
        try {
          for (var $__4 = void 0,
              $__3 = (iterable)[Symbol.iterator](); !($__6 = ($__4 = $__3.next()).done); $__6 = true) {
            var item = $__4.value;
            {
              this.add(item);
            }
          }
        } catch ($__9) {
          $__7 = true;
          $__8 = $__9;
        } finally {
          try {
            if (!$__6 && $__3.return != null) {
              $__3.return();
            }
          } finally {
            if ($__7) {
              throw $__8;
            }
          }
        }
      }
    }
    return ($traceurRuntime.createClass)(Set, {
      get size() {
        return this.map_.size;
      },
      has: function(key) {
        return this.map_.has(key);
      },
      add: function(key) {
        this.map_.set(key, key);
        return this;
      },
      delete: function(key) {
        return this.map_.delete(key);
      },
      clear: function() {
        return this.map_.clear();
      },
      forEach: function(callbackFn) {
        var thisArg = arguments[1];
        var $__2 = this;
        return this.map_.forEach(function(value, key) {
          callbackFn.call(thisArg, key, key, $__2);
        });
      },
      values: $traceurRuntime.initGeneratorFunction(function $__12() {
        var $__13,
            $__14;
        return $traceurRuntime.createGeneratorInstance(function($ctx) {
          while (true)
            switch ($ctx.state) {
              case 0:
                $__13 = $ctx.wrapYieldStar(this.map_.keys()[Symbol.iterator]());
                $ctx.sent = void 0;
                $ctx.action = 'next';
                $ctx.state = 12;
                break;
              case 12:
                $__14 = $__13[$ctx.action]($ctx.sentIgnoreThrow);
                $ctx.state = 9;
                break;
              case 9:
                $ctx.state = ($__14.done) ? 3 : 2;
                break;
              case 3:
                $ctx.sent = $__14.value;
                $ctx.state = -2;
                break;
              case 2:
                $ctx.state = 12;
                return $__14.value;
              default:
                return $ctx.end();
            }
        }, $__12, this);
      }),
      entries: $traceurRuntime.initGeneratorFunction(function $__15() {
        var $__16,
            $__17;
        return $traceurRuntime.createGeneratorInstance(function($ctx) {
          while (true)
            switch ($ctx.state) {
              case 0:
                $__16 = $ctx.wrapYieldStar(this.map_.entries()[Symbol.iterator]());
                $ctx.sent = void 0;
                $ctx.action = 'next';
                $ctx.state = 12;
                break;
              case 12:
                $__17 = $__16[$ctx.action]($ctx.sentIgnoreThrow);
                $ctx.state = 9;
                break;
              case 9:
                $ctx.state = ($__17.done) ? 3 : 2;
                break;
              case 3:
                $ctx.sent = $__17.value;
                $ctx.state = -2;
                break;
              case 2:
                $ctx.state = 12;
                return $__17.value;
              default:
                return $ctx.end();
            }
        }, $__15, this);
      })
    }, {});
  }();
  Object.defineProperty(Set.prototype, Symbol.iterator, {
    configurable: true,
    writable: true,
    value: Set.prototype.values
  });
  Object.defineProperty(Set.prototype, 'keys', {
    configurable: true,
    writable: true,
    value: Set.prototype.values
  });
  function needsPolyfill(global) {
    var $__11 = global,
        Set = $__11.Set,
        Symbol = $__11.Symbol;
    if (!Set || !hasNativeSymbol() || !Set.prototype[Symbol.iterator] || !Set.prototype.values) {
      return true;
    }
    try {
      return new Set([1]).size !== 1;
    } catch (e) {
      return false;
    }
  }
  function polyfillSet(global) {
    if (needsPolyfill(global)) {
      global.Set = Set;
    }
  }
  registerPolyfill(polyfillSet);
  return {
    get Set() {
      return Set;
    },
    get polyfillSet() {
      return polyfillSet;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.111/src/runtime/polyfills/Set.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.111/node_modules/rsvp/lib/rsvp/asap.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/node_modules/rsvp/lib/rsvp/asap.js";
  var len = 0;
  var toString = {}.toString;
  var vertxNext;
  function asap(callback, arg) {
    queue[len] = callback;
    queue[len + 1] = arg;
    len += 2;
    if (len === 2) {
      scheduleFlush();
    }
  }
  var browserWindow = (typeof window !== 'undefined') ? window : undefined;
  var browserGlobal = browserWindow || {};
  var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
  var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
  var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';
  function useNextTick() {
    var nextTick = process.nextTick;
    var version = process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);
    if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {
      nextTick = setImmediate;
    }
    return function() {
      nextTick(flush);
    };
  }
  function useVertxTimer() {
    return function() {
      vertxNext(flush);
    };
  }
  function useMutationObserver() {
    var iterations = 0;
    var observer = new BrowserMutationObserver(flush);
    var node = document.createTextNode('');
    observer.observe(node, {characterData: true});
    return function() {
      node.data = (iterations = ++iterations % 2);
    };
  }
  function useMessageChannel() {
    var channel = new MessageChannel();
    channel.port1.onmessage = flush;
    return function() {
      channel.port2.postMessage(0);
    };
  }
  function useSetTimeout() {
    return function() {
      setTimeout(flush, 1);
    };
  }
  var queue = new Array(1000);
  function flush() {
    for (var i = 0; i < len; i += 2) {
      var callback = queue[i];
      var arg = queue[i + 1];
      callback(arg);
      queue[i] = undefined;
      queue[i + 1] = undefined;
    }
    len = 0;
  }
  function attemptVertex() {
    try {
      var r = require;
      var vertx = r('vertx');
      vertxNext = vertx.runOnLoop || vertx.runOnContext;
      return useVertxTimer();
    } catch (e) {
      return useSetTimeout();
    }
  }
  var scheduleFlush;
  if (isNode) {
    scheduleFlush = useNextTick();
  } else if (BrowserMutationObserver) {
    scheduleFlush = useMutationObserver();
  } else if (isWorker) {
    scheduleFlush = useMessageChannel();
  } else if (browserWindow === undefined && typeof require === 'function') {
    scheduleFlush = attemptVertex();
  } else {
    scheduleFlush = useSetTimeout();
  }
  return {get default() {
      return asap;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/polyfills/Promise.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/polyfills/Promise.js";
  var async = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../../../node_modules/rsvp/lib/rsvp/asap.js", "traceur-runtime@0.0.111/src/runtime/polyfills/Promise.js")).default;
  var $__9 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.111/src/runtime/polyfills/Promise.js")),
      isObject = $__9.isObject,
      registerPolyfill = $__9.registerPolyfill;
  var $__10 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../private.js", "traceur-runtime@0.0.111/src/runtime/polyfills/Promise.js")),
      createPrivateSymbol = $__10.createPrivateSymbol,
      getPrivate = $__10.getPrivate,
      setPrivate = $__10.setPrivate;
  var promiseRaw = {};
  function isPromise(x) {
    return x && typeof x === 'object' && x.status_ !== undefined;
  }
  function idResolveHandler(x) {
    return x;
  }
  function idRejectHandler(x) {
    throw x;
  }
  function chain(promise) {
    var onResolve = arguments[1] !== (void 0) ? arguments[1] : idResolveHandler;
    var onReject = arguments[2] !== (void 0) ? arguments[2] : idRejectHandler;
    var deferred = getDeferred(promise.constructor);
    switch (promise.status_) {
      case undefined:
        throw TypeError;
      case 0:
        promise.onResolve_.push(onResolve, deferred);
        promise.onReject_.push(onReject, deferred);
        break;
      case +1:
        promiseEnqueue(promise.value_, [onResolve, deferred]);
        break;
      case -1:
        promiseEnqueue(promise.value_, [onReject, deferred]);
        break;
    }
    return deferred.promise;
  }
  function getDeferred(C) {
    if (this === $Promise) {
      var promise = promiseInit(new $Promise(promiseRaw));
      return {
        promise: promise,
        resolve: function(x) {
          promiseResolve(promise, x);
        },
        reject: function(r) {
          promiseReject(promise, r);
        }
      };
    } else {
      var result = {};
      result.promise = new C(function(resolve, reject) {
        result.resolve = resolve;
        result.reject = reject;
      });
      return result;
    }
  }
  function promiseSet(promise, status, value, onResolve, onReject) {
    promise.status_ = status;
    promise.value_ = value;
    promise.onResolve_ = onResolve;
    promise.onReject_ = onReject;
    return promise;
  }
  function promiseInit(promise) {
    return promiseSet(promise, 0, undefined, [], []);
  }
  var Promise = function() {
    function Promise(resolver) {
      if (resolver === promiseRaw)
        return;
      if (typeof resolver !== 'function')
        throw new TypeError;
      var promise = promiseInit(this);
      try {
        resolver(function(x) {
          promiseResolve(promise, x);
        }, function(r) {
          promiseReject(promise, r);
        });
      } catch (e) {
        promiseReject(promise, e);
      }
    }
    return ($traceurRuntime.createClass)(Promise, {
      catch: function(onReject) {
        return this.then(undefined, onReject);
      },
      then: function(onResolve, onReject) {
        if (typeof onResolve !== 'function')
          onResolve = idResolveHandler;
        if (typeof onReject !== 'function')
          onReject = idRejectHandler;
        var that = this;
        var constructor = this.constructor;
        return chain(this, function(x) {
          x = promiseCoerce(constructor, x);
          return x === that ? onReject(new TypeError) : isPromise(x) ? x.then(onResolve, onReject) : onResolve(x);
        }, onReject);
      }
    }, {
      resolve: function(x) {
        if (this === $Promise) {
          if (isPromise(x)) {
            return x;
          }
          return promiseSet(new $Promise(promiseRaw), +1, x);
        } else {
          return new this(function(resolve, reject) {
            resolve(x);
          });
        }
      },
      reject: function(r) {
        if (this === $Promise) {
          return promiseSet(new $Promise(promiseRaw), -1, r);
        } else {
          return new this(function(resolve, reject) {
            reject(r);
          });
        }
      },
      all: function(values) {
        var deferred = getDeferred(this);
        var resolutions = [];
        try {
          var makeCountdownFunction = function(i) {
            return function(x) {
              resolutions[i] = x;
              if (--count === 0)
                deferred.resolve(resolutions);
            };
          };
          var count = 0;
          var i = 0;
          var $__4 = true;
          var $__5 = false;
          var $__6 = undefined;
          try {
            for (var $__2 = void 0,
                $__1 = (values)[Symbol.iterator](); !($__4 = ($__2 = $__1.next()).done); $__4 = true) {
              var value = $__2.value;
              {
                var countdownFunction = makeCountdownFunction(i);
                this.resolve(value).then(countdownFunction, function(r) {
                  deferred.reject(r);
                });
                ++i;
                ++count;
              }
            }
          } catch ($__7) {
            $__5 = true;
            $__6 = $__7;
          } finally {
            try {
              if (!$__4 && $__1.return != null) {
                $__1.return();
              }
            } finally {
              if ($__5) {
                throw $__6;
              }
            }
          }
          if (count === 0) {
            deferred.resolve(resolutions);
          }
        } catch (e) {
          deferred.reject(e);
        }
        return deferred.promise;
      },
      race: function(values) {
        var deferred = getDeferred(this);
        try {
          for (var i = 0; i < values.length; i++) {
            this.resolve(values[i]).then(function(x) {
              deferred.resolve(x);
            }, function(r) {
              deferred.reject(r);
            });
          }
        } catch (e) {
          deferred.reject(e);
        }
        return deferred.promise;
      }
    });
  }();
  var $Promise = Promise;
  var $PromiseReject = $Promise.reject;
  function promiseResolve(promise, x) {
    promiseDone(promise, +1, x, promise.onResolve_);
  }
  function promiseReject(promise, r) {
    promiseDone(promise, -1, r, promise.onReject_);
  }
  function promiseDone(promise, status, value, reactions) {
    if (promise.status_ !== 0)
      return;
    promiseEnqueue(value, reactions);
    promiseSet(promise, status, value);
  }
  function promiseEnqueue(value, tasks) {
    async(function() {
      for (var i = 0; i < tasks.length; i += 2) {
        promiseHandle(value, tasks[i], tasks[i + 1]);
      }
    });
  }
  function promiseHandle(value, handler, deferred) {
    try {
      var result = handler(value);
      if (result === deferred.promise)
        throw new TypeError;
      else if (isPromise(result))
        chain(result, deferred.resolve, deferred.reject);
      else
        deferred.resolve(result);
    } catch (e) {
      try {
        deferred.reject(e);
      } catch (e) {}
    }
  }
  var thenableSymbol = createPrivateSymbol();
  function promiseCoerce(constructor, x) {
    if (!isPromise(x) && isObject(x)) {
      var then;
      try {
        then = x.then;
      } catch (r) {
        var promise = $PromiseReject.call(constructor, r);
        setPrivate(x, thenableSymbol, promise);
        return promise;
      }
      if (typeof then === 'function') {
        var p = getPrivate(x, thenableSymbol);
        if (p) {
          return p;
        } else {
          var deferred = getDeferred(constructor);
          setPrivate(x, thenableSymbol, deferred.promise);
          try {
            then.call(x, deferred.resolve, deferred.reject);
          } catch (r) {
            deferred.reject(r);
          }
          return deferred.promise;
        }
      }
    }
    return x;
  }
  function polyfillPromise(global) {
    if (!global.Promise)
      global.Promise = Promise;
  }
  registerPolyfill(polyfillPromise);
  return {
    get Promise() {
      return Promise;
    },
    get polyfillPromise() {
      return polyfillPromise;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.111/src/runtime/polyfills/Promise.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/polyfills/StringIterator.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/polyfills/StringIterator.js";
  var $__3 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.111/src/runtime/polyfills/StringIterator.js")),
      createIteratorResultObject = $__3.createIteratorResultObject,
      isObject = $__3.isObject;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var iteratedString = Symbol('iteratedString');
  var stringIteratorNextIndex = Symbol('stringIteratorNextIndex');
  var StringIterator = function() {
    var $__1;
    function StringIterator() {}
    return ($traceurRuntime.createClass)(StringIterator, ($__1 = {}, Object.defineProperty($__1, "next", {
      value: function() {
        var o = this;
        if (!isObject(o) || !hasOwnProperty.call(o, iteratedString)) {
          throw new TypeError('this must be a StringIterator object');
        }
        var s = o[iteratedString];
        if (s === undefined) {
          return createIteratorResultObject(undefined, true);
        }
        var position = o[stringIteratorNextIndex];
        var len = s.length;
        if (position >= len) {
          o[iteratedString] = undefined;
          return createIteratorResultObject(undefined, true);
        }
        var first = s.charCodeAt(position);
        var resultString;
        if (first < 0xD800 || first > 0xDBFF || position + 1 === len) {
          resultString = String.fromCharCode(first);
        } else {
          var second = s.charCodeAt(position + 1);
          if (second < 0xDC00 || second > 0xDFFF) {
            resultString = String.fromCharCode(first);
          } else {
            resultString = String.fromCharCode(first) + String.fromCharCode(second);
          }
        }
        o[stringIteratorNextIndex] = position + resultString.length;
        return createIteratorResultObject(resultString, false);
      },
      configurable: true,
      enumerable: true,
      writable: true
    }), Object.defineProperty($__1, Symbol.iterator, {
      value: function() {
        return this;
      },
      configurable: true,
      enumerable: true,
      writable: true
    }), $__1), {});
  }();
  function createStringIterator(string) {
    var s = String(string);
    var iterator = Object.create(StringIterator.prototype);
    iterator[iteratedString] = s;
    iterator[stringIteratorNextIndex] = 0;
    return iterator;
  }
  return {get createStringIterator() {
      return createStringIterator;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/polyfills/String.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/polyfills/String.js";
  var checkObjectCoercible = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../checkObjectCoercible.js", "traceur-runtime@0.0.111/src/runtime/polyfills/String.js")).default;
  var createStringIterator = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./StringIterator.js", "traceur-runtime@0.0.111/src/runtime/polyfills/String.js")).createStringIterator;
  var $__3 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.111/src/runtime/polyfills/String.js")),
      maybeAddFunctions = $__3.maybeAddFunctions,
      maybeAddIterator = $__3.maybeAddIterator,
      registerPolyfill = $__3.registerPolyfill;
  var $toString = Object.prototype.toString;
  var $indexOf = String.prototype.indexOf;
  var $lastIndexOf = String.prototype.lastIndexOf;
  function startsWith(search) {
    var string = String(this);
    if (this == null || $toString.call(search) == '[object RegExp]') {
      throw TypeError();
    }
    var stringLength = string.length;
    var searchString = String(search);
    var searchLength = searchString.length;
    var position = arguments.length > 1 ? arguments[1] : undefined;
    var pos = position ? Number(position) : 0;
    if (isNaN(pos)) {
      pos = 0;
    }
    var start = Math.min(Math.max(pos, 0), stringLength);
    return $indexOf.call(string, searchString, pos) == start;
  }
  function endsWith(search) {
    var string = String(this);
    if (this == null || $toString.call(search) == '[object RegExp]') {
      throw TypeError();
    }
    var stringLength = string.length;
    var searchString = String(search);
    var searchLength = searchString.length;
    var pos = stringLength;
    if (arguments.length > 1) {
      var position = arguments[1];
      if (position !== undefined) {
        pos = position ? Number(position) : 0;
        if (isNaN(pos)) {
          pos = 0;
        }
      }
    }
    var end = Math.min(Math.max(pos, 0), stringLength);
    var start = end - searchLength;
    if (start < 0) {
      return false;
    }
    return $lastIndexOf.call(string, searchString, start) == start;
  }
  function includes(search) {
    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    if (search && $toString.call(search) == '[object RegExp]') {
      throw TypeError();
    }
    var stringLength = string.length;
    var searchString = String(search);
    var searchLength = searchString.length;
    var position = arguments.length > 1 ? arguments[1] : undefined;
    var pos = position ? Number(position) : 0;
    if (pos != pos) {
      pos = 0;
    }
    var start = Math.min(Math.max(pos, 0), stringLength);
    if (searchLength + start > stringLength) {
      return false;
    }
    return $indexOf.call(string, searchString, pos) != -1;
  }
  function repeat(count) {
    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    var n = count ? Number(count) : 0;
    if (isNaN(n)) {
      n = 0;
    }
    if (n < 0 || n == Infinity) {
      throw RangeError();
    }
    if (n == 0) {
      return '';
    }
    var result = '';
    while (n--) {
      result += string;
    }
    return result;
  }
  function codePointAt(position) {
    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    var size = string.length;
    var index = position ? Number(position) : 0;
    if (isNaN(index)) {
      index = 0;
    }
    if (index < 0 || index >= size) {
      return undefined;
    }
    var first = string.charCodeAt(index);
    var second;
    if (first >= 0xD800 && first <= 0xDBFF && size > index + 1) {
      second = string.charCodeAt(index + 1);
      if (second >= 0xDC00 && second <= 0xDFFF) {
        return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
      }
    }
    return first;
  }
  function raw(callsite) {
    var raw = callsite.raw;
    var len = raw.length >>> 0;
    if (len === 0)
      return '';
    var s = '';
    var i = 0;
    while (true) {
      s += raw[i];
      if (i + 1 === len)
        return s;
      s += arguments[++i];
    }
  }
  function fromCodePoint(_) {
    var codeUnits = [];
    var floor = Math.floor;
    var highSurrogate;
    var lowSurrogate;
    var index = -1;
    var length = arguments.length;
    if (!length) {
      return '';
    }
    while (++index < length) {
      var codePoint = Number(arguments[index]);
      if (!isFinite(codePoint) || codePoint < 0 || codePoint > 0x10FFFF || floor(codePoint) != codePoint) {
        throw RangeError('Invalid code point: ' + codePoint);
      }
      if (codePoint <= 0xFFFF) {
        codeUnits.push(codePoint);
      } else {
        codePoint -= 0x10000;
        highSurrogate = (codePoint >> 10) + 0xD800;
        lowSurrogate = (codePoint % 0x400) + 0xDC00;
        codeUnits.push(highSurrogate, lowSurrogate);
      }
    }
    return String.fromCharCode.apply(null, codeUnits);
  }
  function stringPrototypeIterator() {
    var o = checkObjectCoercible(this);
    var s = String(o);
    return createStringIterator(s);
  }
  function polyfillString(global) {
    var String = global.String;
    maybeAddFunctions(String.prototype, ['codePointAt', codePointAt, 'endsWith', endsWith, 'includes', includes, 'repeat', repeat, 'startsWith', startsWith]);
    maybeAddFunctions(String, ['fromCodePoint', fromCodePoint, 'raw', raw]);
    maybeAddIterator(String.prototype, stringPrototypeIterator, Symbol);
  }
  registerPolyfill(polyfillString);
  return {
    get startsWith() {
      return startsWith;
    },
    get endsWith() {
      return endsWith;
    },
    get includes() {
      return includes;
    },
    get repeat() {
      return repeat;
    },
    get codePointAt() {
      return codePointAt;
    },
    get raw() {
      return raw;
    },
    get fromCodePoint() {
      return fromCodePoint;
    },
    get stringPrototypeIterator() {
      return stringPrototypeIterator;
    },
    get polyfillString() {
      return polyfillString;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.111/src/runtime/polyfills/String.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/polyfills/ArrayIterator.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/polyfills/ArrayIterator.js";
  var $__2 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.111/src/runtime/polyfills/ArrayIterator.js")),
      toObject = $__2.toObject,
      toUint32 = $__2.toUint32,
      createIteratorResultObject = $__2.createIteratorResultObject;
  var ARRAY_ITERATOR_KIND_KEYS = 1;
  var ARRAY_ITERATOR_KIND_VALUES = 2;
  var ARRAY_ITERATOR_KIND_ENTRIES = 3;
  var ArrayIterator = function() {
    var $__1;
    function ArrayIterator() {}
    return ($traceurRuntime.createClass)(ArrayIterator, ($__1 = {}, Object.defineProperty($__1, "next", {
      value: function() {
        var iterator = toObject(this);
        var array = iterator.iteratorObject_;
        if (!array) {
          throw new TypeError('Object is not an ArrayIterator');
        }
        var index = iterator.arrayIteratorNextIndex_;
        var itemKind = iterator.arrayIterationKind_;
        var length = toUint32(array.length);
        if (index >= length) {
          iterator.arrayIteratorNextIndex_ = Infinity;
          return createIteratorResultObject(undefined, true);
        }
        iterator.arrayIteratorNextIndex_ = index + 1;
        if (itemKind == ARRAY_ITERATOR_KIND_VALUES)
          return createIteratorResultObject(array[index], false);
        if (itemKind == ARRAY_ITERATOR_KIND_ENTRIES)
          return createIteratorResultObject([index, array[index]], false);
        return createIteratorResultObject(index, false);
      },
      configurable: true,
      enumerable: true,
      writable: true
    }), Object.defineProperty($__1, Symbol.iterator, {
      value: function() {
        return this;
      },
      configurable: true,
      enumerable: true,
      writable: true
    }), $__1), {});
  }();
  function createArrayIterator(array, kind) {
    var object = toObject(array);
    var iterator = new ArrayIterator;
    iterator.iteratorObject_ = object;
    iterator.arrayIteratorNextIndex_ = 0;
    iterator.arrayIterationKind_ = kind;
    return iterator;
  }
  function entries() {
    return createArrayIterator(this, ARRAY_ITERATOR_KIND_ENTRIES);
  }
  function keys() {
    return createArrayIterator(this, ARRAY_ITERATOR_KIND_KEYS);
  }
  function values() {
    return createArrayIterator(this, ARRAY_ITERATOR_KIND_VALUES);
  }
  return {
    get entries() {
      return entries;
    },
    get keys() {
      return keys;
    },
    get values() {
      return values;
    }
  };
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/polyfills/Array.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/polyfills/Array.js";
  var $__9 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./ArrayIterator.js", "traceur-runtime@0.0.111/src/runtime/polyfills/Array.js")),
      entries = $__9.entries,
      keys = $__9.keys,
      jsValues = $__9.values;
  var $__10 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.111/src/runtime/polyfills/Array.js")),
      checkIterable = $__10.checkIterable,
      isCallable = $__10.isCallable,
      isConstructor = $__10.isConstructor,
      maybeAddFunctions = $__10.maybeAddFunctions,
      maybeAddIterator = $__10.maybeAddIterator,
      registerPolyfill = $__10.registerPolyfill,
      toInteger = $__10.toInteger,
      toLength = $__10.toLength,
      toObject = $__10.toObject;
  function from(arrLike) {
    var mapFn = arguments[1];
    var thisArg = arguments[2];
    var C = this;
    var items = toObject(arrLike);
    var mapping = mapFn !== undefined;
    var k = 0;
    var arr,
        len;
    if (mapping && !isCallable(mapFn)) {
      throw TypeError();
    }
    if (checkIterable(items)) {
      arr = isConstructor(C) ? new C() : [];
      var $__3 = true;
      var $__4 = false;
      var $__5 = undefined;
      try {
        for (var $__1 = void 0,
            $__0 = (items)[Symbol.iterator](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
          var item = $__1.value;
          {
            if (mapping) {
              arr[k] = mapFn.call(thisArg, item, k);
            } else {
              arr[k] = item;
            }
            k++;
          }
        }
      } catch ($__6) {
        $__4 = true;
        $__5 = $__6;
      } finally {
        try {
          if (!$__3 && $__0.return != null) {
            $__0.return();
          }
        } finally {
          if ($__4) {
            throw $__5;
          }
        }
      }
      arr.length = k;
      return arr;
    }
    len = toLength(items.length);
    arr = isConstructor(C) ? new C(len) : new Array(len);
    for (; k < len; k++) {
      if (mapping) {
        arr[k] = typeof thisArg === 'undefined' ? mapFn(items[k], k) : mapFn.call(thisArg, items[k], k);
      } else {
        arr[k] = items[k];
      }
    }
    arr.length = len;
    return arr;
  }
  function of() {
    for (var items = [],
        $__7 = 0; $__7 < arguments.length; $__7++)
      items[$__7] = arguments[$__7];
    var C = this;
    var len = items.length;
    var arr = isConstructor(C) ? new C(len) : new Array(len);
    for (var k = 0; k < len; k++) {
      arr[k] = items[k];
    }
    arr.length = len;
    return arr;
  }
  function fill(value) {
    var start = arguments[1] !== (void 0) ? arguments[1] : 0;
    var end = arguments[2];
    var object = toObject(this);
    var len = toLength(object.length);
    var fillStart = toInteger(start);
    var fillEnd = end !== undefined ? toInteger(end) : len;
    fillStart = fillStart < 0 ? Math.max(len + fillStart, 0) : Math.min(fillStart, len);
    fillEnd = fillEnd < 0 ? Math.max(len + fillEnd, 0) : Math.min(fillEnd, len);
    while (fillStart < fillEnd) {
      object[fillStart] = value;
      fillStart++;
    }
    return object;
  }
  function find(predicate) {
    var thisArg = arguments[1];
    return findHelper(this, predicate, thisArg);
  }
  function findIndex(predicate) {
    var thisArg = arguments[1];
    return findHelper(this, predicate, thisArg, true);
  }
  function findHelper(self, predicate) {
    var thisArg = arguments[2];
    var returnIndex = arguments[3] !== (void 0) ? arguments[3] : false;
    var object = toObject(self);
    var len = toLength(object.length);
    if (!isCallable(predicate)) {
      throw TypeError();
    }
    for (var i = 0; i < len; i++) {
      var value = object[i];
      if (predicate.call(thisArg, value, i, object)) {
        return returnIndex ? i : value;
      }
    }
    return returnIndex ? -1 : undefined;
  }
  function polyfillArray(global) {
    var $__8 = global,
        Array = $__8.Array,
        Object = $__8.Object,
        Symbol = $__8.Symbol;
    var values = jsValues;
    if (Symbol && Symbol.iterator && Array.prototype[Symbol.iterator]) {
      values = Array.prototype[Symbol.iterator];
    }
    maybeAddFunctions(Array.prototype, ['entries', entries, 'keys', keys, 'values', values, 'fill', fill, 'find', find, 'findIndex', findIndex]);
    maybeAddFunctions(Array, ['from', from, 'of', of]);
    maybeAddIterator(Array.prototype, values, Symbol);
    maybeAddIterator(Object.getPrototypeOf([].values()), function() {
      return this;
    }, Symbol);
  }
  registerPolyfill(polyfillArray);
  return {
    get from() {
      return from;
    },
    get of() {
      return of;
    },
    get fill() {
      return fill;
    },
    get find() {
      return find;
    },
    get findIndex() {
      return findIndex;
    },
    get polyfillArray() {
      return polyfillArray;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.111/src/runtime/polyfills/Array.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/polyfills/assign.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/polyfills/assign.js";
  var keys = Object.keys;
  function assign(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      var props = source == null ? [] : keys(source);
      var p = void 0,
          length = props.length;
      for (p = 0; p < length; p++) {
        var name = props[p];
        target[name] = source[name];
      }
    }
    return target;
  }
  return {get default() {
      return assign;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/polyfills/Object.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/polyfills/Object.js";
  var $__2 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.111/src/runtime/polyfills/Object.js")),
      maybeAddFunctions = $__2.maybeAddFunctions,
      registerPolyfill = $__2.registerPolyfill;
  var assign = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./assign.js", "traceur-runtime@0.0.111/src/runtime/polyfills/Object.js")).default;
  var $__0 = Object,
      defineProperty = $__0.defineProperty,
      getOwnPropertyDescriptor = $__0.getOwnPropertyDescriptor,
      getOwnPropertyNames = $__0.getOwnPropertyNames;
  function is(left, right) {
    if (left === right)
      return left !== 0 || 1 / left === 1 / right;
    return left !== left && right !== right;
  }
  function mixin(target, source) {
    var props = getOwnPropertyNames(source);
    var p,
        descriptor,
        length = props.length;
    for (p = 0; p < length; p++) {
      var name = props[p];
      descriptor = getOwnPropertyDescriptor(source, props[p]);
      defineProperty(target, props[p], descriptor);
    }
    return target;
  }
  function polyfillObject(global) {
    var Object = global.Object;
    maybeAddFunctions(Object, ['assign', assign, 'is', is, 'mixin', mixin]);
  }
  registerPolyfill(polyfillObject);
  return {
    get assign() {
      return assign;
    },
    get is() {
      return is;
    },
    get mixin() {
      return mixin;
    },
    get polyfillObject() {
      return polyfillObject;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.111/src/runtime/polyfills/Object.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/polyfills/Number.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/polyfills/Number.js";
  var $__1 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.111/src/runtime/polyfills/Number.js")),
      isNumber = $__1.isNumber,
      maybeAddConsts = $__1.maybeAddConsts,
      maybeAddFunctions = $__1.maybeAddFunctions,
      registerPolyfill = $__1.registerPolyfill,
      toInteger = $__1.toInteger;
  var $abs = Math.abs;
  var $isFinite = isFinite;
  var $isNaN = isNaN;
  var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;
  var MIN_SAFE_INTEGER = -Math.pow(2, 53) + 1;
  var EPSILON = Math.pow(2, -52);
  function NumberIsFinite(number) {
    return isNumber(number) && $isFinite(number);
  }
  function isInteger(number) {
    return NumberIsFinite(number) && toInteger(number) === number;
  }
  function NumberIsNaN(number) {
    return isNumber(number) && $isNaN(number);
  }
  function isSafeInteger(number) {
    if (NumberIsFinite(number)) {
      var integral = toInteger(number);
      if (integral === number)
        return $abs(integral) <= MAX_SAFE_INTEGER;
    }
    return false;
  }
  function polyfillNumber(global) {
    var Number = global.Number;
    maybeAddConsts(Number, ['MAX_SAFE_INTEGER', MAX_SAFE_INTEGER, 'MIN_SAFE_INTEGER', MIN_SAFE_INTEGER, 'EPSILON', EPSILON]);
    maybeAddFunctions(Number, ['isFinite', NumberIsFinite, 'isInteger', isInteger, 'isNaN', NumberIsNaN, 'isSafeInteger', isSafeInteger]);
  }
  registerPolyfill(polyfillNumber);
  return {
    get MAX_SAFE_INTEGER() {
      return MAX_SAFE_INTEGER;
    },
    get MIN_SAFE_INTEGER() {
      return MIN_SAFE_INTEGER;
    },
    get EPSILON() {
      return EPSILON;
    },
    get isFinite() {
      return NumberIsFinite;
    },
    get isInteger() {
      return isInteger;
    },
    get isNaN() {
      return NumberIsNaN;
    },
    get isSafeInteger() {
      return isSafeInteger;
    },
    get polyfillNumber() {
      return polyfillNumber;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.111/src/runtime/polyfills/Number.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/polyfills/fround.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/polyfills/fround.js";
  var $isFinite = isFinite;
  var $isNaN = isNaN;
  var $__0 = Math,
      LN2 = $__0.LN2,
      abs = $__0.abs,
      floor = $__0.floor,
      log = $__0.log,
      min = $__0.min,
      pow = $__0.pow;
  function packIEEE754(v, ebits, fbits) {
    var bias = (1 << (ebits - 1)) - 1,
        s,
        e,
        f,
        ln,
        i,
        bits,
        str,
        bytes;
    function roundToEven(n) {
      var w = floor(n),
          f = n - w;
      if (f < 0.5)
        return w;
      if (f > 0.5)
        return w + 1;
      return w % 2 ? w + 1 : w;
    }
    if (v !== v) {
      e = (1 << ebits) - 1;
      f = pow(2, fbits - 1);
      s = 0;
    } else if (v === Infinity || v === -Infinity) {
      e = (1 << ebits) - 1;
      f = 0;
      s = (v < 0) ? 1 : 0;
    } else if (v === 0) {
      e = 0;
      f = 0;
      s = (1 / v === -Infinity) ? 1 : 0;
    } else {
      s = v < 0;
      v = abs(v);
      if (v >= pow(2, 1 - bias)) {
        e = min(floor(log(v) / LN2), 1023);
        f = roundToEven(v / pow(2, e) * pow(2, fbits));
        if (f / pow(2, fbits) >= 2) {
          e = e + 1;
          f = 1;
        }
        if (e > bias) {
          e = (1 << ebits) - 1;
          f = 0;
        } else {
          e = e + bias;
          f = f - pow(2, fbits);
        }
      } else {
        e = 0;
        f = roundToEven(v / pow(2, 1 - bias - fbits));
      }
    }
    bits = [];
    for (i = fbits; i; i -= 1) {
      bits.push(f % 2 ? 1 : 0);
      f = floor(f / 2);
    }
    for (i = ebits; i; i -= 1) {
      bits.push(e % 2 ? 1 : 0);
      e = floor(e / 2);
    }
    bits.push(s ? 1 : 0);
    bits.reverse();
    str = bits.join('');
    bytes = [];
    while (str.length) {
      bytes.push(parseInt(str.substring(0, 8), 2));
      str = str.substring(8);
    }
    return bytes;
  }
  function unpackIEEE754(bytes, ebits, fbits) {
    var bits = [],
        i,
        j,
        b,
        str,
        bias,
        s,
        e,
        f;
    for (i = bytes.length; i; i -= 1) {
      b = bytes[i - 1];
      for (j = 8; j; j -= 1) {
        bits.push(b % 2 ? 1 : 0);
        b = b >> 1;
      }
    }
    bits.reverse();
    str = bits.join('');
    bias = (1 << (ebits - 1)) - 1;
    s = parseInt(str.substring(0, 1), 2) ? -1 : 1;
    e = parseInt(str.substring(1, 1 + ebits), 2);
    f = parseInt(str.substring(1 + ebits), 2);
    if (e === (1 << ebits) - 1) {
      return f !== 0 ? NaN : s * Infinity;
    } else if (e > 0) {
      return s * pow(2, e - bias) * (1 + f / pow(2, fbits));
    } else if (f !== 0) {
      return s * pow(2, -(bias - 1)) * (f / pow(2, fbits));
    } else {
      return s < 0 ? -0 : 0;
    }
  }
  function unpackF32(b) {
    return unpackIEEE754(b, 8, 23);
  }
  function packF32(v) {
    return packIEEE754(v, 8, 23);
  }
  function fround(x) {
    if (x === 0 || !$isFinite(x) || $isNaN(x)) {
      return x;
    }
    return unpackF32(packF32(Number(x)));
  }
  return {get fround() {
      return fround;
    }};
});
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/polyfills/Math.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/polyfills/Math.js";
  var jsFround = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./fround.js", "traceur-runtime@0.0.111/src/runtime/polyfills/Math.js")).fround;
  var $__3 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.111/src/runtime/polyfills/Math.js")),
      maybeAddFunctions = $__3.maybeAddFunctions,
      registerPolyfill = $__3.registerPolyfill,
      toUint32 = $__3.toUint32;
  var $isFinite = isFinite;
  var $isNaN = isNaN;
  var $__0 = Math,
      abs = $__0.abs,
      ceil = $__0.ceil,
      exp = $__0.exp,
      floor = $__0.floor,
      log = $__0.log,
      pow = $__0.pow,
      sqrt = $__0.sqrt;
  function clz32(x) {
    x = toUint32(+x);
    if (x == 0)
      return 32;
    var result = 0;
    if ((x & 0xFFFF0000) === 0) {
      x <<= 16;
      result += 16;
    }
    ;
    if ((x & 0xFF000000) === 0) {
      x <<= 8;
      result += 8;
    }
    ;
    if ((x & 0xF0000000) === 0) {
      x <<= 4;
      result += 4;
    }
    ;
    if ((x & 0xC0000000) === 0) {
      x <<= 2;
      result += 2;
    }
    ;
    if ((x & 0x80000000) === 0) {
      x <<= 1;
      result += 1;
    }
    ;
    return result;
  }
  function imul(x, y) {
    x = toUint32(+x);
    y = toUint32(+y);
    var xh = (x >>> 16) & 0xffff;
    var xl = x & 0xffff;
    var yh = (y >>> 16) & 0xffff;
    var yl = y & 0xffff;
    return xl * yl + (((xh * yl + xl * yh) << 16) >>> 0) | 0;
  }
  function sign(x) {
    x = +x;
    if (x > 0)
      return 1;
    if (x < 0)
      return -1;
    return x;
  }
  function log10(x) {
    return log(x) * 0.434294481903251828;
  }
  function log2(x) {
    return log(x) * 1.442695040888963407;
  }
  function log1p(x) {
    x = +x;
    if (x < -1 || $isNaN(x)) {
      return NaN;
    }
    if (x === 0 || x === Infinity) {
      return x;
    }
    if (x === -1) {
      return -Infinity;
    }
    var result = 0;
    var n = 50;
    if (x < 0 || x > 1) {
      return log(1 + x);
    }
    for (var i = 1; i < n; i++) {
      if ((i % 2) === 0) {
        result -= pow(x, i) / i;
      } else {
        result += pow(x, i) / i;
      }
    }
    return result;
  }
  function expm1(x) {
    x = +x;
    if (x === -Infinity) {
      return -1;
    }
    if (!$isFinite(x) || x === 0) {
      return x;
    }
    return exp(x) - 1;
  }
  function cosh(x) {
    x = +x;
    if (x === 0) {
      return 1;
    }
    if ($isNaN(x)) {
      return NaN;
    }
    if (!$isFinite(x)) {
      return Infinity;
    }
    if (x < 0) {
      x = -x;
    }
    if (x > 21) {
      return exp(x) / 2;
    }
    return (exp(x) + exp(-x)) / 2;
  }
  function sinh(x) {
    x = +x;
    if (!$isFinite(x) || x === 0) {
      return x;
    }
    return (exp(x) - exp(-x)) / 2;
  }
  function tanh(x) {
    x = +x;
    if (x === 0)
      return x;
    if (!$isFinite(x))
      return sign(x);
    var exp1 = exp(x);
    var exp2 = exp(-x);
    return (exp1 - exp2) / (exp1 + exp2);
  }
  function acosh(x) {
    x = +x;
    if (x < 1)
      return NaN;
    if (!$isFinite(x))
      return x;
    return log(x + sqrt(x + 1) * sqrt(x - 1));
  }
  function asinh(x) {
    x = +x;
    if (x === 0 || !$isFinite(x))
      return x;
    if (x > 0)
      return log(x + sqrt(x * x + 1));
    return -log(-x + sqrt(x * x + 1));
  }
  function atanh(x) {
    x = +x;
    if (x === -1) {
      return -Infinity;
    }
    if (x === 1) {
      return Infinity;
    }
    if (x === 0) {
      return x;
    }
    if ($isNaN(x) || x < -1 || x > 1) {
      return NaN;
    }
    return 0.5 * log((1 + x) / (1 - x));
  }
  function hypot(x, y) {
    var length = arguments.length;
    var args = new Array(length);
    var max = 0;
    for (var i = 0; i < length; i++) {
      var n = arguments[i];
      n = +n;
      if (n === Infinity || n === -Infinity)
        return Infinity;
      n = abs(n);
      if (n > max)
        max = n;
      args[i] = n;
    }
    if (max === 0)
      max = 1;
    var sum = 0;
    var compensation = 0;
    for (var i = 0; i < length; i++) {
      var n = args[i] / max;
      var summand = n * n - compensation;
      var preliminary = sum + summand;
      compensation = (preliminary - sum) - summand;
      sum = preliminary;
    }
    return sqrt(sum) * max;
  }
  function trunc(x) {
    x = +x;
    if (x > 0)
      return floor(x);
    if (x < 0)
      return ceil(x);
    return x;
  }
  var fround,
      f32;
  if (typeof Float32Array === 'function') {
    f32 = new Float32Array(1);
    fround = function(x) {
      f32[0] = Number(x);
      return f32[0];
    };
  } else {
    fround = jsFround;
  }
  function cbrt(x) {
    x = +x;
    if (x === 0)
      return x;
    var negate = x < 0;
    if (negate)
      x = -x;
    var result = pow(x, 1 / 3);
    return negate ? -result : result;
  }
  function polyfillMath(global) {
    var Math = global.Math;
    maybeAddFunctions(Math, ['acosh', acosh, 'asinh', asinh, 'atanh', atanh, 'cbrt', cbrt, 'clz32', clz32, 'cosh', cosh, 'expm1', expm1, 'fround', fround, 'hypot', hypot, 'imul', imul, 'log10', log10, 'log1p', log1p, 'log2', log2, 'sign', sign, 'sinh', sinh, 'tanh', tanh, 'trunc', trunc]);
  }
  registerPolyfill(polyfillMath);
  return {
    get clz32() {
      return clz32;
    },
    get imul() {
      return imul;
    },
    get sign() {
      return sign;
    },
    get log10() {
      return log10;
    },
    get log2() {
      return log2;
    },
    get log1p() {
      return log1p;
    },
    get expm1() {
      return expm1;
    },
    get cosh() {
      return cosh;
    },
    get sinh() {
      return sinh;
    },
    get tanh() {
      return tanh;
    },
    get acosh() {
      return acosh;
    },
    get asinh() {
      return asinh;
    },
    get atanh() {
      return atanh;
    },
    get hypot() {
      return hypot;
    },
    get trunc() {
      return trunc;
    },
    get fround() {
      return fround;
    },
    get cbrt() {
      return cbrt;
    },
    get polyfillMath() {
      return polyfillMath;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.111/src/runtime/polyfills/Math.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/polyfills/WeakMap.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/polyfills/WeakMap.js";
  var $__5 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../private.js", "traceur-runtime@0.0.111/src/runtime/polyfills/WeakMap.js")),
      createPrivateSymbol = $__5.createPrivateSymbol,
      deletePrivate = $__5.deletePrivate,
      getPrivate = $__5.getPrivate,
      hasPrivate = $__5.hasPrivate,
      setPrivate = $__5.setPrivate;
  var $__6 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../frozen-data.js", "traceur-runtime@0.0.111/src/runtime/polyfills/WeakMap.js")),
      deleteFrozen = $__6.deleteFrozen,
      getFrozen = $__6.getFrozen,
      hasFrozen = $__6.hasFrozen,
      setFrozen = $__6.setFrozen;
  var $__7 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.111/src/runtime/polyfills/WeakMap.js")),
      isObject = $__7.isObject,
      registerPolyfill = $__7.registerPolyfill;
  var hasNativeSymbol = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../has-native-symbols.js", "traceur-runtime@0.0.111/src/runtime/polyfills/WeakMap.js")).default;
  var $__2 = Object,
      defineProperty = $__2.defineProperty,
      getOwnPropertyDescriptor = $__2.getOwnPropertyDescriptor,
      isExtensible = $__2.isExtensible;
  var $TypeError = TypeError;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var sentinel = {};
  var WeakMap = function() {
    function WeakMap() {
      this.name_ = createPrivateSymbol();
      this.frozenData_ = [];
    }
    return ($traceurRuntime.createClass)(WeakMap, {
      set: function(key, value) {
        if (!isObject(key))
          throw new $TypeError('key must be an object');
        if (!isExtensible(key)) {
          setFrozen(this.frozenData_, key, value);
        } else {
          setPrivate(key, this.name_, value);
        }
        return this;
      },
      get: function(key) {
        if (!isObject(key))
          return undefined;
        if (!isExtensible(key)) {
          return getFrozen(this.frozenData_, key);
        }
        return getPrivate(key, this.name_);
      },
      delete: function(key) {
        if (!isObject(key))
          return false;
        if (!isExtensible(key)) {
          return deleteFrozen(this.frozenData_, key);
        }
        return deletePrivate(key, this.name_);
      },
      has: function(key) {
        if (!isObject(key))
          return false;
        if (!isExtensible(key)) {
          return hasFrozen(this.frozenData_, key);
        }
        return hasPrivate(key, this.name_);
      }
    }, {});
  }();
  function needsPolyfill(global) {
    var $__4 = global,
        WeakMap = $__4.WeakMap,
        Symbol = $__4.Symbol;
    if (!WeakMap || !hasNativeSymbol()) {
      return true;
    }
    try {
      var o = {};
      var wm = new WeakMap([[o, false]]);
      return wm.get(o);
    } catch (e) {
      return false;
    }
  }
  function polyfillWeakMap(global) {
    if (needsPolyfill(global)) {
      global.WeakMap = WeakMap;
    }
  }
  registerPolyfill(polyfillWeakMap);
  return {
    get WeakMap() {
      return WeakMap;
    },
    get polyfillWeakMap() {
      return polyfillWeakMap;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.111/src/runtime/polyfills/WeakMap.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/polyfills/WeakSet.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/polyfills/WeakSet.js";
  var $__5 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../private.js", "traceur-runtime@0.0.111/src/runtime/polyfills/WeakSet.js")),
      createPrivateSymbol = $__5.createPrivateSymbol,
      deletePrivate = $__5.deletePrivate,
      getPrivate = $__5.getPrivate,
      hasPrivate = $__5.hasPrivate,
      setPrivate = $__5.setPrivate;
  var $__6 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../frozen-data.js", "traceur-runtime@0.0.111/src/runtime/polyfills/WeakSet.js")),
      deleteFrozen = $__6.deleteFrozen,
      getFrozen = $__6.getFrozen,
      setFrozen = $__6.setFrozen;
  var $__7 = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.111/src/runtime/polyfills/WeakSet.js")),
      isObject = $__7.isObject,
      registerPolyfill = $__7.registerPolyfill;
  var hasNativeSymbol = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("../has-native-symbols.js", "traceur-runtime@0.0.111/src/runtime/polyfills/WeakSet.js")).default;
  var $__2 = Object,
      defineProperty = $__2.defineProperty,
      isExtensible = $__2.isExtensible;
  var $TypeError = TypeError;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var WeakSet = function() {
    function WeakSet() {
      this.name_ = createPrivateSymbol();
      this.frozenData_ = [];
    }
    return ($traceurRuntime.createClass)(WeakSet, {
      add: function(value) {
        if (!isObject(value))
          throw new $TypeError('value must be an object');
        if (!isExtensible(value)) {
          setFrozen(this.frozenData_, value, value);
        } else {
          setPrivate(value, this.name_, true);
        }
        return this;
      },
      delete: function(value) {
        if (!isObject(value))
          return false;
        if (!isExtensible(value)) {
          return deleteFrozen(this.frozenData_, value);
        }
        return deletePrivate(value, this.name_);
      },
      has: function(value) {
        if (!isObject(value))
          return false;
        if (!isExtensible(value)) {
          return getFrozen(this.frozenData_, value) === value;
        }
        return hasPrivate(value, this.name_);
      }
    }, {});
  }();
  function needsPolyfill(global) {
    var $__4 = global,
        WeakSet = $__4.WeakSet,
        Symbol = $__4.Symbol;
    if (!WeakSet || !hasNativeSymbol()) {
      return true;
    }
    try {
      var o = {};
      var wm = new WeakSet([[o]]);
      return !wm.has(o);
    } catch (e) {
      return false;
    }
  }
  function polyfillWeakSet(global) {
    if (needsPolyfill(global)) {
      global.WeakSet = WeakSet;
    }
  }
  registerPolyfill(polyfillWeakSet);
  return {
    get WeakSet() {
      return WeakSet;
    },
    get polyfillWeakSet() {
      return polyfillWeakSet;
    }
  };
});
$traceurRuntime.getModule("traceur-runtime@0.0.111/src/runtime/polyfills/WeakSet.js" + '');
$traceurRuntime.registerModule("traceur-runtime@0.0.111/src/runtime/polyfills/polyfills.js", [], function() {
  "use strict";
  var __moduleName = "traceur-runtime@0.0.111/src/runtime/polyfills/polyfills.js";
  var polyfillAll = $traceurRuntime.getModule($traceurRuntime.normalizeModuleName("./utils.js", "traceur-runtime@0.0.111/src/runtime/polyfills/polyfills.js")).polyfillAll;
  polyfillAll(Reflect.global);
  var setupGlobals = $traceurRuntime.setupGlobals;
  $traceurRuntime.setupGlobals = function(global) {
    setupGlobals(global);
    polyfillAll(global);
  };
  return {};
});
$traceurRuntime.getModule("traceur-runtime@0.0.111/src/runtime/polyfills/polyfills.js" + '');

System = curSystem; })();
!function(e){function r(e,r,o){return 4===arguments.length?t.apply(this,arguments):void n(e,{declarative:!0,deps:r,declare:o})}function t(e,r,t,o){n(e,{declarative:!1,deps:r,executingRequire:t,execute:o})}function n(e,r){r.name=e,e in v||(v[e]=r),r.normalizedDeps=r.deps}function o(e,r){if(r[e.groupIndex]=r[e.groupIndex]||[],-1==g.call(r[e.groupIndex],e)){r[e.groupIndex].push(e);for(var t=0,n=e.normalizedDeps.length;n>t;t++){var a=e.normalizedDeps[t],u=v[a];if(u&&!u.evaluated){var d=e.groupIndex+(u.declarative!=e.declarative);if(void 0===u.groupIndex||u.groupIndex<d){if(void 0!==u.groupIndex&&(r[u.groupIndex].splice(g.call(r[u.groupIndex],u),1),0==r[u.groupIndex].length))throw new TypeError("Mixed dependency cycle detected");u.groupIndex=d}o(u,r)}}}}function a(e){var r=v[e];r.groupIndex=0;var t=[];o(r,t);for(var n=!!r.declarative==t.length%2,a=t.length-1;a>=0;a--){for(var u=t[a],i=0;i<u.length;i++){var s=u[i];n?d(s):l(s)}n=!n}}function u(e){return y[e]||(y[e]={name:e,dependencies:[],exports:{},importers:[]})}function d(r){if(!r.module){var t=r.module=u(r.name),n=r.module.exports,o=r.declare.call(e,function(e,r){if(t.locked=!0,"object"==typeof e)for(var o in e)n[o]=e[o];else n[e]=r;for(var a=0,u=t.importers.length;u>a;a++){var d=t.importers[a];if(!d.locked)for(var i=0;i<d.dependencies.length;++i)d.dependencies[i]===t&&d.setters[i](n)}return t.locked=!1,r},{id:r.name});t.setters=o.setters,t.execute=o.execute;for(var a=0,i=r.normalizedDeps.length;i>a;a++){var l,s=r.normalizedDeps[a],c=v[s],f=y[s];f?l=f.exports:c&&!c.declarative?l=c.esModule:c?(d(c),f=c.module,l=f.exports):l=p(s),f&&f.importers?(f.importers.push(t),t.dependencies.push(f)):t.dependencies.push(null),t.setters[a]&&t.setters[a](l)}}}function i(e){var r,t=v[e];if(t)t.declarative?f(e,[]):t.evaluated||l(t),r=t.module.exports;else if(r=p(e),!r)throw new Error("Unable to load dependency "+e+".");return(!t||t.declarative)&&r&&r.__useDefault?r["default"]:r}function l(r){if(!r.module){var t={},n=r.module={exports:t,id:r.name};if(!r.executingRequire)for(var o=0,a=r.normalizedDeps.length;a>o;o++){var u=r.normalizedDeps[o],d=v[u];d&&l(d)}r.evaluated=!0;var c=r.execute.call(e,function(e){for(var t=0,n=r.deps.length;n>t;t++)if(r.deps[t]==e)return i(r.normalizedDeps[t]);throw new TypeError("Module "+e+" not declared as a dependency.")},t,n);void 0!==typeof c&&(n.exports=c),t=n.exports,t&&t.__esModule?r.esModule=t:r.esModule=s(t)}}function s(r){var t={};if(("object"==typeof r||"function"==typeof r)&&r!==e)if(m)for(var n in r)"default"!==n&&c(t,r,n);else{var o=r&&r.hasOwnProperty;for(var n in r)"default"===n||o&&!r.hasOwnProperty(n)||(t[n]=r[n])}return t["default"]=r,x(t,"__useDefault",{value:!0}),t}function c(e,r,t){try{var n;(n=Object.getOwnPropertyDescriptor(r,t))&&x(e,t,n)}catch(o){return e[t]=r[t],!1}}function f(r,t){var n=v[r];if(n&&!n.evaluated&&n.declarative){t.push(r);for(var o=0,a=n.normalizedDeps.length;a>o;o++){var u=n.normalizedDeps[o];-1==g.call(t,u)&&(v[u]?f(u,t):p(u))}n.evaluated||(n.evaluated=!0,n.module.execute.call(e))}}function p(e){if(I[e])return I[e];if("@node/"==e.substr(0,6))return I[e]=s(D(e.substr(6)));var r=v[e];if(!r)throw"Module "+e+" not present.";return a(e),f(e,[]),v[e]=void 0,r.declarative&&x(r.module.exports,"__esModule",{value:!0}),I[e]=r.declarative?r.module.exports:r.esModule}var v={},g=Array.prototype.indexOf||function(e){for(var r=0,t=this.length;t>r;r++)if(this[r]===e)return r;return-1},m=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(h){m=!1}var x;!function(){try{Object.defineProperty({},"a",{})&&(x=Object.defineProperty)}catch(e){x=function(e,r,t){try{e[r]=t.value||t.get.call(e)}catch(n){}}}}();var y={},D="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,I={"@empty":{}};return function(e,n,o,a){return function(u){u(function(u){for(var d={_nodeRequire:D,register:r,registerDynamic:t,get:p,set:function(e,r){I[e]=r},newModule:function(e){return e}},i=0;i<n.length;i++)(function(e,r){r&&r.__esModule?I[e]=r:I[e]=s(r)})(n[i],arguments[i]);a(d);var l=p(e[0]);if(e.length>1)for(var i=1;i<e.length;i++)p(e[i]);return o?l["default"]:l})}}}("undefined"!=typeof self?self:global)

(["1"], [], true, function($__System) {
var require = this.require, exports = this.exports, module = this.module;
!function(e){function r(e,r){for(var n=e.split(".");n.length;)r=r[n.shift()];return r}function n(n){if("string"==typeof n)return r(n,e);if(!(n instanceof Array))throw new Error("Global exports must be a string or array.");for(var t={},o=!0,f=0;f<n.length;f++){var i=r(n[f],e);o&&(t["default"]=i,o=!1),t[n[f].split(".").pop()]=i}return t}function t(r){if(Object.keys)Object.keys(e).forEach(r);else for(var n in e)a.call(e,n)&&r(n)}function o(r){t(function(n){if(-1==l.call(s,n)){try{var t=e[n]}catch(o){s.push(n)}r(n,t)}})}var f,i=$__System,a=Object.prototype.hasOwnProperty,l=Array.prototype.indexOf||function(e){for(var r=0,n=this.length;n>r;r++)if(this[r]===e)return r;return-1},s=["_g","sessionStorage","localStorage","clipboardData","frames","frameElement","external","mozAnimationStartTime","webkitStorageInfo","webkitIndexedDB","mozInnerScreenY","mozInnerScreenX"];i.set("@@global-helpers",i.newModule({prepareGlobal:function(r,t,i){var a=e.define;e.define=void 0;var l;if(i){l={};for(var s in i)l[s]=e[s],e[s]=i[s]}return t||(f={},o(function(e,r){f[e]=r})),function(){var r;if(t)r=n(t);else{r={};var i,s;o(function(e,n){f[e]!==n&&"undefined"!=typeof n&&(r[e]=n,"undefined"!=typeof i?s||i===n||(s=!0):i=n)}),r=s?r:i}if(l)for(var u in l)e[u]=l[u];return e.define=a,r}}}))}("undefined"!=typeof self?self:global);
!function(e){function n(e,n){e=e.replace(l,"");var r=e.match(u),t=(r[1].split(",")[n]||"require").replace(s,""),i=p[t]||(p[t]=new RegExp(a+t+f,"g"));i.lastIndex=0;for(var o,c=[];o=i.exec(e);)c.push(o[2]||o[3]);return c}function r(e,n,t,o){if("object"==typeof e&&!(e instanceof Array))return r.apply(null,Array.prototype.splice.call(arguments,1,arguments.length-1));if("string"==typeof e&&"function"==typeof n&&(e=[e]),!(e instanceof Array)){if("string"==typeof e){var l=i.get(e);return l.__useDefault?l["default"]:l}throw new TypeError("Invalid require")}for(var a=[],f=0;f<e.length;f++)a.push(i["import"](e[f],o));Promise.all(a).then(function(e){n&&n.apply(null,e)},t)}function t(t,l,a){"string"!=typeof t&&(a=l,l=t,t=null),l instanceof Array||(a=l,l=["require","exports","module"].splice(0,a.length)),"function"!=typeof a&&(a=function(e){return function(){return e}}(a)),void 0===l[l.length-1]&&l.pop();var f,u,s;-1!=(f=o.call(l,"require"))&&(l.splice(f,1),t||(l=l.concat(n(a.toString(),f)))),-1!=(u=o.call(l,"exports"))&&l.splice(u,1),-1!=(s=o.call(l,"module"))&&l.splice(s,1);var p={name:t,deps:l,execute:function(n,t,o){for(var p=[],c=0;c<l.length;c++)p.push(n(l[c]));o.uri=o.id,o.config=function(){},-1!=s&&p.splice(s,0,o),-1!=u&&p.splice(u,0,t),-1!=f&&p.splice(f,0,function(e,t,l){return"string"==typeof e&&"function"!=typeof t?n(e):r.call(i,e,t,l,o.id)});var d=a.apply(-1==u?e:t,p);return"undefined"==typeof d&&o&&(d=o.exports),"undefined"!=typeof d?d:void 0}};if(t)c.anonDefine||c.isBundle?c.anonDefine&&c.anonDefine.name&&(c.anonDefine=null):c.anonDefine=p,c.isBundle=!0,i.registerDynamic(p.name,p.deps,!1,p.execute);else{if(c.anonDefine&&!c.anonDefine.name)throw new Error("Multiple anonymous defines in module "+t);c.anonDefine=p}}var i=$__System,o=Array.prototype.indexOf||function(e){for(var n=0,r=this.length;r>n;n++)if(this[n]===e)return n;return-1},l=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,a="(?:^|[^$_a-zA-Z\\xA0-\\uFFFF.])",f="\\s*\\(\\s*(\"([^\"]+)\"|'([^']+)')\\s*\\)",u=/\(([^\)]*)\)/,s=/^\s+|\s+$/g,p={};t.amd={};var c={isBundle:!1,anonDefine:null};i.amdDefine=t,i.amdRequire=r}("undefined"!=typeof self?self:global);
(function() {
var define = $__System.amdDefine;
!function(a, b) {
  "use strict";
  "object" == typeof module && "object" == typeof module.exports ? module.exports = a.document ? b(a, !0) : function(a) {
    if (!a.document)
      throw new Error("jQuery requires a window with a document");
    return b(a);
  } : b(a);
}("undefined" != typeof window ? window : this, function(a, b) {
  "use strict";
  var c = [],
      d = a.document,
      e = Object.getPrototypeOf,
      f = c.slice,
      g = c.concat,
      h = c.push,
      i = c.indexOf,
      j = {},
      k = j.toString,
      l = j.hasOwnProperty,
      m = l.toString,
      n = m.call(Object),
      o = {};
  function p(a, b) {
    b = b || d;
    var c = b.createElement("script");
    c.text = a, b.head.appendChild(c).parentNode.removeChild(c);
  }
  var q = "3.1.1",
      r = function(a, b) {
        return new r.fn.init(a, b);
      },
      s = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
      t = /^-ms-/,
      u = /-([a-z])/g,
      v = function(a, b) {
        return b.toUpperCase();
      };
  r.fn = r.prototype = {
    jquery: q,
    constructor: r,
    length: 0,
    toArray: function() {
      return f.call(this);
    },
    get: function(a) {
      return null == a ? f.call(this) : a < 0 ? this[a + this.length] : this[a];
    },
    pushStack: function(a) {
      var b = r.merge(this.constructor(), a);
      return b.prevObject = this, b;
    },
    each: function(a) {
      return r.each(this, a);
    },
    map: function(a) {
      return this.pushStack(r.map(this, function(b, c) {
        return a.call(b, c, b);
      }));
    },
    slice: function() {
      return this.pushStack(f.apply(this, arguments));
    },
    first: function() {
      return this.eq(0);
    },
    last: function() {
      return this.eq(-1);
    },
    eq: function(a) {
      var b = this.length,
          c = +a + (a < 0 ? b : 0);
      return this.pushStack(c >= 0 && c < b ? [this[c]] : []);
    },
    end: function() {
      return this.prevObject || this.constructor();
    },
    push: h,
    sort: c.sort,
    splice: c.splice
  }, r.extend = r.fn.extend = function() {
    var a,
        b,
        c,
        d,
        e,
        f,
        g = arguments[0] || {},
        h = 1,
        i = arguments.length,
        j = !1;
    for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == typeof g || r.isFunction(g) || (g = {}), h === i && (g = this, h--); h < i; h++)
      if (null != (a = arguments[h]))
        for (b in a)
          c = g[b], d = a[b], g !== d && (j && d && (r.isPlainObject(d) || (e = r.isArray(d))) ? (e ? (e = !1, f = c && r.isArray(c) ? c : []) : f = c && r.isPlainObject(c) ? c : {}, g[b] = r.extend(j, f, d)) : void 0 !== d && (g[b] = d));
    return g;
  }, r.extend({
    expando: "jQuery" + (q + Math.random()).replace(/\D/g, ""),
    isReady: !0,
    error: function(a) {
      throw new Error(a);
    },
    noop: function() {},
    isFunction: function(a) {
      return "function" === r.type(a);
    },
    isArray: Array.isArray,
    isWindow: function(a) {
      return null != a && a === a.window;
    },
    isNumeric: function(a) {
      var b = r.type(a);
      return ("number" === b || "string" === b) && !isNaN(a - parseFloat(a));
    },
    isPlainObject: function(a) {
      var b,
          c;
      return !(!a || "[object Object]" !== k.call(a)) && (!(b = e(a)) || (c = l.call(b, "constructor") && b.constructor, "function" == typeof c && m.call(c) === n));
    },
    isEmptyObject: function(a) {
      var b;
      for (b in a)
        return !1;
      return !0;
    },
    type: function(a) {
      return null == a ? a + "" : "object" == typeof a || "function" == typeof a ? j[k.call(a)] || "object" : typeof a;
    },
    globalEval: function(a) {
      p(a);
    },
    camelCase: function(a) {
      return a.replace(t, "ms-").replace(u, v);
    },
    nodeName: function(a, b) {
      return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
    },
    each: function(a, b) {
      var c,
          d = 0;
      if (w(a)) {
        for (c = a.length; d < c; d++)
          if (b.call(a[d], d, a[d]) === !1)
            break;
      } else
        for (d in a)
          if (b.call(a[d], d, a[d]) === !1)
            break;
      return a;
    },
    trim: function(a) {
      return null == a ? "" : (a + "").replace(s, "");
    },
    makeArray: function(a, b) {
      var c = b || [];
      return null != a && (w(Object(a)) ? r.merge(c, "string" == typeof a ? [a] : a) : h.call(c, a)), c;
    },
    inArray: function(a, b, c) {
      return null == b ? -1 : i.call(b, a, c);
    },
    merge: function(a, b) {
      for (var c = +b.length,
          d = 0,
          e = a.length; d < c; d++)
        a[e++] = b[d];
      return a.length = e, a;
    },
    grep: function(a, b, c) {
      for (var d,
          e = [],
          f = 0,
          g = a.length,
          h = !c; f < g; f++)
        d = !b(a[f], f), d !== h && e.push(a[f]);
      return e;
    },
    map: function(a, b, c) {
      var d,
          e,
          f = 0,
          h = [];
      if (w(a))
        for (d = a.length; f < d; f++)
          e = b(a[f], f, c), null != e && h.push(e);
      else
        for (f in a)
          e = b(a[f], f, c), null != e && h.push(e);
      return g.apply([], h);
    },
    guid: 1,
    proxy: function(a, b) {
      var c,
          d,
          e;
      if ("string" == typeof b && (c = a[b], b = a, a = c), r.isFunction(a))
        return d = f.call(arguments, 2), e = function() {
          return a.apply(b || this, d.concat(f.call(arguments)));
        }, e.guid = a.guid = a.guid || r.guid++, e;
    },
    now: Date.now,
    support: o
  }), "function" == typeof Symbol && (r.fn[Symbol.iterator] = c[Symbol.iterator]), r.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(a, b) {
    j["[object " + b + "]"] = b.toLowerCase();
  });
  function w(a) {
    var b = !!a && "length" in a && a.length,
        c = r.type(a);
    return "function" !== c && !r.isWindow(a) && ("array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a);
  }
  var x = function(a) {
    var b,
        c,
        d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l,
        m,
        n,
        o,
        p,
        q,
        r,
        s,
        t,
        u = "sizzle" + 1 * new Date,
        v = a.document,
        w = 0,
        x = 0,
        y = ha(),
        z = ha(),
        A = ha(),
        B = function(a, b) {
          return a === b && (l = !0), 0;
        },
        C = {}.hasOwnProperty,
        D = [],
        E = D.pop,
        F = D.push,
        G = D.push,
        H = D.slice,
        I = function(a, b) {
          for (var c = 0,
              d = a.length; c < d; c++)
            if (a[c] === b)
              return c;
          return -1;
        },
        J = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
        K = "[\\x20\\t\\r\\n\\f]",
        L = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
        M = "\\[" + K + "*(" + L + ")(?:" + K + "*([*^$|!~]?=)" + K + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + L + "))|)" + K + "*\\]",
        N = ":(" + L + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + M + ")*)|.*)\\)|)",
        O = new RegExp(K + "+", "g"),
        P = new RegExp("^" + K + "+|((?:^|[^\\\\])(?:\\\\.)*)" + K + "+$", "g"),
        Q = new RegExp("^" + K + "*," + K + "*"),
        R = new RegExp("^" + K + "*([>+~]|" + K + ")" + K + "*"),
        S = new RegExp("=" + K + "*([^\\]'\"]*?)" + K + "*\\]", "g"),
        T = new RegExp(N),
        U = new RegExp("^" + L + "$"),
        V = {
          ID: new RegExp("^#(" + L + ")"),
          CLASS: new RegExp("^\\.(" + L + ")"),
          TAG: new RegExp("^(" + L + "|[*])"),
          ATTR: new RegExp("^" + M),
          PSEUDO: new RegExp("^" + N),
          CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + K + "*(even|odd|(([+-]|)(\\d*)n|)" + K + "*(?:([+-]|)" + K + "*(\\d+)|))" + K + "*\\)|)", "i"),
          bool: new RegExp("^(?:" + J + ")$", "i"),
          needsContext: new RegExp("^" + K + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + K + "*((?:-\\d)?\\d*)" + K + "*\\)|)(?=[^-]|$)", "i")
        },
        W = /^(?:input|select|textarea|button)$/i,
        X = /^h\d$/i,
        Y = /^[^{]+\{\s*\[native \w/,
        Z = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        $ = /[+~]/,
        _ = new RegExp("\\\\([\\da-f]{1,6}" + K + "?|(" + K + ")|.)", "ig"),
        aa = function(a, b, c) {
          var d = "0x" + b - 65536;
          return d !== d || c ? b : d < 0 ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);
        },
        ba = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
        ca = function(a, b) {
          return b ? "\0" === a ? "\ufffd" : a.slice(0, -1) + "\\" + a.charCodeAt(a.length - 1).toString(16) + " " : "\\" + a;
        },
        da = function() {
          m();
        },
        ea = ta(function(a) {
          return a.disabled === !0 && ("form" in a || "label" in a);
        }, {
          dir: "parentNode",
          next: "legend"
        });
    try {
      G.apply(D = H.call(v.childNodes), v.childNodes), D[v.childNodes.length].nodeType;
    } catch (fa) {
      G = {apply: D.length ? function(a, b) {
          F.apply(a, H.call(b));
        } : function(a, b) {
          var c = a.length,
              d = 0;
          while (a[c++] = b[d++])
            ;
          a.length = c - 1;
        }};
    }
    function ga(a, b, d, e) {
      var f,
          h,
          j,
          k,
          l,
          o,
          r,
          s = b && b.ownerDocument,
          w = b ? b.nodeType : 9;
      if (d = d || [], "string" != typeof a || !a || 1 !== w && 9 !== w && 11 !== w)
        return d;
      if (!e && ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, p)) {
        if (11 !== w && (l = Z.exec(a)))
          if (f = l[1]) {
            if (9 === w) {
              if (!(j = b.getElementById(f)))
                return d;
              if (j.id === f)
                return d.push(j), d;
            } else if (s && (j = s.getElementById(f)) && t(b, j) && j.id === f)
              return d.push(j), d;
          } else {
            if (l[2])
              return G.apply(d, b.getElementsByTagName(a)), d;
            if ((f = l[3]) && c.getElementsByClassName && b.getElementsByClassName)
              return G.apply(d, b.getElementsByClassName(f)), d;
          }
        if (c.qsa && !A[a + " "] && (!q || !q.test(a))) {
          if (1 !== w)
            s = b, r = a;
          else if ("object" !== b.nodeName.toLowerCase()) {
            (k = b.getAttribute("id")) ? k = k.replace(ba, ca) : b.setAttribute("id", k = u), o = g(a), h = o.length;
            while (h--)
              o[h] = "#" + k + " " + sa(o[h]);
            r = o.join(","), s = $.test(a) && qa(b.parentNode) || b;
          }
          if (r)
            try {
              return G.apply(d, s.querySelectorAll(r)), d;
            } catch (x) {} finally {
              k === u && b.removeAttribute("id");
            }
        }
      }
      return i(a.replace(P, "$1"), b, d, e);
    }
    function ha() {
      var a = [];
      function b(c, e) {
        return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e;
      }
      return b;
    }
    function ia(a) {
      return a[u] = !0, a;
    }
    function ja(a) {
      var b = n.createElement("fieldset");
      try {
        return !!a(b);
      } catch (c) {
        return !1;
      } finally {
        b.parentNode && b.parentNode.removeChild(b), b = null;
      }
    }
    function ka(a, b) {
      var c = a.split("|"),
          e = c.length;
      while (e--)
        d.attrHandle[c[e]] = b;
    }
    function la(a, b) {
      var c = b && a,
          d = c && 1 === a.nodeType && 1 === b.nodeType && a.sourceIndex - b.sourceIndex;
      if (d)
        return d;
      if (c)
        while (c = c.nextSibling)
          if (c === b)
            return -1;
      return a ? 1 : -1;
    }
    function ma(a) {
      return function(b) {
        var c = b.nodeName.toLowerCase();
        return "input" === c && b.type === a;
      };
    }
    function na(a) {
      return function(b) {
        var c = b.nodeName.toLowerCase();
        return ("input" === c || "button" === c) && b.type === a;
      };
    }
    function oa(a) {
      return function(b) {
        return "form" in b ? b.parentNode && b.disabled === !1 ? "label" in b ? "label" in b.parentNode ? b.parentNode.disabled === a : b.disabled === a : b.isDisabled === a || b.isDisabled !== !a && ea(b) === a : b.disabled === a : "label" in b && b.disabled === a;
      };
    }
    function pa(a) {
      return ia(function(b) {
        return b = +b, ia(function(c, d) {
          var e,
              f = a([], c.length, b),
              g = f.length;
          while (g--)
            c[e = f[g]] && (c[e] = !(d[e] = c[e]));
        });
      });
    }
    function qa(a) {
      return a && "undefined" != typeof a.getElementsByTagName && a;
    }
    c = ga.support = {}, f = ga.isXML = function(a) {
      var b = a && (a.ownerDocument || a).documentElement;
      return !!b && "HTML" !== b.nodeName;
    }, m = ga.setDocument = function(a) {
      var b,
          e,
          g = a ? a.ownerDocument || a : v;
      return g !== n && 9 === g.nodeType && g.documentElement ? (n = g, o = n.documentElement, p = !f(n), v !== n && (e = n.defaultView) && e.top !== e && (e.addEventListener ? e.addEventListener("unload", da, !1) : e.attachEvent && e.attachEvent("onunload", da)), c.attributes = ja(function(a) {
        return a.className = "i", !a.getAttribute("className");
      }), c.getElementsByTagName = ja(function(a) {
        return a.appendChild(n.createComment("")), !a.getElementsByTagName("*").length;
      }), c.getElementsByClassName = Y.test(n.getElementsByClassName), c.getById = ja(function(a) {
        return o.appendChild(a).id = u, !n.getElementsByName || !n.getElementsByName(u).length;
      }), c.getById ? (d.filter.ID = function(a) {
        var b = a.replace(_, aa);
        return function(a) {
          return a.getAttribute("id") === b;
        };
      }, d.find.ID = function(a, b) {
        if ("undefined" != typeof b.getElementById && p) {
          var c = b.getElementById(a);
          return c ? [c] : [];
        }
      }) : (d.filter.ID = function(a) {
        var b = a.replace(_, aa);
        return function(a) {
          var c = "undefined" != typeof a.getAttributeNode && a.getAttributeNode("id");
          return c && c.value === b;
        };
      }, d.find.ID = function(a, b) {
        if ("undefined" != typeof b.getElementById && p) {
          var c,
              d,
              e,
              f = b.getElementById(a);
          if (f) {
            if (c = f.getAttributeNode("id"), c && c.value === a)
              return [f];
            e = b.getElementsByName(a), d = 0;
            while (f = e[d++])
              if (c = f.getAttributeNode("id"), c && c.value === a)
                return [f];
          }
          return [];
        }
      }), d.find.TAG = c.getElementsByTagName ? function(a, b) {
        return "undefined" != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : c.qsa ? b.querySelectorAll(a) : void 0;
      } : function(a, b) {
        var c,
            d = [],
            e = 0,
            f = b.getElementsByTagName(a);
        if ("*" === a) {
          while (c = f[e++])
            1 === c.nodeType && d.push(c);
          return d;
        }
        return f;
      }, d.find.CLASS = c.getElementsByClassName && function(a, b) {
        if ("undefined" != typeof b.getElementsByClassName && p)
          return b.getElementsByClassName(a);
      }, r = [], q = [], (c.qsa = Y.test(n.querySelectorAll)) && (ja(function(a) {
        o.appendChild(a).innerHTML = "<a id='" + u + "'></a><select id='" + u + "-\r\\' msallowcapture=''><option selected=''></option></select>", a.querySelectorAll("[msallowcapture^='']").length && q.push("[*^$]=" + K + "*(?:''|\"\")"), a.querySelectorAll("[selected]").length || q.push("\\[" + K + "*(?:value|" + J + ")"), a.querySelectorAll("[id~=" + u + "-]").length || q.push("~="), a.querySelectorAll(":checked").length || q.push(":checked"), a.querySelectorAll("a#" + u + "+*").length || q.push(".#.+[+~]");
      }), ja(function(a) {
        a.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
        var b = n.createElement("input");
        b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && q.push("name" + K + "*[*^$|!~]?="), 2 !== a.querySelectorAll(":enabled").length && q.push(":enabled", ":disabled"), o.appendChild(a).disabled = !0, 2 !== a.querySelectorAll(":disabled").length && q.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), q.push(",.*:");
      })), (c.matchesSelector = Y.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ja(function(a) {
        c.disconnectedMatch = s.call(a, "*"), s.call(a, "[s!='']:x"), r.push("!=", N);
      }), q = q.length && new RegExp(q.join("|")), r = r.length && new RegExp(r.join("|")), b = Y.test(o.compareDocumentPosition), t = b || Y.test(o.contains) ? function(a, b) {
        var c = 9 === a.nodeType ? a.documentElement : a,
            d = b && b.parentNode;
        return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));
      } : function(a, b) {
        if (b)
          while (b = b.parentNode)
            if (b === a)
              return !0;
        return !1;
      }, B = b ? function(a, b) {
        if (a === b)
          return l = !0, 0;
        var d = !a.compareDocumentPosition - !b.compareDocumentPosition;
        return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === n || a.ownerDocument === v && t(v, a) ? -1 : b === n || b.ownerDocument === v && t(v, b) ? 1 : k ? I(k, a) - I(k, b) : 0 : 4 & d ? -1 : 1);
      } : function(a, b) {
        if (a === b)
          return l = !0, 0;
        var c,
            d = 0,
            e = a.parentNode,
            f = b.parentNode,
            g = [a],
            h = [b];
        if (!e || !f)
          return a === n ? -1 : b === n ? 1 : e ? -1 : f ? 1 : k ? I(k, a) - I(k, b) : 0;
        if (e === f)
          return la(a, b);
        c = a;
        while (c = c.parentNode)
          g.unshift(c);
        c = b;
        while (c = c.parentNode)
          h.unshift(c);
        while (g[d] === h[d])
          d++;
        return d ? la(g[d], h[d]) : g[d] === v ? -1 : h[d] === v ? 1 : 0;
      }, n) : n;
    }, ga.matches = function(a, b) {
      return ga(a, null, null, b);
    }, ga.matchesSelector = function(a, b) {
      if ((a.ownerDocument || a) !== n && m(a), b = b.replace(S, "='$1']"), c.matchesSelector && p && !A[b + " "] && (!r || !r.test(b)) && (!q || !q.test(b)))
        try {
          var d = s.call(a, b);
          if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType)
            return d;
        } catch (e) {}
      return ga(b, n, null, [a]).length > 0;
    }, ga.contains = function(a, b) {
      return (a.ownerDocument || a) !== n && m(a), t(a, b);
    }, ga.attr = function(a, b) {
      (a.ownerDocument || a) !== n && m(a);
      var e = d.attrHandle[b.toLowerCase()],
          f = e && C.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;
      return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;
    }, ga.escape = function(a) {
      return (a + "").replace(ba, ca);
    }, ga.error = function(a) {
      throw new Error("Syntax error, unrecognized expression: " + a);
    }, ga.uniqueSort = function(a) {
      var b,
          d = [],
          e = 0,
          f = 0;
      if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {
        while (b = a[f++])
          b === a[f] && (e = d.push(f));
        while (e--)
          a.splice(d[e], 1);
      }
      return k = null, a;
    }, e = ga.getText = function(a) {
      var b,
          c = "",
          d = 0,
          f = a.nodeType;
      if (f) {
        if (1 === f || 9 === f || 11 === f) {
          if ("string" == typeof a.textContent)
            return a.textContent;
          for (a = a.firstChild; a; a = a.nextSibling)
            c += e(a);
        } else if (3 === f || 4 === f)
          return a.nodeValue;
      } else
        while (b = a[d++])
          c += e(b);
      return c;
    }, d = ga.selectors = {
      cacheLength: 50,
      createPseudo: ia,
      match: V,
      attrHandle: {},
      find: {},
      relative: {
        ">": {
          dir: "parentNode",
          first: !0
        },
        " ": {dir: "parentNode"},
        "+": {
          dir: "previousSibling",
          first: !0
        },
        "~": {dir: "previousSibling"}
      },
      preFilter: {
        ATTR: function(a) {
          return a[1] = a[1].replace(_, aa), a[3] = (a[3] || a[4] || a[5] || "").replace(_, aa), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4);
        },
        CHILD: function(a) {
          return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || ga.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && ga.error(a[0]), a;
        },
        PSEUDO: function(a) {
          var b,
              c = !a[6] && a[2];
          return V.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && T.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3));
        }
      },
      filter: {
        TAG: function(a) {
          var b = a.replace(_, aa).toLowerCase();
          return "*" === a ? function() {
            return !0;
          } : function(a) {
            return a.nodeName && a.nodeName.toLowerCase() === b;
          };
        },
        CLASS: function(a) {
          var b = y[a + " "];
          return b || (b = new RegExp("(^|" + K + ")" + a + "(" + K + "|$)")) && y(a, function(a) {
            return b.test("string" == typeof a.className && a.className || "undefined" != typeof a.getAttribute && a.getAttribute("class") || "");
          });
        },
        ATTR: function(a, b, c) {
          return function(d) {
            var e = ga.attr(d, a);
            return null == e ? "!=" === b : !b || (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c) > -1 : "$=" === b ? c && e.slice(-c.length) === c : "~=" === b ? (" " + e.replace(O, " ") + " ").indexOf(c) > -1 : "|=" === b && (e === c || e.slice(0, c.length + 1) === c + "-"));
          };
        },
        CHILD: function(a, b, c, d, e) {
          var f = "nth" !== a.slice(0, 3),
              g = "last" !== a.slice(-4),
              h = "of-type" === b;
          return 1 === d && 0 === e ? function(a) {
            return !!a.parentNode;
          } : function(b, c, i) {
            var j,
                k,
                l,
                m,
                n,
                o,
                p = f !== g ? "nextSibling" : "previousSibling",
                q = b.parentNode,
                r = h && b.nodeName.toLowerCase(),
                s = !i && !h,
                t = !1;
            if (q) {
              if (f) {
                while (p) {
                  m = b;
                  while (m = m[p])
                    if (h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType)
                      return !1;
                  o = p = "only" === a && !o && "nextSibling";
                }
                return !0;
              }
              if (o = [g ? q.firstChild : q.lastChild], g && s) {
                m = q, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n && j[2], m = n && q.childNodes[n];
                while (m = ++n && m && m[p] || (t = n = 0) || o.pop())
                  if (1 === m.nodeType && ++t && m === b) {
                    k[a] = [w, n, t];
                    break;
                  }
              } else if (s && (m = b, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n), t === !1)
                while (m = ++n && m && m[p] || (t = n = 0) || o.pop())
                  if ((h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) && ++t && (s && (l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), k[a] = [w, t]), m === b))
                    break;
              return t -= e, t === d || t % d === 0 && t / d >= 0;
            }
          };
        },
        PSEUDO: function(a, b) {
          var c,
              e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || ga.error("unsupported pseudo: " + a);
          return e[u] ? e(b) : e.length > 1 ? (c = [a, a, "", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? ia(function(a, c) {
            var d,
                f = e(a, b),
                g = f.length;
            while (g--)
              d = I(a, f[g]), a[d] = !(c[d] = f[g]);
          }) : function(a) {
            return e(a, 0, c);
          }) : e;
        }
      },
      pseudos: {
        not: ia(function(a) {
          var b = [],
              c = [],
              d = h(a.replace(P, "$1"));
          return d[u] ? ia(function(a, b, c, e) {
            var f,
                g = d(a, null, e, []),
                h = a.length;
            while (h--)
              (f = g[h]) && (a[h] = !(b[h] = f));
          }) : function(a, e, f) {
            return b[0] = a, d(b, null, f, c), b[0] = null, !c.pop();
          };
        }),
        has: ia(function(a) {
          return function(b) {
            return ga(a, b).length > 0;
          };
        }),
        contains: ia(function(a) {
          return a = a.replace(_, aa), function(b) {
            return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;
          };
        }),
        lang: ia(function(a) {
          return U.test(a || "") || ga.error("unsupported lang: " + a), a = a.replace(_, aa).toLowerCase(), function(b) {
            var c;
            do
              if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang"))
                return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + "-");
 while ((b = b.parentNode) && 1 === b.nodeType);
            return !1;
          };
        }),
        target: function(b) {
          var c = a.location && a.location.hash;
          return c && c.slice(1) === b.id;
        },
        root: function(a) {
          return a === o;
        },
        focus: function(a) {
          return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);
        },
        enabled: oa(!1),
        disabled: oa(!0),
        checked: function(a) {
          var b = a.nodeName.toLowerCase();
          return "input" === b && !!a.checked || "option" === b && !!a.selected;
        },
        selected: function(a) {
          return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;
        },
        empty: function(a) {
          for (a = a.firstChild; a; a = a.nextSibling)
            if (a.nodeType < 6)
              return !1;
          return !0;
        },
        parent: function(a) {
          return !d.pseudos.empty(a);
        },
        header: function(a) {
          return X.test(a.nodeName);
        },
        input: function(a) {
          return W.test(a.nodeName);
        },
        button: function(a) {
          var b = a.nodeName.toLowerCase();
          return "input" === b && "button" === a.type || "button" === b;
        },
        text: function(a) {
          var b;
          return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase());
        },
        first: pa(function() {
          return [0];
        }),
        last: pa(function(a, b) {
          return [b - 1];
        }),
        eq: pa(function(a, b, c) {
          return [c < 0 ? c + b : c];
        }),
        even: pa(function(a, b) {
          for (var c = 0; c < b; c += 2)
            a.push(c);
          return a;
        }),
        odd: pa(function(a, b) {
          for (var c = 1; c < b; c += 2)
            a.push(c);
          return a;
        }),
        lt: pa(function(a, b, c) {
          for (var d = c < 0 ? c + b : c; --d >= 0; )
            a.push(d);
          return a;
        }),
        gt: pa(function(a, b, c) {
          for (var d = c < 0 ? c + b : c; ++d < b; )
            a.push(d);
          return a;
        })
      }
    }, d.pseudos.nth = d.pseudos.eq;
    for (b in {
      radio: !0,
      checkbox: !0,
      file: !0,
      password: !0,
      image: !0
    })
      d.pseudos[b] = ma(b);
    for (b in {
      submit: !0,
      reset: !0
    })
      d.pseudos[b] = na(b);
    function ra() {}
    ra.prototype = d.filters = d.pseudos, d.setFilters = new ra, g = ga.tokenize = function(a, b) {
      var c,
          e,
          f,
          g,
          h,
          i,
          j,
          k = z[a + " "];
      if (k)
        return b ? 0 : k.slice(0);
      h = a, i = [], j = d.preFilter;
      while (h) {
        c && !(e = Q.exec(h)) || (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = R.exec(h)) && (c = e.shift(), f.push({
          value: c,
          type: e[0].replace(P, " ")
        }), h = h.slice(c.length));
        for (g in d.filter)
          !(e = V[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({
            value: c,
            type: g,
            matches: e
          }), h = h.slice(c.length));
        if (!c)
          break;
      }
      return b ? h.length : h ? ga.error(a) : z(a, i).slice(0);
    };
    function sa(a) {
      for (var b = 0,
          c = a.length,
          d = ""; b < c; b++)
        d += a[b].value;
      return d;
    }
    function ta(a, b, c) {
      var d = b.dir,
          e = b.next,
          f = e || d,
          g = c && "parentNode" === f,
          h = x++;
      return b.first ? function(b, c, e) {
        while (b = b[d])
          if (1 === b.nodeType || g)
            return a(b, c, e);
        return !1;
      } : function(b, c, i) {
        var j,
            k,
            l,
            m = [w, h];
        if (i) {
          while (b = b[d])
            if ((1 === b.nodeType || g) && a(b, c, i))
              return !0;
        } else
          while (b = b[d])
            if (1 === b.nodeType || g)
              if (l = b[u] || (b[u] = {}), k = l[b.uniqueID] || (l[b.uniqueID] = {}), e && e === b.nodeName.toLowerCase())
                b = b[d] || b;
              else {
                if ((j = k[f]) && j[0] === w && j[1] === h)
                  return m[2] = j[2];
                if (k[f] = m, m[2] = a(b, c, i))
                  return !0;
              }
        return !1;
      };
    }
    function ua(a) {
      return a.length > 1 ? function(b, c, d) {
        var e = a.length;
        while (e--)
          if (!a[e](b, c, d))
            return !1;
        return !0;
      } : a[0];
    }
    function va(a, b, c) {
      for (var d = 0,
          e = b.length; d < e; d++)
        ga(a, b[d], c);
      return c;
    }
    function wa(a, b, c, d, e) {
      for (var f,
          g = [],
          h = 0,
          i = a.length,
          j = null != b; h < i; h++)
        (f = a[h]) && (c && !c(f, d, e) || (g.push(f), j && b.push(h)));
      return g;
    }
    function xa(a, b, c, d, e, f) {
      return d && !d[u] && (d = xa(d)), e && !e[u] && (e = xa(e, f)), ia(function(f, g, h, i) {
        var j,
            k,
            l,
            m = [],
            n = [],
            o = g.length,
            p = f || va(b || "*", h.nodeType ? [h] : h, []),
            q = !a || !f && b ? p : wa(p, m, a, h, i),
            r = c ? e || (f ? a : o || d) ? [] : g : q;
        if (c && c(q, r, h, i), d) {
          j = wa(r, n), d(j, [], h, i), k = j.length;
          while (k--)
            (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));
        }
        if (f) {
          if (e || a) {
            if (e) {
              j = [], k = r.length;
              while (k--)
                (l = r[k]) && j.push(q[k] = l);
              e(null, r = [], j, i);
            }
            k = r.length;
            while (k--)
              (l = r[k]) && (j = e ? I(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));
          }
        } else
          r = wa(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : G.apply(g, r);
      });
    }
    function ya(a) {
      for (var b,
          c,
          e,
          f = a.length,
          g = d.relative[a[0].type],
          h = g || d.relative[" "],
          i = g ? 1 : 0,
          k = ta(function(a) {
            return a === b;
          }, h, !0),
          l = ta(function(a) {
            return I(b, a) > -1;
          }, h, !0),
          m = [function(a, c, d) {
            var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));
            return b = null, e;
          }]; i < f; i++)
        if (c = d.relative[a[i].type])
          m = [ta(ua(m), c)];
        else {
          if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {
            for (e = ++i; e < f; e++)
              if (d.relative[a[e].type])
                break;
            return xa(i > 1 && ua(m), i > 1 && sa(a.slice(0, i - 1).concat({value: " " === a[i - 2].type ? "*" : ""})).replace(P, "$1"), c, i < e && ya(a.slice(i, e)), e < f && ya(a = a.slice(e)), e < f && sa(a));
          }
          m.push(c);
        }
      return ua(m);
    }
    function za(a, b) {
      var c = b.length > 0,
          e = a.length > 0,
          f = function(f, g, h, i, k) {
            var l,
                o,
                q,
                r = 0,
                s = "0",
                t = f && [],
                u = [],
                v = j,
                x = f || e && d.find.TAG("*", k),
                y = w += null == v ? 1 : Math.random() || .1,
                z = x.length;
            for (k && (j = g === n || g || k); s !== z && null != (l = x[s]); s++) {
              if (e && l) {
                o = 0, g || l.ownerDocument === n || (m(l), h = !p);
                while (q = a[o++])
                  if (q(l, g || n, h)) {
                    i.push(l);
                    break;
                  }
                k && (w = y);
              }
              c && ((l = !q && l) && r--, f && t.push(l));
            }
            if (r += s, c && s !== r) {
              o = 0;
              while (q = b[o++])
                q(t, u, g, h);
              if (f) {
                if (r > 0)
                  while (s--)
                    t[s] || u[s] || (u[s] = E.call(i));
                u = wa(u);
              }
              G.apply(i, u), k && !f && u.length > 0 && r + b.length > 1 && ga.uniqueSort(i);
            }
            return k && (w = y, j = v), t;
          };
      return c ? ia(f) : f;
    }
    return h = ga.compile = function(a, b) {
      var c,
          d = [],
          e = [],
          f = A[a + " "];
      if (!f) {
        b || (b = g(a)), c = b.length;
        while (c--)
          f = ya(b[c]), f[u] ? d.push(f) : e.push(f);
        f = A(a, za(e, d)), f.selector = a;
      }
      return f;
    }, i = ga.select = function(a, b, c, e) {
      var f,
          i,
          j,
          k,
          l,
          m = "function" == typeof a && a,
          n = !e && g(a = m.selector || a);
      if (c = c || [], 1 === n.length) {
        if (i = n[0] = n[0].slice(0), i.length > 2 && "ID" === (j = i[0]).type && 9 === b.nodeType && p && d.relative[i[1].type]) {
          if (b = (d.find.ID(j.matches[0].replace(_, aa), b) || [])[0], !b)
            return c;
          m && (b = b.parentNode), a = a.slice(i.shift().value.length);
        }
        f = V.needsContext.test(a) ? 0 : i.length;
        while (f--) {
          if (j = i[f], d.relative[k = j.type])
            break;
          if ((l = d.find[k]) && (e = l(j.matches[0].replace(_, aa), $.test(i[0].type) && qa(b.parentNode) || b))) {
            if (i.splice(f, 1), a = e.length && sa(i), !a)
              return G.apply(c, e), c;
            break;
          }
        }
      }
      return (m || h(a, n))(e, b, !p, c, !b || $.test(a) && qa(b.parentNode) || b), c;
    }, c.sortStable = u.split("").sort(B).join("") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ja(function(a) {
      return 1 & a.compareDocumentPosition(n.createElement("fieldset"));
    }), ja(function(a) {
      return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href");
    }) || ka("type|href|height|width", function(a, b, c) {
      if (!c)
        return a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2);
    }), c.attributes && ja(function(a) {
      return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value");
    }) || ka("value", function(a, b, c) {
      if (!c && "input" === a.nodeName.toLowerCase())
        return a.defaultValue;
    }), ja(function(a) {
      return null == a.getAttribute("disabled");
    }) || ka(J, function(a, b, c) {
      var d;
      if (!c)
        return a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;
    }), ga;
  }(a);
  r.find = x, r.expr = x.selectors, r.expr[":"] = r.expr.pseudos, r.uniqueSort = r.unique = x.uniqueSort, r.text = x.getText, r.isXMLDoc = x.isXML, r.contains = x.contains, r.escapeSelector = x.escape;
  var y = function(a, b, c) {
    var d = [],
        e = void 0 !== c;
    while ((a = a[b]) && 9 !== a.nodeType)
      if (1 === a.nodeType) {
        if (e && r(a).is(c))
          break;
        d.push(a);
      }
    return d;
  },
      z = function(a, b) {
        for (var c = []; a; a = a.nextSibling)
          1 === a.nodeType && a !== b && c.push(a);
        return c;
      },
      A = r.expr.match.needsContext,
      B = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,
      C = /^.[^:#\[\.,]*$/;
  function D(a, b, c) {
    return r.isFunction(b) ? r.grep(a, function(a, d) {
      return !!b.call(a, d, a) !== c;
    }) : b.nodeType ? r.grep(a, function(a) {
      return a === b !== c;
    }) : "string" != typeof b ? r.grep(a, function(a) {
      return i.call(b, a) > -1 !== c;
    }) : C.test(b) ? r.filter(b, a, c) : (b = r.filter(b, a), r.grep(a, function(a) {
      return i.call(b, a) > -1 !== c && 1 === a.nodeType;
    }));
  }
  r.filter = function(a, b, c) {
    var d = b[0];
    return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? r.find.matchesSelector(d, a) ? [d] : [] : r.find.matches(a, r.grep(b, function(a) {
      return 1 === a.nodeType;
    }));
  }, r.fn.extend({
    find: function(a) {
      var b,
          c,
          d = this.length,
          e = this;
      if ("string" != typeof a)
        return this.pushStack(r(a).filter(function() {
          for (b = 0; b < d; b++)
            if (r.contains(e[b], this))
              return !0;
        }));
      for (c = this.pushStack([]), b = 0; b < d; b++)
        r.find(a, e[b], c);
      return d > 1 ? r.uniqueSort(c) : c;
    },
    filter: function(a) {
      return this.pushStack(D(this, a || [], !1));
    },
    not: function(a) {
      return this.pushStack(D(this, a || [], !0));
    },
    is: function(a) {
      return !!D(this, "string" == typeof a && A.test(a) ? r(a) : a || [], !1).length;
    }
  });
  var E,
      F = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
      G = r.fn.init = function(a, b, c) {
        var e,
            f;
        if (!a)
          return this;
        if (c = c || E, "string" == typeof a) {
          if (e = "<" === a[0] && ">" === a[a.length - 1] && a.length >= 3 ? [null, a, null] : F.exec(a), !e || !e[1] && b)
            return !b || b.jquery ? (b || c).find(a) : this.constructor(b).find(a);
          if (e[1]) {
            if (b = b instanceof r ? b[0] : b, r.merge(this, r.parseHTML(e[1], b && b.nodeType ? b.ownerDocument || b : d, !0)), B.test(e[1]) && r.isPlainObject(b))
              for (e in b)
                r.isFunction(this[e]) ? this[e](b[e]) : this.attr(e, b[e]);
            return this;
          }
          return f = d.getElementById(e[2]), f && (this[0] = f, this.length = 1), this;
        }
        return a.nodeType ? (this[0] = a, this.length = 1, this) : r.isFunction(a) ? void 0 !== c.ready ? c.ready(a) : a(r) : r.makeArray(a, this);
      };
  G.prototype = r.fn, E = r(d);
  var H = /^(?:parents|prev(?:Until|All))/,
      I = {
        children: !0,
        contents: !0,
        next: !0,
        prev: !0
      };
  r.fn.extend({
    has: function(a) {
      var b = r(a, this),
          c = b.length;
      return this.filter(function() {
        for (var a = 0; a < c; a++)
          if (r.contains(this, b[a]))
            return !0;
      });
    },
    closest: function(a, b) {
      var c,
          d = 0,
          e = this.length,
          f = [],
          g = "string" != typeof a && r(a);
      if (!A.test(a))
        for (; d < e; d++)
          for (c = this[d]; c && c !== b; c = c.parentNode)
            if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && r.find.matchesSelector(c, a))) {
              f.push(c);
              break;
            }
      return this.pushStack(f.length > 1 ? r.uniqueSort(f) : f);
    },
    index: function(a) {
      return a ? "string" == typeof a ? i.call(r(a), this[0]) : i.call(this, a.jquery ? a[0] : a) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
    },
    add: function(a, b) {
      return this.pushStack(r.uniqueSort(r.merge(this.get(), r(a, b))));
    },
    addBack: function(a) {
      return this.add(null == a ? this.prevObject : this.prevObject.filter(a));
    }
  });
  function J(a, b) {
    while ((a = a[b]) && 1 !== a.nodeType)
      ;
    return a;
  }
  r.each({
    parent: function(a) {
      var b = a.parentNode;
      return b && 11 !== b.nodeType ? b : null;
    },
    parents: function(a) {
      return y(a, "parentNode");
    },
    parentsUntil: function(a, b, c) {
      return y(a, "parentNode", c);
    },
    next: function(a) {
      return J(a, "nextSibling");
    },
    prev: function(a) {
      return J(a, "previousSibling");
    },
    nextAll: function(a) {
      return y(a, "nextSibling");
    },
    prevAll: function(a) {
      return y(a, "previousSibling");
    },
    nextUntil: function(a, b, c) {
      return y(a, "nextSibling", c);
    },
    prevUntil: function(a, b, c) {
      return y(a, "previousSibling", c);
    },
    siblings: function(a) {
      return z((a.parentNode || {}).firstChild, a);
    },
    children: function(a) {
      return z(a.firstChild);
    },
    contents: function(a) {
      return a.contentDocument || r.merge([], a.childNodes);
    }
  }, function(a, b) {
    r.fn[a] = function(c, d) {
      var e = r.map(this, b, c);
      return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = r.filter(d, e)), this.length > 1 && (I[a] || r.uniqueSort(e), H.test(a) && e.reverse()), this.pushStack(e);
    };
  });
  var K = /[^\x20\t\r\n\f]+/g;
  function L(a) {
    var b = {};
    return r.each(a.match(K) || [], function(a, c) {
      b[c] = !0;
    }), b;
  }
  r.Callbacks = function(a) {
    a = "string" == typeof a ? L(a) : r.extend({}, a);
    var b,
        c,
        d,
        e,
        f = [],
        g = [],
        h = -1,
        i = function() {
          for (e = a.once, d = b = !0; g.length; h = -1) {
            c = g.shift();
            while (++h < f.length)
              f[h].apply(c[0], c[1]) === !1 && a.stopOnFalse && (h = f.length, c = !1);
          }
          a.memory || (c = !1), b = !1, e && (f = c ? [] : "");
        },
        j = {
          add: function() {
            return f && (c && !b && (h = f.length - 1, g.push(c)), function d(b) {
              r.each(b, function(b, c) {
                r.isFunction(c) ? a.unique && j.has(c) || f.push(c) : c && c.length && "string" !== r.type(c) && d(c);
              });
            }(arguments), c && !b && i()), this;
          },
          remove: function() {
            return r.each(arguments, function(a, b) {
              var c;
              while ((c = r.inArray(b, f, c)) > -1)
                f.splice(c, 1), c <= h && h--;
            }), this;
          },
          has: function(a) {
            return a ? r.inArray(a, f) > -1 : f.length > 0;
          },
          empty: function() {
            return f && (f = []), this;
          },
          disable: function() {
            return e = g = [], f = c = "", this;
          },
          disabled: function() {
            return !f;
          },
          lock: function() {
            return e = g = [], c || b || (f = c = ""), this;
          },
          locked: function() {
            return !!e;
          },
          fireWith: function(a, c) {
            return e || (c = c || [], c = [a, c.slice ? c.slice() : c], g.push(c), b || i()), this;
          },
          fire: function() {
            return j.fireWith(this, arguments), this;
          },
          fired: function() {
            return !!d;
          }
        };
    return j;
  };
  function M(a) {
    return a;
  }
  function N(a) {
    throw a;
  }
  function O(a, b, c) {
    var d;
    try {
      a && r.isFunction(d = a.promise) ? d.call(a).done(b).fail(c) : a && r.isFunction(d = a.then) ? d.call(a, b, c) : b.call(void 0, a);
    } catch (a) {
      c.call(void 0, a);
    }
  }
  r.extend({
    Deferred: function(b) {
      var c = [["notify", "progress", r.Callbacks("memory"), r.Callbacks("memory"), 2], ["resolve", "done", r.Callbacks("once memory"), r.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", r.Callbacks("once memory"), r.Callbacks("once memory"), 1, "rejected"]],
          d = "pending",
          e = {
            state: function() {
              return d;
            },
            always: function() {
              return f.done(arguments).fail(arguments), this;
            },
            "catch": function(a) {
              return e.then(null, a);
            },
            pipe: function() {
              var a = arguments;
              return r.Deferred(function(b) {
                r.each(c, function(c, d) {
                  var e = r.isFunction(a[d[4]]) && a[d[4]];
                  f[d[1]](function() {
                    var a = e && e.apply(this, arguments);
                    a && r.isFunction(a.promise) ? a.promise().progress(b.notify).done(b.resolve).fail(b.reject) : b[d[0] + "With"](this, e ? [a] : arguments);
                  });
                }), a = null;
              }).promise();
            },
            then: function(b, d, e) {
              var f = 0;
              function g(b, c, d, e) {
                return function() {
                  var h = this,
                      i = arguments,
                      j = function() {
                        var a,
                            j;
                        if (!(b < f)) {
                          if (a = d.apply(h, i), a === c.promise())
                            throw new TypeError("Thenable self-resolution");
                          j = a && ("object" == typeof a || "function" == typeof a) && a.then, r.isFunction(j) ? e ? j.call(a, g(f, c, M, e), g(f, c, N, e)) : (f++, j.call(a, g(f, c, M, e), g(f, c, N, e), g(f, c, M, c.notifyWith))) : (d !== M && (h = void 0, i = [a]), (e || c.resolveWith)(h, i));
                        }
                      },
                      k = e ? j : function() {
                        try {
                          j();
                        } catch (a) {
                          r.Deferred.exceptionHook && r.Deferred.exceptionHook(a, k.stackTrace), b + 1 >= f && (d !== N && (h = void 0, i = [a]), c.rejectWith(h, i));
                        }
                      };
                  b ? k() : (r.Deferred.getStackHook && (k.stackTrace = r.Deferred.getStackHook()), a.setTimeout(k));
                };
              }
              return r.Deferred(function(a) {
                c[0][3].add(g(0, a, r.isFunction(e) ? e : M, a.notifyWith)), c[1][3].add(g(0, a, r.isFunction(b) ? b : M)), c[2][3].add(g(0, a, r.isFunction(d) ? d : N));
              }).promise();
            },
            promise: function(a) {
              return null != a ? r.extend(a, e) : e;
            }
          },
          f = {};
      return r.each(c, function(a, b) {
        var g = b[2],
            h = b[5];
        e[b[1]] = g.add, h && g.add(function() {
          d = h;
        }, c[3 - a][2].disable, c[0][2].lock), g.add(b[3].fire), f[b[0]] = function() {
          return f[b[0] + "With"](this === f ? void 0 : this, arguments), this;
        }, f[b[0] + "With"] = g.fireWith;
      }), e.promise(f), b && b.call(f, f), f;
    },
    when: function(a) {
      var b = arguments.length,
          c = b,
          d = Array(c),
          e = f.call(arguments),
          g = r.Deferred(),
          h = function(a) {
            return function(c) {
              d[a] = this, e[a] = arguments.length > 1 ? f.call(arguments) : c, --b || g.resolveWith(d, e);
            };
          };
      if (b <= 1 && (O(a, g.done(h(c)).resolve, g.reject), "pending" === g.state() || r.isFunction(e[c] && e[c].then)))
        return g.then();
      while (c--)
        O(e[c], h(c), g.reject);
      return g.promise();
    }
  });
  var P = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
  r.Deferred.exceptionHook = function(b, c) {
    a.console && a.console.warn && b && P.test(b.name) && a.console.warn("jQuery.Deferred exception: " + b.message, b.stack, c);
  }, r.readyException = function(b) {
    a.setTimeout(function() {
      throw b;
    });
  };
  var Q = r.Deferred();
  r.fn.ready = function(a) {
    return Q.then(a)["catch"](function(a) {
      r.readyException(a);
    }), this;
  }, r.extend({
    isReady: !1,
    readyWait: 1,
    holdReady: function(a) {
      a ? r.readyWait++ : r.ready(!0);
    },
    ready: function(a) {
      (a === !0 ? --r.readyWait : r.isReady) || (r.isReady = !0, a !== !0 && --r.readyWait > 0 || Q.resolveWith(d, [r]));
    }
  }), r.ready.then = Q.then;
  function R() {
    d.removeEventListener("DOMContentLoaded", R), a.removeEventListener("load", R), r.ready();
  }
  "complete" === d.readyState || "loading" !== d.readyState && !d.documentElement.doScroll ? a.setTimeout(r.ready) : (d.addEventListener("DOMContentLoaded", R), a.addEventListener("load", R));
  var S = function(a, b, c, d, e, f, g) {
    var h = 0,
        i = a.length,
        j = null == c;
    if ("object" === r.type(c)) {
      e = !0;
      for (h in c)
        S(a, b, h, c[h], !0, f, g);
    } else if (void 0 !== d && (e = !0, r.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function(a, b, c) {
      return j.call(r(a), c);
    })), b))
      for (; h < i; h++)
        b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
    return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;
  },
      T = function(a) {
        return 1 === a.nodeType || 9 === a.nodeType || !+a.nodeType;
      };
  function U() {
    this.expando = r.expando + U.uid++;
  }
  U.uid = 1, U.prototype = {
    cache: function(a) {
      var b = a[this.expando];
      return b || (b = {}, T(a) && (a.nodeType ? a[this.expando] = b : Object.defineProperty(a, this.expando, {
        value: b,
        configurable: !0
      }))), b;
    },
    set: function(a, b, c) {
      var d,
          e = this.cache(a);
      if ("string" == typeof b)
        e[r.camelCase(b)] = c;
      else
        for (d in b)
          e[r.camelCase(d)] = b[d];
      return e;
    },
    get: function(a, b) {
      return void 0 === b ? this.cache(a) : a[this.expando] && a[this.expando][r.camelCase(b)];
    },
    access: function(a, b, c) {
      return void 0 === b || b && "string" == typeof b && void 0 === c ? this.get(a, b) : (this.set(a, b, c), void 0 !== c ? c : b);
    },
    remove: function(a, b) {
      var c,
          d = a[this.expando];
      if (void 0 !== d) {
        if (void 0 !== b) {
          r.isArray(b) ? b = b.map(r.camelCase) : (b = r.camelCase(b), b = b in d ? [b] : b.match(K) || []), c = b.length;
          while (c--)
            delete d[b[c]];
        }
        (void 0 === b || r.isEmptyObject(d)) && (a.nodeType ? a[this.expando] = void 0 : delete a[this.expando]);
      }
    },
    hasData: function(a) {
      var b = a[this.expando];
      return void 0 !== b && !r.isEmptyObject(b);
    }
  };
  var V = new U,
      W = new U,
      X = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      Y = /[A-Z]/g;
  function Z(a) {
    return "true" === a || "false" !== a && ("null" === a ? null : a === +a + "" ? +a : X.test(a) ? JSON.parse(a) : a);
  }
  function $(a, b, c) {
    var d;
    if (void 0 === c && 1 === a.nodeType)
      if (d = "data-" + b.replace(Y, "-$&").toLowerCase(), c = a.getAttribute(d), "string" == typeof c) {
        try {
          c = Z(c);
        } catch (e) {}
        W.set(a, b, c);
      } else
        c = void 0;
    return c;
  }
  r.extend({
    hasData: function(a) {
      return W.hasData(a) || V.hasData(a);
    },
    data: function(a, b, c) {
      return W.access(a, b, c);
    },
    removeData: function(a, b) {
      W.remove(a, b);
    },
    _data: function(a, b, c) {
      return V.access(a, b, c);
    },
    _removeData: function(a, b) {
      V.remove(a, b);
    }
  }), r.fn.extend({
    data: function(a, b) {
      var c,
          d,
          e,
          f = this[0],
          g = f && f.attributes;
      if (void 0 === a) {
        if (this.length && (e = W.get(f), 1 === f.nodeType && !V.get(f, "hasDataAttrs"))) {
          c = g.length;
          while (c--)
            g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = r.camelCase(d.slice(5)), $(f, d, e[d])));
          V.set(f, "hasDataAttrs", !0);
        }
        return e;
      }
      return "object" == typeof a ? this.each(function() {
        W.set(this, a);
      }) : S(this, function(b) {
        var c;
        if (f && void 0 === b) {
          if (c = W.get(f, a), void 0 !== c)
            return c;
          if (c = $(f, a), void 0 !== c)
            return c;
        } else
          this.each(function() {
            W.set(this, a, b);
          });
      }, null, b, arguments.length > 1, null, !0);
    },
    removeData: function(a) {
      return this.each(function() {
        W.remove(this, a);
      });
    }
  }), r.extend({
    queue: function(a, b, c) {
      var d;
      if (a)
        return b = (b || "fx") + "queue", d = V.get(a, b), c && (!d || r.isArray(c) ? d = V.access(a, b, r.makeArray(c)) : d.push(c)), d || [];
    },
    dequeue: function(a, b) {
      b = b || "fx";
      var c = r.queue(a, b),
          d = c.length,
          e = c.shift(),
          f = r._queueHooks(a, b),
          g = function() {
            r.dequeue(a, b);
          };
      "inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();
    },
    _queueHooks: function(a, b) {
      var c = b + "queueHooks";
      return V.get(a, c) || V.access(a, c, {empty: r.Callbacks("once memory").add(function() {
          V.remove(a, [b + "queue", c]);
        })});
    }
  }), r.fn.extend({
    queue: function(a, b) {
      var c = 2;
      return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? r.queue(this[0], a) : void 0 === b ? this : this.each(function() {
        var c = r.queue(this, a, b);
        r._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && r.dequeue(this, a);
      });
    },
    dequeue: function(a) {
      return this.each(function() {
        r.dequeue(this, a);
      });
    },
    clearQueue: function(a) {
      return this.queue(a || "fx", []);
    },
    promise: function(a, b) {
      var c,
          d = 1,
          e = r.Deferred(),
          f = this,
          g = this.length,
          h = function() {
            --d || e.resolveWith(f, [f]);
          };
      "string" != typeof a && (b = a, a = void 0), a = a || "fx";
      while (g--)
        c = V.get(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h));
      return h(), e.promise(b);
    }
  });
  var _ = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
      aa = new RegExp("^(?:([+-])=|)(" + _ + ")([a-z%]*)$", "i"),
      ba = ["Top", "Right", "Bottom", "Left"],
      ca = function(a, b) {
        return a = b || a, "none" === a.style.display || "" === a.style.display && r.contains(a.ownerDocument, a) && "none" === r.css(a, "display");
      },
      da = function(a, b, c, d) {
        var e,
            f,
            g = {};
        for (f in b)
          g[f] = a.style[f], a.style[f] = b[f];
        e = c.apply(a, d || []);
        for (f in b)
          a.style[f] = g[f];
        return e;
      };
  function ea(a, b, c, d) {
    var e,
        f = 1,
        g = 20,
        h = d ? function() {
          return d.cur();
        } : function() {
          return r.css(a, b, "");
        },
        i = h(),
        j = c && c[3] || (r.cssNumber[b] ? "" : "px"),
        k = (r.cssNumber[b] || "px" !== j && +i) && aa.exec(r.css(a, b));
    if (k && k[3] !== j) {
      j = j || k[3], c = c || [], k = +i || 1;
      do
        f = f || ".5", k /= f, r.style(a, b, k + j);
 while (f !== (f = h() / i) && 1 !== f && --g);
    }
    return c && (k = +k || +i || 0, e = c[1] ? k + (c[1] + 1) * c[2] : +c[2], d && (d.unit = j, d.start = k, d.end = e)), e;
  }
  var fa = {};
  function ga(a) {
    var b,
        c = a.ownerDocument,
        d = a.nodeName,
        e = fa[d];
    return e ? e : (b = c.body.appendChild(c.createElement(d)), e = r.css(b, "display"), b.parentNode.removeChild(b), "none" === e && (e = "block"), fa[d] = e, e);
  }
  function ha(a, b) {
    for (var c,
        d,
        e = [],
        f = 0,
        g = a.length; f < g; f++)
      d = a[f], d.style && (c = d.style.display, b ? ("none" === c && (e[f] = V.get(d, "display") || null, e[f] || (d.style.display = "")), "" === d.style.display && ca(d) && (e[f] = ga(d))) : "none" !== c && (e[f] = "none", V.set(d, "display", c)));
    for (f = 0; f < g; f++)
      null != e[f] && (a[f].style.display = e[f]);
    return a;
  }
  r.fn.extend({
    show: function() {
      return ha(this, !0);
    },
    hide: function() {
      return ha(this);
    },
    toggle: function(a) {
      return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function() {
        ca(this) ? r(this).show() : r(this).hide();
      });
    }
  });
  var ia = /^(?:checkbox|radio)$/i,
      ja = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i,
      ka = /^$|\/(?:java|ecma)script/i,
      la = {
        option: [1, "<select multiple='multiple'>", "</select>"],
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default: [0, "", ""]
      };
  la.optgroup = la.option, la.tbody = la.tfoot = la.colgroup = la.caption = la.thead, la.th = la.td;
  function ma(a, b) {
    var c;
    return c = "undefined" != typeof a.getElementsByTagName ? a.getElementsByTagName(b || "*") : "undefined" != typeof a.querySelectorAll ? a.querySelectorAll(b || "*") : [], void 0 === b || b && r.nodeName(a, b) ? r.merge([a], c) : c;
  }
  function na(a, b) {
    for (var c = 0,
        d = a.length; c < d; c++)
      V.set(a[c], "globalEval", !b || V.get(b[c], "globalEval"));
  }
  var oa = /<|&#?\w+;/;
  function pa(a, b, c, d, e) {
    for (var f,
        g,
        h,
        i,
        j,
        k,
        l = b.createDocumentFragment(),
        m = [],
        n = 0,
        o = a.length; n < o; n++)
      if (f = a[n], f || 0 === f)
        if ("object" === r.type(f))
          r.merge(m, f.nodeType ? [f] : f);
        else if (oa.test(f)) {
          g = g || l.appendChild(b.createElement("div")), h = (ja.exec(f) || ["", ""])[1].toLowerCase(), i = la[h] || la._default, g.innerHTML = i[1] + r.htmlPrefilter(f) + i[2], k = i[0];
          while (k--)
            g = g.lastChild;
          r.merge(m, g.childNodes), g = l.firstChild, g.textContent = "";
        } else
          m.push(b.createTextNode(f));
    l.textContent = "", n = 0;
    while (f = m[n++])
      if (d && r.inArray(f, d) > -1)
        e && e.push(f);
      else if (j = r.contains(f.ownerDocument, f), g = ma(l.appendChild(f), "script"), j && na(g), c) {
        k = 0;
        while (f = g[k++])
          ka.test(f.type || "") && c.push(f);
      }
    return l;
  }
  !function() {
    var a = d.createDocumentFragment(),
        b = a.appendChild(d.createElement("div")),
        c = d.createElement("input");
    c.setAttribute("type", "radio"), c.setAttribute("checked", "checked"), c.setAttribute("name", "t"), b.appendChild(c), o.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, b.innerHTML = "<textarea>x</textarea>", o.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue;
  }();
  var qa = d.documentElement,
      ra = /^key/,
      sa = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
      ta = /^([^.]*)(?:\.(.+)|)/;
  function ua() {
    return !0;
  }
  function va() {
    return !1;
  }
  function wa() {
    try {
      return d.activeElement;
    } catch (a) {}
  }
  function xa(a, b, c, d, e, f) {
    var g,
        h;
    if ("object" == typeof b) {
      "string" != typeof c && (d = d || c, c = void 0);
      for (h in b)
        xa(a, h, c, d, b[h], f);
      return a;
    }
    if (null == d && null == e ? (e = c, d = c = void 0) : null == e && ("string" == typeof c ? (e = d, d = void 0) : (e = d, d = c, c = void 0)), e === !1)
      e = va;
    else if (!e)
      return a;
    return 1 === f && (g = e, e = function(a) {
      return r().off(a), g.apply(this, arguments);
    }, e.guid = g.guid || (g.guid = r.guid++)), a.each(function() {
      r.event.add(this, b, e, d, c);
    });
  }
  r.event = {
    global: {},
    add: function(a, b, c, d, e) {
      var f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          n,
          o,
          p,
          q = V.get(a);
      if (q) {
        c.handler && (f = c, c = f.handler, e = f.selector), e && r.find.matchesSelector(qa, e), c.guid || (c.guid = r.guid++), (i = q.events) || (i = q.events = {}), (g = q.handle) || (g = q.handle = function(b) {
          return "undefined" != typeof r && r.event.triggered !== b.type ? r.event.dispatch.apply(a, arguments) : void 0;
        }), b = (b || "").match(K) || [""], j = b.length;
        while (j--)
          h = ta.exec(b[j]) || [], n = p = h[1], o = (h[2] || "").split(".").sort(), n && (l = r.event.special[n] || {}, n = (e ? l.delegateType : l.bindType) || n, l = r.event.special[n] || {}, k = r.extend({
            type: n,
            origType: p,
            data: d,
            handler: c,
            guid: c.guid,
            selector: e,
            needsContext: e && r.expr.match.needsContext.test(e),
            namespace: o.join(".")
          }, f), (m = i[n]) || (m = i[n] = [], m.delegateCount = 0, l.setup && l.setup.call(a, d, o, g) !== !1 || a.addEventListener && a.addEventListener(n, g)), l.add && (l.add.call(a, k), k.handler.guid || (k.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, k) : m.push(k), r.event.global[n] = !0);
      }
    },
    remove: function(a, b, c, d, e) {
      var f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          n,
          o,
          p,
          q = V.hasData(a) && V.get(a);
      if (q && (i = q.events)) {
        b = (b || "").match(K) || [""], j = b.length;
        while (j--)
          if (h = ta.exec(b[j]) || [], n = p = h[1], o = (h[2] || "").split(".").sort(), n) {
            l = r.event.special[n] || {}, n = (d ? l.delegateType : l.bindType) || n, m = i[n] || [], h = h[2] && new RegExp("(^|\\.)" + o.join("\\.(?:.*\\.|)") + "(\\.|$)"), g = f = m.length;
            while (f--)
              k = m[f], !e && p !== k.origType || c && c.guid !== k.guid || h && !h.test(k.namespace) || d && d !== k.selector && ("**" !== d || !k.selector) || (m.splice(f, 1), k.selector && m.delegateCount--, l.remove && l.remove.call(a, k));
            g && !m.length && (l.teardown && l.teardown.call(a, o, q.handle) !== !1 || r.removeEvent(a, n, q.handle), delete i[n]);
          } else
            for (n in i)
              r.event.remove(a, n + b[j], c, d, !0);
        r.isEmptyObject(i) && V.remove(a, "handle events");
      }
    },
    dispatch: function(a) {
      var b = r.event.fix(a),
          c,
          d,
          e,
          f,
          g,
          h,
          i = new Array(arguments.length),
          j = (V.get(this, "events") || {})[b.type] || [],
          k = r.event.special[b.type] || {};
      for (i[0] = b, c = 1; c < arguments.length; c++)
        i[c] = arguments[c];
      if (b.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, b) !== !1) {
        h = r.event.handlers.call(this, b, j), c = 0;
        while ((f = h[c++]) && !b.isPropagationStopped()) {
          b.currentTarget = f.elem, d = 0;
          while ((g = f.handlers[d++]) && !b.isImmediatePropagationStopped())
            b.rnamespace && !b.rnamespace.test(g.namespace) || (b.handleObj = g, b.data = g.data, e = ((r.event.special[g.origType] || {}).handle || g.handler).apply(f.elem, i), void 0 !== e && (b.result = e) === !1 && (b.preventDefault(), b.stopPropagation()));
        }
        return k.postDispatch && k.postDispatch.call(this, b), b.result;
      }
    },
    handlers: function(a, b) {
      var c,
          d,
          e,
          f,
          g,
          h = [],
          i = b.delegateCount,
          j = a.target;
      if (i && j.nodeType && !("click" === a.type && a.button >= 1))
        for (; j !== this; j = j.parentNode || this)
          if (1 === j.nodeType && ("click" !== a.type || j.disabled !== !0)) {
            for (f = [], g = {}, c = 0; c < i; c++)
              d = b[c], e = d.selector + " ", void 0 === g[e] && (g[e] = d.needsContext ? r(e, this).index(j) > -1 : r.find(e, this, null, [j]).length), g[e] && f.push(d);
            f.length && h.push({
              elem: j,
              handlers: f
            });
          }
      return j = this, i < b.length && h.push({
        elem: j,
        handlers: b.slice(i)
      }), h;
    },
    addProp: function(a, b) {
      Object.defineProperty(r.Event.prototype, a, {
        enumerable: !0,
        configurable: !0,
        get: r.isFunction(b) ? function() {
          if (this.originalEvent)
            return b(this.originalEvent);
        } : function() {
          if (this.originalEvent)
            return this.originalEvent[a];
        },
        set: function(b) {
          Object.defineProperty(this, a, {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: b
          });
        }
      });
    },
    fix: function(a) {
      return a[r.expando] ? a : new r.Event(a);
    },
    special: {
      load: {noBubble: !0},
      focus: {
        trigger: function() {
          if (this !== wa() && this.focus)
            return this.focus(), !1;
        },
        delegateType: "focusin"
      },
      blur: {
        trigger: function() {
          if (this === wa() && this.blur)
            return this.blur(), !1;
        },
        delegateType: "focusout"
      },
      click: {
        trigger: function() {
          if ("checkbox" === this.type && this.click && r.nodeName(this, "input"))
            return this.click(), !1;
        },
        _default: function(a) {
          return r.nodeName(a.target, "a");
        }
      },
      beforeunload: {postDispatch: function(a) {
          void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);
        }}
    }
  }, r.removeEvent = function(a, b, c) {
    a.removeEventListener && a.removeEventListener(b, c);
  }, r.Event = function(a, b) {
    return this instanceof r.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? ua : va, this.target = a.target && 3 === a.target.nodeType ? a.target.parentNode : a.target, this.currentTarget = a.currentTarget, this.relatedTarget = a.relatedTarget) : this.type = a, b && r.extend(this, b), this.timeStamp = a && a.timeStamp || r.now(), void(this[r.expando] = !0)) : new r.Event(a, b);
  }, r.Event.prototype = {
    constructor: r.Event,
    isDefaultPrevented: va,
    isPropagationStopped: va,
    isImmediatePropagationStopped: va,
    isSimulated: !1,
    preventDefault: function() {
      var a = this.originalEvent;
      this.isDefaultPrevented = ua, a && !this.isSimulated && a.preventDefault();
    },
    stopPropagation: function() {
      var a = this.originalEvent;
      this.isPropagationStopped = ua, a && !this.isSimulated && a.stopPropagation();
    },
    stopImmediatePropagation: function() {
      var a = this.originalEvent;
      this.isImmediatePropagationStopped = ua, a && !this.isSimulated && a.stopImmediatePropagation(), this.stopPropagation();
    }
  }, r.each({
    altKey: !0,
    bubbles: !0,
    cancelable: !0,
    changedTouches: !0,
    ctrlKey: !0,
    detail: !0,
    eventPhase: !0,
    metaKey: !0,
    pageX: !0,
    pageY: !0,
    shiftKey: !0,
    view: !0,
    "char": !0,
    charCode: !0,
    key: !0,
    keyCode: !0,
    button: !0,
    buttons: !0,
    clientX: !0,
    clientY: !0,
    offsetX: !0,
    offsetY: !0,
    pointerId: !0,
    pointerType: !0,
    screenX: !0,
    screenY: !0,
    targetTouches: !0,
    toElement: !0,
    touches: !0,
    which: function(a) {
      var b = a.button;
      return null == a.which && ra.test(a.type) ? null != a.charCode ? a.charCode : a.keyCode : !a.which && void 0 !== b && sa.test(a.type) ? 1 & b ? 1 : 2 & b ? 3 : 4 & b ? 2 : 0 : a.which;
    }
  }, r.event.addProp), r.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function(a, b) {
    r.event.special[a] = {
      delegateType: b,
      bindType: b,
      handle: function(a) {
        var c,
            d = this,
            e = a.relatedTarget,
            f = a.handleObj;
        return e && (e === d || r.contains(d, e)) || (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;
      }
    };
  }), r.fn.extend({
    on: function(a, b, c, d) {
      return xa(this, a, b, c, d);
    },
    one: function(a, b, c, d) {
      return xa(this, a, b, c, d, 1);
    },
    off: function(a, b, c) {
      var d,
          e;
      if (a && a.preventDefault && a.handleObj)
        return d = a.handleObj, r(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this;
      if ("object" == typeof a) {
        for (e in a)
          this.off(e, b, a[e]);
        return this;
      }
      return b !== !1 && "function" != typeof b || (c = b, b = void 0), c === !1 && (c = va), this.each(function() {
        r.event.remove(this, a, c, b);
      });
    }
  });
  var ya = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
      za = /<script|<style|<link/i,
      Aa = /checked\s*(?:[^=]|=\s*.checked.)/i,
      Ba = /^true\/(.*)/,
      Ca = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
  function Da(a, b) {
    return r.nodeName(a, "table") && r.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a : a;
  }
  function Ea(a) {
    return a.type = (null !== a.getAttribute("type")) + "/" + a.type, a;
  }
  function Fa(a) {
    var b = Ba.exec(a.type);
    return b ? a.type = b[1] : a.removeAttribute("type"), a;
  }
  function Ga(a, b) {
    var c,
        d,
        e,
        f,
        g,
        h,
        i,
        j;
    if (1 === b.nodeType) {
      if (V.hasData(a) && (f = V.access(a), g = V.set(b, f), j = f.events)) {
        delete g.handle, g.events = {};
        for (e in j)
          for (c = 0, d = j[e].length; c < d; c++)
            r.event.add(b, e, j[e][c]);
      }
      W.hasData(a) && (h = W.access(a), i = r.extend({}, h), W.set(b, i));
    }
  }
  function Ha(a, b) {
    var c = b.nodeName.toLowerCase();
    "input" === c && ia.test(a.type) ? b.checked = a.checked : "input" !== c && "textarea" !== c || (b.defaultValue = a.defaultValue);
  }
  function Ia(a, b, c, d) {
    b = g.apply([], b);
    var e,
        f,
        h,
        i,
        j,
        k,
        l = 0,
        m = a.length,
        n = m - 1,
        q = b[0],
        s = r.isFunction(q);
    if (s || m > 1 && "string" == typeof q && !o.checkClone && Aa.test(q))
      return a.each(function(e) {
        var f = a.eq(e);
        s && (b[0] = q.call(this, e, f.html())), Ia(f, b, c, d);
      });
    if (m && (e = pa(b, a[0].ownerDocument, !1, a, d), f = e.firstChild, 1 === e.childNodes.length && (e = f), f || d)) {
      for (h = r.map(ma(e, "script"), Ea), i = h.length; l < m; l++)
        j = e, l !== n && (j = r.clone(j, !0, !0), i && r.merge(h, ma(j, "script"))), c.call(a[l], j, l);
      if (i)
        for (k = h[h.length - 1].ownerDocument, r.map(h, Fa), l = 0; l < i; l++)
          j = h[l], ka.test(j.type || "") && !V.access(j, "globalEval") && r.contains(k, j) && (j.src ? r._evalUrl && r._evalUrl(j.src) : p(j.textContent.replace(Ca, ""), k));
    }
    return a;
  }
  function Ja(a, b, c) {
    for (var d,
        e = b ? r.filter(b, a) : a,
        f = 0; null != (d = e[f]); f++)
      c || 1 !== d.nodeType || r.cleanData(ma(d)), d.parentNode && (c && r.contains(d.ownerDocument, d) && na(ma(d, "script")), d.parentNode.removeChild(d));
    return a;
  }
  r.extend({
    htmlPrefilter: function(a) {
      return a.replace(ya, "<$1></$2>");
    },
    clone: function(a, b, c) {
      var d,
          e,
          f,
          g,
          h = a.cloneNode(!0),
          i = r.contains(a.ownerDocument, a);
      if (!(o.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || r.isXMLDoc(a)))
        for (g = ma(h), f = ma(a), d = 0, e = f.length; d < e; d++)
          Ha(f[d], g[d]);
      if (b)
        if (c)
          for (f = f || ma(a), g = g || ma(h), d = 0, e = f.length; d < e; d++)
            Ga(f[d], g[d]);
        else
          Ga(a, h);
      return g = ma(h, "script"), g.length > 0 && na(g, !i && ma(a, "script")), h;
    },
    cleanData: function(a) {
      for (var b,
          c,
          d,
          e = r.event.special,
          f = 0; void 0 !== (c = a[f]); f++)
        if (T(c)) {
          if (b = c[V.expando]) {
            if (b.events)
              for (d in b.events)
                e[d] ? r.event.remove(c, d) : r.removeEvent(c, d, b.handle);
            c[V.expando] = void 0;
          }
          c[W.expando] && (c[W.expando] = void 0);
        }
    }
  }), r.fn.extend({
    detach: function(a) {
      return Ja(this, a, !0);
    },
    remove: function(a) {
      return Ja(this, a);
    },
    text: function(a) {
      return S(this, function(a) {
        return void 0 === a ? r.text(this) : this.empty().each(function() {
          1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = a);
        });
      }, null, a, arguments.length);
    },
    append: function() {
      return Ia(this, arguments, function(a) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var b = Da(this, a);
          b.appendChild(a);
        }
      });
    },
    prepend: function() {
      return Ia(this, arguments, function(a) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var b = Da(this, a);
          b.insertBefore(a, b.firstChild);
        }
      });
    },
    before: function() {
      return Ia(this, arguments, function(a) {
        this.parentNode && this.parentNode.insertBefore(a, this);
      });
    },
    after: function() {
      return Ia(this, arguments, function(a) {
        this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
      });
    },
    empty: function() {
      for (var a,
          b = 0; null != (a = this[b]); b++)
        1 === a.nodeType && (r.cleanData(ma(a, !1)), a.textContent = "");
      return this;
    },
    clone: function(a, b) {
      return a = null != a && a, b = null == b ? a : b, this.map(function() {
        return r.clone(this, a, b);
      });
    },
    html: function(a) {
      return S(this, function(a) {
        var b = this[0] || {},
            c = 0,
            d = this.length;
        if (void 0 === a && 1 === b.nodeType)
          return b.innerHTML;
        if ("string" == typeof a && !za.test(a) && !la[(ja.exec(a) || ["", ""])[1].toLowerCase()]) {
          a = r.htmlPrefilter(a);
          try {
            for (; c < d; c++)
              b = this[c] || {}, 1 === b.nodeType && (r.cleanData(ma(b, !1)), b.innerHTML = a);
            b = 0;
          } catch (e) {}
        }
        b && this.empty().append(a);
      }, null, a, arguments.length);
    },
    replaceWith: function() {
      var a = [];
      return Ia(this, arguments, function(b) {
        var c = this.parentNode;
        r.inArray(this, a) < 0 && (r.cleanData(ma(this)), c && c.replaceChild(b, this));
      }, a);
    }
  }), r.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function(a, b) {
    r.fn[a] = function(a) {
      for (var c,
          d = [],
          e = r(a),
          f = e.length - 1,
          g = 0; g <= f; g++)
        c = g === f ? this : this.clone(!0), r(e[g])[b](c), h.apply(d, c.get());
      return this.pushStack(d);
    };
  });
  var Ka = /^margin/,
      La = new RegExp("^(" + _ + ")(?!px)[a-z%]+$", "i"),
      Ma = function(b) {
        var c = b.ownerDocument.defaultView;
        return c && c.opener || (c = a), c.getComputedStyle(b);
      };
  !function() {
    function b() {
      if (i) {
        i.style.cssText = "box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%", i.innerHTML = "", qa.appendChild(h);
        var b = a.getComputedStyle(i);
        c = "1%" !== b.top, g = "2px" === b.marginLeft, e = "4px" === b.width, i.style.marginRight = "50%", f = "4px" === b.marginRight, qa.removeChild(h), i = null;
      }
    }
    var c,
        e,
        f,
        g,
        h = d.createElement("div"),
        i = d.createElement("div");
    i.style && (i.style.backgroundClip = "content-box", i.cloneNode(!0).style.backgroundClip = "", o.clearCloneStyle = "content-box" === i.style.backgroundClip, h.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute", h.appendChild(i), r.extend(o, {
      pixelPosition: function() {
        return b(), c;
      },
      boxSizingReliable: function() {
        return b(), e;
      },
      pixelMarginRight: function() {
        return b(), f;
      },
      reliableMarginLeft: function() {
        return b(), g;
      }
    }));
  }();
  function Na(a, b, c) {
    var d,
        e,
        f,
        g,
        h = a.style;
    return c = c || Ma(a), c && (g = c.getPropertyValue(b) || c[b], "" !== g || r.contains(a.ownerDocument, a) || (g = r.style(a, b)), !o.pixelMarginRight() && La.test(g) && Ka.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 !== g ? g + "" : g;
  }
  function Oa(a, b) {
    return {get: function() {
        return a() ? void delete this.get : (this.get = b).apply(this, arguments);
      }};
  }
  var Pa = /^(none|table(?!-c[ea]).+)/,
      Qa = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
      },
      Ra = {
        letterSpacing: "0",
        fontWeight: "400"
      },
      Sa = ["Webkit", "Moz", "ms"],
      Ta = d.createElement("div").style;
  function Ua(a) {
    if (a in Ta)
      return a;
    var b = a[0].toUpperCase() + a.slice(1),
        c = Sa.length;
    while (c--)
      if (a = Sa[c] + b, a in Ta)
        return a;
  }
  function Va(a, b, c) {
    var d = aa.exec(b);
    return d ? Math.max(0, d[2] - (c || 0)) + (d[3] || "px") : b;
  }
  function Wa(a, b, c, d, e) {
    var f,
        g = 0;
    for (f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0; f < 4; f += 2)
      "margin" === c && (g += r.css(a, c + ba[f], !0, e)), d ? ("content" === c && (g -= r.css(a, "padding" + ba[f], !0, e)), "margin" !== c && (g -= r.css(a, "border" + ba[f] + "Width", !0, e))) : (g += r.css(a, "padding" + ba[f], !0, e), "padding" !== c && (g += r.css(a, "border" + ba[f] + "Width", !0, e)));
    return g;
  }
  function Xa(a, b, c) {
    var d,
        e = !0,
        f = Ma(a),
        g = "border-box" === r.css(a, "boxSizing", !1, f);
    if (a.getClientRects().length && (d = a.getBoundingClientRect()[b]), d <= 0 || null == d) {
      if (d = Na(a, b, f), (d < 0 || null == d) && (d = a.style[b]), La.test(d))
        return d;
      e = g && (o.boxSizingReliable() || d === a.style[b]), d = parseFloat(d) || 0;
    }
    return d + Wa(a, b, c || (g ? "border" : "content"), e, f) + "px";
  }
  r.extend({
    cssHooks: {opacity: {get: function(a, b) {
          if (b) {
            var c = Na(a, "opacity");
            return "" === c ? "1" : c;
          }
        }}},
    cssNumber: {
      animationIterationCount: !0,
      columnCount: !0,
      fillOpacity: !0,
      flexGrow: !0,
      flexShrink: !0,
      fontWeight: !0,
      lineHeight: !0,
      opacity: !0,
      order: !0,
      orphans: !0,
      widows: !0,
      zIndex: !0,
      zoom: !0
    },
    cssProps: {"float": "cssFloat"},
    style: function(a, b, c, d) {
      if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
        var e,
            f,
            g,
            h = r.camelCase(b),
            i = a.style;
        return b = r.cssProps[h] || (r.cssProps[h] = Ua(h) || h), g = r.cssHooks[b] || r.cssHooks[h], void 0 === c ? g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b] : (f = typeof c, "string" === f && (e = aa.exec(c)) && e[1] && (c = ea(a, b, e), f = "number"), null != c && c === c && ("number" === f && (c += e && e[3] || (r.cssNumber[h] ? "" : "px")), o.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (i[b] = "inherit"), g && "set" in g && void 0 === (c = g.set(a, c, d)) || (i[b] = c)), void 0);
      }
    },
    css: function(a, b, c, d) {
      var e,
          f,
          g,
          h = r.camelCase(b);
      return b = r.cssProps[h] || (r.cssProps[h] = Ua(h) || h), g = r.cssHooks[b] || r.cssHooks[h], g && "get" in g && (e = g.get(a, !0, c)), void 0 === e && (e = Na(a, b, d)), "normal" === e && b in Ra && (e = Ra[b]), "" === c || c ? (f = parseFloat(e), c === !0 || isFinite(f) ? f || 0 : e) : e;
    }
  }), r.each(["height", "width"], function(a, b) {
    r.cssHooks[b] = {
      get: function(a, c, d) {
        if (c)
          return !Pa.test(r.css(a, "display")) || a.getClientRects().length && a.getBoundingClientRect().width ? Xa(a, b, d) : da(a, Qa, function() {
            return Xa(a, b, d);
          });
      },
      set: function(a, c, d) {
        var e,
            f = d && Ma(a),
            g = d && Wa(a, b, d, "border-box" === r.css(a, "boxSizing", !1, f), f);
        return g && (e = aa.exec(c)) && "px" !== (e[3] || "px") && (a.style[b] = c, c = r.css(a, b)), Va(a, c, g);
      }
    };
  }), r.cssHooks.marginLeft = Oa(o.reliableMarginLeft, function(a, b) {
    if (b)
      return (parseFloat(Na(a, "marginLeft")) || a.getBoundingClientRect().left - da(a, {marginLeft: 0}, function() {
        return a.getBoundingClientRect().left;
      })) + "px";
  }), r.each({
    margin: "",
    padding: "",
    border: "Width"
  }, function(a, b) {
    r.cssHooks[a + b] = {expand: function(c) {
        for (var d = 0,
            e = {},
            f = "string" == typeof c ? c.split(" ") : [c]; d < 4; d++)
          e[a + ba[d] + b] = f[d] || f[d - 2] || f[0];
        return e;
      }}, Ka.test(a) || (r.cssHooks[a + b].set = Va);
  }), r.fn.extend({css: function(a, b) {
      return S(this, function(a, b, c) {
        var d,
            e,
            f = {},
            g = 0;
        if (r.isArray(b)) {
          for (d = Ma(a), e = b.length; g < e; g++)
            f[b[g]] = r.css(a, b[g], !1, d);
          return f;
        }
        return void 0 !== c ? r.style(a, b, c) : r.css(a, b);
      }, a, b, arguments.length > 1);
    }});
  function Ya(a, b, c, d, e) {
    return new Ya.prototype.init(a, b, c, d, e);
  }
  r.Tween = Ya, Ya.prototype = {
    constructor: Ya,
    init: function(a, b, c, d, e, f) {
      this.elem = a, this.prop = c, this.easing = e || r.easing._default, this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (r.cssNumber[c] ? "" : "px");
    },
    cur: function() {
      var a = Ya.propHooks[this.prop];
      return a && a.get ? a.get(this) : Ya.propHooks._default.get(this);
    },
    run: function(a) {
      var b,
          c = Ya.propHooks[this.prop];
      return this.options.duration ? this.pos = b = r.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : this.pos = b = a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : Ya.propHooks._default.set(this), this;
    }
  }, Ya.prototype.init.prototype = Ya.prototype, Ya.propHooks = {_default: {
      get: function(a) {
        var b;
        return 1 !== a.elem.nodeType || null != a.elem[a.prop] && null == a.elem.style[a.prop] ? a.elem[a.prop] : (b = r.css(a.elem, a.prop, ""), b && "auto" !== b ? b : 0);
      },
      set: function(a) {
        r.fx.step[a.prop] ? r.fx.step[a.prop](a) : 1 !== a.elem.nodeType || null == a.elem.style[r.cssProps[a.prop]] && !r.cssHooks[a.prop] ? a.elem[a.prop] = a.now : r.style(a.elem, a.prop, a.now + a.unit);
      }
    }}, Ya.propHooks.scrollTop = Ya.propHooks.scrollLeft = {set: function(a) {
      a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
    }}, r.easing = {
    linear: function(a) {
      return a;
    },
    swing: function(a) {
      return .5 - Math.cos(a * Math.PI) / 2;
    },
    _default: "swing"
  }, r.fx = Ya.prototype.init, r.fx.step = {};
  var Za,
      $a,
      _a = /^(?:toggle|show|hide)$/,
      ab = /queueHooks$/;
  function bb() {
    $a && (a.requestAnimationFrame(bb), r.fx.tick());
  }
  function cb() {
    return a.setTimeout(function() {
      Za = void 0;
    }), Za = r.now();
  }
  function db(a, b) {
    var c,
        d = 0,
        e = {height: a};
    for (b = b ? 1 : 0; d < 4; d += 2 - b)
      c = ba[d], e["margin" + c] = e["padding" + c] = a;
    return b && (e.opacity = e.width = a), e;
  }
  function eb(a, b, c) {
    for (var d,
        e = (hb.tweeners[b] || []).concat(hb.tweeners["*"]),
        f = 0,
        g = e.length; f < g; f++)
      if (d = e[f].call(c, b, a))
        return d;
  }
  function fb(a, b, c) {
    var d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l = "width" in b || "height" in b,
        m = this,
        n = {},
        o = a.style,
        p = a.nodeType && ca(a),
        q = V.get(a, "fxshow");
    c.queue || (g = r._queueHooks(a, "fx"), null == g.unqueued && (g.unqueued = 0, h = g.empty.fire, g.empty.fire = function() {
      g.unqueued || h();
    }), g.unqueued++, m.always(function() {
      m.always(function() {
        g.unqueued--, r.queue(a, "fx").length || g.empty.fire();
      });
    }));
    for (d in b)
      if (e = b[d], _a.test(e)) {
        if (delete b[d], f = f || "toggle" === e, e === (p ? "hide" : "show")) {
          if ("show" !== e || !q || void 0 === q[d])
            continue;
          p = !0;
        }
        n[d] = q && q[d] || r.style(a, d);
      }
    if (i = !r.isEmptyObject(b), i || !r.isEmptyObject(n)) {
      l && 1 === a.nodeType && (c.overflow = [o.overflow, o.overflowX, o.overflowY], j = q && q.display, null == j && (j = V.get(a, "display")), k = r.css(a, "display"), "none" === k && (j ? k = j : (ha([a], !0), j = a.style.display || j, k = r.css(a, "display"), ha([a]))), ("inline" === k || "inline-block" === k && null != j) && "none" === r.css(a, "float") && (i || (m.done(function() {
        o.display = j;
      }), null == j && (k = o.display, j = "none" === k ? "" : k)), o.display = "inline-block")), c.overflow && (o.overflow = "hidden", m.always(function() {
        o.overflow = c.overflow[0], o.overflowX = c.overflow[1], o.overflowY = c.overflow[2];
      })), i = !1;
      for (d in n)
        i || (q ? "hidden" in q && (p = q.hidden) : q = V.access(a, "fxshow", {display: j}), f && (q.hidden = !p), p && ha([a], !0), m.done(function() {
          p || ha([a]), V.remove(a, "fxshow");
          for (d in n)
            r.style(a, d, n[d]);
        })), i = eb(p ? q[d] : 0, d, m), d in q || (q[d] = i.start, p && (i.end = i.start, i.start = 0));
    }
  }
  function gb(a, b) {
    var c,
        d,
        e,
        f,
        g;
    for (c in a)
      if (d = r.camelCase(c), e = b[d], f = a[c], r.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = r.cssHooks[d], g && "expand" in g) {
        f = g.expand(f), delete a[d];
        for (c in f)
          c in a || (a[c] = f[c], b[c] = e);
      } else
        b[d] = e;
  }
  function hb(a, b, c) {
    var d,
        e,
        f = 0,
        g = hb.prefilters.length,
        h = r.Deferred().always(function() {
          delete i.elem;
        }),
        i = function() {
          if (e)
            return !1;
          for (var b = Za || cb(),
              c = Math.max(0, j.startTime + j.duration - b),
              d = c / j.duration || 0,
              f = 1 - d,
              g = 0,
              i = j.tweens.length; g < i; g++)
            j.tweens[g].run(f);
          return h.notifyWith(a, [j, f, c]), f < 1 && i ? c : (h.resolveWith(a, [j]), !1);
        },
        j = h.promise({
          elem: a,
          props: r.extend({}, b),
          opts: r.extend(!0, {
            specialEasing: {},
            easing: r.easing._default
          }, c),
          originalProperties: b,
          originalOptions: c,
          startTime: Za || cb(),
          duration: c.duration,
          tweens: [],
          createTween: function(b, c) {
            var d = r.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);
            return j.tweens.push(d), d;
          },
          stop: function(b) {
            var c = 0,
                d = b ? j.tweens.length : 0;
            if (e)
              return this;
            for (e = !0; c < d; c++)
              j.tweens[c].run(1);
            return b ? (h.notifyWith(a, [j, 1, 0]), h.resolveWith(a, [j, b])) : h.rejectWith(a, [j, b]), this;
          }
        }),
        k = j.props;
    for (gb(k, j.opts.specialEasing); f < g; f++)
      if (d = hb.prefilters[f].call(j, a, k, j.opts))
        return r.isFunction(d.stop) && (r._queueHooks(j.elem, j.opts.queue).stop = r.proxy(d.stop, d)), d;
    return r.map(k, eb, j), r.isFunction(j.opts.start) && j.opts.start.call(a, j), r.fx.timer(r.extend(i, {
      elem: a,
      anim: j,
      queue: j.opts.queue
    })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always);
  }
  r.Animation = r.extend(hb, {
    tweeners: {"*": [function(a, b) {
        var c = this.createTween(a, b);
        return ea(c.elem, a, aa.exec(b), c), c;
      }]},
    tweener: function(a, b) {
      r.isFunction(a) ? (b = a, a = ["*"]) : a = a.match(K);
      for (var c,
          d = 0,
          e = a.length; d < e; d++)
        c = a[d], hb.tweeners[c] = hb.tweeners[c] || [], hb.tweeners[c].unshift(b);
    },
    prefilters: [fb],
    prefilter: function(a, b) {
      b ? hb.prefilters.unshift(a) : hb.prefilters.push(a);
    }
  }), r.speed = function(a, b, c) {
    var e = a && "object" == typeof a ? r.extend({}, a) : {
      complete: c || !c && b || r.isFunction(a) && a,
      duration: a,
      easing: c && b || b && !r.isFunction(b) && b
    };
    return r.fx.off || d.hidden ? e.duration = 0 : "number" != typeof e.duration && (e.duration in r.fx.speeds ? e.duration = r.fx.speeds[e.duration] : e.duration = r.fx.speeds._default), null != e.queue && e.queue !== !0 || (e.queue = "fx"), e.old = e.complete, e.complete = function() {
      r.isFunction(e.old) && e.old.call(this), e.queue && r.dequeue(this, e.queue);
    }, e;
  }, r.fn.extend({
    fadeTo: function(a, b, c, d) {
      return this.filter(ca).css("opacity", 0).show().end().animate({opacity: b}, a, c, d);
    },
    animate: function(a, b, c, d) {
      var e = r.isEmptyObject(a),
          f = r.speed(b, c, d),
          g = function() {
            var b = hb(this, r.extend({}, a), f);
            (e || V.get(this, "finish")) && b.stop(!0);
          };
      return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);
    },
    stop: function(a, b, c) {
      var d = function(a) {
        var b = a.stop;
        delete a.stop, b(c);
      };
      return "string" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || "fx", []), this.each(function() {
        var b = !0,
            e = null != a && a + "queueHooks",
            f = r.timers,
            g = V.get(this);
        if (e)
          g[e] && g[e].stop && d(g[e]);
        else
          for (e in g)
            g[e] && g[e].stop && ab.test(e) && d(g[e]);
        for (e = f.length; e--; )
          f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));
        !b && c || r.dequeue(this, a);
      });
    },
    finish: function(a) {
      return a !== !1 && (a = a || "fx"), this.each(function() {
        var b,
            c = V.get(this),
            d = c[a + "queue"],
            e = c[a + "queueHooks"],
            f = r.timers,
            g = d ? d.length : 0;
        for (c.finish = !0, r.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--; )
          f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));
        for (b = 0; b < g; b++)
          d[b] && d[b].finish && d[b].finish.call(this);
        delete c.finish;
      });
    }
  }), r.each(["toggle", "show", "hide"], function(a, b) {
    var c = r.fn[b];
    r.fn[b] = function(a, d, e) {
      return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(db(b, !0), a, d, e);
    };
  }), r.each({
    slideDown: db("show"),
    slideUp: db("hide"),
    slideToggle: db("toggle"),
    fadeIn: {opacity: "show"},
    fadeOut: {opacity: "hide"},
    fadeToggle: {opacity: "toggle"}
  }, function(a, b) {
    r.fn[a] = function(a, c, d) {
      return this.animate(b, a, c, d);
    };
  }), r.timers = [], r.fx.tick = function() {
    var a,
        b = 0,
        c = r.timers;
    for (Za = r.now(); b < c.length; b++)
      a = c[b], a() || c[b] !== a || c.splice(b--, 1);
    c.length || r.fx.stop(), Za = void 0;
  }, r.fx.timer = function(a) {
    r.timers.push(a), a() ? r.fx.start() : r.timers.pop();
  }, r.fx.interval = 13, r.fx.start = function() {
    $a || ($a = a.requestAnimationFrame ? a.requestAnimationFrame(bb) : a.setInterval(r.fx.tick, r.fx.interval));
  }, r.fx.stop = function() {
    a.cancelAnimationFrame ? a.cancelAnimationFrame($a) : a.clearInterval($a), $a = null;
  }, r.fx.speeds = {
    slow: 600,
    fast: 200,
    _default: 400
  }, r.fn.delay = function(b, c) {
    return b = r.fx ? r.fx.speeds[b] || b : b, c = c || "fx", this.queue(c, function(c, d) {
      var e = a.setTimeout(c, b);
      d.stop = function() {
        a.clearTimeout(e);
      };
    });
  }, function() {
    var a = d.createElement("input"),
        b = d.createElement("select"),
        c = b.appendChild(d.createElement("option"));
    a.type = "checkbox", o.checkOn = "" !== a.value, o.optSelected = c.selected, a = d.createElement("input"), a.value = "t", a.type = "radio", o.radioValue = "t" === a.value;
  }();
  var ib,
      jb = r.expr.attrHandle;
  r.fn.extend({
    attr: function(a, b) {
      return S(this, r.attr, a, b, arguments.length > 1);
    },
    removeAttr: function(a) {
      return this.each(function() {
        r.removeAttr(this, a);
      });
    }
  }), r.extend({
    attr: function(a, b, c) {
      var d,
          e,
          f = a.nodeType;
      if (3 !== f && 8 !== f && 2 !== f)
        return "undefined" == typeof a.getAttribute ? r.prop(a, b, c) : (1 === f && r.isXMLDoc(a) || (e = r.attrHooks[b.toLowerCase()] || (r.expr.match.bool.test(b) ? ib : void 0)), void 0 !== c ? null === c ? void r.removeAttr(a, b) : e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : (a.setAttribute(b, c + ""), c) : e && "get" in e && null !== (d = e.get(a, b)) ? d : (d = r.find.attr(a, b), null == d ? void 0 : d));
    },
    attrHooks: {type: {set: function(a, b) {
          if (!o.radioValue && "radio" === b && r.nodeName(a, "input")) {
            var c = a.value;
            return a.setAttribute("type", b), c && (a.value = c), b;
          }
        }}},
    removeAttr: function(a, b) {
      var c,
          d = 0,
          e = b && b.match(K);
      if (e && 1 === a.nodeType)
        while (c = e[d++])
          a.removeAttribute(c);
    }
  }), ib = {set: function(a, b, c) {
      return b === !1 ? r.removeAttr(a, c) : a.setAttribute(c, c), c;
    }}, r.each(r.expr.match.bool.source.match(/\w+/g), function(a, b) {
    var c = jb[b] || r.find.attr;
    jb[b] = function(a, b, d) {
      var e,
          f,
          g = b.toLowerCase();
      return d || (f = jb[g], jb[g] = e, e = null != c(a, b, d) ? g : null, jb[g] = f), e;
    };
  });
  var kb = /^(?:input|select|textarea|button)$/i,
      lb = /^(?:a|area)$/i;
  r.fn.extend({
    prop: function(a, b) {
      return S(this, r.prop, a, b, arguments.length > 1);
    },
    removeProp: function(a) {
      return this.each(function() {
        delete this[r.propFix[a] || a];
      });
    }
  }), r.extend({
    prop: function(a, b, c) {
      var d,
          e,
          f = a.nodeType;
      if (3 !== f && 8 !== f && 2 !== f)
        return 1 === f && r.isXMLDoc(a) || (b = r.propFix[b] || b, e = r.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b];
    },
    propHooks: {tabIndex: {get: function(a) {
          var b = r.find.attr(a, "tabindex");
          return b ? parseInt(b, 10) : kb.test(a.nodeName) || lb.test(a.nodeName) && a.href ? 0 : -1;
        }}},
    propFix: {
      "for": "htmlFor",
      "class": "className"
    }
  }), o.optSelected || (r.propHooks.selected = {
    get: function(a) {
      var b = a.parentNode;
      return b && b.parentNode && b.parentNode.selectedIndex, null;
    },
    set: function(a) {
      var b = a.parentNode;
      b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex);
    }
  }), r.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
    r.propFix[this.toLowerCase()] = this;
  });
  function mb(a) {
    var b = a.match(K) || [];
    return b.join(" ");
  }
  function nb(a) {
    return a.getAttribute && a.getAttribute("class") || "";
  }
  r.fn.extend({
    addClass: function(a) {
      var b,
          c,
          d,
          e,
          f,
          g,
          h,
          i = 0;
      if (r.isFunction(a))
        return this.each(function(b) {
          r(this).addClass(a.call(this, b, nb(this)));
        });
      if ("string" == typeof a && a) {
        b = a.match(K) || [];
        while (c = this[i++])
          if (e = nb(c), d = 1 === c.nodeType && " " + mb(e) + " ") {
            g = 0;
            while (f = b[g++])
              d.indexOf(" " + f + " ") < 0 && (d += f + " ");
            h = mb(d), e !== h && c.setAttribute("class", h);
          }
      }
      return this;
    },
    removeClass: function(a) {
      var b,
          c,
          d,
          e,
          f,
          g,
          h,
          i = 0;
      if (r.isFunction(a))
        return this.each(function(b) {
          r(this).removeClass(a.call(this, b, nb(this)));
        });
      if (!arguments.length)
        return this.attr("class", "");
      if ("string" == typeof a && a) {
        b = a.match(K) || [];
        while (c = this[i++])
          if (e = nb(c), d = 1 === c.nodeType && " " + mb(e) + " ") {
            g = 0;
            while (f = b[g++])
              while (d.indexOf(" " + f + " ") > -1)
                d = d.replace(" " + f + " ", " ");
            h = mb(d), e !== h && c.setAttribute("class", h);
          }
      }
      return this;
    },
    toggleClass: function(a, b) {
      var c = typeof a;
      return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : r.isFunction(a) ? this.each(function(c) {
        r(this).toggleClass(a.call(this, c, nb(this), b), b);
      }) : this.each(function() {
        var b,
            d,
            e,
            f;
        if ("string" === c) {
          d = 0, e = r(this), f = a.match(K) || [];
          while (b = f[d++])
            e.hasClass(b) ? e.removeClass(b) : e.addClass(b);
        } else
          void 0 !== a && "boolean" !== c || (b = nb(this), b && V.set(this, "__className__", b), this.setAttribute && this.setAttribute("class", b || a === !1 ? "" : V.get(this, "__className__") || ""));
      });
    },
    hasClass: function(a) {
      var b,
          c,
          d = 0;
      b = " " + a + " ";
      while (c = this[d++])
        if (1 === c.nodeType && (" " + mb(nb(c)) + " ").indexOf(b) > -1)
          return !0;
      return !1;
    }
  });
  var ob = /\r/g;
  r.fn.extend({val: function(a) {
      var b,
          c,
          d,
          e = this[0];
      {
        if (arguments.length)
          return d = r.isFunction(a), this.each(function(c) {
            var e;
            1 === this.nodeType && (e = d ? a.call(this, c, r(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : r.isArray(e) && (e = r.map(e, function(a) {
              return null == a ? "" : a + "";
            })), b = r.valHooks[this.type] || r.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e));
          });
        if (e)
          return b = r.valHooks[e.type] || r.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(ob, "") : null == c ? "" : c);
      }
    }}), r.extend({valHooks: {
      option: {get: function(a) {
          var b = r.find.attr(a, "value");
          return null != b ? b : mb(r.text(a));
        }},
      select: {
        get: function(a) {
          var b,
              c,
              d,
              e = a.options,
              f = a.selectedIndex,
              g = "select-one" === a.type,
              h = g ? null : [],
              i = g ? f + 1 : e.length;
          for (d = f < 0 ? i : g ? f : 0; d < i; d++)
            if (c = e[d], (c.selected || d === f) && !c.disabled && (!c.parentNode.disabled || !r.nodeName(c.parentNode, "optgroup"))) {
              if (b = r(c).val(), g)
                return b;
              h.push(b);
            }
          return h;
        },
        set: function(a, b) {
          var c,
              d,
              e = a.options,
              f = r.makeArray(b),
              g = e.length;
          while (g--)
            d = e[g], (d.selected = r.inArray(r.valHooks.option.get(d), f) > -1) && (c = !0);
          return c || (a.selectedIndex = -1), f;
        }
      }
    }}), r.each(["radio", "checkbox"], function() {
    r.valHooks[this] = {set: function(a, b) {
        if (r.isArray(b))
          return a.checked = r.inArray(r(a).val(), b) > -1;
      }}, o.checkOn || (r.valHooks[this].get = function(a) {
      return null === a.getAttribute("value") ? "on" : a.value;
    });
  });
  var pb = /^(?:focusinfocus|focusoutblur)$/;
  r.extend(r.event, {
    trigger: function(b, c, e, f) {
      var g,
          h,
          i,
          j,
          k,
          m,
          n,
          o = [e || d],
          p = l.call(b, "type") ? b.type : b,
          q = l.call(b, "namespace") ? b.namespace.split(".") : [];
      if (h = i = e = e || d, 3 !== e.nodeType && 8 !== e.nodeType && !pb.test(p + r.event.triggered) && (p.indexOf(".") > -1 && (q = p.split("."), p = q.shift(), q.sort()), k = p.indexOf(":") < 0 && "on" + p, b = b[r.expando] ? b : new r.Event(p, "object" == typeof b && b), b.isTrigger = f ? 2 : 3, b.namespace = q.join("."), b.rnamespace = b.namespace ? new RegExp("(^|\\.)" + q.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = e), c = null == c ? [b] : r.makeArray(c, [b]), n = r.event.special[p] || {}, f || !n.trigger || n.trigger.apply(e, c) !== !1)) {
        if (!f && !n.noBubble && !r.isWindow(e)) {
          for (j = n.delegateType || p, pb.test(j + p) || (h = h.parentNode); h; h = h.parentNode)
            o.push(h), i = h;
          i === (e.ownerDocument || d) && o.push(i.defaultView || i.parentWindow || a);
        }
        g = 0;
        while ((h = o[g++]) && !b.isPropagationStopped())
          b.type = g > 1 ? j : n.bindType || p, m = (V.get(h, "events") || {})[b.type] && V.get(h, "handle"), m && m.apply(h, c), m = k && h[k], m && m.apply && T(h) && (b.result = m.apply(h, c), b.result === !1 && b.preventDefault());
        return b.type = p, f || b.isDefaultPrevented() || n._default && n._default.apply(o.pop(), c) !== !1 || !T(e) || k && r.isFunction(e[p]) && !r.isWindow(e) && (i = e[k], i && (e[k] = null), r.event.triggered = p, e[p](), r.event.triggered = void 0, i && (e[k] = i)), b.result;
      }
    },
    simulate: function(a, b, c) {
      var d = r.extend(new r.Event, c, {
        type: a,
        isSimulated: !0
      });
      r.event.trigger(d, null, b);
    }
  }), r.fn.extend({
    trigger: function(a, b) {
      return this.each(function() {
        r.event.trigger(a, b, this);
      });
    },
    triggerHandler: function(a, b) {
      var c = this[0];
      if (c)
        return r.event.trigger(a, b, c, !0);
    }
  }), r.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function(a, b) {
    r.fn[b] = function(a, c) {
      return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);
    };
  }), r.fn.extend({hover: function(a, b) {
      return this.mouseenter(a).mouseleave(b || a);
    }}), o.focusin = "onfocusin" in a, o.focusin || r.each({
    focus: "focusin",
    blur: "focusout"
  }, function(a, b) {
    var c = function(a) {
      r.event.simulate(b, a.target, r.event.fix(a));
    };
    r.event.special[b] = {
      setup: function() {
        var d = this.ownerDocument || this,
            e = V.access(d, b);
        e || d.addEventListener(a, c, !0), V.access(d, b, (e || 0) + 1);
      },
      teardown: function() {
        var d = this.ownerDocument || this,
            e = V.access(d, b) - 1;
        e ? V.access(d, b, e) : (d.removeEventListener(a, c, !0), V.remove(d, b));
      }
    };
  });
  var qb = a.location,
      rb = r.now(),
      sb = /\?/;
  r.parseXML = function(b) {
    var c;
    if (!b || "string" != typeof b)
      return null;
    try {
      c = (new a.DOMParser).parseFromString(b, "text/xml");
    } catch (d) {
      c = void 0;
    }
    return c && !c.getElementsByTagName("parsererror").length || r.error("Invalid XML: " + b), c;
  };
  var tb = /\[\]$/,
      ub = /\r?\n/g,
      vb = /^(?:submit|button|image|reset|file)$/i,
      wb = /^(?:input|select|textarea|keygen)/i;
  function xb(a, b, c, d) {
    var e;
    if (r.isArray(b))
      r.each(b, function(b, e) {
        c || tb.test(a) ? d(a, e) : xb(a + "[" + ("object" == typeof e && null != e ? b : "") + "]", e, c, d);
      });
    else if (c || "object" !== r.type(b))
      d(a, b);
    else
      for (e in b)
        xb(a + "[" + e + "]", b[e], c, d);
  }
  r.param = function(a, b) {
    var c,
        d = [],
        e = function(a, b) {
          var c = r.isFunction(b) ? b() : b;
          d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(null == c ? "" : c);
        };
    if (r.isArray(a) || a.jquery && !r.isPlainObject(a))
      r.each(a, function() {
        e(this.name, this.value);
      });
    else
      for (c in a)
        xb(c, a[c], b, e);
    return d.join("&");
  }, r.fn.extend({
    serialize: function() {
      return r.param(this.serializeArray());
    },
    serializeArray: function() {
      return this.map(function() {
        var a = r.prop(this, "elements");
        return a ? r.makeArray(a) : this;
      }).filter(function() {
        var a = this.type;
        return this.name && !r(this).is(":disabled") && wb.test(this.nodeName) && !vb.test(a) && (this.checked || !ia.test(a));
      }).map(function(a, b) {
        var c = r(this).val();
        return null == c ? null : r.isArray(c) ? r.map(c, function(a) {
          return {
            name: b.name,
            value: a.replace(ub, "\r\n")
          };
        }) : {
          name: b.name,
          value: c.replace(ub, "\r\n")
        };
      }).get();
    }
  });
  var yb = /%20/g,
      zb = /#.*$/,
      Ab = /([?&])_=[^&]*/,
      Bb = /^(.*?):[ \t]*([^\r\n]*)$/gm,
      Cb = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
      Db = /^(?:GET|HEAD)$/,
      Eb = /^\/\//,
      Fb = {},
      Gb = {},
      Hb = "*/".concat("*"),
      Ib = d.createElement("a");
  Ib.href = qb.href;
  function Jb(a) {
    return function(b, c) {
      "string" != typeof b && (c = b, b = "*");
      var d,
          e = 0,
          f = b.toLowerCase().match(K) || [];
      if (r.isFunction(c))
        while (d = f[e++])
          "+" === d[0] ? (d = d.slice(1) || "*", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);
    };
  }
  function Kb(a, b, c, d) {
    var e = {},
        f = a === Gb;
    function g(h) {
      var i;
      return e[h] = !0, r.each(a[h] || [], function(a, h) {
        var j = h(b, c, d);
        return "string" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1);
      }), i;
    }
    return g(b.dataTypes[0]) || !e["*"] && g("*");
  }
  function Lb(a, b) {
    var c,
        d,
        e = r.ajaxSettings.flatOptions || {};
    for (c in b)
      void 0 !== b[c] && ((e[c] ? a : d || (d = {}))[c] = b[c]);
    return d && r.extend(!0, a, d), a;
  }
  function Mb(a, b, c) {
    var d,
        e,
        f,
        g,
        h = a.contents,
        i = a.dataTypes;
    while ("*" === i[0])
      i.shift(), void 0 === d && (d = a.mimeType || b.getResponseHeader("Content-Type"));
    if (d)
      for (e in h)
        if (h[e] && h[e].test(d)) {
          i.unshift(e);
          break;
        }
    if (i[0] in c)
      f = i[0];
    else {
      for (e in c) {
        if (!i[0] || a.converters[e + " " + i[0]]) {
          f = e;
          break;
        }
        g || (g = e);
      }
      f = f || g;
    }
    if (f)
      return f !== i[0] && i.unshift(f), c[f];
  }
  function Nb(a, b, c, d) {
    var e,
        f,
        g,
        h,
        i,
        j = {},
        k = a.dataTypes.slice();
    if (k[1])
      for (g in a.converters)
        j[g.toLowerCase()] = a.converters[g];
    f = k.shift();
    while (f)
      if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift())
        if ("*" === f)
          f = i;
        else if ("*" !== i && i !== f) {
          if (g = j[i + " " + f] || j["* " + f], !g)
            for (e in j)
              if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) {
                g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));
                break;
              }
          if (g !== !0)
            if (g && a["throws"])
              b = g(b);
            else
              try {
                b = g(b);
              } catch (l) {
                return {
                  state: "parsererror",
                  error: g ? l : "No conversion from " + i + " to " + f
                };
              }
        }
    return {
      state: "success",
      data: b
    };
  }
  r.extend({
    active: 0,
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: qb.href,
      type: "GET",
      isLocal: Cb.test(qb.protocol),
      global: !0,
      processData: !0,
      async: !0,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
      accepts: {
        "*": Hb,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },
      contents: {
        xml: /\bxml\b/,
        html: /\bhtml/,
        json: /\bjson\b/
      },
      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON"
      },
      converters: {
        "* text": String,
        "text html": !0,
        "text json": JSON.parse,
        "text xml": r.parseXML
      },
      flatOptions: {
        url: !0,
        context: !0
      }
    },
    ajaxSetup: function(a, b) {
      return b ? Lb(Lb(a, r.ajaxSettings), b) : Lb(r.ajaxSettings, a);
    },
    ajaxPrefilter: Jb(Fb),
    ajaxTransport: Jb(Gb),
    ajax: function(b, c) {
      "object" == typeof b && (c = b, b = void 0), c = c || {};
      var e,
          f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          n,
          o = r.ajaxSetup({}, c),
          p = o.context || o,
          q = o.context && (p.nodeType || p.jquery) ? r(p) : r.event,
          s = r.Deferred(),
          t = r.Callbacks("once memory"),
          u = o.statusCode || {},
          v = {},
          w = {},
          x = "canceled",
          y = {
            readyState: 0,
            getResponseHeader: function(a) {
              var b;
              if (k) {
                if (!h) {
                  h = {};
                  while (b = Bb.exec(g))
                    h[b[1].toLowerCase()] = b[2];
                }
                b = h[a.toLowerCase()];
              }
              return null == b ? null : b;
            },
            getAllResponseHeaders: function() {
              return k ? g : null;
            },
            setRequestHeader: function(a, b) {
              return null == k && (a = w[a.toLowerCase()] = w[a.toLowerCase()] || a, v[a] = b), this;
            },
            overrideMimeType: function(a) {
              return null == k && (o.mimeType = a), this;
            },
            statusCode: function(a) {
              var b;
              if (a)
                if (k)
                  y.always(a[y.status]);
                else
                  for (b in a)
                    u[b] = [u[b], a[b]];
              return this;
            },
            abort: function(a) {
              var b = a || x;
              return e && e.abort(b), A(0, b), this;
            }
          };
      if (s.promise(y), o.url = ((b || o.url || qb.href) + "").replace(Eb, qb.protocol + "//"), o.type = c.method || c.type || o.method || o.type, o.dataTypes = (o.dataType || "*").toLowerCase().match(K) || [""], null == o.crossDomain) {
        j = d.createElement("a");
        try {
          j.href = o.url, j.href = j.href, o.crossDomain = Ib.protocol + "//" + Ib.host != j.protocol + "//" + j.host;
        } catch (z) {
          o.crossDomain = !0;
        }
      }
      if (o.data && o.processData && "string" != typeof o.data && (o.data = r.param(o.data, o.traditional)), Kb(Fb, o, c, y), k)
        return y;
      l = r.event && o.global, l && 0 === r.active++ && r.event.trigger("ajaxStart"), o.type = o.type.toUpperCase(), o.hasContent = !Db.test(o.type), f = o.url.replace(zb, ""), o.hasContent ? o.data && o.processData && 0 === (o.contentType || "").indexOf("application/x-www-form-urlencoded") && (o.data = o.data.replace(yb, "+")) : (n = o.url.slice(f.length), o.data && (f += (sb.test(f) ? "&" : "?") + o.data, delete o.data), o.cache === !1 && (f = f.replace(Ab, "$1"), n = (sb.test(f) ? "&" : "?") + "_=" + rb++ + n), o.url = f + n), o.ifModified && (r.lastModified[f] && y.setRequestHeader("If-Modified-Since", r.lastModified[f]), r.etag[f] && y.setRequestHeader("If-None-Match", r.etag[f])), (o.data && o.hasContent && o.contentType !== !1 || c.contentType) && y.setRequestHeader("Content-Type", o.contentType), y.setRequestHeader("Accept", o.dataTypes[0] && o.accepts[o.dataTypes[0]] ? o.accepts[o.dataTypes[0]] + ("*" !== o.dataTypes[0] ? ", " + Hb + "; q=0.01" : "") : o.accepts["*"]);
      for (m in o.headers)
        y.setRequestHeader(m, o.headers[m]);
      if (o.beforeSend && (o.beforeSend.call(p, y, o) === !1 || k))
        return y.abort();
      if (x = "abort", t.add(o.complete), y.done(o.success), y.fail(o.error), e = Kb(Gb, o, c, y)) {
        if (y.readyState = 1, l && q.trigger("ajaxSend", [y, o]), k)
          return y;
        o.async && o.timeout > 0 && (i = a.setTimeout(function() {
          y.abort("timeout");
        }, o.timeout));
        try {
          k = !1, e.send(v, A);
        } catch (z) {
          if (k)
            throw z;
          A(-1, z);
        }
      } else
        A(-1, "No Transport");
      function A(b, c, d, h) {
        var j,
            m,
            n,
            v,
            w,
            x = c;
        k || (k = !0, i && a.clearTimeout(i), e = void 0, g = h || "", y.readyState = b > 0 ? 4 : 0, j = b >= 200 && b < 300 || 304 === b, d && (v = Mb(o, y, d)), v = Nb(o, v, y, j), j ? (o.ifModified && (w = y.getResponseHeader("Last-Modified"), w && (r.lastModified[f] = w), w = y.getResponseHeader("etag"), w && (r.etag[f] = w)), 204 === b || "HEAD" === o.type ? x = "nocontent" : 304 === b ? x = "notmodified" : (x = v.state, m = v.data, n = v.error, j = !n)) : (n = x, !b && x || (x = "error", b < 0 && (b = 0))), y.status = b, y.statusText = (c || x) + "", j ? s.resolveWith(p, [m, x, y]) : s.rejectWith(p, [y, x, n]), y.statusCode(u), u = void 0, l && q.trigger(j ? "ajaxSuccess" : "ajaxError", [y, o, j ? m : n]), t.fireWith(p, [y, x]), l && (q.trigger("ajaxComplete", [y, o]), --r.active || r.event.trigger("ajaxStop")));
      }
      return y;
    },
    getJSON: function(a, b, c) {
      return r.get(a, b, c, "json");
    },
    getScript: function(a, b) {
      return r.get(a, void 0, b, "script");
    }
  }), r.each(["get", "post"], function(a, b) {
    r[b] = function(a, c, d, e) {
      return r.isFunction(c) && (e = e || d, d = c, c = void 0), r.ajax(r.extend({
        url: a,
        type: b,
        dataType: e,
        data: c,
        success: d
      }, r.isPlainObject(a) && a));
    };
  }), r._evalUrl = function(a) {
    return r.ajax({
      url: a,
      type: "GET",
      dataType: "script",
      cache: !0,
      async: !1,
      global: !1,
      "throws": !0
    });
  }, r.fn.extend({
    wrapAll: function(a) {
      var b;
      return this[0] && (r.isFunction(a) && (a = a.call(this[0])), b = r(a, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && b.insertBefore(this[0]), b.map(function() {
        var a = this;
        while (a.firstElementChild)
          a = a.firstElementChild;
        return a;
      }).append(this)), this;
    },
    wrapInner: function(a) {
      return r.isFunction(a) ? this.each(function(b) {
        r(this).wrapInner(a.call(this, b));
      }) : this.each(function() {
        var b = r(this),
            c = b.contents();
        c.length ? c.wrapAll(a) : b.append(a);
      });
    },
    wrap: function(a) {
      var b = r.isFunction(a);
      return this.each(function(c) {
        r(this).wrapAll(b ? a.call(this, c) : a);
      });
    },
    unwrap: function(a) {
      return this.parent(a).not("body").each(function() {
        r(this).replaceWith(this.childNodes);
      }), this;
    }
  }), r.expr.pseudos.hidden = function(a) {
    return !r.expr.pseudos.visible(a);
  }, r.expr.pseudos.visible = function(a) {
    return !!(a.offsetWidth || a.offsetHeight || a.getClientRects().length);
  }, r.ajaxSettings.xhr = function() {
    try {
      return new a.XMLHttpRequest;
    } catch (b) {}
  };
  var Ob = {
    0: 200,
    1223: 204
  },
      Pb = r.ajaxSettings.xhr();
  o.cors = !!Pb && "withCredentials" in Pb, o.ajax = Pb = !!Pb, r.ajaxTransport(function(b) {
    var c,
        d;
    if (o.cors || Pb && !b.crossDomain)
      return {
        send: function(e, f) {
          var g,
              h = b.xhr();
          if (h.open(b.type, b.url, b.async, b.username, b.password), b.xhrFields)
            for (g in b.xhrFields)
              h[g] = b.xhrFields[g];
          b.mimeType && h.overrideMimeType && h.overrideMimeType(b.mimeType), b.crossDomain || e["X-Requested-With"] || (e["X-Requested-With"] = "XMLHttpRequest");
          for (g in e)
            h.setRequestHeader(g, e[g]);
          c = function(a) {
            return function() {
              c && (c = d = h.onload = h.onerror = h.onabort = h.onreadystatechange = null, "abort" === a ? h.abort() : "error" === a ? "number" != typeof h.status ? f(0, "error") : f(h.status, h.statusText) : f(Ob[h.status] || h.status, h.statusText, "text" !== (h.responseType || "text") || "string" != typeof h.responseText ? {binary: h.response} : {text: h.responseText}, h.getAllResponseHeaders()));
            };
          }, h.onload = c(), d = h.onerror = c("error"), void 0 !== h.onabort ? h.onabort = d : h.onreadystatechange = function() {
            4 === h.readyState && a.setTimeout(function() {
              c && d();
            });
          }, c = c("abort");
          try {
            h.send(b.hasContent && b.data || null);
          } catch (i) {
            if (c)
              throw i;
          }
        },
        abort: function() {
          c && c();
        }
      };
  }), r.ajaxPrefilter(function(a) {
    a.crossDomain && (a.contents.script = !1);
  }), r.ajaxSetup({
    accepts: {script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},
    contents: {script: /\b(?:java|ecma)script\b/},
    converters: {"text script": function(a) {
        return r.globalEval(a), a;
      }}
  }), r.ajaxPrefilter("script", function(a) {
    void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET");
  }), r.ajaxTransport("script", function(a) {
    if (a.crossDomain) {
      var b,
          c;
      return {
        send: function(e, f) {
          b = r("<script>").prop({
            charset: a.scriptCharset,
            src: a.url
          }).on("load error", c = function(a) {
            b.remove(), c = null, a && f("error" === a.type ? 404 : 200, a.type);
          }), d.head.appendChild(b[0]);
        },
        abort: function() {
          c && c();
        }
      };
    }
  });
  var Qb = [],
      Rb = /(=)\?(?=&|$)|\?\?/;
  r.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function() {
      var a = Qb.pop() || r.expando + "_" + rb++;
      return this[a] = !0, a;
    }
  }), r.ajaxPrefilter("json jsonp", function(b, c, d) {
    var e,
        f,
        g,
        h = b.jsonp !== !1 && (Rb.test(b.url) ? "url" : "string" == typeof b.data && 0 === (b.contentType || "").indexOf("application/x-www-form-urlencoded") && Rb.test(b.data) && "data");
    if (h || "jsonp" === b.dataTypes[0])
      return e = b.jsonpCallback = r.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(Rb, "$1" + e) : b.jsonp !== !1 && (b.url += (sb.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), b.converters["script json"] = function() {
        return g || r.error(e + " was not called"), g[0];
      }, b.dataTypes[0] = "json", f = a[e], a[e] = function() {
        g = arguments;
      }, d.always(function() {
        void 0 === f ? r(a).removeProp(e) : a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, Qb.push(e)), g && r.isFunction(f) && f(g[0]), g = f = void 0;
      }), "script";
  }), o.createHTMLDocument = function() {
    var a = d.implementation.createHTMLDocument("").body;
    return a.innerHTML = "<form></form><form></form>", 2 === a.childNodes.length;
  }(), r.parseHTML = function(a, b, c) {
    if ("string" != typeof a)
      return [];
    "boolean" == typeof b && (c = b, b = !1);
    var e,
        f,
        g;
    return b || (o.createHTMLDocument ? (b = d.implementation.createHTMLDocument(""), e = b.createElement("base"), e.href = d.location.href, b.head.appendChild(e)) : b = d), f = B.exec(a), g = !c && [], f ? [b.createElement(f[1])] : (f = pa([a], b, g), g && g.length && r(g).remove(), r.merge([], f.childNodes));
  }, r.fn.load = function(a, b, c) {
    var d,
        e,
        f,
        g = this,
        h = a.indexOf(" ");
    return h > -1 && (d = mb(a.slice(h)), a = a.slice(0, h)), r.isFunction(b) ? (c = b, b = void 0) : b && "object" == typeof b && (e = "POST"), g.length > 0 && r.ajax({
      url: a,
      type: e || "GET",
      dataType: "html",
      data: b
    }).done(function(a) {
      f = arguments, g.html(d ? r("<div>").append(r.parseHTML(a)).find(d) : a);
    }).always(c && function(a, b) {
      g.each(function() {
        c.apply(this, f || [a.responseText, b, a]);
      });
    }), this;
  }, r.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(a, b) {
    r.fn[b] = function(a) {
      return this.on(b, a);
    };
  }), r.expr.pseudos.animated = function(a) {
    return r.grep(r.timers, function(b) {
      return a === b.elem;
    }).length;
  };
  function Sb(a) {
    return r.isWindow(a) ? a : 9 === a.nodeType && a.defaultView;
  }
  r.offset = {setOffset: function(a, b, c) {
      var d,
          e,
          f,
          g,
          h,
          i,
          j,
          k = r.css(a, "position"),
          l = r(a),
          m = {};
      "static" === k && (a.style.position = "relative"), h = l.offset(), f = r.css(a, "top"), i = r.css(a, "left"), j = ("absolute" === k || "fixed" === k) && (f + i).indexOf("auto") > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), r.isFunction(b) && (b = b.call(a, c, r.extend({}, h))), null != b.top && (m.top = b.top - h.top + g), null != b.left && (m.left = b.left - h.left + e), "using" in b ? b.using.call(a, m) : l.css(m);
    }}, r.fn.extend({
    offset: function(a) {
      if (arguments.length)
        return void 0 === a ? this : this.each(function(b) {
          r.offset.setOffset(this, a, b);
        });
      var b,
          c,
          d,
          e,
          f = this[0];
      if (f)
        return f.getClientRects().length ? (d = f.getBoundingClientRect(), d.width || d.height ? (e = f.ownerDocument, c = Sb(e), b = e.documentElement, {
          top: d.top + c.pageYOffset - b.clientTop,
          left: d.left + c.pageXOffset - b.clientLeft
        }) : d) : {
          top: 0,
          left: 0
        };
    },
    position: function() {
      if (this[0]) {
        var a,
            b,
            c = this[0],
            d = {
              top: 0,
              left: 0
            };
        return "fixed" === r.css(c, "position") ? b = c.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), r.nodeName(a[0], "html") || (d = a.offset()), d = {
          top: d.top + r.css(a[0], "borderTopWidth", !0),
          left: d.left + r.css(a[0], "borderLeftWidth", !0)
        }), {
          top: b.top - d.top - r.css(c, "marginTop", !0),
          left: b.left - d.left - r.css(c, "marginLeft", !0)
        };
      }
    },
    offsetParent: function() {
      return this.map(function() {
        var a = this.offsetParent;
        while (a && "static" === r.css(a, "position"))
          a = a.offsetParent;
        return a || qa;
      });
    }
  }), r.each({
    scrollLeft: "pageXOffset",
    scrollTop: "pageYOffset"
  }, function(a, b) {
    var c = "pageYOffset" === b;
    r.fn[a] = function(d) {
      return S(this, function(a, d, e) {
        var f = Sb(a);
        return void 0 === e ? f ? f[b] : a[d] : void(f ? f.scrollTo(c ? f.pageXOffset : e, c ? e : f.pageYOffset) : a[d] = e);
      }, a, d, arguments.length);
    };
  }), r.each(["top", "left"], function(a, b) {
    r.cssHooks[b] = Oa(o.pixelPosition, function(a, c) {
      if (c)
        return c = Na(a, b), La.test(c) ? r(a).position()[b] + "px" : c;
    });
  }), r.each({
    Height: "height",
    Width: "width"
  }, function(a, b) {
    r.each({
      padding: "inner" + a,
      content: b,
      "": "outer" + a
    }, function(c, d) {
      r.fn[d] = function(e, f) {
        var g = arguments.length && (c || "boolean" != typeof e),
            h = c || (e === !0 || f === !0 ? "margin" : "border");
        return S(this, function(b, c, e) {
          var f;
          return r.isWindow(b) ? 0 === d.indexOf("outer") ? b["inner" + a] : b.document.documentElement["client" + a] : 9 === b.nodeType ? (f = b.documentElement, Math.max(b.body["scroll" + a], f["scroll" + a], b.body["offset" + a], f["offset" + a], f["client" + a])) : void 0 === e ? r.css(b, c, h) : r.style(b, c, e, h);
        }, b, g ? e : void 0, g);
      };
    });
  }), r.fn.extend({
    bind: function(a, b, c) {
      return this.on(a, null, b, c);
    },
    unbind: function(a, b) {
      return this.off(a, null, b);
    },
    delegate: function(a, b, c, d) {
      return this.on(b, a, c, d);
    },
    undelegate: function(a, b, c) {
      return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c);
    }
  }), r.parseJSON = JSON.parse, "function" == typeof define && define.amd && define("2", [], function() {
    return r;
  }) && define("jquery", ["2"], function(m) {
    return m;
  });
  var Tb = a.jQuery,
      Ub = a.$;
  return r.noConflict = function(b) {
    return a.$ === r && (a.$ = Ub), b && a.jQuery === r && (a.jQuery = Tb), r;
  }, b || (a.jQuery = a.$ = r), r;
});

})();
$__System.registerDynamic("3", [], false, function ($__require, $__exports, $__module) {
  var _retrieveGlobal = $__System.get("@@global-helpers").prepareGlobal($__module.id, null, null);

  (function ($__global) {
    /*!
     * Bootstrap v4.0.0-alpha.5 (https://getbootstrap.com)
     * Copyright 2011-2016 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
     */
    if ("undefined" == typeof jQuery) throw new Error("Bootstrap's JavaScript requires jQuery");+function (a) {
      var b = a.fn.jquery.split(" ")[0].split(".");if (b[0] < 2 && b[1] < 9 || 1 == b[0] && 9 == b[1] && b[2] < 1 || b[0] >= 4) throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
    }(jQuery), +function () {
      function a(a, b) {
        if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !b || "object" != typeof b && "function" != typeof b ? a : b;
      }function b(a, b) {
        if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);a.prototype = Object.create(b && b.prototype, { constructor: { value: a, enumerable: !1, writable: !0, configurable: !0 } }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
      }function c(a, b) {
        if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
      }var d = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (a) {
        return typeof a;
      } : function (a) {
        return a && "function" == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a;
      },
          e = function () {
        function a(a, b) {
          for (var c = 0; c < b.length; c++) {
            var d = b[c];d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), Object.defineProperty(a, d.key, d);
          }
        }return function (b, c, d) {
          return c && a(b.prototype, c), d && a(b, d), b;
        };
      }(),
          f = function (a) {
        function b(a) {
          return {}.toString.call(a).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
        }function c(a) {
          return (a[0] || a).nodeType;
        }function d() {
          return { bindType: h.end, delegateType: h.end, handle: function (b) {
              if (a(b.target).is(this)) return b.handleObj.handler.apply(this, arguments);
            } };
        }function e() {
          if (window.QUnit) return !1;var a = document.createElement("bootstrap");for (var b in j) if (void 0 !== a.style[b]) return { end: j[b] };return !1;
        }function f(b) {
          var c = this,
              d = !1;return a(this).one(k.TRANSITION_END, function () {
            d = !0;
          }), setTimeout(function () {
            d || k.triggerTransitionEnd(c);
          }, b), this;
        }function g() {
          h = e(), a.fn.emulateTransitionEnd = f, k.supportsTransitionEnd() && (a.event.special[k.TRANSITION_END] = d());
        }var h = !1,
            i = 1e6,
            j = { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "oTransitionEnd otransitionend", transition: "transitionend" },
            k = { TRANSITION_END: "bsTransitionEnd", getUID: function (a) {
            do a += ~~(Math.random() * i); while (document.getElementById(a));return a;
          }, getSelectorFromElement: function (a) {
            var b = a.getAttribute("data-target");return b || (b = a.getAttribute("href") || "", b = /^#[a-z]/i.test(b) ? b : null), b;
          }, reflow: function (a) {
            new Function("bs", "return bs")(a.offsetHeight);
          }, triggerTransitionEnd: function (b) {
            a(b).trigger(h.end);
          }, supportsTransitionEnd: function () {
            return Boolean(h);
          }, typeCheckConfig: function (a, d, e) {
            for (var f in e) if (e.hasOwnProperty(f)) {
              var g = e[f],
                  h = d[f],
                  i = void 0;if (i = h && c(h) ? "element" : b(h), !new RegExp(g).test(i)) throw new Error(a.toUpperCase() + ": " + ('Option "' + f + '" provided type "' + i + '" ') + ('but expected type "' + g + '".'));
            }
          } };return g(), k;
      }(jQuery),
          g = (function (a) {
        var b = "alert",
            d = "4.0.0-alpha.5",
            g = "bs.alert",
            h = "." + g,
            i = ".data-api",
            j = a.fn[b],
            k = 150,
            l = { DISMISS: '[data-dismiss="alert"]' },
            m = { CLOSE: "close" + h, CLOSED: "closed" + h, CLICK_DATA_API: "click" + h + i },
            n = { ALERT: "alert", FADE: "fade", IN: "in" },
            o = function () {
          function b(a) {
            c(this, b), this._element = a;
          }return b.prototype.close = function (a) {
            a = a || this._element;var b = this._getRootElement(a),
                c = this._triggerCloseEvent(b);c.isDefaultPrevented() || this._removeElement(b);
          }, b.prototype.dispose = function () {
            a.removeData(this._element, g), this._element = null;
          }, b.prototype._getRootElement = function (b) {
            var c = f.getSelectorFromElement(b),
                d = !1;return c && (d = a(c)[0]), d || (d = a(b).closest("." + n.ALERT)[0]), d;
          }, b.prototype._triggerCloseEvent = function (b) {
            var c = a.Event(m.CLOSE);return a(b).trigger(c), c;
          }, b.prototype._removeElement = function (b) {
            return a(b).removeClass(n.IN), f.supportsTransitionEnd() && a(b).hasClass(n.FADE) ? void a(b).one(f.TRANSITION_END, a.proxy(this._destroyElement, this, b)).emulateTransitionEnd(k) : void this._destroyElement(b);
          }, b.prototype._destroyElement = function (b) {
            a(b).detach().trigger(m.CLOSED).remove();
          }, b._jQueryInterface = function (c) {
            return this.each(function () {
              var d = a(this),
                  e = d.data(g);e || (e = new b(this), d.data(g, e)), "close" === c && e[c](this);
            });
          }, b._handleDismiss = function (a) {
            return function (b) {
              b && b.preventDefault(), a.close(this);
            };
          }, e(b, null, [{ key: "VERSION", get: function () {
              return d;
            } }]), b;
        }();return a(document).on(m.CLICK_DATA_API, l.DISMISS, o._handleDismiss(new o())), a.fn[b] = o._jQueryInterface, a.fn[b].Constructor = o, a.fn[b].noConflict = function () {
          return a.fn[b] = j, o._jQueryInterface;
        }, o;
      }(jQuery), function (a) {
        var b = "button",
            d = "4.0.0-alpha.5",
            f = "bs.button",
            g = "." + f,
            h = ".data-api",
            i = a.fn[b],
            j = { ACTIVE: "active", BUTTON: "btn", FOCUS: "focus" },
            k = { DATA_TOGGLE_CARROT: '[data-toggle^="button"]', DATA_TOGGLE: '[data-toggle="buttons"]', INPUT: "input", ACTIVE: ".active", BUTTON: ".btn" },
            l = { CLICK_DATA_API: "click" + g + h, FOCUS_BLUR_DATA_API: "focus" + g + h + " " + ("blur" + g + h) },
            m = function () {
          function b(a) {
            c(this, b), this._element = a;
          }return b.prototype.toggle = function () {
            var b = !0,
                c = a(this._element).closest(k.DATA_TOGGLE)[0];if (c) {
              var d = a(this._element).find(k.INPUT)[0];if (d) {
                if ("radio" === d.type) if (d.checked && a(this._element).hasClass(j.ACTIVE)) b = !1;else {
                  var e = a(c).find(k.ACTIVE)[0];e && a(e).removeClass(j.ACTIVE);
                }b && (d.checked = !a(this._element).hasClass(j.ACTIVE), a(this._element).trigger("change")), d.focus();
              }
            } else this._element.setAttribute("aria-pressed", !a(this._element).hasClass(j.ACTIVE));b && a(this._element).toggleClass(j.ACTIVE);
          }, b.prototype.dispose = function () {
            a.removeData(this._element, f), this._element = null;
          }, b._jQueryInterface = function (c) {
            return this.each(function () {
              var d = a(this).data(f);d || (d = new b(this), a(this).data(f, d)), "toggle" === c && d[c]();
            });
          }, e(b, null, [{ key: "VERSION", get: function () {
              return d;
            } }]), b;
        }();return a(document).on(l.CLICK_DATA_API, k.DATA_TOGGLE_CARROT, function (b) {
          b.preventDefault();var c = b.target;a(c).hasClass(j.BUTTON) || (c = a(c).closest(k.BUTTON)), m._jQueryInterface.call(a(c), "toggle");
        }).on(l.FOCUS_BLUR_DATA_API, k.DATA_TOGGLE_CARROT, function (b) {
          var c = a(b.target).closest(k.BUTTON)[0];a(c).toggleClass(j.FOCUS, /^focus(in)?$/.test(b.type));
        }), a.fn[b] = m._jQueryInterface, a.fn[b].Constructor = m, a.fn[b].noConflict = function () {
          return a.fn[b] = i, m._jQueryInterface;
        }, m;
      }(jQuery), function (a) {
        var b = "carousel",
            g = "4.0.0-alpha.5",
            h = "bs.carousel",
            i = "." + h,
            j = ".data-api",
            k = a.fn[b],
            l = 600,
            m = 37,
            n = 39,
            o = { interval: 5e3, keyboard: !0, slide: !1, pause: "hover", wrap: !0 },
            p = { interval: "(number|boolean)", keyboard: "boolean", slide: "(boolean|string)", pause: "(string|boolean)", wrap: "boolean" },
            q = { NEXT: "next", PREVIOUS: "prev" },
            r = { SLIDE: "slide" + i, SLID: "slid" + i, KEYDOWN: "keydown" + i, MOUSEENTER: "mouseenter" + i, MOUSELEAVE: "mouseleave" + i, LOAD_DATA_API: "load" + i + j, CLICK_DATA_API: "click" + i + j },
            s = { CAROUSEL: "carousel", ACTIVE: "active", SLIDE: "slide", RIGHT: "right", LEFT: "left", ITEM: "carousel-item" },
            t = { ACTIVE: ".active", ACTIVE_ITEM: ".active.carousel-item", ITEM: ".carousel-item", NEXT_PREV: ".next, .prev", INDICATORS: ".carousel-indicators", DATA_SLIDE: "[data-slide], [data-slide-to]", DATA_RIDE: '[data-ride="carousel"]' },
            u = function () {
          function j(b, d) {
            c(this, j), this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this._config = this._getConfig(d), this._element = a(b)[0], this._indicatorsElement = a(this._element).find(t.INDICATORS)[0], this._addEventListeners();
          }return j.prototype.next = function () {
            this._isSliding || this._slide(q.NEXT);
          }, j.prototype.nextWhenVisible = function () {
            document.hidden || this.next();
          }, j.prototype.prev = function () {
            this._isSliding || this._slide(q.PREVIOUS);
          }, j.prototype.pause = function (b) {
            b || (this._isPaused = !0), a(this._element).find(t.NEXT_PREV)[0] && f.supportsTransitionEnd() && (f.triggerTransitionEnd(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;
          }, j.prototype.cycle = function (b) {
            b || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config.interval && !this._isPaused && (this._interval = setInterval(a.proxy(document.visibilityState ? this.nextWhenVisible : this.next, this), this._config.interval));
          }, j.prototype.to = function (b) {
            var c = this;this._activeElement = a(this._element).find(t.ACTIVE_ITEM)[0];var d = this._getItemIndex(this._activeElement);if (!(b > this._items.length - 1 || b < 0)) {
              if (this._isSliding) return void a(this._element).one(r.SLID, function () {
                return c.to(b);
              });if (d === b) return this.pause(), void this.cycle();var e = b > d ? q.NEXT : q.PREVIOUS;this._slide(e, this._items[b]);
            }
          }, j.prototype.dispose = function () {
            a(this._element).off(i), a.removeData(this._element, h), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null;
          }, j.prototype._getConfig = function (c) {
            return c = a.extend({}, o, c), f.typeCheckConfig(b, c, p), c;
          }, j.prototype._addEventListeners = function () {
            this._config.keyboard && a(this._element).on(r.KEYDOWN, a.proxy(this._keydown, this)), "hover" !== this._config.pause || "ontouchstart" in document.documentElement || a(this._element).on(r.MOUSEENTER, a.proxy(this.pause, this)).on(r.MOUSELEAVE, a.proxy(this.cycle, this));
          }, j.prototype._keydown = function (a) {
            if (a.preventDefault(), !/input|textarea/i.test(a.target.tagName)) switch (a.which) {case m:
                this.prev();break;case n:
                this.next();break;default:
                return;}
          }, j.prototype._getItemIndex = function (b) {
            return this._items = a.makeArray(a(b).parent().find(t.ITEM)), this._items.indexOf(b);
          }, j.prototype._getItemByDirection = function (a, b) {
            var c = a === q.NEXT,
                d = a === q.PREVIOUS,
                e = this._getItemIndex(b),
                f = this._items.length - 1,
                g = d && 0 === e || c && e === f;if (g && !this._config.wrap) return b;var h = a === q.PREVIOUS ? -1 : 1,
                i = (e + h) % this._items.length;return i === -1 ? this._items[this._items.length - 1] : this._items[i];
          }, j.prototype._triggerSlideEvent = function (b, c) {
            var d = a.Event(r.SLIDE, { relatedTarget: b, direction: c });return a(this._element).trigger(d), d;
          }, j.prototype._setActiveIndicatorElement = function (b) {
            if (this._indicatorsElement) {
              a(this._indicatorsElement).find(t.ACTIVE).removeClass(s.ACTIVE);var c = this._indicatorsElement.children[this._getItemIndex(b)];c && a(c).addClass(s.ACTIVE);
            }
          }, j.prototype._slide = function (b, c) {
            var d = this,
                e = a(this._element).find(t.ACTIVE_ITEM)[0],
                g = c || e && this._getItemByDirection(b, e),
                h = Boolean(this._interval),
                i = b === q.NEXT ? s.LEFT : s.RIGHT;if (g && a(g).hasClass(s.ACTIVE)) return void (this._isSliding = !1);var j = this._triggerSlideEvent(g, i);if (!j.isDefaultPrevented() && e && g) {
              this._isSliding = !0, h && this.pause(), this._setActiveIndicatorElement(g);var k = a.Event(r.SLID, { relatedTarget: g, direction: i });f.supportsTransitionEnd() && a(this._element).hasClass(s.SLIDE) ? (a(g).addClass(b), f.reflow(g), a(e).addClass(i), a(g).addClass(i), a(e).one(f.TRANSITION_END, function () {
                a(g).removeClass(i).removeClass(b), a(g).addClass(s.ACTIVE), a(e).removeClass(s.ACTIVE).removeClass(b).removeClass(i), d._isSliding = !1, setTimeout(function () {
                  return a(d._element).trigger(k);
                }, 0);
              }).emulateTransitionEnd(l)) : (a(e).removeClass(s.ACTIVE), a(g).addClass(s.ACTIVE), this._isSliding = !1, a(this._element).trigger(k)), h && this.cycle();
            }
          }, j._jQueryInterface = function (b) {
            return this.each(function () {
              var c = a(this).data(h),
                  e = a.extend({}, o, a(this).data());"object" === ("undefined" == typeof b ? "undefined" : d(b)) && a.extend(e, b);var f = "string" == typeof b ? b : e.slide;if (c || (c = new j(this, e), a(this).data(h, c)), "number" == typeof b) c.to(b);else if ("string" == typeof f) {
                if (void 0 === c[f]) throw new Error('No method named "' + f + '"');c[f]();
              } else e.interval && (c.pause(), c.cycle());
            });
          }, j._dataApiClickHandler = function (b) {
            var c = f.getSelectorFromElement(this);if (c) {
              var d = a(c)[0];if (d && a(d).hasClass(s.CAROUSEL)) {
                var e = a.extend({}, a(d).data(), a(this).data()),
                    g = this.getAttribute("data-slide-to");g && (e.interval = !1), j._jQueryInterface.call(a(d), e), g && a(d).data(h).to(g), b.preventDefault();
              }
            }
          }, e(j, null, [{ key: "VERSION", get: function () {
              return g;
            } }, { key: "Default", get: function () {
              return o;
            } }]), j;
        }();return a(document).on(r.CLICK_DATA_API, t.DATA_SLIDE, u._dataApiClickHandler), a(window).on(r.LOAD_DATA_API, function () {
          a(t.DATA_RIDE).each(function () {
            var b = a(this);u._jQueryInterface.call(b, b.data());
          });
        }), a.fn[b] = u._jQueryInterface, a.fn[b].Constructor = u, a.fn[b].noConflict = function () {
          return a.fn[b] = k, u._jQueryInterface;
        }, u;
      }(jQuery), function (a) {
        var b = "collapse",
            g = "4.0.0-alpha.5",
            h = "bs.collapse",
            i = "." + h,
            j = ".data-api",
            k = a.fn[b],
            l = 600,
            m = { toggle: !0, parent: "" },
            n = { toggle: "boolean", parent: "string" },
            o = { SHOW: "show" + i, SHOWN: "shown" + i, HIDE: "hide" + i, HIDDEN: "hidden" + i, CLICK_DATA_API: "click" + i + j },
            p = { IN: "in", COLLAPSE: "collapse", COLLAPSING: "collapsing", COLLAPSED: "collapsed" },
            q = { WIDTH: "width", HEIGHT: "height" },
            r = { ACTIVES: ".card > .in, .card > .collapsing", DATA_TOGGLE: '[data-toggle="collapse"]' },
            s = function () {
          function i(b, d) {
            c(this, i), this._isTransitioning = !1, this._element = b, this._config = this._getConfig(d), this._triggerArray = a.makeArray(a('[data-toggle="collapse"][href="#' + b.id + '"],' + ('[data-toggle="collapse"][data-target="#' + b.id + '"]'))), this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle();
          }return i.prototype.toggle = function () {
            a(this._element).hasClass(p.IN) ? this.hide() : this.show();
          }, i.prototype.show = function () {
            var b = this;if (!this._isTransitioning && !a(this._element).hasClass(p.IN)) {
              var c = void 0,
                  d = void 0;if (this._parent && (c = a.makeArray(a(r.ACTIVES)), c.length || (c = null)), !(c && (d = a(c).data(h), d && d._isTransitioning))) {
                var e = a.Event(o.SHOW);if (a(this._element).trigger(e), !e.isDefaultPrevented()) {
                  c && (i._jQueryInterface.call(a(c), "hide"), d || a(c).data(h, null));var g = this._getDimension();a(this._element).removeClass(p.COLLAPSE).addClass(p.COLLAPSING), this._element.style[g] = 0, this._element.setAttribute("aria-expanded", !0), this._triggerArray.length && a(this._triggerArray).removeClass(p.COLLAPSED).attr("aria-expanded", !0), this.setTransitioning(!0);var j = function () {
                    a(b._element).removeClass(p.COLLAPSING).addClass(p.COLLAPSE).addClass(p.IN), b._element.style[g] = "", b.setTransitioning(!1), a(b._element).trigger(o.SHOWN);
                  };if (!f.supportsTransitionEnd()) return void j();var k = g[0].toUpperCase() + g.slice(1),
                      m = "scroll" + k;a(this._element).one(f.TRANSITION_END, j).emulateTransitionEnd(l), this._element.style[g] = this._element[m] + "px";
                }
              }
            }
          }, i.prototype.hide = function () {
            var b = this;if (!this._isTransitioning && a(this._element).hasClass(p.IN)) {
              var c = a.Event(o.HIDE);if (a(this._element).trigger(c), !c.isDefaultPrevented()) {
                var d = this._getDimension(),
                    e = d === q.WIDTH ? "offsetWidth" : "offsetHeight";this._element.style[d] = this._element[e] + "px", f.reflow(this._element), a(this._element).addClass(p.COLLAPSING).removeClass(p.COLLAPSE).removeClass(p.IN), this._element.setAttribute("aria-expanded", !1), this._triggerArray.length && a(this._triggerArray).addClass(p.COLLAPSED).attr("aria-expanded", !1), this.setTransitioning(!0);var g = function () {
                  b.setTransitioning(!1), a(b._element).removeClass(p.COLLAPSING).addClass(p.COLLAPSE).trigger(o.HIDDEN);
                };return this._element.style[d] = "", f.supportsTransitionEnd() ? void a(this._element).one(f.TRANSITION_END, g).emulateTransitionEnd(l) : void g();
              }
            }
          }, i.prototype.setTransitioning = function (a) {
            this._isTransitioning = a;
          }, i.prototype.dispose = function () {
            a.removeData(this._element, h), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null;
          }, i.prototype._getConfig = function (c) {
            return c = a.extend({}, m, c), c.toggle = Boolean(c.toggle), f.typeCheckConfig(b, c, n), c;
          }, i.prototype._getDimension = function () {
            var b = a(this._element).hasClass(q.WIDTH);return b ? q.WIDTH : q.HEIGHT;
          }, i.prototype._getParent = function () {
            var b = this,
                c = a(this._config.parent)[0],
                d = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';return a(c).find(d).each(function (a, c) {
              b._addAriaAndCollapsedClass(i._getTargetFromElement(c), [c]);
            }), c;
          }, i.prototype._addAriaAndCollapsedClass = function (b, c) {
            if (b) {
              var d = a(b).hasClass(p.IN);b.setAttribute("aria-expanded", d), c.length && a(c).toggleClass(p.COLLAPSED, !d).attr("aria-expanded", d);
            }
          }, i._getTargetFromElement = function (b) {
            var c = f.getSelectorFromElement(b);return c ? a(c)[0] : null;
          }, i._jQueryInterface = function (b) {
            return this.each(function () {
              var c = a(this),
                  e = c.data(h),
                  f = a.extend({}, m, c.data(), "object" === ("undefined" == typeof b ? "undefined" : d(b)) && b);if (!e && f.toggle && /show|hide/.test(b) && (f.toggle = !1), e || (e = new i(this, f), c.data(h, e)), "string" == typeof b) {
                if (void 0 === e[b]) throw new Error('No method named "' + b + '"');e[b]();
              }
            });
          }, e(i, null, [{ key: "VERSION", get: function () {
              return g;
            } }, { key: "Default", get: function () {
              return m;
            } }]), i;
        }();return a(document).on(o.CLICK_DATA_API, r.DATA_TOGGLE, function (b) {
          b.preventDefault();var c = s._getTargetFromElement(this),
              d = a(c).data(h),
              e = d ? "toggle" : a(this).data();s._jQueryInterface.call(a(c), e);
        }), a.fn[b] = s._jQueryInterface, a.fn[b].Constructor = s, a.fn[b].noConflict = function () {
          return a.fn[b] = k, s._jQueryInterface;
        }, s;
      }(jQuery), function (a) {
        var b = "dropdown",
            d = "4.0.0-alpha.5",
            g = "bs.dropdown",
            h = "." + g,
            i = ".data-api",
            j = a.fn[b],
            k = 27,
            l = 38,
            m = 40,
            n = 3,
            o = { HIDE: "hide" + h, HIDDEN: "hidden" + h, SHOW: "show" + h, SHOWN: "shown" + h, CLICK: "click" + h, CLICK_DATA_API: "click" + h + i, KEYDOWN_DATA_API: "keydown" + h + i },
            p = { BACKDROP: "dropdown-backdrop", DISABLED: "disabled", OPEN: "open" },
            q = { BACKDROP: ".dropdown-backdrop", DATA_TOGGLE: '[data-toggle="dropdown"]', FORM_CHILD: ".dropdown form", ROLE_MENU: '[role="menu"]', ROLE_LISTBOX: '[role="listbox"]', NAVBAR_NAV: ".navbar-nav", VISIBLE_ITEMS: '[role="menu"] li:not(.disabled) a, [role="listbox"] li:not(.disabled) a' },
            r = function () {
          function b(a) {
            c(this, b), this._element = a, this._addEventListeners();
          }return b.prototype.toggle = function () {
            if (this.disabled || a(this).hasClass(p.DISABLED)) return !1;var c = b._getParentFromElement(this),
                d = a(c).hasClass(p.OPEN);if (b._clearMenus(), d) return !1;if ("ontouchstart" in document.documentElement && !a(c).closest(q.NAVBAR_NAV).length) {
              var e = document.createElement("div");e.className = p.BACKDROP, a(e).insertBefore(this), a(e).on("click", b._clearMenus);
            }var f = { relatedTarget: this },
                g = a.Event(o.SHOW, f);return a(c).trigger(g), !g.isDefaultPrevented() && (this.focus(), this.setAttribute("aria-expanded", "true"), a(c).toggleClass(p.OPEN), a(c).trigger(a.Event(o.SHOWN, f)), !1);
          }, b.prototype.dispose = function () {
            a.removeData(this._element, g), a(this._element).off(h), this._element = null;
          }, b.prototype._addEventListeners = function () {
            a(this._element).on(o.CLICK, this.toggle);
          }, b._jQueryInterface = function (c) {
            return this.each(function () {
              var d = a(this).data(g);if (d || a(this).data(g, d = new b(this)), "string" == typeof c) {
                if (void 0 === d[c]) throw new Error('No method named "' + c + '"');d[c].call(this);
              }
            });
          }, b._clearMenus = function (c) {
            if (!c || c.which !== n) {
              var d = a(q.BACKDROP)[0];d && d.parentNode.removeChild(d);for (var e = a.makeArray(a(q.DATA_TOGGLE)), f = 0; f < e.length; f++) {
                var g = b._getParentFromElement(e[f]),
                    h = { relatedTarget: e[f] };if (a(g).hasClass(p.OPEN) && !(c && "click" === c.type && /input|textarea/i.test(c.target.tagName) && a.contains(g, c.target))) {
                  var i = a.Event(o.HIDE, h);a(g).trigger(i), i.isDefaultPrevented() || (e[f].setAttribute("aria-expanded", "false"), a(g).removeClass(p.OPEN).trigger(a.Event(o.HIDDEN, h)));
                }
              }
            }
          }, b._getParentFromElement = function (b) {
            var c = void 0,
                d = f.getSelectorFromElement(b);return d && (c = a(d)[0]), c || b.parentNode;
          }, b._dataApiKeydownHandler = function (c) {
            if (/(38|40|27|32)/.test(c.which) && !/input|textarea/i.test(c.target.tagName) && (c.preventDefault(), c.stopPropagation(), !this.disabled && !a(this).hasClass(p.DISABLED))) {
              var d = b._getParentFromElement(this),
                  e = a(d).hasClass(p.OPEN);if (!e && c.which !== k || e && c.which === k) {
                if (c.which === k) {
                  var f = a(d).find(q.DATA_TOGGLE)[0];a(f).trigger("focus");
                }return void a(this).trigger("click");
              }var g = a.makeArray(a(q.VISIBLE_ITEMS));if (g = g.filter(function (a) {
                return a.offsetWidth || a.offsetHeight;
              }), g.length) {
                var h = g.indexOf(c.target);c.which === l && h > 0 && h--, c.which === m && h < g.length - 1 && h++, h < 0 && (h = 0), g[h].focus();
              }
            }
          }, e(b, null, [{ key: "VERSION", get: function () {
              return d;
            } }]), b;
        }();return a(document).on(o.KEYDOWN_DATA_API, q.DATA_TOGGLE, r._dataApiKeydownHandler).on(o.KEYDOWN_DATA_API, q.ROLE_MENU, r._dataApiKeydownHandler).on(o.KEYDOWN_DATA_API, q.ROLE_LISTBOX, r._dataApiKeydownHandler).on(o.CLICK_DATA_API, r._clearMenus).on(o.CLICK_DATA_API, q.DATA_TOGGLE, r.prototype.toggle).on(o.CLICK_DATA_API, q.FORM_CHILD, function (a) {
          a.stopPropagation();
        }), a.fn[b] = r._jQueryInterface, a.fn[b].Constructor = r, a.fn[b].noConflict = function () {
          return a.fn[b] = j, r._jQueryInterface;
        }, r;
      }(jQuery), function (a) {
        var b = "modal",
            g = "4.0.0-alpha.5",
            h = "bs.modal",
            i = "." + h,
            j = ".data-api",
            k = a.fn[b],
            l = 300,
            m = 150,
            n = 27,
            o = { backdrop: !0, keyboard: !0, focus: !0, show: !0 },
            p = { backdrop: "(boolean|string)", keyboard: "boolean", focus: "boolean", show: "boolean" },
            q = { HIDE: "hide" + i, HIDDEN: "hidden" + i, SHOW: "show" + i, SHOWN: "shown" + i, FOCUSIN: "focusin" + i, RESIZE: "resize" + i, CLICK_DISMISS: "click.dismiss" + i, KEYDOWN_DISMISS: "keydown.dismiss" + i, MOUSEUP_DISMISS: "mouseup.dismiss" + i, MOUSEDOWN_DISMISS: "mousedown.dismiss" + i, CLICK_DATA_API: "click" + i + j },
            r = { SCROLLBAR_MEASURER: "modal-scrollbar-measure", BACKDROP: "modal-backdrop", OPEN: "modal-open", FADE: "fade", IN: "in" },
            s = { DIALOG: ".modal-dialog", DATA_TOGGLE: '[data-toggle="modal"]', DATA_DISMISS: '[data-dismiss="modal"]', FIXED_CONTENT: ".navbar-fixed-top, .navbar-fixed-bottom, .is-fixed" },
            t = function () {
          function j(b, d) {
            c(this, j), this._config = this._getConfig(d), this._element = b, this._dialog = a(b).find(s.DIALOG)[0], this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._originalBodyPadding = 0, this._scrollbarWidth = 0;
          }return j.prototype.toggle = function (a) {
            return this._isShown ? this.hide() : this.show(a);
          }, j.prototype.show = function (b) {
            var c = this,
                d = a.Event(q.SHOW, { relatedTarget: b });a(this._element).trigger(d), this._isShown || d.isDefaultPrevented() || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), a(document.body).addClass(r.OPEN), this._setEscapeEvent(), this._setResizeEvent(), a(this._element).on(q.CLICK_DISMISS, s.DATA_DISMISS, a.proxy(this.hide, this)), a(this._dialog).on(q.MOUSEDOWN_DISMISS, function () {
              a(c._element).one(q.MOUSEUP_DISMISS, function (b) {
                a(b.target).is(c._element) && (c._ignoreBackdropClick = !0);
              });
            }), this._showBackdrop(a.proxy(this._showElement, this, b)));
          }, j.prototype.hide = function (b) {
            b && b.preventDefault();var c = a.Event(q.HIDE);a(this._element).trigger(c), this._isShown && !c.isDefaultPrevented() && (this._isShown = !1, this._setEscapeEvent(), this._setResizeEvent(), a(document).off(q.FOCUSIN), a(this._element).removeClass(r.IN), a(this._element).off(q.CLICK_DISMISS), a(this._dialog).off(q.MOUSEDOWN_DISMISS), f.supportsTransitionEnd() && a(this._element).hasClass(r.FADE) ? a(this._element).one(f.TRANSITION_END, a.proxy(this._hideModal, this)).emulateTransitionEnd(l) : this._hideModal());
          }, j.prototype.dispose = function () {
            a.removeData(this._element, h), a(window).off(i), a(document).off(i), a(this._element).off(i), a(this._backdrop).off(i), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._originalBodyPadding = null, this._scrollbarWidth = null;
          }, j.prototype._getConfig = function (c) {
            return c = a.extend({}, o, c), f.typeCheckConfig(b, c, p), c;
          }, j.prototype._showElement = function (b) {
            var c = this,
                d = f.supportsTransitionEnd() && a(this._element).hasClass(r.FADE);this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.scrollTop = 0, d && f.reflow(this._element), a(this._element).addClass(r.IN), this._config.focus && this._enforceFocus();var e = a.Event(q.SHOWN, { relatedTarget: b }),
                g = function () {
              c._config.focus && c._element.focus(), a(c._element).trigger(e);
            };d ? a(this._dialog).one(f.TRANSITION_END, g).emulateTransitionEnd(l) : g();
          }, j.prototype._enforceFocus = function () {
            var b = this;a(document).off(q.FOCUSIN).on(q.FOCUSIN, function (c) {
              document === c.target || b._element === c.target || a(b._element).has(c.target).length || b._element.focus();
            });
          }, j.prototype._setEscapeEvent = function () {
            var b = this;this._isShown && this._config.keyboard ? a(this._element).on(q.KEYDOWN_DISMISS, function (a) {
              a.which === n && b.hide();
            }) : this._isShown || a(this._element).off(q.KEYDOWN_DISMISS);
          }, j.prototype._setResizeEvent = function () {
            this._isShown ? a(window).on(q.RESIZE, a.proxy(this._handleUpdate, this)) : a(window).off(q.RESIZE);
          }, j.prototype._hideModal = function () {
            var b = this;this._element.style.display = "none", this._element.setAttribute("aria-hidden", "true"), this._showBackdrop(function () {
              a(document.body).removeClass(r.OPEN), b._resetAdjustments(), b._resetScrollbar(), a(b._element).trigger(q.HIDDEN);
            });
          }, j.prototype._removeBackdrop = function () {
            this._backdrop && (a(this._backdrop).remove(), this._backdrop = null);
          }, j.prototype._showBackdrop = function (b) {
            var c = this,
                d = a(this._element).hasClass(r.FADE) ? r.FADE : "";if (this._isShown && this._config.backdrop) {
              var e = f.supportsTransitionEnd() && d;if (this._backdrop = document.createElement("div"), this._backdrop.className = r.BACKDROP, d && a(this._backdrop).addClass(d), a(this._backdrop).appendTo(document.body), a(this._element).on(q.CLICK_DISMISS, function (a) {
                return c._ignoreBackdropClick ? void (c._ignoreBackdropClick = !1) : void (a.target === a.currentTarget && ("static" === c._config.backdrop ? c._element.focus() : c.hide()));
              }), e && f.reflow(this._backdrop), a(this._backdrop).addClass(r.IN), !b) return;if (!e) return void b();a(this._backdrop).one(f.TRANSITION_END, b).emulateTransitionEnd(m);
            } else if (!this._isShown && this._backdrop) {
              a(this._backdrop).removeClass(r.IN);var g = function () {
                c._removeBackdrop(), b && b();
              };f.supportsTransitionEnd() && a(this._element).hasClass(r.FADE) ? a(this._backdrop).one(f.TRANSITION_END, g).emulateTransitionEnd(m) : g();
            } else b && b();
          }, j.prototype._handleUpdate = function () {
            this._adjustDialog();
          }, j.prototype._adjustDialog = function () {
            var a = this._element.scrollHeight > document.documentElement.clientHeight;!this._isBodyOverflowing && a && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), this._isBodyOverflowing && !a && (this._element.style.paddingRight = this._scrollbarWidth + "px");
          }, j.prototype._resetAdjustments = function () {
            this._element.style.paddingLeft = "", this._element.style.paddingRight = "";
          }, j.prototype._checkScrollbar = function () {
            this._isBodyOverflowing = document.body.clientWidth < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();
          }, j.prototype._setScrollbar = function () {
            var b = parseInt(a(s.FIXED_CONTENT).css("padding-right") || 0, 10);this._originalBodyPadding = document.body.style.paddingRight || "", this._isBodyOverflowing && (document.body.style.paddingRight = b + this._scrollbarWidth + "px");
          }, j.prototype._resetScrollbar = function () {
            document.body.style.paddingRight = this._originalBodyPadding;
          }, j.prototype._getScrollbarWidth = function () {
            var a = document.createElement("div");a.className = r.SCROLLBAR_MEASURER, document.body.appendChild(a);var b = a.offsetWidth - a.clientWidth;return document.body.removeChild(a), b;
          }, j._jQueryInterface = function (b, c) {
            return this.each(function () {
              var e = a(this).data(h),
                  f = a.extend({}, j.Default, a(this).data(), "object" === ("undefined" == typeof b ? "undefined" : d(b)) && b);if (e || (e = new j(this, f), a(this).data(h, e)), "string" == typeof b) {
                if (void 0 === e[b]) throw new Error('No method named "' + b + '"');e[b](c);
              } else f.show && e.show(c);
            });
          }, e(j, null, [{ key: "VERSION", get: function () {
              return g;
            } }, { key: "Default", get: function () {
              return o;
            } }]), j;
        }();return a(document).on(q.CLICK_DATA_API, s.DATA_TOGGLE, function (b) {
          var c = this,
              d = void 0,
              e = f.getSelectorFromElement(this);e && (d = a(e)[0]);var g = a(d).data(h) ? "toggle" : a.extend({}, a(d).data(), a(this).data());"A" === this.tagName && b.preventDefault();var i = a(d).one(q.SHOW, function (b) {
            b.isDefaultPrevented() || i.one(q.HIDDEN, function () {
              a(c).is(":visible") && c.focus();
            });
          });t._jQueryInterface.call(a(d), g, this);
        }), a.fn[b] = t._jQueryInterface, a.fn[b].Constructor = t, a.fn[b].noConflict = function () {
          return a.fn[b] = k, t._jQueryInterface;
        }, t;
      }(jQuery), function (a) {
        var b = "scrollspy",
            g = "4.0.0-alpha.5",
            h = "bs.scrollspy",
            i = "." + h,
            j = ".data-api",
            k = a.fn[b],
            l = { offset: 10, method: "auto", target: "" },
            m = { offset: "number", method: "string", target: "(string|element)" },
            n = { ACTIVATE: "activate" + i, SCROLL: "scroll" + i, LOAD_DATA_API: "load" + i + j },
            o = { DROPDOWN_ITEM: "dropdown-item", DROPDOWN_MENU: "dropdown-menu", NAV_LINK: "nav-link", NAV: "nav", ACTIVE: "active" },
            p = { DATA_SPY: '[data-spy="scroll"]', ACTIVE: ".active", LIST_ITEM: ".list-item", LI: "li", LI_DROPDOWN: "li.dropdown", NAV_LINKS: ".nav-link", DROPDOWN: ".dropdown", DROPDOWN_ITEMS: ".dropdown-item", DROPDOWN_TOGGLE: ".dropdown-toggle" },
            q = { OFFSET: "offset", POSITION: "position" },
            r = function () {
          function j(b, d) {
            c(this, j), this._element = b, this._scrollElement = "BODY" === b.tagName ? window : b, this._config = this._getConfig(d), this._selector = this._config.target + " " + p.NAV_LINKS + "," + (this._config.target + " " + p.DROPDOWN_ITEMS), this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, a(this._scrollElement).on(n.SCROLL, a.proxy(this._process, this)), this.refresh(), this._process();
          }return j.prototype.refresh = function () {
            var b = this,
                c = this._scrollElement !== this._scrollElement.window ? q.POSITION : q.OFFSET,
                d = "auto" === this._config.method ? c : this._config.method,
                e = d === q.POSITION ? this._getScrollTop() : 0;this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight();var g = a.makeArray(a(this._selector));g.map(function (b) {
              var c = void 0,
                  g = f.getSelectorFromElement(b);return g && (c = a(g)[0]), c && (c.offsetWidth || c.offsetHeight) ? [a(c)[d]().top + e, g] : null;
            }).filter(function (a) {
              return a;
            }).sort(function (a, b) {
              return a[0] - b[0];
            }).forEach(function (a) {
              b._offsets.push(a[0]), b._targets.push(a[1]);
            });
          }, j.prototype.dispose = function () {
            a.removeData(this._element, h), a(this._scrollElement).off(i), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;
          }, j.prototype._getConfig = function (c) {
            if (c = a.extend({}, l, c), "string" != typeof c.target) {
              var d = a(c.target).attr("id");d || (d = f.getUID(b), a(c.target).attr("id", d)), c.target = "#" + d;
            }return f.typeCheckConfig(b, c, m), c;
          }, j.prototype._getScrollTop = function () {
            return this._scrollElement === window ? this._scrollElement.scrollY : this._scrollElement.scrollTop;
          }, j.prototype._getScrollHeight = function () {
            return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
          }, j.prototype._process = function () {
            var a = this._getScrollTop() + this._config.offset,
                b = this._getScrollHeight(),
                c = this._config.offset + b - this._scrollElement.offsetHeight;if (this._scrollHeight !== b && this.refresh(), a >= c) {
              var d = this._targets[this._targets.length - 1];this._activeTarget !== d && this._activate(d);
            }if (this._activeTarget && a < this._offsets[0]) return this._activeTarget = null, void this._clear();for (var e = this._offsets.length; e--;) {
              var f = this._activeTarget !== this._targets[e] && a >= this._offsets[e] && (void 0 === this._offsets[e + 1] || a < this._offsets[e + 1]);f && this._activate(this._targets[e]);
            }
          }, j.prototype._activate = function (b) {
            this._activeTarget = b, this._clear();var c = this._selector.split(",");c = c.map(function (a) {
              return a + '[data-target="' + b + '"],' + (a + '[href="' + b + '"]');
            });var d = a(c.join(","));d.hasClass(o.DROPDOWN_ITEM) ? (d.closest(p.DROPDOWN).find(p.DROPDOWN_TOGGLE).addClass(o.ACTIVE), d.addClass(o.ACTIVE)) : d.parents(p.LI).find(p.NAV_LINKS).addClass(o.ACTIVE), a(this._scrollElement).trigger(n.ACTIVATE, { relatedTarget: b });
          }, j.prototype._clear = function () {
            a(this._selector).filter(p.ACTIVE).removeClass(o.ACTIVE);
          }, j._jQueryInterface = function (b) {
            return this.each(function () {
              var c = a(this).data(h),
                  e = "object" === ("undefined" == typeof b ? "undefined" : d(b)) && b || null;if (c || (c = new j(this, e), a(this).data(h, c)), "string" == typeof b) {
                if (void 0 === c[b]) throw new Error('No method named "' + b + '"');c[b]();
              }
            });
          }, e(j, null, [{ key: "VERSION", get: function () {
              return g;
            } }, { key: "Default", get: function () {
              return l;
            } }]), j;
        }();return a(window).on(n.LOAD_DATA_API, function () {
          for (var b = a.makeArray(a(p.DATA_SPY)), c = b.length; c--;) {
            var d = a(b[c]);r._jQueryInterface.call(d, d.data());
          }
        }), a.fn[b] = r._jQueryInterface, a.fn[b].Constructor = r, a.fn[b].noConflict = function () {
          return a.fn[b] = k, r._jQueryInterface;
        }, r;
      }(jQuery), function (a) {
        var b = "tab",
            d = "4.0.0-alpha.5",
            g = "bs.tab",
            h = "." + g,
            i = ".data-api",
            j = a.fn[b],
            k = 150,
            l = { HIDE: "hide" + h, HIDDEN: "hidden" + h, SHOW: "show" + h, SHOWN: "shown" + h, CLICK_DATA_API: "click" + h + i },
            m = { DROPDOWN_MENU: "dropdown-menu", ACTIVE: "active", FADE: "fade", IN: "in" },
            n = { A: "a", LI: "li", DROPDOWN: ".dropdown", UL: "ul:not(.dropdown-menu)", FADE_CHILD: "> .nav-item .fade, > .fade", ACTIVE: ".active", ACTIVE_CHILD: "> .nav-item > .active, > .active", DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"]',
          DROPDOWN_TOGGLE: ".dropdown-toggle", DROPDOWN_ACTIVE_CHILD: "> .dropdown-menu .active" },
            o = function () {
          function b(a) {
            c(this, b), this._element = a;
          }return b.prototype.show = function () {
            var b = this;if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE || !a(this._element).hasClass(m.ACTIVE)) {
              var c = void 0,
                  d = void 0,
                  e = a(this._element).closest(n.UL)[0],
                  g = f.getSelectorFromElement(this._element);e && (d = a.makeArray(a(e).find(n.ACTIVE)), d = d[d.length - 1]);var h = a.Event(l.HIDE, { relatedTarget: this._element }),
                  i = a.Event(l.SHOW, { relatedTarget: d });if (d && a(d).trigger(h), a(this._element).trigger(i), !i.isDefaultPrevented() && !h.isDefaultPrevented()) {
                g && (c = a(g)[0]), this._activate(this._element, e);var j = function () {
                  var c = a.Event(l.HIDDEN, { relatedTarget: b._element }),
                      e = a.Event(l.SHOWN, { relatedTarget: d });a(d).trigger(c), a(b._element).trigger(e);
                };c ? this._activate(c, c.parentNode, j) : j();
              }
            }
          }, b.prototype.dispose = function () {
            a.removeClass(this._element, g), this._element = null;
          }, b.prototype._activate = function (b, c, d) {
            var e = a(c).find(n.ACTIVE_CHILD)[0],
                g = d && f.supportsTransitionEnd() && (e && a(e).hasClass(m.FADE) || Boolean(a(c).find(n.FADE_CHILD)[0])),
                h = a.proxy(this._transitionComplete, this, b, e, g, d);e && g ? a(e).one(f.TRANSITION_END, h).emulateTransitionEnd(k) : h(), e && a(e).removeClass(m.IN);
          }, b.prototype._transitionComplete = function (b, c, d, e) {
            if (c) {
              a(c).removeClass(m.ACTIVE);var g = a(c).find(n.DROPDOWN_ACTIVE_CHILD)[0];g && a(g).removeClass(m.ACTIVE), c.setAttribute("aria-expanded", !1);
            }if (a(b).addClass(m.ACTIVE), b.setAttribute("aria-expanded", !0), d ? (f.reflow(b), a(b).addClass(m.IN)) : a(b).removeClass(m.FADE), b.parentNode && a(b.parentNode).hasClass(m.DROPDOWN_MENU)) {
              var h = a(b).closest(n.DROPDOWN)[0];h && a(h).find(n.DROPDOWN_TOGGLE).addClass(m.ACTIVE), b.setAttribute("aria-expanded", !0);
            }e && e();
          }, b._jQueryInterface = function (c) {
            return this.each(function () {
              var d = a(this),
                  e = d.data(g);if (e || (e = e = new b(this), d.data(g, e)), "string" == typeof c) {
                if (void 0 === e[c]) throw new Error('No method named "' + c + '"');e[c]();
              }
            });
          }, e(b, null, [{ key: "VERSION", get: function () {
              return d;
            } }]), b;
        }();return a(document).on(l.CLICK_DATA_API, n.DATA_TOGGLE, function (b) {
          b.preventDefault(), o._jQueryInterface.call(a(this), "show");
        }), a.fn[b] = o._jQueryInterface, a.fn[b].Constructor = o, a.fn[b].noConflict = function () {
          return a.fn[b] = j, o._jQueryInterface;
        }, o;
      }(jQuery), function (a) {
        if (void 0 === window.Tether) throw new Error("Bootstrap tooltips require Tether (http://tether.io/)");var b = "tooltip",
            g = "4.0.0-alpha.5",
            h = "bs.tooltip",
            i = "." + h,
            j = a.fn[b],
            k = 150,
            l = "bs-tether",
            m = { animation: !0, template: '<div class="tooltip" role="tooltip"><div class="tooltip-inner"></div></div>', trigger: "hover focus", title: "", delay: 0, html: !1, selector: !1, placement: "top", offset: "0 0", constraints: [] },
            n = { animation: "boolean", template: "string", title: "(string|element|function)", trigger: "string", delay: "(number|object)", html: "boolean", selector: "(string|boolean)", placement: "(string|function)", offset: "string", constraints: "array" },
            o = { TOP: "bottom center", RIGHT: "middle left", BOTTOM: "top center", LEFT: "middle right" },
            p = { IN: "in", OUT: "out" },
            q = { HIDE: "hide" + i, HIDDEN: "hidden" + i, SHOW: "show" + i, SHOWN: "shown" + i, INSERTED: "inserted" + i, CLICK: "click" + i, FOCUSIN: "focusin" + i, FOCUSOUT: "focusout" + i, MOUSEENTER: "mouseenter" + i, MOUSELEAVE: "mouseleave" + i },
            r = { FADE: "fade", IN: "in" },
            s = { TOOLTIP: ".tooltip", TOOLTIP_INNER: ".tooltip-inner" },
            t = { element: !1, enabled: !1 },
            u = { HOVER: "hover", FOCUS: "focus", CLICK: "click", MANUAL: "manual" },
            v = function () {
          function j(a, b) {
            c(this, j), this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, this._tether = null, this.element = a, this.config = this._getConfig(b), this.tip = null, this._setListeners();
          }return j.prototype.enable = function () {
            this._isEnabled = !0;
          }, j.prototype.disable = function () {
            this._isEnabled = !1;
          }, j.prototype.toggleEnabled = function () {
            this._isEnabled = !this._isEnabled;
          }, j.prototype.toggle = function (b) {
            if (b) {
              var c = this.constructor.DATA_KEY,
                  d = a(b.currentTarget).data(c);d || (d = new this.constructor(b.currentTarget, this._getDelegateConfig()), a(b.currentTarget).data(c, d)), d._activeTrigger.click = !d._activeTrigger.click, d._isWithActiveTrigger() ? d._enter(null, d) : d._leave(null, d);
            } else {
              if (a(this.getTipElement()).hasClass(r.IN)) return void this._leave(null, this);this._enter(null, this);
            }
          }, j.prototype.dispose = function () {
            clearTimeout(this._timeout), this.cleanupTether(), a.removeData(this.element, this.constructor.DATA_KEY), a(this.element).off(this.constructor.EVENT_KEY), this.tip && a(this.tip).remove(), this._isEnabled = null, this._timeout = null, this._hoverState = null, this._activeTrigger = null, this._tether = null, this.element = null, this.config = null, this.tip = null;
          }, j.prototype.show = function () {
            var b = this,
                c = a.Event(this.constructor.Event.SHOW);if (this.isWithContent() && this._isEnabled) {
              a(this.element).trigger(c);var d = a.contains(this.element.ownerDocument.documentElement, this.element);if (c.isDefaultPrevented() || !d) return;var e = this.getTipElement(),
                  g = f.getUID(this.constructor.NAME);e.setAttribute("id", g), this.element.setAttribute("aria-describedby", g), this.setContent(), this.config.animation && a(e).addClass(r.FADE);var h = "function" == typeof this.config.placement ? this.config.placement.call(this, e, this.element) : this.config.placement,
                  i = this._getAttachment(h);a(e).data(this.constructor.DATA_KEY, this).appendTo(document.body), a(this.element).trigger(this.constructor.Event.INSERTED), this._tether = new Tether({ attachment: i, element: e, target: this.element, classes: t, classPrefix: l, offset: this.config.offset, constraints: this.config.constraints, addTargetClasses: !1 }), f.reflow(e), this._tether.position(), a(e).addClass(r.IN);var k = function () {
                var c = b._hoverState;b._hoverState = null, a(b.element).trigger(b.constructor.Event.SHOWN), c === p.OUT && b._leave(null, b);
              };if (f.supportsTransitionEnd() && a(this.tip).hasClass(r.FADE)) return void a(this.tip).one(f.TRANSITION_END, k).emulateTransitionEnd(j._TRANSITION_DURATION);k();
            }
          }, j.prototype.hide = function (b) {
            var c = this,
                d = this.getTipElement(),
                e = a.Event(this.constructor.Event.HIDE),
                g = function () {
              c._hoverState !== p.IN && d.parentNode && d.parentNode.removeChild(d), c.element.removeAttribute("aria-describedby"), a(c.element).trigger(c.constructor.Event.HIDDEN), c.cleanupTether(), b && b();
            };a(this.element).trigger(e), e.isDefaultPrevented() || (a(d).removeClass(r.IN), f.supportsTransitionEnd() && a(this.tip).hasClass(r.FADE) ? a(d).one(f.TRANSITION_END, g).emulateTransitionEnd(k) : g(), this._hoverState = "");
          }, j.prototype.isWithContent = function () {
            return Boolean(this.getTitle());
          }, j.prototype.getTipElement = function () {
            return this.tip = this.tip || a(this.config.template)[0];
          }, j.prototype.setContent = function () {
            var b = a(this.getTipElement());this.setElementContent(b.find(s.TOOLTIP_INNER), this.getTitle()), b.removeClass(r.FADE).removeClass(r.IN), this.cleanupTether();
          }, j.prototype.setElementContent = function (b, c) {
            var e = this.config.html;"object" === ("undefined" == typeof c ? "undefined" : d(c)) && (c.nodeType || c.jquery) ? e ? a(c).parent().is(b) || b.empty().append(c) : b.text(a(c).text()) : b[e ? "html" : "text"](c);
          }, j.prototype.getTitle = function () {
            var a = this.element.getAttribute("data-original-title");return a || (a = "function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), a;
          }, j.prototype.cleanupTether = function () {
            this._tether && this._tether.destroy();
          }, j.prototype._getAttachment = function (a) {
            return o[a.toUpperCase()];
          }, j.prototype._setListeners = function () {
            var b = this,
                c = this.config.trigger.split(" ");c.forEach(function (c) {
              if ("click" === c) a(b.element).on(b.constructor.Event.CLICK, b.config.selector, a.proxy(b.toggle, b));else if (c !== u.MANUAL) {
                var d = c === u.HOVER ? b.constructor.Event.MOUSEENTER : b.constructor.Event.FOCUSIN,
                    e = c === u.HOVER ? b.constructor.Event.MOUSELEAVE : b.constructor.Event.FOCUSOUT;a(b.element).on(d, b.config.selector, a.proxy(b._enter, b)).on(e, b.config.selector, a.proxy(b._leave, b));
              }
            }), this.config.selector ? this.config = a.extend({}, this.config, { trigger: "manual", selector: "" }) : this._fixTitle();
          }, j.prototype._fixTitle = function () {
            var a = d(this.element.getAttribute("data-original-title"));(this.element.getAttribute("title") || "string" !== a) && (this.element.setAttribute("data-original-title", this.element.getAttribute("title") || ""), this.element.setAttribute("title", ""));
          }, j.prototype._enter = function (b, c) {
            var d = this.constructor.DATA_KEY;return c = c || a(b.currentTarget).data(d), c || (c = new this.constructor(b.currentTarget, this._getDelegateConfig()), a(b.currentTarget).data(d, c)), b && (c._activeTrigger["focusin" === b.type ? u.FOCUS : u.HOVER] = !0), a(c.getTipElement()).hasClass(r.IN) || c._hoverState === p.IN ? void (c._hoverState = p.IN) : (clearTimeout(c._timeout), c._hoverState = p.IN, c.config.delay && c.config.delay.show ? void (c._timeout = setTimeout(function () {
              c._hoverState === p.IN && c.show();
            }, c.config.delay.show)) : void c.show());
          }, j.prototype._leave = function (b, c) {
            var d = this.constructor.DATA_KEY;if (c = c || a(b.currentTarget).data(d), c || (c = new this.constructor(b.currentTarget, this._getDelegateConfig()), a(b.currentTarget).data(d, c)), b && (c._activeTrigger["focusout" === b.type ? u.FOCUS : u.HOVER] = !1), !c._isWithActiveTrigger()) return clearTimeout(c._timeout), c._hoverState = p.OUT, c.config.delay && c.config.delay.hide ? void (c._timeout = setTimeout(function () {
              c._hoverState === p.OUT && c.hide();
            }, c.config.delay.hide)) : void c.hide();
          }, j.prototype._isWithActiveTrigger = function () {
            for (var a in this._activeTrigger) if (this._activeTrigger[a]) return !0;return !1;
          }, j.prototype._getConfig = function (c) {
            return c = a.extend({}, this.constructor.Default, a(this.element).data(), c), c.delay && "number" == typeof c.delay && (c.delay = { show: c.delay, hide: c.delay }), f.typeCheckConfig(b, c, this.constructor.DefaultType), c;
          }, j.prototype._getDelegateConfig = function () {
            var a = {};if (this.config) for (var b in this.config) this.constructor.Default[b] !== this.config[b] && (a[b] = this.config[b]);return a;
          }, j._jQueryInterface = function (b) {
            return this.each(function () {
              var c = a(this).data(h),
                  e = "object" === ("undefined" == typeof b ? "undefined" : d(b)) ? b : null;if ((c || !/dispose|hide/.test(b)) && (c || (c = new j(this, e), a(this).data(h, c)), "string" == typeof b)) {
                if (void 0 === c[b]) throw new Error('No method named "' + b + '"');c[b]();
              }
            });
          }, e(j, null, [{ key: "VERSION", get: function () {
              return g;
            } }, { key: "Default", get: function () {
              return m;
            } }, { key: "NAME", get: function () {
              return b;
            } }, { key: "DATA_KEY", get: function () {
              return h;
            } }, { key: "Event", get: function () {
              return q;
            } }, { key: "EVENT_KEY", get: function () {
              return i;
            } }, { key: "DefaultType", get: function () {
              return n;
            } }]), j;
        }();return a.fn[b] = v._jQueryInterface, a.fn[b].Constructor = v, a.fn[b].noConflict = function () {
          return a.fn[b] = j, v._jQueryInterface;
        }, v;
      }(jQuery));(function (f) {
        var h = "popover",
            i = "4.0.0-alpha.5",
            j = "bs.popover",
            k = "." + j,
            l = f.fn[h],
            m = f.extend({}, g.Default, { placement: "right", trigger: "click", content: "", template: '<div class="popover" role="tooltip"><h3 class="popover-title"></h3><div class="popover-content"></div></div>' }),
            n = f.extend({}, g.DefaultType, { content: "(string|element|function)" }),
            o = { FADE: "fade", IN: "in" },
            p = { TITLE: ".popover-title", CONTENT: ".popover-content" },
            q = { HIDE: "hide" + k, HIDDEN: "hidden" + k, SHOW: "show" + k, SHOWN: "shown" + k, INSERTED: "inserted" + k, CLICK: "click" + k, FOCUSIN: "focusin" + k, FOCUSOUT: "focusout" + k, MOUSEENTER: "mouseenter" + k, MOUSELEAVE: "mouseleave" + k },
            r = function (g) {
          function l() {
            return c(this, l), a(this, g.apply(this, arguments));
          }return b(l, g), l.prototype.isWithContent = function () {
            return this.getTitle() || this._getContent();
          }, l.prototype.getTipElement = function () {
            return this.tip = this.tip || f(this.config.template)[0];
          }, l.prototype.setContent = function () {
            var a = f(this.getTipElement());this.setElementContent(a.find(p.TITLE), this.getTitle()), this.setElementContent(a.find(p.CONTENT), this._getContent()), a.removeClass(o.FADE).removeClass(o.IN), this.cleanupTether();
          }, l.prototype._getContent = function () {
            return this.element.getAttribute("data-content") || ("function" == typeof this.config.content ? this.config.content.call(this.element) : this.config.content);
          }, l._jQueryInterface = function (a) {
            return this.each(function () {
              var b = f(this).data(j),
                  c = "object" === ("undefined" == typeof a ? "undefined" : d(a)) ? a : null;if ((b || !/destroy|hide/.test(a)) && (b || (b = new l(this, c), f(this).data(j, b)), "string" == typeof a)) {
                if (void 0 === b[a]) throw new Error('No method named "' + a + '"');b[a]();
              }
            });
          }, e(l, null, [{ key: "VERSION", get: function () {
              return i;
            } }, { key: "Default", get: function () {
              return m;
            } }, { key: "NAME", get: function () {
              return h;
            } }, { key: "DATA_KEY", get: function () {
              return j;
            } }, { key: "Event", get: function () {
              return q;
            } }, { key: "EVENT_KEY", get: function () {
              return k;
            } }, { key: "DefaultType", get: function () {
              return n;
            } }]), l;
        }(g);return f.fn[h] = r._jQueryInterface, f.fn[h].Constructor = r, f.fn[h].noConflict = function () {
          return f.fn[h] = l, r._jQueryInterface;
        }, r;
      })(jQuery);
    }();
  })(this);

  return _retrieveGlobal();
});
(function() {
var define = $__System.amdDefine;
!function(e, t) {
  "object" == typeof exports && "undefined" != typeof module ? t() : "function" == typeof define && define.amd ? define("4", [], t) : t();
}(this, function() {
  "use strict";
  function e(e, t) {
    for (var n = e.length - 1; n >= 0; n--)
      "function" == typeof e[n] && (e[n] = Zone.current.wrap(e[n], t + "_" + n));
    return e;
  }
  function t(t, n) {
    for (var r = t.constructor.name,
        o = function(o) {
          var a = n[o],
              i = t[a];
          i && (t[a] = function(t) {
            return function() {
              return t.apply(this, e(arguments, r + "." + a));
            };
          }(i));
        },
        a = 0; a < n.length; a++)
      o(a);
  }
  function n(e, t) {
    var n = Object.getOwnPropertyDescriptor(e, t) || {
      enumerable: !0,
      configurable: !0
    };
    delete n.writable, delete n.value;
    var r = t.substr(2),
        o = "_" + t;
    n.set = function(e) {
      if (this[o] && this.removeEventListener(r, this[o]), "function" == typeof e) {
        var t = function(t) {
          var n;
          n = e.apply(this, arguments), void 0 == n || n || t.preventDefault();
        };
        this[o] = t, this.addEventListener(r, t, !1);
      } else
        this[o] = null;
    }, n.get = function() {
      return this[o] || null;
    }, Object.defineProperty(e, t, n);
  }
  function r(e, t) {
    var r = [];
    for (var o in e)
      "on" == o.substr(0, 2) && r.push(o);
    for (var a = 0; a < r.length; a++)
      n(e, r[a]);
    if (t)
      for (var i = 0; i < t.length; i++)
        n(e, "on" + t[i]);
  }
  function o(e, t, n, r, o) {
    var a = e[j];
    if (a)
      for (var i = 0; i < a.length; i++) {
        var s = a[i],
            u = s.data;
        if (u.handler === t && u.useCapturing === r && u.eventName === n)
          return o && a.splice(i, 1), s;
      }
    return null;
  }
  function a(e, t) {
    var n = e[j];
    n || (n = e[j] = []), n.push(t);
  }
  function i(e, t, n, r) {
    function i(e) {
      var t = e.data;
      return a(t.target, e), t.target[u](t.eventName, e.invoke, t.useCapturing);
    }
    function s(e) {
      var t = e.data;
      o(t.target, e.invoke, t.eventName, t.useCapturing, !0), t.target[c](t.eventName, e.invoke, t.useCapturing);
    }
    void 0 === n && (n = !0), void 0 === r && (r = !1);
    var u = E(e),
        c = E(t),
        l = !n && void 0;
    return function(t, n) {
      var a = n[0],
          c = n[1],
          f = n[2] || l,
          p = t || S,
          h = null;
      "function" == typeof c ? h = c : c && c.handleEvent && (h = function(e) {
        return c.handleEvent(e);
      });
      var d = !1;
      try {
        d = c && "[object FunctionWrapper]" === c.toString();
      } catch (v) {
        return;
      }
      if (!h || d)
        return p[u](a, c, f);
      if (!r) {
        var g = o(p, c, a, f, !1);
        if (g)
          return p[u](a, g.invoke, f);
      }
      var y = Zone.current,
          k = p.constructor.name + "." + e + ":" + a,
          b = {
            target: p,
            eventName: a,
            name: a,
            useCapturing: f,
            handler: c
          };
      y.scheduleEventTask(k, h, b, i, s);
    };
  }
  function s(e, t) {
    void 0 === t && (t = !0);
    var n = E(e),
        r = !t && void 0;
    return function(e, t) {
      var a = t[0],
          i = t[1],
          s = t[2] || r,
          u = e || S,
          c = o(u, i, a, s, !0);
      c ? c.zone.cancelTask(c) : u[n](a, i, s);
    };
  }
  function u(e) {
    return !(!e || !e.addEventListener) && (f(e, z, function() {
      return C;
    }), f(e, I, function() {
      return M;
    }), !0);
  }
  function c(t) {
    var n = S[t];
    if (n) {
      S[t] = function() {
        var r = e(arguments, t);
        switch (r.length) {
          case 0:
            this[L] = new n;
            break;
          case 1:
            this[L] = new n(r[0]);
            break;
          case 2:
            this[L] = new n(r[0], r[1]);
            break;
          case 3:
            this[L] = new n(r[0], r[1], r[2]);
            break;
          case 4:
            this[L] = new n(r[0], r[1], r[2], r[3]);
            break;
          default:
            throw new Error("Arg list too long.");
        }
      };
      var r,
          o = new n(function() {});
      for (r in o)
        "XMLHttpRequest" === t && "responseBlob" === r || !function(e) {
          "function" == typeof o[e] ? S[t].prototype[e] = function() {
            return this[L][e].apply(this[L], arguments);
          } : Object.defineProperty(S[t].prototype, e, {
            set: function(n) {
              "function" == typeof n ? this[L][e] = Zone.current.wrap(n, t + "." + e) : this[L][e] = n;
            },
            get: function() {
              return this[L][e];
            }
          });
        }(r);
      for (r in n)
        "prototype" !== r && n.hasOwnProperty(r) && (S[t][r] = n[r]);
    }
  }
  function l(e, t) {
    try {
      return Function("f", "return function " + e + "(){return f(this, arguments)}")(t);
    } catch (n) {
      return function() {
        return t(this, arguments);
      };
    }
  }
  function f(e, t, n) {
    for (var r = e; r && Object.getOwnPropertyNames(r).indexOf(t) === -1; )
      r = Object.getPrototypeOf(r);
    !r && e[t] && (r = e);
    var o,
        a = E(t);
    return r && !(o = r[a]) && (o = r[a] = r[t], r[t] = l(t, n(o, a, t))), o;
  }
  function p(e, t, n, r) {
    function o(t) {
      var n = t.data;
      return n.args[0] = function() {
        t.invoke.apply(this, arguments), delete u[n.handleId];
      }, n.handleId = i.apply(e, n.args), u[n.handleId] = t, t;
    }
    function a(e) {
      return delete u[e.data.handleId], s(e.data.handleId);
    }
    var i = null,
        s = null;
    t += r, n += r;
    var u = {};
    i = f(e, t, function(n) {
      return function(i, s) {
        if ("function" == typeof s[0]) {
          var u = Zone.current,
              c = {
                handleId: null,
                isPeriodic: "Interval" === r,
                delay: "Timeout" === r || "Interval" === r ? s[1] || 0 : null,
                args: s
              },
              l = u.scheduleMacroTask(t, s[0], c, o, a);
          if (!l)
            return l;
          var f = l.data.handleId;
          return f.ref && f.unref && (l.ref = f.ref.bind(f), l.unref = f.unref.bind(f)), l;
        }
        return n.apply(e, s);
      };
    }), s = f(e, n, function(t) {
      return function(n, r) {
        var o = "number" == typeof r[0] ? u[r[0]] : r[0];
        o && "string" == typeof o.type ? (o.cancelFn && o.data.isPeriodic || 0 === o.runCount) && o.zone.cancelTask(o) : t.apply(e, r);
      };
    });
  }
  function h() {
    Object.defineProperty = function(e, t, n) {
      if (v(e, t))
        throw new TypeError("Cannot assign to read only property '" + t + "' of " + e);
      var r = n.configurable;
      return "prototype" !== t && (n = g(e, t, n)), y(e, t, n, r);
    }, Object.defineProperties = function(e, t) {
      return Object.keys(t).forEach(function(n) {
        Object.defineProperty(e, n, t[n]);
      }), e;
    }, Object.create = function(e, t) {
      return "object" != typeof t || Object.isFrozen(t) || Object.keys(t).forEach(function(n) {
        t[n] = g(e, n, t[n]);
      }), R(e, t);
    }, Object.getOwnPropertyDescriptor = function(e, t) {
      var n = H(e, t);
      return v(e, t) && (n.configurable = !1), n;
    };
  }
  function d(e, t, n) {
    var r = n.configurable;
    return n = g(e, t, n), y(e, t, n, r);
  }
  function v(e, t) {
    return e && e[q] && e[q][t];
  }
  function g(e, t, n) {
    return n.configurable = !0, n.configurable || (e[q] || F(e, q, {
      writable: !0,
      value: {}
    }), e[q][t] = !0), n;
  }
  function y(e, t, n, r) {
    try {
      return F(e, t, n);
    } catch (o) {
      if (!n.configurable)
        throw o;
      "undefined" == typeof r ? delete n.configurable : n.configurable = r;
      try {
        return F(e, t, n);
      } catch (o) {
        var a = null;
        try {
          a = JSON.stringify(n);
        } catch (o) {
          a = a.toString();
        }
        console.log("Attempting to configure '" + t + "' with descriptor '" + a + "' on object '" + e + "' and got error, giving up: " + o);
      }
    }
  }
  function k(e) {
    var t = [],
        n = e.wtf;
    n ? t = B.split(",").map(function(e) {
      return "HTML" + e + "Element";
    }).concat(x) : e[W] ? t.push(W) : t = x;
    for (var r = 0; r < t.length; r++) {
      var o = e[t[r]];
      u(o && o.prototype);
    }
  }
  function b(e) {
    var t = e.WebSocket;
    e.EventTarget || u(t.prototype), e.WebSocket = function(e, n) {
      var o,
          a = arguments.length > 1 ? new t(e, n) : new t(e),
          i = Object.getOwnPropertyDescriptor(a, "onmessage");
      return i && i.configurable === !1 ? (o = Object.create(a), ["addEventListener", "removeEventListener", "send", "close"].forEach(function(e) {
        o[e] = function() {
          return a[e].apply(a, arguments);
        };
      })) : o = a, r(o, ["close", "error", "message", "open"]), o;
    };
    for (var n in t)
      e.WebSocket[n] = t[n];
  }
  function m(e) {
    if (!P) {
      var t = "undefined" != typeof WebSocket;
      T() ? (Z && r(HTMLElement.prototype, X), r(XMLHttpRequest.prototype, null), "undefined" != typeof IDBIndex && (r(IDBIndex.prototype, null), r(IDBRequest.prototype, null), r(IDBOpenDBRequest.prototype, null), r(IDBDatabase.prototype, null), r(IDBTransaction.prototype, null), r(IDBCursor.prototype, null)), t && r(WebSocket.prototype, null)) : (w(), c("XMLHttpRequest"), t && b(e));
    }
  }
  function T() {
    if (Z && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, "onclick") && "undefined" != typeof Element) {
      var e = Object.getOwnPropertyDescriptor(Element.prototype, "onclick");
      if (e && !e.configurable)
        return !1;
    }
    Object.defineProperty(XMLHttpRequest.prototype, "onreadystatechange", {get: function() {
        return !0;
      }});
    var t = new XMLHttpRequest,
        n = !!t.onreadystatechange;
    return Object.defineProperty(XMLHttpRequest.prototype, "onreadystatechange", {}), n;
  }
  function w() {
    for (var e = function(e) {
      var t = X[e],
          n = "on" + t;
      self.addEventListener(t, function(e) {
        var t,
            r,
            o = e.target;
        for (r = o ? o.constructor.name + "." + n : "unknown." + n; o; )
          o[n] && !o[n][A] && (t = Zone.current.wrap(o[n], r), t[A] = o[n], o[n] = t), o = o.parentElement;
      }, !0);
    },
        t = 0; t < X.length; t++)
      e(t);
  }
  function _(e) {
    if (Z && "registerElement" in e.document) {
      var t = document.registerElement,
          n = ["createdCallback", "attachedCallback", "detachedCallback", "attributeChangedCallback"];
      document.registerElement = function(e, r) {
        return r && r.prototype && n.forEach(function(e) {
          var t = "Document.registerElement::" + e;
          if (r.prototype.hasOwnProperty(e)) {
            var n = Object.getOwnPropertyDescriptor(r.prototype, e);
            n && n.value ? (n.value = Zone.current.wrap(n.value, t), d(r.prototype, e, n)) : r.prototype[e] = Zone.current.wrap(r.prototype[e], t);
          } else
            r.prototype[e] && (r.prototype[e] = Zone.current.wrap(r.prototype[e], t));
        }), t.apply(document, [e, r]);
      };
    }
  }
  function D(e) {
    function t(e) {
      var t = e[Q];
      return t;
    }
    function n(e) {
      var t = e.data;
      t.target.addEventListener("readystatechange", function() {
        t.target.readyState === t.target.DONE && (t.aborted || e.invoke());
      });
      var n = t.target[Q];
      return n || (t.target[Q] = e), i.apply(t.target, t.args), e;
    }
    function r() {}
    function o(e) {
      var t = e.data;
      return t.aborted = !0, s.apply(t.target, t.args);
    }
    var a = f(e.XMLHttpRequest.prototype, "open", function() {
      return function(e, t) {
        return e[Y] = 0 == t[2], a.apply(e, t);
      };
    }),
        i = f(e.XMLHttpRequest.prototype, "send", function() {
          return function(e, t) {
            var a = Zone.current;
            if (e[Y])
              return i.apply(e, t);
            var s = {
              target: e,
              isPeriodic: !1,
              delay: null,
              args: t,
              aborted: !1
            };
            return a.scheduleMacroTask("XMLHttpRequest.send", r, s, n, o);
          };
        }),
        s = f(e.XMLHttpRequest.prototype, "abort", function(e) {
          return function(e, n) {
            var r = t(e);
            if (r && "string" == typeof r.type) {
              if (null == r.cancelFn)
                return;
              r.zone.cancelTask(r);
            }
          };
        });
  }
  var E = (function(e) {
    function t(e) {
      return "__zone_symbol__" + e;
    }
    function n() {
      0 == E && 0 == w.length && (e[k] ? e[k].resolve(0)[b](a) : e[y](a, 0));
    }
    function r(e) {
      n(), w.push(e);
    }
    function o(e) {
      var t = e && e.rejection;
      t && console.error("Unhandled Promise rejection:", t instanceof Error ? t.message : t, "; Zone:", e.zone.name, "; Task:", e.task && e.task.source, "; Value:", t, t instanceof Error ? t.stack : void 0), console.error(e);
    }
    function a() {
      if (!_) {
        for (_ = !0; w.length; ) {
          var e = w;
          w = [];
          for (var t = 0; t < e.length; t++) {
            var n = e[t];
            try {
              n.zone.runTask(n, null, null);
            } catch (r) {
              o(r);
            }
          }
        }
        for (; D.length; )
          for (var a = function() {
            var e = D.shift();
            try {
              e.zone.runGuarded(function() {
                throw e;
              });
            } catch (t) {
              o(t);
            }
          }; D.length; )
            a();
        _ = !1;
      }
    }
    function i(e) {
      return e && e.then;
    }
    function s(e) {
      return e;
    }
    function u(e) {
      return C.reject(e);
    }
    function c(e, t) {
      return function(n) {
        l(e, t, n);
      };
    }
    function l(e, t, r) {
      if (e[S] === Z)
        if (r instanceof C && r[S] !== Z)
          f(r), l(e, r[S], r[O]);
        else if (i(r))
          r.then(c(e, t), c(e, !1));
        else {
          e[S] = t;
          var o = e[O];
          e[O] = r;
          for (var a = 0; a < o.length; )
            p(e, o[a++], o[a++], o[a++], o[a++]);
          if (0 == o.length && t == z) {
            e[S] = I;
            try {
              throw new Error("Uncaught (in promise): " + r + (r && r.stack ? "\n" + r.stack : ""));
            } catch (s) {
              var u = s;
              u.rejection = r, u.promise = e, u.zone = d.current, u.task = d.currentTask, D.push(u), n();
            }
          }
        }
      return e;
    }
    function f(e) {
      if (e[S] === I) {
        e[S] = z;
        for (var t = 0; t < D.length; t++)
          if (e === D[t].promise) {
            D.splice(t, 1);
            break;
          }
      }
    }
    function p(e, t, n, r, o) {
      f(e);
      var a = e[S] ? r || s : o || u;
      t.scheduleMicroTask(P, function() {
        try {
          l(n, !0, t.run(a, null, [e[O]]));
        } catch (r) {
          l(n, !1, r);
        }
      });
    }
    function h(e) {
      var n = e.prototype,
          r = n[t("then")] = n.then;
      n.then = function(e, t) {
        var n = this;
        return new C(function(e, t) {
          r.call(n, e, t);
        }).then(e, t);
      };
    }
    if (e.Zone)
      throw new Error("Zone already loaded.");
    var d = function() {
      function n(e, t) {
        this._properties = null, this._parent = e, this._name = t ? t.name || "unnamed" : "<root>", this._properties = t && t.properties || {}, this._zoneDelegate = new v(this, this._parent && this._parent._zoneDelegate, t);
      }
      return n.assertZonePatched = function() {
        if (e.Promise !== C)
          throw new Error("Zone.js has detected that ZoneAwarePromise `(window|global).Promise` has been overwritten.\nMost likely cause is that a Promise polyfill has been loaded after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. If you must load one, do so before loading zone.js.)");
      }, Object.defineProperty(n, "current", {
        get: function() {
          return m;
        },
        enumerable: !0,
        configurable: !0
      }), Object.defineProperty(n, "currentTask", {
        get: function() {
          return T;
        },
        enumerable: !0,
        configurable: !0
      }), Object.defineProperty(n.prototype, "parent", {
        get: function() {
          return this._parent;
        },
        enumerable: !0,
        configurable: !0
      }), Object.defineProperty(n.prototype, "name", {
        get: function() {
          return this._name;
        },
        enumerable: !0,
        configurable: !0
      }), n.prototype.get = function(e) {
        var t = this.getZoneWith(e);
        if (t)
          return t._properties[e];
      }, n.prototype.getZoneWith = function(e) {
        for (var t = this; t; ) {
          if (t._properties.hasOwnProperty(e))
            return t;
          t = t._parent;
        }
        return null;
      }, n.prototype.fork = function(e) {
        if (!e)
          throw new Error("ZoneSpec required!");
        return this._zoneDelegate.fork(this, e);
      }, n.prototype.wrap = function(e, t) {
        if ("function" != typeof e)
          throw new Error("Expecting function got: " + e);
        var n = this._zoneDelegate.intercept(this, e, t),
            r = this;
        return function() {
          return r.runGuarded(n, this, arguments, t);
        };
      }, n.prototype.run = function(e, t, n, r) {
        void 0 === t && (t = null), void 0 === n && (n = null), void 0 === r && (r = null);
        var o = m;
        m = this;
        try {
          return this._zoneDelegate.invoke(this, e, t, n, r);
        } finally {
          m = o;
        }
      }, n.prototype.runGuarded = function(e, t, n, r) {
        void 0 === t && (t = null), void 0 === n && (n = null), void 0 === r && (r = null);
        var o = m;
        m = this;
        try {
          try {
            return this._zoneDelegate.invoke(this, e, t, n, r);
          } catch (a) {
            if (this._zoneDelegate.handleError(this, a))
              throw a;
          }
        } finally {
          m = o;
        }
      }, n.prototype.runTask = function(e, t, n) {
        if (e.runCount++, e.zone != this)
          throw new Error("A task can only be run in the zone which created it! (Creation: " + e.zone.name + "; Execution: " + this.name + ")");
        var r = T;
        T = e;
        var o = m;
        m = this;
        try {
          "macroTask" == e.type && e.data && !e.data.isPeriodic && (e.cancelFn = null);
          try {
            return this._zoneDelegate.invokeTask(this, e, t, n);
          } catch (a) {
            if (this._zoneDelegate.handleError(this, a))
              throw a;
          }
        } finally {
          m = o, T = r;
        }
      }, n.prototype.scheduleMicroTask = function(e, t, n, r) {
        return this._zoneDelegate.scheduleTask(this, new g("microTask", this, e, t, n, r, null));
      }, n.prototype.scheduleMacroTask = function(e, t, n, r, o) {
        return this._zoneDelegate.scheduleTask(this, new g("macroTask", this, e, t, n, r, o));
      }, n.prototype.scheduleEventTask = function(e, t, n, r, o) {
        return this._zoneDelegate.scheduleTask(this, new g("eventTask", this, e, t, n, r, o));
      }, n.prototype.cancelTask = function(e) {
        var t = this._zoneDelegate.cancelTask(this, e);
        return e.runCount = -1, e.cancelFn = null, t;
      }, n.__symbol__ = t, n;
    }(),
        v = function() {
          function e(e, t, n) {
            this._taskCounts = {
              microTask: 0,
              macroTask: 0,
              eventTask: 0
            }, this.zone = e, this._parentDelegate = t, this._forkZS = n && (n && n.onFork ? n : t._forkZS), this._forkDlgt = n && (n.onFork ? t : t._forkDlgt), this._interceptZS = n && (n.onIntercept ? n : t._interceptZS), this._interceptDlgt = n && (n.onIntercept ? t : t._interceptDlgt), this._invokeZS = n && (n.onInvoke ? n : t._invokeZS), this._invokeDlgt = n && (n.onInvoke ? t : t._invokeDlgt), this._handleErrorZS = n && (n.onHandleError ? n : t._handleErrorZS), this._handleErrorDlgt = n && (n.onHandleError ? t : t._handleErrorDlgt), this._scheduleTaskZS = n && (n.onScheduleTask ? n : t._scheduleTaskZS), this._scheduleTaskDlgt = n && (n.onScheduleTask ? t : t._scheduleTaskDlgt), this._invokeTaskZS = n && (n.onInvokeTask ? n : t._invokeTaskZS), this._invokeTaskDlgt = n && (n.onInvokeTask ? t : t._invokeTaskDlgt), this._cancelTaskZS = n && (n.onCancelTask ? n : t._cancelTaskZS), this._cancelTaskDlgt = n && (n.onCancelTask ? t : t._cancelTaskDlgt), this._hasTaskZS = n && (n.onHasTask ? n : t._hasTaskZS), this._hasTaskDlgt = n && (n.onHasTask ? t : t._hasTaskDlgt);
          }
          return e.prototype.fork = function(e, t) {
            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, e, t) : new d(e, t);
          }, e.prototype.intercept = function(e, t, n) {
            return this._interceptZS ? this._interceptZS.onIntercept(this._interceptDlgt, this.zone, e, t, n) : t;
          }, e.prototype.invoke = function(e, t, n, r, o) {
            return this._invokeZS ? this._invokeZS.onInvoke(this._invokeDlgt, this.zone, e, t, n, r, o) : t.apply(n, r);
          }, e.prototype.handleError = function(e, t) {
            return !this._handleErrorZS || this._handleErrorZS.onHandleError(this._handleErrorDlgt, this.zone, e, t);
          }, e.prototype.scheduleTask = function(e, t) {
            try {
              if (this._scheduleTaskZS)
                return this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this.zone, e, t);
              if (t.scheduleFn)
                t.scheduleFn(t);
              else {
                if ("microTask" != t.type)
                  throw new Error("Task is missing scheduleFn.");
                r(t);
              }
              return t;
            } finally {
              e == this.zone && this._updateTaskCount(t.type, 1);
            }
          }, e.prototype.invokeTask = function(e, t, n, r) {
            try {
              return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this.zone, e, t, n, r) : t.callback.apply(n, r);
            } finally {
              e != this.zone || "eventTask" == t.type || t.data && t.data.isPeriodic || this._updateTaskCount(t.type, -1);
            }
          }, e.prototype.cancelTask = function(e, t) {
            var n;
            if (this._cancelTaskZS)
              n = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this.zone, e, t);
            else {
              if (!t.cancelFn)
                throw new Error("Task does not support cancellation, or is already canceled.");
              n = t.cancelFn(t);
            }
            return e == this.zone && this._updateTaskCount(t.type, -1), n;
          }, e.prototype.hasTask = function(e, t) {
            return this._hasTaskZS && this._hasTaskZS.onHasTask(this._hasTaskDlgt, this.zone, e, t);
          }, e.prototype._updateTaskCount = function(e, t) {
            var n = this._taskCounts,
                r = n[e],
                o = n[e] = r + t;
            if (o < 0)
              throw new Error("More tasks executed then were scheduled.");
            if (0 == r || 0 == o) {
              var a = {
                microTask: n.microTask > 0,
                macroTask: n.macroTask > 0,
                eventTask: n.eventTask > 0,
                change: e
              };
              try {
                this.hasTask(this.zone, a);
              } finally {
                this._parentDelegate && this._parentDelegate._updateTaskCount(e, t);
              }
            }
          }, e;
        }(),
        g = function() {
          function e(e, t, n, r, o, i, s) {
            this.runCount = 0, this.type = e, this.zone = t, this.source = n, this.data = o, this.scheduleFn = i, this.cancelFn = s, this.callback = r;
            var u = this;
            this.invoke = function() {
              E++;
              try {
                return t.runTask(u, this, arguments);
              } finally {
                1 == E && a(), E--;
              }
            };
          }
          return e.prototype.toString = function() {
            return this.data && "undefined" != typeof this.data.handleId ? this.data.handleId : Object.prototype.toString.call(this);
          }, e;
        }(),
        y = t("setTimeout"),
        k = t("Promise"),
        b = t("then"),
        m = new d(null, null),
        T = null,
        w = [],
        _ = !1,
        D = [],
        E = 0,
        S = t("state"),
        O = t("value"),
        P = "Promise.then",
        Z = null,
        j = !0,
        z = !1,
        I = 0,
        C = function() {
          function e(t) {
            var n = this;
            if (!(n instanceof e))
              throw new Error("Must be an instanceof Promise.");
            n[S] = Z, n[O] = [];
            try {
              t && t(c(n, j), c(n, z));
            } catch (r) {
              l(n, !1, r);
            }
          }
          return e.resolve = function(e) {
            return l(new this(null), j, e);
          }, e.reject = function(e) {
            return l(new this(null), z, e);
          }, e.race = function(e) {
            function t(e) {
              a && (a = r(e));
            }
            function n(e) {
              a && (a = o(e));
            }
            for (var r,
                o,
                a = new this(function(e, t) {
                  n = [e, t], r = n[0], o = n[1];
                  var n;
                }),
                s = 0,
                u = e; s < u.length; s++) {
              var c = u[s];
              i(c) || (c = this.resolve(c)), c.then(t, n);
            }
            return a;
          }, e.all = function(e) {
            for (var t,
                n,
                r = new this(function(e, r) {
                  t = e, n = r;
                }),
                o = 0,
                a = [],
                s = 0,
                u = e; s < u.length; s++) {
              var c = u[s];
              i(c) || (c = this.resolve(c)), c.then(function(e) {
                return function(n) {
                  a[e] = n, o--, o || t(a);
                };
              }(o), n), o++;
            }
            return o || t(a), r;
          }, e.prototype.then = function(e, t) {
            var n = new this.constructor(null),
                r = d.current;
            return this[S] == Z ? this[O].push(r, n, e, t) : p(this, r, n, e, t), n;
          }, e.prototype["catch"] = function(e) {
            return this.then(null, e);
          }, e;
        }();
    C.resolve = C.resolve, C.reject = C.reject, C.race = C.race, C.all = C.all;
    var M = e[t("Promise")] = e.Promise;
    if (e.Promise = C, M && (h(M), "undefined" != typeof e.fetch)) {
      var L = void 0;
      try {
        L = e.fetch();
      } catch (F) {
        L = e.fetch("about:blank");
      }
      L.then(function() {
        return null;
      }, function() {
        return null;
      }), L.constructor != M && L.constructor != C && h(L.constructor);
    }
    return Promise[d.__symbol__("uncaughtPromiseErrors")] = D, e.Zone = d;
  }("object" == typeof window && window || "object" == typeof self && self || global), Zone.__symbol__),
      S = "object" == typeof window && window || "object" == typeof self && self || global,
      O = "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope,
      P = "undefined" != typeof process && "[object process]" === {}.toString.call(process),
      Z = !P && !O && !("undefined" == typeof window || !window.HTMLElement),
      j = E("eventTasks"),
      z = "addEventListener",
      I = "removeEventListener",
      C = i(z, I),
      M = s(I),
      L = E("originalInstance"),
      F = Object[E("defineProperty")] = Object.defineProperty,
      H = Object[E("getOwnPropertyDescriptor")] = Object.getOwnPropertyDescriptor,
      R = Object.create,
      q = E("unconfigurables"),
      B = "Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video",
      x = "ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex".split(","),
      W = "EventTarget",
      X = "copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror".split(" "),
      A = E("unbound"),
      N = "set",
      G = "clear",
      U = ["alert", "prompt", "confirm"],
      K = "object" == typeof window && window || "object" == typeof self && self || global;
  p(K, N, G, "Timeout"), p(K, N, G, "Interval"), p(K, N, G, "Immediate"), p(K, "request", "cancel", "AnimationFrame"), p(K, "mozRequest", "mozCancel", "AnimationFrame"), p(K, "webkitRequest", "webkitCancel", "AnimationFrame");
  for (var V = 0; V < U.length; V++) {
    var J = U[V];
    f(K, J, function(e, t, n) {
      return function(t, r) {
        return Zone.current.run(e, K, r, n);
      };
    });
  }
  k(K), m(K), c("MutationObserver"), c("WebKitMutationObserver"), c("FileReader"), h(), _(K), D(K);
  var Q = E("xhrTask"),
      Y = E("xhrSync");
  K.navigator && K.navigator.geolocation && t(K.navigator.geolocation, ["getCurrentPosition", "watchPosition"]);
});

})();
$__System.registerDynamic("5", [], false, function ($__require, $__exports, $__module) {
    var _retrieveGlobal = $__System.get("@@global-helpers").prepareGlobal($__module.id, null, null);

    (function ($__global) {
        var Reflect = $__global["Reflect"];
        var Reflect;
        (function (Reflect) {
            "use strict";

            var hasOwn = Object.prototype.hasOwnProperty;
            var supportsCreate = typeof Object.create === "function";
            var supportsProto = function () {
                var sentinel = {};
                function __() {}
                __.prototype = sentinel;
                var instance = new __();
                return instance.__proto__ === sentinel;
            }();
            var createDictionary = supportsCreate ? function () {
                return MakeDictionary(Object.create(null));
            } : supportsProto ? function () {
                return MakeDictionary({ __proto__: null });
            } : function () {
                return MakeDictionary({});
            };
            var HashMap;
            (function (HashMap) {
                var downLevel = !supportsCreate && !supportsProto;
                HashMap.has = downLevel ? function (map, key) {
                    return hasOwn.call(map, key);
                } : function (map, key) {
                    return key in map;
                };
                HashMap.get = downLevel ? function (map, key) {
                    return hasOwn.call(map, key) ? map[key] : undefined;
                } : function (map, key) {
                    return map[key];
                };
            })(HashMap || (HashMap = {}));
            var functionPrototype = Object.getPrototypeOf(Function);
            var _Map = typeof Map === "function" ? Map : CreateMapPolyfill();
            var _Set = typeof Set === "function" ? Set : CreateSetPolyfill();
            var _WeakMap = typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
            var Metadata = new _WeakMap();
            function decorate(decorators, target, targetKey, targetDescriptor) {
                if (!IsUndefined(targetDescriptor)) {
                    if (!IsArray(decorators)) throw new TypeError();
                    if (!IsObject(target)) throw new TypeError();
                    if (IsUndefined(targetKey)) throw new TypeError();
                    if (!IsObject(targetDescriptor)) throw new TypeError();
                    targetKey = ToPropertyKey(targetKey);
                    return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);
                } else if (!IsUndefined(targetKey)) {
                    if (!IsArray(decorators)) throw new TypeError();
                    if (!IsObject(target)) throw new TypeError();
                    targetKey = ToPropertyKey(targetKey);
                    return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);
                } else {
                    if (!IsArray(decorators)) throw new TypeError();
                    if (!IsConstructor(target)) throw new TypeError();
                    return DecorateConstructor(decorators, target);
                }
            }
            Reflect.decorate = decorate;
            function metadata(metadataKey, metadataValue) {
                function decorator(target, targetKey) {
                    if (!IsUndefined(targetKey)) {
                        if (!IsObject(target)) throw new TypeError();
                        targetKey = ToPropertyKey(targetKey);
                        OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
                    } else {
                        if (!IsConstructor(target)) throw new TypeError();
                        OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, undefined);
                    }
                }
                return decorator;
            }
            Reflect.metadata = metadata;
            function defineMetadata(metadataKey, metadataValue, target, targetKey) {
                if (!IsObject(target)) throw new TypeError();
                if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
                return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
            }
            Reflect.defineMetadata = defineMetadata;
            function hasMetadata(metadataKey, target, targetKey) {
                if (!IsObject(target)) throw new TypeError();
                if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
                return OrdinaryHasMetadata(metadataKey, target, targetKey);
            }
            Reflect.hasMetadata = hasMetadata;
            function hasOwnMetadata(metadataKey, target, targetKey) {
                if (!IsObject(target)) throw new TypeError();
                if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
                return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);
            }
            Reflect.hasOwnMetadata = hasOwnMetadata;
            function getMetadata(metadataKey, target, targetKey) {
                if (!IsObject(target)) throw new TypeError();
                if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
                return OrdinaryGetMetadata(metadataKey, target, targetKey);
            }
            Reflect.getMetadata = getMetadata;
            function getOwnMetadata(metadataKey, target, targetKey) {
                if (!IsObject(target)) throw new TypeError();
                if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
                return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);
            }
            Reflect.getOwnMetadata = getOwnMetadata;
            function getMetadataKeys(target, targetKey) {
                if (!IsObject(target)) throw new TypeError();
                if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
                return OrdinaryMetadataKeys(target, targetKey);
            }
            Reflect.getMetadataKeys = getMetadataKeys;
            function getOwnMetadataKeys(target, targetKey) {
                if (!IsObject(target)) throw new TypeError();
                if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
                return OrdinaryOwnMetadataKeys(target, targetKey);
            }
            Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
            function deleteMetadata(metadataKey, target, targetKey) {
                if (!IsObject(target)) throw new TypeError();
                if (!IsUndefined(targetKey)) targetKey = ToPropertyKey(targetKey);
                var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
                if (IsUndefined(metadataMap)) return false;
                if (!metadataMap.delete(metadataKey)) return false;
                if (metadataMap.size > 0) return true;
                var targetMetadata = Metadata.get(target);
                targetMetadata.delete(targetKey);
                if (targetMetadata.size > 0) return true;
                Metadata.delete(target);
                return true;
            }
            Reflect.deleteMetadata = deleteMetadata;
            function DecorateConstructor(decorators, target) {
                for (var i = decorators.length - 1; i >= 0; --i) {
                    var decorator = decorators[i];
                    var decorated = decorator(target);
                    if (!IsUndefined(decorated)) {
                        if (!IsConstructor(decorated)) throw new TypeError();
                        target = decorated;
                    }
                }
                return target;
            }
            function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {
                for (var i = decorators.length - 1; i >= 0; --i) {
                    var decorator = decorators[i];
                    var decorated = decorator(target, propertyKey, descriptor);
                    if (!IsUndefined(decorated)) {
                        if (!IsObject(decorated)) throw new TypeError();
                        descriptor = decorated;
                    }
                }
                return descriptor;
            }
            function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {
                for (var i = decorators.length - 1; i >= 0; --i) {
                    var decorator = decorators[i];
                    decorator(target, propertyKey);
                }
            }
            function GetOrCreateMetadataMap(target, targetKey, create) {
                var targetMetadata = Metadata.get(target);
                if (!targetMetadata) {
                    if (!create) return undefined;
                    targetMetadata = new _Map();
                    Metadata.set(target, targetMetadata);
                }
                var keyMetadata = targetMetadata.get(targetKey);
                if (!keyMetadata) {
                    if (!create) return undefined;
                    keyMetadata = new _Map();
                    targetMetadata.set(targetKey, keyMetadata);
                }
                return keyMetadata;
            }
            function OrdinaryHasMetadata(MetadataKey, O, P) {
                var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
                if (hasOwn) return true;
                var parent = GetPrototypeOf(O);
                return parent !== null ? OrdinaryHasMetadata(MetadataKey, parent, P) : false;
            }
            function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
                var metadataMap = GetOrCreateMetadataMap(O, P, false);
                return metadataMap !== undefined && Boolean(metadataMap.has(MetadataKey));
            }
            function OrdinaryGetMetadata(MetadataKey, O, P) {
                var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
                if (hasOwn) return OrdinaryGetOwnMetadata(MetadataKey, O, P);
                var parent = GetPrototypeOf(O);
                return parent !== null ? OrdinaryGetMetadata(MetadataKey, parent, P) : undefined;
            }
            function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
                var metadataMap = GetOrCreateMetadataMap(O, P, false);
                return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
            }
            function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
                var metadataMap = GetOrCreateMetadataMap(O, P, true);
                metadataMap.set(MetadataKey, MetadataValue);
            }
            function OrdinaryMetadataKeys(O, P) {
                var ownKeys = OrdinaryOwnMetadataKeys(O, P);
                var parent = GetPrototypeOf(O);
                if (parent === null) return ownKeys;
                var parentKeys = OrdinaryMetadataKeys(parent, P);
                if (parentKeys.length <= 0) return ownKeys;
                if (ownKeys.length <= 0) return parentKeys;
                var keys = new _Set();
                for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
                    var key = ownKeys_1[_i];
                    keys.add(key);
                }
                for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
                    var key = parentKeys_1[_a];
                    keys.add(key);
                }
                return getKeys(keys);
            }
            function OrdinaryOwnMetadataKeys(target, targetKey) {
                var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
                var keys = [];
                if (metadataMap) forEach(metadataMap, function (_, key) {
                    return keys.push(key);
                });
                return keys;
            }
            function IsUndefined(x) {
                return x === undefined;
            }
            function IsArray(x) {
                return Array.isArray ? Array.isArray(x) : x instanceof Array || Object.prototype.toString.call(x) === "[object Array]";
            }
            function IsObject(x) {
                return typeof x === "object" ? x !== null : typeof x === "function";
            }
            function IsConstructor(x) {
                return typeof x === "function";
            }
            function IsSymbol(x) {
                return typeof x === "symbol";
            }
            function ToPropertyKey(value) {
                return IsSymbol(value) ? value : String(value);
            }
            function GetPrototypeOf(O) {
                var proto = Object.getPrototypeOf(O);
                if (typeof O !== "function" || O === functionPrototype) return proto;
                if (proto !== functionPrototype) return proto;
                var prototype = O.prototype;
                var prototypeProto = prototype && Object.getPrototypeOf(prototype);
                if (prototypeProto == null || prototypeProto === Object.prototype) return proto;
                var constructor = prototypeProto.constructor;
                if (typeof constructor !== "function") return proto;
                if (constructor === O) return proto;
                return constructor;
            }
            function IteratorStep(iterator) {
                var result = iterator.next();
                return result.done ? undefined : result;
            }
            function IteratorClose(iterator) {
                var f = iterator["return"];
                if (f) f.call(iterator);
            }
            function forEach(source, callback, thisArg) {
                var entries = source.entries;
                if (typeof entries === "function") {
                    var iterator = entries.call(source);
                    var result = void 0;
                    try {
                        while (result = IteratorStep(iterator)) {
                            var _a = result.value,
                                key = _a[0],
                                value = _a[1];
                            callback.call(thisArg, value, key, source);
                        }
                    } finally {
                        if (result) IteratorClose(iterator);
                    }
                } else {
                    var forEach_1 = source.forEach;
                    if (typeof forEach_1 === "function") {
                        forEach_1.call(source, callback, thisArg);
                    }
                }
            }
            function getKeys(source) {
                var keys = [];
                forEach(source, function (_, key) {
                    keys.push(key);
                });
                return keys;
            }
            function CreateMapIterator(keys, values, kind) {
                var index = 0;
                return {
                    next: function () {
                        if ((keys || values) && index < (keys || values).length) {
                            var current = index++;
                            switch (kind) {
                                case "key":
                                    return { value: keys[current], done: false };
                                case "value":
                                    return { value: values[current], done: false };
                                case "key+value":
                                    return { value: [keys[current], values[current]], done: false };
                            }
                        }
                        keys = undefined;
                        values = undefined;
                        return { value: undefined, done: true };
                    },
                    "throw": function (error) {
                        if (keys || values) {
                            keys = undefined;
                            values = undefined;
                        }
                        throw error;
                    },
                    "return": function (value) {
                        if (keys || values) {
                            keys = undefined;
                            values = undefined;
                        }
                        return { value: value, done: true };
                    }
                };
            }
            function CreateMapPolyfill() {
                var cacheSentinel = {};
                return function () {
                    function Map() {
                        this._keys = [];
                        this._values = [];
                        this._cacheKey = cacheSentinel;
                        this._cacheIndex = -2;
                    }
                    Object.defineProperty(Map.prototype, "size", {
                        get: function () {
                            return this._keys.length;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Map.prototype.has = function (key) {
                        return this._find(key, false) >= 0;
                    };
                    Map.prototype.get = function (key) {
                        var index = this._find(key, false);
                        return index >= 0 ? this._values[index] : undefined;
                    };
                    Map.prototype.set = function (key, value) {
                        var index = this._find(key, true);
                        this._values[index] = value;
                        return this;
                    };
                    Map.prototype.delete = function (key) {
                        var index = this._find(key, false);
                        if (index >= 0) {
                            var size = this._keys.length;
                            for (var i = index + 1; i < size; i++) {
                                this._keys[i - 1] = this._keys[i];
                                this._values[i - 1] = this._values[i];
                            }
                            this._keys.length--;
                            this._values.length--;
                            this._cacheKey = cacheSentinel;
                            this._cacheIndex = -2;
                            return true;
                        }
                        return false;
                    };
                    Map.prototype.clear = function () {
                        this._keys.length = 0;
                        this._values.length = 0;
                        this._cacheKey = cacheSentinel;
                        this._cacheIndex = -2;
                    };
                    Map.prototype.keys = function () {
                        return CreateMapIterator(this._keys, undefined, "key");
                    };
                    Map.prototype.values = function () {
                        return CreateMapIterator(undefined, this._values, "value");
                    };
                    Map.prototype.entries = function () {
                        return CreateMapIterator(this._keys, this._values, "key+value");
                    };
                    Map.prototype._find = function (key, insert) {
                        if (this._cacheKey === key) return this._cacheIndex;
                        var index = this._keys.indexOf(key);
                        if (index < 0 && insert) {
                            index = this._keys.length;
                            this._keys.push(key);
                            this._values.push(undefined);
                        }
                        return this._cacheKey = key, this._cacheIndex = index;
                    };
                    return Map;
                }();
            }
            function CreateSetPolyfill() {
                return function () {
                    function Set() {
                        this._map = new _Map();
                    }
                    Object.defineProperty(Set.prototype, "size", {
                        get: function () {
                            return this._map.size;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Set.prototype.has = function (value) {
                        return this._map.has(value);
                    };
                    Set.prototype.add = function (value) {
                        return this._map.set(value, value), this;
                    };
                    Set.prototype.delete = function (value) {
                        return this._map.delete(value);
                    };
                    Set.prototype.clear = function () {
                        this._map.clear();
                    };
                    Set.prototype.keys = function () {
                        return this._map.keys();
                    };
                    Set.prototype.values = function () {
                        return this._map.values();
                    };
                    Set.prototype.entries = function () {
                        return this._map.entries();
                    };
                    return Set;
                }();
            }
            function CreateWeakMapPolyfill() {
                var UUID_SIZE = 16;
                var keys = createDictionary();
                var rootKey = CreateUniqueKey();
                return function () {
                    function WeakMap() {
                        this._key = CreateUniqueKey();
                    }
                    WeakMap.prototype.has = function (target) {
                        var table = GetOrCreateWeakMapTable(target, false);
                        return table !== undefined ? HashMap.has(table, this._key) : false;
                    };
                    WeakMap.prototype.get = function (target) {
                        var table = GetOrCreateWeakMapTable(target, false);
                        return table !== undefined ? HashMap.get(table, this._key) : undefined;
                    };
                    WeakMap.prototype.set = function (target, value) {
                        var table = GetOrCreateWeakMapTable(target, true);
                        table[this._key] = value;
                        return this;
                    };
                    WeakMap.prototype.delete = function (target) {
                        var table = GetOrCreateWeakMapTable(target, false);
                        return table !== undefined ? delete table[this._key] : false;
                    };
                    WeakMap.prototype.clear = function () {
                        this._key = CreateUniqueKey();
                    };
                    return WeakMap;
                }();
                function FillRandomBytes(buffer, size) {
                    for (var i = 0; i < size; ++i) buffer[i] = Math.random() * 0xff | 0;
                    return buffer;
                }
                function GenRandomBytes(size) {
                    if (typeof Uint8Array === "function") {
                        if (typeof crypto !== "undefined") return crypto.getRandomValues(new Uint8Array(size));
                        if (typeof msCrypto !== "undefined") return msCrypto.getRandomValues(new Uint8Array(size));
                        return FillRandomBytes(new Uint8Array(size), size);
                    }
                    return FillRandomBytes(new Array(size), size);
                }
                function CreateUUID() {
                    var data = GenRandomBytes(UUID_SIZE);
                    data[6] = data[6] & 0x4f | 0x40;
                    data[8] = data[8] & 0xbf | 0x80;
                    var result = "";
                    for (var offset = 0; offset < UUID_SIZE; ++offset) {
                        var byte = data[offset];
                        if (offset === 4 || offset === 6 || offset === 8) result += "-";
                        if (byte < 16) result += "0";
                        result += byte.toString(16).toLowerCase();
                    }
                    return result;
                }
                function CreateUniqueKey() {
                    var key;
                    do key = "@@WeakMap@@" + CreateUUID(); while (HashMap.has(keys, key));
                    keys[key] = true;
                    return key;
                }
                function GetOrCreateWeakMapTable(target, create) {
                    if (!hasOwn.call(target, rootKey)) {
                        if (!create) return undefined;
                        Object.defineProperty(target, rootKey, { value: createDictionary() });
                    }
                    return target[rootKey];
                }
            }
            function MakeDictionary(obj) {
                obj.__DICTIONARY_MODE__ = 1;
                delete obj.____DICTIONARY_MODE__;
                return obj;
            }
            (function (__global) {
                if (typeof __global.Reflect !== "undefined") {
                    if (__global.Reflect !== Reflect) {
                        for (var p in Reflect) {
                            if (hasOwn.call(Reflect, p)) {
                                __global.Reflect[p] = Reflect[p];
                            }
                        }
                    }
                } else {
                    __global.Reflect = Reflect;
                }
            })(typeof window !== "undefined" ? window : typeof WorkerGlobalScope !== "undefined" ? self : typeof global !== "undefined" ? global : Function("return this;")());
        })(Reflect || (Reflect = {}));
        $__global["Reflect"] = Reflect;
    })(this);

    return _retrieveGlobal();
});
$__System.register("6", [], function($__export) {
  "use strict";
  var globalScope,
      _global,
      STRING_MAP_PROTO,
      NumberWrapper,
      _symbolIterator;
  function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
  }
  function getTypeNameForDebugging(type) {
    return type['name'] || (typeof type === 'undefined' ? 'undefined' : $traceurRuntime.typeof(type));
  }
  function isPresent(obj) {
    return obj != null;
  }
  function isBlank(obj) {
    return obj == null;
  }
  function isStrictStringMap(obj) {
    return (typeof obj === 'undefined' ? 'undefined' : $traceurRuntime.typeof(obj)) === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
  }
  function isDate(obj) {
    return obj instanceof Date && !isNaN(obj.valueOf());
  }
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token === undefined || token === null) {
      return '' + token;
    }
    if (token.overriddenName) {
      return token.overriddenName;
    }
    if (token.name) {
      return token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
  }
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || (typeof o === 'undefined' ? 'undefined' : $traceurRuntime.typeof(o)) === 'object');
  }
  function print(obj) {
    console.log(obj);
  }
  function warn(obj) {
    console.warn(obj);
  }
  function setValueOnPath(global, path, value) {
    var parts = path.split('.');
    var obj = global;
    while (parts.length > 1) {
      var name = parts.shift();
      if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
        obj = obj[name];
      } else {
        obj = obj[name] = {};
      }
    }
    if (obj === undefined || obj === null) {
      obj = {};
    }
    obj[parts.shift()] = value;
  }
  function getSymbolIterator() {
    if (!_symbolIterator) {
      if (globalScope.Symbol && Symbol.iterator) {
        _symbolIterator = Symbol.iterator;
      } else {
        var keys = Object.getOwnPropertyNames(Map.prototype);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
            _symbolIterator = key;
          }
        }
      }
    }
    return _symbolIterator;
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  function escapeRegExp(s) {
    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }
  $__export("scheduleMicroTask", scheduleMicroTask);
  $__export("getTypeNameForDebugging", getTypeNameForDebugging);
  $__export("isPresent", isPresent);
  $__export("isBlank", isBlank);
  $__export("isStrictStringMap", isStrictStringMap);
  $__export("isDate", isDate);
  $__export("stringify", stringify);
  $__export("looseIdentical", looseIdentical);
  $__export("isJsObject", isJsObject);
  $__export("print", print);
  $__export("warn", warn);
  $__export("setValueOnPath", setValueOnPath);
  $__export("getSymbolIterator", getSymbolIterator);
  $__export("isPrimitive", isPrimitive);
  $__export("escapeRegExp", escapeRegExp);
  return {
    setters: [],
    execute: function() {
      if (typeof window === 'undefined') {
        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
          globalScope = self;
        } else {
          globalScope = global;
        }
      } else {
        globalScope = window;
      }
      _global = globalScope;
      $__export("global", _global);
      _global.assert = function assert(condition) {};
      STRING_MAP_PROTO = Object.getPrototypeOf({});
      NumberWrapper = (function() {
        function NumberWrapper() {}
        NumberWrapper.parseIntAutoRadix = function(text) {
          var result = parseInt(text);
          if (isNaN(result)) {
            throw new Error('Invalid integer literal when parsing ' + text);
          }
          return result;
        };
        NumberWrapper.parseInt = function(text, radix) {
          if (radix == 10) {
            if (/^(\-|\+)?[0-9]+$/.test(text)) {
              return parseInt(text, radix);
            }
          } else if (radix == 16) {
            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
              return parseInt(text, radix);
            }
          } else {
            var result = parseInt(text, radix);
            if (!isNaN(result)) {
              return result;
            }
          }
          throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
        };
        NumberWrapper.isNumeric = function(value) {
          return !isNaN(value - parseFloat(value));
        };
        return NumberWrapper;
      }());
      $__export("NumberWrapper", NumberWrapper);
      _symbolIterator = null;
    }
  };
});

$__System.register("7", ["8", "6"], function($__export) {
  "use strict";
  var __extends,
      ResourceLoader,
      global,
      CachedResourceLoader;
  return {
    setters: [function($__m) {
      ResourceLoader = $__m.ResourceLoader;
    }, function($__m) {
      global = $__m.global;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      CachedResourceLoader = (function(_super) {
        __extends(CachedResourceLoader, _super);
        function CachedResourceLoader() {
          _super.call(this);
          this._cache = global.$templateCache;
          if (this._cache == null) {
            throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');
          }
        }
        CachedResourceLoader.prototype.get = function(url) {
          if (this._cache.hasOwnProperty(url)) {
            return Promise.resolve(this._cache[url]);
          } else {
            return Promise.reject('CachedResourceLoader: Did not find cached template for ' + url);
          }
        };
        return CachedResourceLoader;
      }(ResourceLoader));
      $__export("CachedResourceLoader", CachedResourceLoader);
    }
  };
});

$__System.register("9", ["a"], function($__export) {
  "use strict";
  var _,
      INTERNAL_BROWSER_PLATFORM_PROVIDERS,
      getDOM;
  return {
    setters: [function($__m) {
      _ = $__m.__platform_browser_private__;
    }],
    execute: function() {
      INTERNAL_BROWSER_PLATFORM_PROVIDERS = _.INTERNAL_BROWSER_PLATFORM_PROVIDERS;
      $__export("INTERNAL_BROWSER_PLATFORM_PROVIDERS", INTERNAL_BROWSER_PLATFORM_PROVIDERS);
      getDOM = _.getDOM;
      $__export("getDOM", getDOM);
    }
  };
});

$__System.register("b", ["8", "c", "9", "d"], function($__export) {
  "use strict";
  var ResourceLoader,
      COMPILER_OPTIONS,
      INTERNAL_BROWSER_PLATFORM_PROVIDERS,
      ResourceLoaderImpl,
      INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS;
  return {
    setters: [function($__m) {
      ResourceLoader = $__m.ResourceLoader;
    }, function($__m) {
      COMPILER_OPTIONS = $__m.COMPILER_OPTIONS;
    }, function($__m) {
      INTERNAL_BROWSER_PLATFORM_PROVIDERS = $__m.INTERNAL_BROWSER_PLATFORM_PROVIDERS;
    }, function($__m) {
      ResourceLoaderImpl = $__m.ResourceLoaderImpl;
    }],
    execute: function() {
      INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [INTERNAL_BROWSER_PLATFORM_PROVIDERS, {
        provide: COMPILER_OPTIONS,
        useValue: {providers: [{
            provide: ResourceLoader,
            useClass: ResourceLoaderImpl
          }]},
        multi: true
      }];
      $__export("INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS", INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);
    }
  };
});

$__System.register("e", ["f", "10", "11", "12", "13", "14", "15"], function($__export) {
  "use strict";
  var AnimationCompiler,
      AnimationParser,
      CompileProviderMetadata,
      createHostComponentMeta,
      ListWrapper,
      MapWrapper,
      Identifiers,
      resolveIdentifier,
      resolveIdentifierToken,
      o,
      ComponentFactoryDependency,
      DirectiveWrapperDependency,
      ViewFactoryDependency,
      SourceModule,
      OfflineCompiler;
  function analyzeNgModules(programStaticSymbols, options, metadataResolver) {
    var _a = _extractModulesAndPipesOrDirectives(programStaticSymbols, metadataResolver),
        programNgModules = _a.ngModules,
        programPipesOrDirectives = _a.pipesAndDirectives;
    var moduleMetasByRef = new Map();
    programNgModules.forEach(function(modMeta) {
      if (options.transitiveModules) {
        modMeta.transitiveModule.modules.forEach(function(modMeta) {
          moduleMetasByRef.set(modMeta.type.reference, modMeta);
        });
      } else {
        moduleMetasByRef.set(modMeta.type.reference, modMeta);
      }
    });
    var ngModuleMetas = MapWrapper.values(moduleMetasByRef);
    var ngModuleByPipeOrDirective = new Map();
    var ngModulesByFile = new Map();
    var ngDirectivesByFile = new Map();
    var filePaths = new Set();
    ngModuleMetas.forEach(function(ngModuleMeta) {
      var srcFileUrl = ngModuleMeta.type.reference.filePath;
      filePaths.add(srcFileUrl);
      ngModulesByFile.set(srcFileUrl, (ngModulesByFile.get(srcFileUrl) || []).concat(ngModuleMeta.type.reference));
      ngModuleMeta.declaredDirectives.forEach(function(dirMeta) {
        var fileUrl = dirMeta.type.reference.filePath;
        filePaths.add(fileUrl);
        ngDirectivesByFile.set(fileUrl, (ngDirectivesByFile.get(fileUrl) || []).concat(dirMeta.type.reference));
        ngModuleByPipeOrDirective.set(dirMeta.type.reference, ngModuleMeta);
      });
      ngModuleMeta.declaredPipes.forEach(function(pipeMeta) {
        var fileUrl = pipeMeta.type.reference.filePath;
        filePaths.add(fileUrl);
        ngModuleByPipeOrDirective.set(pipeMeta.type.reference, ngModuleMeta);
      });
    });
    var symbolsMissingModule = programPipesOrDirectives.filter(function(s) {
      return !ngModuleByPipeOrDirective.has(s);
    });
    if (symbolsMissingModule.length) {
      var messages = symbolsMissingModule.map(function(s) {
        return ("Cannot determine the module for class " + s.name + " in " + s.filePath + "!");
      });
      throw new Error(messages.join('\n'));
    }
    var files = [];
    filePaths.forEach(function(srcUrl) {
      var directives = ngDirectivesByFile.get(srcUrl) || [];
      var ngModules = ngModulesByFile.get(srcUrl) || [];
      files.push({
        srcUrl: srcUrl,
        directives: directives,
        ngModules: ngModules
      });
    });
    return {
      ngModuleByPipeOrDirective: ngModuleByPipeOrDirective,
      files: files
    };
  }
  function _resolveViewStatements(compileResult) {
    compileResult.dependencies.forEach(function(dep) {
      if (dep instanceof ViewFactoryDependency) {
        var vfd = dep;
        vfd.placeholder.moduleUrl = _ngfactoryModuleUrl(vfd.comp.moduleUrl);
      } else if (dep instanceof ComponentFactoryDependency) {
        var cfd = dep;
        cfd.placeholder.name = _componentFactoryName(cfd.comp);
        cfd.placeholder.moduleUrl = _ngfactoryModuleUrl(cfd.comp.moduleUrl);
      } else if (dep instanceof DirectiveWrapperDependency) {
        var dwd = dep;
        dwd.placeholder.moduleUrl = _ngfactoryModuleUrl(dwd.dir.moduleUrl);
      }
    });
    return compileResult.statements;
  }
  function _resolveStyleStatements(compileResult, fileSuffix) {
    compileResult.dependencies.forEach(function(dep) {
      dep.valuePlaceholder.moduleUrl = _stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix);
    });
    return compileResult.statements;
  }
  function _ngfactoryModuleUrl(dirUrl) {
    var urlWithSuffix = _splitTypescriptSuffix(dirUrl);
    return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
  }
  function _componentFactoryName(comp) {
    return comp.name + "NgFactory";
  }
  function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
    return shim ? stylesheetUrl + ".shim" + suffix : "" + stylesheetUrl + suffix;
  }
  function _assertComponent(meta) {
    if (!meta.isComponent) {
      throw new Error("Could not compile '" + meta.type.name + "' because it is not a component.");
    }
  }
  function _splitTypescriptSuffix(path) {
    if (path.endsWith('.d.ts')) {
      return [path.slice(0, -5), '.ts'];
    }
    var lastDot = path.lastIndexOf('.');
    if (lastDot !== -1) {
      return [path.substring(0, lastDot), path.substring(lastDot)];
    }
    return [path, ''];
  }
  function _extractModulesAndPipesOrDirectives(programStaticSymbols, metadataResolver) {
    var ngModules = [];
    var pipesAndDirectives = [];
    programStaticSymbols.forEach(function(staticSymbol) {
      var ngModule = metadataResolver.getNgModuleMetadata(staticSymbol, false);
      var directive = metadataResolver.getDirectiveMetadata(staticSymbol, false);
      var pipe = metadataResolver.getPipeMetadata(staticSymbol, false);
      if (ngModule) {
        ngModules.push(ngModule);
      } else if (directive) {
        pipesAndDirectives.push(staticSymbol);
      } else if (pipe) {
        pipesAndDirectives.push(staticSymbol);
      }
    });
    return {
      ngModules: ngModules,
      pipesAndDirectives: pipesAndDirectives
    };
  }
  $__export("analyzeNgModules", analyzeNgModules);
  return {
    setters: [function($__m) {
      AnimationCompiler = $__m.AnimationCompiler;
    }, function($__m) {
      AnimationParser = $__m.AnimationParser;
    }, function($__m) {
      CompileProviderMetadata = $__m.CompileProviderMetadata;
      createHostComponentMeta = $__m.createHostComponentMeta;
    }, function($__m) {
      ListWrapper = $__m.ListWrapper;
      MapWrapper = $__m.MapWrapper;
    }, function($__m) {
      Identifiers = $__m.Identifiers;
      resolveIdentifier = $__m.resolveIdentifier;
      resolveIdentifierToken = $__m.resolveIdentifierToken;
    }, function($__m) {
      o = $__m;
    }, function($__m) {
      ComponentFactoryDependency = $__m.ComponentFactoryDependency;
      DirectiveWrapperDependency = $__m.DirectiveWrapperDependency;
      ViewFactoryDependency = $__m.ViewFactoryDependency;
    }],
    execute: function() {
      SourceModule = (function() {
        function SourceModule(fileUrl, moduleUrl, source) {
          this.fileUrl = fileUrl;
          this.moduleUrl = moduleUrl;
          this.source = source;
        }
        return SourceModule;
      }());
      $__export("SourceModule", SourceModule);
      OfflineCompiler = (function() {
        function OfflineCompiler(_metadataResolver, _directiveNormalizer, _templateParser, _styleCompiler, _viewCompiler, _dirWrapperCompiler, _ngModuleCompiler, _outputEmitter, _localeId, _translationFormat) {
          this._metadataResolver = _metadataResolver;
          this._directiveNormalizer = _directiveNormalizer;
          this._templateParser = _templateParser;
          this._styleCompiler = _styleCompiler;
          this._viewCompiler = _viewCompiler;
          this._dirWrapperCompiler = _dirWrapperCompiler;
          this._ngModuleCompiler = _ngModuleCompiler;
          this._outputEmitter = _outputEmitter;
          this._localeId = _localeId;
          this._translationFormat = _translationFormat;
          this._animationParser = new AnimationParser();
          this._animationCompiler = new AnimationCompiler();
        }
        OfflineCompiler.prototype.clearCache = function() {
          this._directiveNormalizer.clearCache();
          this._metadataResolver.clearCache();
        };
        OfflineCompiler.prototype.compileModules = function(staticSymbols, options) {
          var _this = this;
          var _a = analyzeNgModules(staticSymbols, options, this._metadataResolver),
              ngModuleByPipeOrDirective = _a.ngModuleByPipeOrDirective,
              files = _a.files;
          var sourceModules = files.map(function(file) {
            return _this._compileSrcFile(file.srcUrl, ngModuleByPipeOrDirective, file.directives, file.ngModules);
          });
          return Promise.all(sourceModules).then(function(modules) {
            return ListWrapper.flatten(modules);
          });
        };
        OfflineCompiler.prototype._compileSrcFile = function(srcFileUrl, ngModuleByPipeOrDirective, directives, ngModules) {
          var _this = this;
          var fileSuffix = _splitTypescriptSuffix(srcFileUrl)[1];
          var statements = [];
          var exportedVars = [];
          var outputSourceModules = [];
          exportedVars.push.apply(exportedVars, ngModules.map(function(ngModuleType) {
            return _this._compileModule(ngModuleType, statements);
          }));
          exportedVars.push.apply(exportedVars, directives.map(function(directiveType) {
            return _this._compileDirectiveWrapper(directiveType, statements);
          }));
          return Promise.all(directives.map(function(dirType) {
            var compMeta = _this._metadataResolver.getDirectiveMetadata(dirType);
            if (!compMeta.isComponent) {
              return Promise.resolve(null);
            }
            var ngModule = ngModuleByPipeOrDirective.get(dirType);
            if (!ngModule) {
              throw new Error("Internal Error: cannot determine the module for component " + compMeta.type.name + "!");
            }
            return Promise.all([compMeta].concat(ngModule.transitiveModule.directives).map(function(dirMeta) {
              return _this._directiveNormalizer.normalizeDirective(dirMeta).asyncResult;
            })).then(function(normalizedCompWithDirectives) {
              var compMeta = normalizedCompWithDirectives[0],
                  dirMetas = normalizedCompWithDirectives.slice(1);
              _assertComponent(compMeta);
              var stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);
              stylesCompileResults.externalStylesheets.forEach(function(compiledStyleSheet) {
                outputSourceModules.push(_this._codgenStyles(srcFileUrl, compiledStyleSheet, fileSuffix));
              });
              exportedVars.push(_this._compileComponentFactory(compMeta, fileSuffix, statements), _this._compileComponent(compMeta, dirMetas, ngModule.transitiveModule.pipes, ngModule.schemas, stylesCompileResults.componentStylesheet, fileSuffix, statements));
            });
          })).then(function() {
            if (statements.length > 0) {
              var srcModule = _this._codegenSourceModule(srcFileUrl, _ngfactoryModuleUrl(srcFileUrl), statements, exportedVars);
              outputSourceModules.unshift(srcModule);
            }
            return outputSourceModules;
          });
        };
        OfflineCompiler.prototype._compileModule = function(ngModuleType, targetStatements) {
          var ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType);
          var providers = [];
          if (this._localeId) {
            providers.push(new CompileProviderMetadata({
              token: resolveIdentifierToken(Identifiers.LOCALE_ID),
              useValue: this._localeId
            }));
          }
          if (this._translationFormat) {
            providers.push(new CompileProviderMetadata({
              token: resolveIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),
              useValue: this._translationFormat
            }));
          }
          var appCompileResult = this._ngModuleCompiler.compile(ngModule, providers);
          appCompileResult.dependencies.forEach(function(dep) {
            dep.placeholder.name = _componentFactoryName(dep.comp);
            dep.placeholder.moduleUrl = _ngfactoryModuleUrl(dep.comp.moduleUrl);
          });
          targetStatements.push.apply(targetStatements, appCompileResult.statements);
          return appCompileResult.ngModuleFactoryVar;
        };
        OfflineCompiler.prototype._compileDirectiveWrapper = function(directiveType, targetStatements) {
          var dirMeta = this._metadataResolver.getDirectiveMetadata(directiveType);
          var dirCompileResult = this._dirWrapperCompiler.compile(dirMeta);
          targetStatements.push.apply(targetStatements, dirCompileResult.statements);
          return dirCompileResult.dirWrapperClassVar;
        };
        OfflineCompiler.prototype._compileComponentFactory = function(compMeta, fileSuffix, targetStatements) {
          var hostMeta = createHostComponentMeta(compMeta);
          var hostViewFactoryVar = this._compileComponent(hostMeta, [compMeta], [], [], null, fileSuffix, targetStatements);
          var compFactoryVar = _componentFactoryName(compMeta.type);
          targetStatements.push(o.variable(compFactoryVar).set(o.importExpr(resolveIdentifier(Identifiers.ComponentFactory), [o.importType(compMeta.type)]).instantiate([o.literal(compMeta.selector), o.variable(hostViewFactoryVar), o.importExpr(compMeta.type)], o.importType(resolveIdentifier(Identifiers.ComponentFactory), [o.importType(compMeta.type)], [o.TypeModifier.Const]))).toDeclStmt(null, [o.StmtModifier.Final]));
          return compFactoryVar;
        };
        OfflineCompiler.prototype._compileComponent = function(compMeta, directives, pipes, schemas, componentStyles, fileSuffix, targetStatements) {
          var parsedAnimations = this._animationParser.parseComponent(compMeta);
          var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, schemas, compMeta.type.name);
          var stylesExpr = componentStyles ? o.variable(componentStyles.stylesVar) : o.literalArr([]);
          var compiledAnimations = this._animationCompiler.compile(compMeta.type.name, parsedAnimations);
          var viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, pipes, compiledAnimations);
          if (componentStyles) {
            targetStatements.push.apply(targetStatements, _resolveStyleStatements(componentStyles, fileSuffix));
          }
          compiledAnimations.forEach(function(entry) {
            entry.statements.forEach(function(statement) {
              targetStatements.push(statement);
            });
          });
          targetStatements.push.apply(targetStatements, _resolveViewStatements(viewResult));
          return viewResult.viewFactoryVar;
        };
        OfflineCompiler.prototype._codgenStyles = function(fileUrl, stylesCompileResult, fileSuffix) {
          _resolveStyleStatements(stylesCompileResult, fileSuffix);
          return this._codegenSourceModule(fileUrl, _stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);
        };
        OfflineCompiler.prototype._codegenSourceModule = function(fileUrl, moduleUrl, statements, exportedVars) {
          return new SourceModule(fileUrl, moduleUrl, this._outputEmitter.emitStatements(moduleUrl, statements, exportedVars));
        };
        return OfflineCompiler;
      }());
      $__export("OfflineCompiler", OfflineCompiler);
    }
  };
});

$__System.register("f", ["16", "13", "14", "17", "18"], function($__export) {
  "use strict";
  var isPresent,
      Identifiers,
      resolveIdentifier,
      o,
      ANY_STATE,
      DEFAULT_STATE,
      EMPTY_STATE,
      AnimationStepAst,
      AnimationEntryCompileResult,
      AnimationCompiler,
      _ANIMATION_FACTORY_ELEMENT_VAR,
      _ANIMATION_DEFAULT_STATE_VAR,
      _ANIMATION_FACTORY_VIEW_VAR,
      _ANIMATION_FACTORY_VIEW_CONTEXT,
      _ANIMATION_FACTORY_RENDERER_VAR,
      _ANIMATION_CURRENT_STATE_VAR,
      _ANIMATION_NEXT_STATE_VAR,
      _ANIMATION_PLAYER_VAR,
      _ANIMATION_TIME_VAR,
      _ANIMATION_START_STATE_STYLES_VAR,
      _ANIMATION_END_STATE_STYLES_VAR,
      _ANIMATION_COLLECTED_STYLES,
      EMPTY_MAP,
      _AnimationBuilder,
      _AnimationBuilderContext,
      _AnimationBuilderStateMap;
  function _compareToAnimationStateExpr(value, animationState) {
    var emptyStateLiteral = o.literal(EMPTY_STATE);
    switch (animationState) {
      case EMPTY_STATE:
        return value.equals(emptyStateLiteral);
      case ANY_STATE:
        return o.literal(true);
      default:
        return value.equals(o.literal(animationState));
    }
  }
  function _isEndStateAnimateStep(step) {
    if (step instanceof AnimationStepAst && step.duration > 0 && step.keyframes.length == 2) {
      var styles1 = _getStylesArray(step.keyframes[0])[0];
      var styles2 = _getStylesArray(step.keyframes[1])[0];
      return Object.keys(styles1).length === 0 && Object.keys(styles2).length === 0;
    }
    return false;
  }
  function _getStylesArray(obj) {
    return obj.styles.styles;
  }
  return {
    setters: [function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      Identifiers = $__m.Identifiers;
      resolveIdentifier = $__m.resolveIdentifier;
    }, function($__m) {
      o = $__m;
    }, function($__m) {
      ANY_STATE = $__m.ANY_STATE;
      DEFAULT_STATE = $__m.DEFAULT_STATE;
      EMPTY_STATE = $__m.EMPTY_STATE;
    }, function($__m) {
      AnimationStepAst = $__m.AnimationStepAst;
    }],
    execute: function() {
      AnimationEntryCompileResult = (function() {
        function AnimationEntryCompileResult(name, statements, fnExp) {
          this.name = name;
          this.statements = statements;
          this.fnExp = fnExp;
        }
        return AnimationEntryCompileResult;
      }());
      $__export("AnimationEntryCompileResult", AnimationEntryCompileResult);
      AnimationCompiler = (function() {
        function AnimationCompiler() {}
        AnimationCompiler.prototype.compile = function(factoryNamePrefix, parsedAnimations) {
          return parsedAnimations.map(function(entry) {
            var factoryName = factoryNamePrefix + "_" + entry.name;
            var visitor = new _AnimationBuilder(entry.name, factoryName);
            return visitor.build(entry);
          });
        };
        return AnimationCompiler;
      }());
      $__export("AnimationCompiler", AnimationCompiler);
      _ANIMATION_FACTORY_ELEMENT_VAR = o.variable('element');
      _ANIMATION_DEFAULT_STATE_VAR = o.variable('defaultStateStyles');
      _ANIMATION_FACTORY_VIEW_VAR = o.variable('view');
      _ANIMATION_FACTORY_VIEW_CONTEXT = _ANIMATION_FACTORY_VIEW_VAR.prop('animationContext');
      _ANIMATION_FACTORY_RENDERER_VAR = _ANIMATION_FACTORY_VIEW_VAR.prop('renderer');
      _ANIMATION_CURRENT_STATE_VAR = o.variable('currentState');
      _ANIMATION_NEXT_STATE_VAR = o.variable('nextState');
      _ANIMATION_PLAYER_VAR = o.variable('player');
      _ANIMATION_TIME_VAR = o.variable('totalTime');
      _ANIMATION_START_STATE_STYLES_VAR = o.variable('startStateStyles');
      _ANIMATION_END_STATE_STYLES_VAR = o.variable('endStateStyles');
      _ANIMATION_COLLECTED_STYLES = o.variable('collectedStyles');
      EMPTY_MAP = o.literalMap([]);
      _AnimationBuilder = (function() {
        function _AnimationBuilder(animationName, factoryName) {
          this.animationName = animationName;
          this._fnVarName = factoryName + '_factory';
          this._statesMapVarName = factoryName + '_states';
          this._statesMapVar = o.variable(this._statesMapVarName);
        }
        _AnimationBuilder.prototype.visitAnimationStyles = function(ast, context) {
          var stylesArr = [];
          if (context.isExpectingFirstStyleStep) {
            stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR);
            context.isExpectingFirstStyleStep = false;
          }
          ast.styles.forEach(function(entry) {
            var entries = Object.keys(entry).map(function(key) {
              return [key, o.literal(entry[key])];
            });
            stylesArr.push(o.literalMap(entries));
          });
          return o.importExpr(resolveIdentifier(Identifiers.AnimationStyles)).instantiate([o.importExpr(resolveIdentifier(Identifiers.collectAndResolveStyles)).callFn([_ANIMATION_COLLECTED_STYLES, o.literalArr(stylesArr)])]);
        };
        _AnimationBuilder.prototype.visitAnimationKeyframe = function(ast, context) {
          return o.importExpr(resolveIdentifier(Identifiers.AnimationKeyframe)).instantiate([o.literal(ast.offset), ast.styles.visit(this, context)]);
        };
        _AnimationBuilder.prototype.visitAnimationStep = function(ast, context) {
          var _this = this;
          if (context.endStateAnimateStep === ast) {
            return this._visitEndStateAnimation(ast, context);
          }
          var startingStylesExpr = ast.startingStyles.visit(this, context);
          var keyframeExpressions = ast.keyframes.map(function(keyframeEntry) {
            return keyframeEntry.visit(_this, context);
          });
          return this._callAnimateMethod(ast, startingStylesExpr, o.literalArr(keyframeExpressions), context);
        };
        _AnimationBuilder.prototype._visitEndStateAnimation = function(ast, context) {
          var _this = this;
          var startingStylesExpr = ast.startingStyles.visit(this, context);
          var keyframeExpressions = ast.keyframes.map(function(keyframe) {
            return keyframe.visit(_this, context);
          });
          var keyframesExpr = o.importExpr(resolveIdentifier(Identifiers.balanceAnimationKeyframes)).callFn([_ANIMATION_COLLECTED_STYLES, _ANIMATION_END_STATE_STYLES_VAR, o.literalArr(keyframeExpressions)]);
          return this._callAnimateMethod(ast, startingStylesExpr, keyframesExpr, context);
        };
        _AnimationBuilder.prototype._callAnimateMethod = function(ast, startingStylesExpr, keyframesExpr, context) {
          context.totalTransitionTime += ast.duration + ast.delay;
          return _ANIMATION_FACTORY_RENDERER_VAR.callMethod('animate', [_ANIMATION_FACTORY_ELEMENT_VAR, startingStylesExpr, keyframesExpr, o.literal(ast.duration), o.literal(ast.delay), o.literal(ast.easing)]);
        };
        _AnimationBuilder.prototype.visitAnimationSequence = function(ast, context) {
          var _this = this;
          var playerExprs = ast.steps.map(function(step) {
            return step.visit(_this, context);
          });
          return o.importExpr(resolveIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([o.literalArr(playerExprs)]);
        };
        _AnimationBuilder.prototype.visitAnimationGroup = function(ast, context) {
          var _this = this;
          var playerExprs = ast.steps.map(function(step) {
            return step.visit(_this, context);
          });
          return o.importExpr(resolveIdentifier(Identifiers.AnimationGroupPlayer)).instantiate([o.literalArr(playerExprs)]);
        };
        _AnimationBuilder.prototype.visitAnimationStateDeclaration = function(ast, context) {
          var flatStyles = {};
          _getStylesArray(ast).forEach(function(entry) {
            Object.keys(entry).forEach(function(key) {
              flatStyles[key] = entry[key];
            });
          });
          context.stateMap.registerState(ast.stateName, flatStyles);
        };
        _AnimationBuilder.prototype.visitAnimationStateTransition = function(ast, context) {
          var steps = ast.animation.steps;
          var lastStep = steps[steps.length - 1];
          if (_isEndStateAnimateStep(lastStep)) {
            context.endStateAnimateStep = lastStep;
          }
          context.totalTransitionTime = 0;
          context.isExpectingFirstStyleStep = true;
          var stateChangePreconditions = [];
          ast.stateChanges.forEach(function(stateChange) {
            stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR, stateChange.fromState).and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR, stateChange.toState)));
            if (stateChange.fromState != ANY_STATE) {
              context.stateMap.registerState(stateChange.fromState);
            }
            if (stateChange.toState != ANY_STATE) {
              context.stateMap.registerState(stateChange.toState);
            }
          });
          var animationPlayerExpr = ast.animation.visit(this, context);
          var reducedStateChangesPrecondition = stateChangePreconditions.reduce(function(a, b) {
            return a.or(b);
          });
          var precondition = _ANIMATION_PLAYER_VAR.equals(o.NULL_EXPR).and(reducedStateChangesPrecondition);
          var animationStmt = _ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt();
          var totalTimeStmt = _ANIMATION_TIME_VAR.set(o.literal(context.totalTransitionTime)).toStmt();
          return new o.IfStmt(precondition, [animationStmt, totalTimeStmt]);
        };
        _AnimationBuilder.prototype.visitAnimationEntry = function(ast, context) {
          var _this = this;
          ast.stateDeclarations.forEach(function(def) {
            return def.visit(_this, context);
          });
          context.stateMap.registerState(DEFAULT_STATE, {});
          var statements = [];
          statements.push(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod('cancelActiveAnimation', [_ANIMATION_FACTORY_ELEMENT_VAR, o.literal(this.animationName), _ANIMATION_NEXT_STATE_VAR.equals(o.literal(EMPTY_STATE))]).toStmt());
          statements.push(_ANIMATION_COLLECTED_STYLES.set(EMPTY_MAP).toDeclStmt());
          statements.push(_ANIMATION_PLAYER_VAR.set(o.NULL_EXPR).toDeclStmt());
          statements.push(_ANIMATION_TIME_VAR.set(o.literal(0)).toDeclStmt());
          statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(o.literal(DEFAULT_STATE))).toDeclStmt());
          statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR)).toDeclStmt());
          statements.push(new o.IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(o.NULL_EXPR), [_ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
          statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR)).toDeclStmt());
          statements.push(new o.IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(o.NULL_EXPR), [_ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
          var RENDER_STYLES_FN = o.importExpr(resolveIdentifier(Identifiers.renderStyles));
          statements.push(RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, o.importExpr(resolveIdentifier(Identifiers.clearStyles)).callFn([_ANIMATION_START_STATE_STYLES_VAR])]).toStmt());
          ast.stateTransitions.forEach(function(transAst) {
            return statements.push(transAst.visit(_this, context));
          });
          statements.push(new o.IfStmt(_ANIMATION_PLAYER_VAR.equals(o.NULL_EXPR), [_ANIMATION_PLAYER_VAR.set(o.importExpr(resolveIdentifier(Identifiers.NoOpAnimationPlayer)).instantiate([])).toStmt()]));
          statements.push(_ANIMATION_PLAYER_VAR.callMethod('onDone', [o.fn([], [RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, o.importExpr(resolveIdentifier(Identifiers.prepareFinalAnimationStyles)).callFn([_ANIMATION_START_STATE_STYLES_VAR, _ANIMATION_END_STATE_STYLES_VAR])]).toStmt()])]).toStmt());
          statements.push(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod('queueAnimation', [_ANIMATION_FACTORY_ELEMENT_VAR, o.literal(this.animationName), _ANIMATION_PLAYER_VAR]).toStmt());
          statements.push(new o.ReturnStatement(o.importExpr(resolveIdentifier(Identifiers.AnimationTransition)).instantiate([_ANIMATION_PLAYER_VAR, _ANIMATION_CURRENT_STATE_VAR, _ANIMATION_NEXT_STATE_VAR, _ANIMATION_TIME_VAR])));
          return o.fn([new o.FnParam(_ANIMATION_FACTORY_VIEW_VAR.name, o.importType(resolveIdentifier(Identifiers.AppView), [o.DYNAMIC_TYPE])), new o.FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name, o.DYNAMIC_TYPE), new o.FnParam(_ANIMATION_CURRENT_STATE_VAR.name, o.DYNAMIC_TYPE), new o.FnParam(_ANIMATION_NEXT_STATE_VAR.name, o.DYNAMIC_TYPE)], statements, o.importType(resolveIdentifier(Identifiers.AnimationTransition)));
        };
        _AnimationBuilder.prototype.build = function(ast) {
          var context = new _AnimationBuilderContext();
          var fnStatement = ast.visit(this, context).toDeclStmt(this._fnVarName);
          var fnVariable = o.variable(this._fnVarName);
          var lookupMap = [];
          Object.keys(context.stateMap.states).forEach(function(stateName) {
            var value = context.stateMap.states[stateName];
            var variableValue = EMPTY_MAP;
            if (isPresent(value)) {
              var styleMap_1 = [];
              Object.keys(value).forEach(function(key) {
                styleMap_1.push([key, o.literal(value[key])]);
              });
              variableValue = o.literalMap(styleMap_1);
            }
            lookupMap.push([stateName, variableValue]);
          });
          var compiledStatesMapStmt = this._statesMapVar.set(o.literalMap(lookupMap)).toDeclStmt();
          var statements = [compiledStatesMapStmt, fnStatement];
          return new AnimationEntryCompileResult(this.animationName, statements, fnVariable);
        };
        return _AnimationBuilder;
      }());
      _AnimationBuilderContext = (function() {
        function _AnimationBuilderContext() {
          this.stateMap = new _AnimationBuilderStateMap();
          this.endStateAnimateStep = null;
          this.isExpectingFirstStyleStep = false;
          this.totalTransitionTime = 0;
        }
        return _AnimationBuilderContext;
      }());
      _AnimationBuilderStateMap = (function() {
        function _AnimationBuilderStateMap() {
          this._states = {};
        }
        Object.defineProperty(_AnimationBuilderStateMap.prototype, "states", {
          get: function() {
            return this._states;
          },
          enumerable: true,
          configurable: true
        });
        _AnimationBuilderStateMap.prototype.registerState = function(name, value) {
          if (value === void 0) {
            value = null;
          }
          var existingEntry = this._states[name];
          if (!existingEntry) {
            this._states[name] = value;
          }
        };
        return _AnimationBuilderStateMap;
      }());
    }
  };
});

$__System.register("18", [], function($__export) {
  "use strict";
  var __extends,
      AnimationAst,
      AnimationStateAst,
      AnimationEntryAst,
      AnimationStateDeclarationAst,
      AnimationStateTransitionExpression,
      AnimationStateTransitionAst,
      AnimationStepAst,
      AnimationStylesAst,
      AnimationKeyframeAst,
      AnimationWithStepsAst,
      AnimationGroupAst,
      AnimationSequenceAst;
  return {
    setters: [],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      AnimationAst = (function() {
        function AnimationAst() {
          this.startTime = 0;
          this.playTime = 0;
        }
        return AnimationAst;
      }());
      $__export("AnimationAst", AnimationAst);
      AnimationStateAst = (function(_super) {
        __extends(AnimationStateAst, _super);
        function AnimationStateAst() {
          _super.apply(this, arguments);
        }
        return AnimationStateAst;
      }(AnimationAst));
      $__export("AnimationStateAst", AnimationStateAst);
      AnimationEntryAst = (function(_super) {
        __extends(AnimationEntryAst, _super);
        function AnimationEntryAst(name, stateDeclarations, stateTransitions) {
          _super.call(this);
          this.name = name;
          this.stateDeclarations = stateDeclarations;
          this.stateTransitions = stateTransitions;
        }
        AnimationEntryAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationEntry(this, context);
        };
        return AnimationEntryAst;
      }(AnimationAst));
      $__export("AnimationEntryAst", AnimationEntryAst);
      AnimationStateDeclarationAst = (function(_super) {
        __extends(AnimationStateDeclarationAst, _super);
        function AnimationStateDeclarationAst(stateName, styles) {
          _super.call(this);
          this.stateName = stateName;
          this.styles = styles;
        }
        AnimationStateDeclarationAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationStateDeclaration(this, context);
        };
        return AnimationStateDeclarationAst;
      }(AnimationStateAst));
      $__export("AnimationStateDeclarationAst", AnimationStateDeclarationAst);
      AnimationStateTransitionExpression = (function() {
        function AnimationStateTransitionExpression(fromState, toState) {
          this.fromState = fromState;
          this.toState = toState;
        }
        return AnimationStateTransitionExpression;
      }());
      $__export("AnimationStateTransitionExpression", AnimationStateTransitionExpression);
      AnimationStateTransitionAst = (function(_super) {
        __extends(AnimationStateTransitionAst, _super);
        function AnimationStateTransitionAst(stateChanges, animation) {
          _super.call(this);
          this.stateChanges = stateChanges;
          this.animation = animation;
        }
        AnimationStateTransitionAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationStateTransition(this, context);
        };
        return AnimationStateTransitionAst;
      }(AnimationStateAst));
      $__export("AnimationStateTransitionAst", AnimationStateTransitionAst);
      AnimationStepAst = (function(_super) {
        __extends(AnimationStepAst, _super);
        function AnimationStepAst(startingStyles, keyframes, duration, delay, easing) {
          _super.call(this);
          this.startingStyles = startingStyles;
          this.keyframes = keyframes;
          this.duration = duration;
          this.delay = delay;
          this.easing = easing;
        }
        AnimationStepAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationStep(this, context);
        };
        return AnimationStepAst;
      }(AnimationAst));
      $__export("AnimationStepAst", AnimationStepAst);
      AnimationStylesAst = (function(_super) {
        __extends(AnimationStylesAst, _super);
        function AnimationStylesAst(styles) {
          _super.call(this);
          this.styles = styles;
        }
        AnimationStylesAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationStyles(this, context);
        };
        return AnimationStylesAst;
      }(AnimationAst));
      $__export("AnimationStylesAst", AnimationStylesAst);
      AnimationKeyframeAst = (function(_super) {
        __extends(AnimationKeyframeAst, _super);
        function AnimationKeyframeAst(offset, styles) {
          _super.call(this);
          this.offset = offset;
          this.styles = styles;
        }
        AnimationKeyframeAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationKeyframe(this, context);
        };
        return AnimationKeyframeAst;
      }(AnimationAst));
      $__export("AnimationKeyframeAst", AnimationKeyframeAst);
      AnimationWithStepsAst = (function(_super) {
        __extends(AnimationWithStepsAst, _super);
        function AnimationWithStepsAst(steps) {
          _super.call(this);
          this.steps = steps;
        }
        return AnimationWithStepsAst;
      }(AnimationAst));
      $__export("AnimationWithStepsAst", AnimationWithStepsAst);
      AnimationGroupAst = (function(_super) {
        __extends(AnimationGroupAst, _super);
        function AnimationGroupAst(steps) {
          _super.call(this, steps);
        }
        AnimationGroupAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationGroup(this, context);
        };
        return AnimationGroupAst;
      }(AnimationWithStepsAst));
      $__export("AnimationGroupAst", AnimationGroupAst);
      AnimationSequenceAst = (function(_super) {
        __extends(AnimationSequenceAst, _super);
        function AnimationSequenceAst(steps) {
          _super.call(this, steps);
        }
        AnimationSequenceAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationSequence(this, context);
        };
        return AnimationSequenceAst;
      }(AnimationWithStepsAst));
      $__export("AnimationSequenceAst", AnimationSequenceAst);
    }
  };
});

$__System.register("19", ["16"], function($__export) {
  "use strict";
  var isPresent,
      StylesCollectionEntry,
      StylesCollection;
  return {
    setters: [function($__m) {
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      StylesCollectionEntry = (function() {
        function StylesCollectionEntry(time, value) {
          this.time = time;
          this.value = value;
        }
        StylesCollectionEntry.prototype.matches = function(time, value) {
          return time == this.time && value == this.value;
        };
        return StylesCollectionEntry;
      }());
      $__export("StylesCollectionEntry", StylesCollectionEntry);
      StylesCollection = (function() {
        function StylesCollection() {
          this.styles = {};
        }
        StylesCollection.prototype.insertAtTime = function(property, time, value) {
          var tuple = new StylesCollectionEntry(time, value);
          var entries = this.styles[property];
          if (!isPresent(entries)) {
            entries = this.styles[property] = [];
          }
          var insertionIndex = 0;
          for (var i = entries.length - 1; i >= 0; i--) {
            if (entries[i].time <= time) {
              insertionIndex = i + 1;
              break;
            }
          }
          entries.splice(insertionIndex, 0, tuple);
        };
        StylesCollection.prototype.getByIndex = function(property, index) {
          var items = this.styles[property];
          if (isPresent(items)) {
            return index >= items.length ? null : items[index];
          }
          return null;
        };
        StylesCollection.prototype.indexOfAtOrBeforeTime = function(property, time) {
          var entries = this.styles[property];
          if (isPresent(entries)) {
            for (var i = entries.length - 1; i >= 0; i--) {
              if (entries[i].time <= time)
                return i;
            }
          }
          return null;
        };
        return StylesCollection;
      }());
      $__export("StylesCollection", StylesCollection);
    }
  };
});

$__System.register("10", ["11", "12", "16", "1a", "17", "18", "19"], function($__export) {
  "use strict";
  var __extends,
      CompileAnimationAnimateMetadata,
      CompileAnimationGroupMetadata,
      CompileAnimationKeyframesSequenceMetadata,
      CompileAnimationSequenceMetadata,
      CompileAnimationStateDeclarationMetadata,
      CompileAnimationStyleMetadata,
      CompileAnimationWithStepsMetadata,
      StringMapWrapper,
      isBlank,
      isPresent,
      ParseError,
      ANY_STATE,
      FILL_STYLE_FLAG,
      AnimationEntryAst,
      AnimationGroupAst,
      AnimationKeyframeAst,
      AnimationSequenceAst,
      AnimationStateDeclarationAst,
      AnimationStateTransitionAst,
      AnimationStateTransitionExpression,
      AnimationStepAst,
      AnimationStylesAst,
      AnimationWithStepsAst,
      StylesCollection,
      _INITIAL_KEYFRAME,
      _TERMINAL_KEYFRAME,
      _ONE_SECOND,
      AnimationParseError,
      AnimationEntryParseResult,
      AnimationParser,
      _AnimationTimings;
  function _parseAnimationDeclarationStates(stateMetadata, errors) {
    var styleValues = [];
    stateMetadata.styles.styles.forEach(function(stylesEntry) {
      if ((typeof stylesEntry === 'undefined' ? 'undefined' : $traceurRuntime.typeof(stylesEntry)) === 'object' && stylesEntry !== null) {
        styleValues.push(stylesEntry);
      } else {
        errors.push(new AnimationParseError("State based animations cannot contain references to other states"));
      }
    });
    var defStyles = new AnimationStylesAst(styleValues);
    var states = stateMetadata.stateNameExpr.split(/\s*,\s*/);
    return states.map(function(state) {
      return new AnimationStateDeclarationAst(state, defStyles);
    });
  }
  function _parseAnimationStateTransition(transitionStateMetadata, stateStyles, errors) {
    var styles = new StylesCollection();
    var transitionExprs = [];
    var transitionStates = transitionStateMetadata.stateChangeExpr.split(/\s*,\s*/);
    transitionStates.forEach(function(expr) {
      transitionExprs.push.apply(transitionExprs, _parseAnimationTransitionExpr(expr, errors));
    });
    var entry = _normalizeAnimationEntry(transitionStateMetadata.steps);
    var animation = _normalizeStyleSteps(entry, stateStyles, errors);
    var animationAst = _parseTransitionAnimation(animation, 0, styles, stateStyles, errors);
    if (errors.length == 0) {
      _fillAnimationAstStartingKeyframes(animationAst, styles, errors);
    }
    var stepsAst = (animationAst instanceof AnimationWithStepsAst) ? animationAst : new AnimationSequenceAst([animationAst]);
    return new AnimationStateTransitionAst(transitionExprs, stepsAst);
  }
  function _parseAnimationAlias(alias, errors) {
    switch (alias) {
      case ':enter':
        return 'void => *';
      case ':leave':
        return '* => void';
      default:
        errors.push(new AnimationParseError("the transition alias value \"" + alias + "\" is not supported"));
        return '* => *';
    }
  }
  function _parseAnimationTransitionExpr(eventStr, errors) {
    var expressions = [];
    if (eventStr[0] == ':') {
      eventStr = _parseAnimationAlias(eventStr, errors);
    }
    var match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
    if (!isPresent(match) || match.length < 4) {
      errors.push(new AnimationParseError("the provided " + eventStr + " is not of a supported format"));
      return expressions;
    }
    var fromState = match[1];
    var separator = match[2];
    var toState = match[3];
    expressions.push(new AnimationStateTransitionExpression(fromState, toState));
    var isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
    if (separator[0] == '<' && !isFullAnyStateExpr) {
      expressions.push(new AnimationStateTransitionExpression(toState, fromState));
    }
    return expressions;
  }
  function _normalizeAnimationEntry(entry) {
    return Array.isArray(entry) ? new CompileAnimationSequenceMetadata(entry) : entry;
  }
  function _normalizeStyleMetadata(entry, stateStyles, errors) {
    var normalizedStyles = [];
    entry.styles.forEach(function(styleEntry) {
      if (typeof styleEntry === 'string') {
        normalizedStyles.push.apply(normalizedStyles, _resolveStylesFromState(styleEntry, stateStyles, errors));
      } else {
        normalizedStyles.push(styleEntry);
      }
    });
    return normalizedStyles;
  }
  function _normalizeStyleSteps(entry, stateStyles, errors) {
    var steps = _normalizeStyleStepEntry(entry, stateStyles, errors);
    return (entry instanceof CompileAnimationGroupMetadata) ? new CompileAnimationGroupMetadata(steps) : new CompileAnimationSequenceMetadata(steps);
  }
  function _mergeAnimationStyles(stylesList, newItem) {
    if ((typeof newItem === 'undefined' ? 'undefined' : $traceurRuntime.typeof(newItem)) === 'object' && newItem !== null && stylesList.length > 0) {
      var lastIndex = stylesList.length - 1;
      var lastItem = stylesList[lastIndex];
      if ((typeof lastItem === 'undefined' ? 'undefined' : $traceurRuntime.typeof(lastItem)) === 'object' && lastItem !== null) {
        stylesList[lastIndex] = StringMapWrapper.merge(lastItem, newItem);
        return;
      }
    }
    stylesList.push(newItem);
  }
  function _normalizeStyleStepEntry(entry, stateStyles, errors) {
    var steps;
    if (entry instanceof CompileAnimationWithStepsMetadata) {
      steps = entry.steps;
    } else {
      return [entry];
    }
    var newSteps = [];
    var combinedStyles;
    steps.forEach(function(step) {
      if (step instanceof CompileAnimationStyleMetadata) {
        if (!isPresent(combinedStyles)) {
          combinedStyles = [];
        }
        _normalizeStyleMetadata(step, stateStyles, errors).forEach(function(entry) {
          _mergeAnimationStyles(combinedStyles, entry);
        });
      } else {
        if (isPresent(combinedStyles)) {
          newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
          combinedStyles = null;
        }
        if (step instanceof CompileAnimationAnimateMetadata) {
          var animateStyleValue = step.styles;
          if (animateStyleValue instanceof CompileAnimationStyleMetadata) {
            animateStyleValue.styles = _normalizeStyleMetadata(animateStyleValue, stateStyles, errors);
          } else if (animateStyleValue instanceof CompileAnimationKeyframesSequenceMetadata) {
            animateStyleValue.steps.forEach(function(step) {
              step.styles = _normalizeStyleMetadata(step, stateStyles, errors);
            });
          }
        } else if (step instanceof CompileAnimationWithStepsMetadata) {
          var innerSteps = _normalizeStyleStepEntry(step, stateStyles, errors);
          step = step instanceof CompileAnimationGroupMetadata ? new CompileAnimationGroupMetadata(innerSteps) : new CompileAnimationSequenceMetadata(innerSteps);
        }
        newSteps.push(step);
      }
    });
    if (isPresent(combinedStyles)) {
      newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
    }
    return newSteps;
  }
  function _resolveStylesFromState(stateName, stateStyles, errors) {
    var styles = [];
    if (stateName[0] != ':') {
      errors.push(new AnimationParseError("Animation states via styles must be prefixed with a \":\""));
    } else {
      var normalizedStateName = stateName.substring(1);
      var value = stateStyles[normalizedStateName];
      if (!isPresent(value)) {
        errors.push(new AnimationParseError("Unable to apply styles due to missing a state: \"" + normalizedStateName + "\""));
      } else {
        value.styles.forEach(function(stylesEntry) {
          if ((typeof stylesEntry === 'undefined' ? 'undefined' : $traceurRuntime.typeof(stylesEntry)) === 'object' && stylesEntry !== null) {
            styles.push(stylesEntry);
          }
        });
      }
    }
    return styles;
  }
  function _parseAnimationKeyframes(keyframeSequence, currentTime, collectedStyles, stateStyles, errors) {
    var totalEntries = keyframeSequence.steps.length;
    var totalOffsets = 0;
    keyframeSequence.steps.forEach(function(step) {
      return totalOffsets += (isPresent(step.offset) ? 1 : 0);
    });
    if (totalOffsets > 0 && totalOffsets < totalEntries) {
      errors.push(new AnimationParseError("Not all style() entries contain an offset for the provided keyframe()"));
      totalOffsets = totalEntries;
    }
    var limit = totalEntries - 1;
    var margin = totalOffsets == 0 ? (1 / limit) : 0;
    var rawKeyframes = [];
    var index = 0;
    var doSortKeyframes = false;
    var lastOffset = 0;
    keyframeSequence.steps.forEach(function(styleMetadata) {
      var offset = styleMetadata.offset;
      var keyframeStyles = {};
      styleMetadata.styles.forEach(function(entry) {
        Object.keys(entry).forEach(function(prop) {
          if (prop != 'offset') {
            keyframeStyles[prop] = entry[prop];
          }
        });
      });
      if (isPresent(offset)) {
        doSortKeyframes = doSortKeyframes || (offset < lastOffset);
      } else {
        offset = index == limit ? _TERMINAL_KEYFRAME : (margin * index);
      }
      rawKeyframes.push([offset, keyframeStyles]);
      lastOffset = offset;
      index++;
    });
    if (doSortKeyframes) {
      rawKeyframes.sort(function(a, b) {
        return a[0] <= b[0] ? -1 : 1;
      });
    }
    var firstKeyframe = rawKeyframes[0];
    if (firstKeyframe[0] != _INITIAL_KEYFRAME) {
      rawKeyframes.splice(0, 0, firstKeyframe = [_INITIAL_KEYFRAME, {}]);
    }
    var firstKeyframeStyles = firstKeyframe[1];
    limit = rawKeyframes.length - 1;
    var lastKeyframe = rawKeyframes[limit];
    if (lastKeyframe[0] != _TERMINAL_KEYFRAME) {
      rawKeyframes.push(lastKeyframe = [_TERMINAL_KEYFRAME, {}]);
      limit++;
    }
    var lastKeyframeStyles = lastKeyframe[1];
    for (var i = 1; i <= limit; i++) {
      var entry = rawKeyframes[i];
      var styles = entry[1];
      Object.keys(styles).forEach(function(prop) {
        if (!isPresent(firstKeyframeStyles[prop])) {
          firstKeyframeStyles[prop] = FILL_STYLE_FLAG;
        }
      });
    }
    var _loop_1 = function(i) {
      var entry = rawKeyframes[i];
      var styles = entry[1];
      Object.keys(styles).forEach(function(prop) {
        if (!isPresent(lastKeyframeStyles[prop])) {
          lastKeyframeStyles[prop] = styles[prop];
        }
      });
    };
    for (var i = limit - 1; i >= 0; i--) {
      _loop_1(i);
    }
    return rawKeyframes.map(function(entry) {
      return new AnimationKeyframeAst(entry[0], new AnimationStylesAst([entry[1]]));
    });
  }
  function _parseTransitionAnimation(entry, currentTime, collectedStyles, stateStyles, errors) {
    var ast;
    var playTime = 0;
    var startingTime = currentTime;
    if (entry instanceof CompileAnimationWithStepsMetadata) {
      var maxDuration = 0;
      var steps = [];
      var isGroup = entry instanceof CompileAnimationGroupMetadata;
      var previousStyles;
      entry.steps.forEach(function(entry) {
        var time = isGroup ? startingTime : currentTime;
        if (entry instanceof CompileAnimationStyleMetadata) {
          entry.styles.forEach(function(stylesEntry) {
            var map = stylesEntry;
            Object.keys(map).forEach(function(prop) {
              collectedStyles.insertAtTime(prop, time, map[prop]);
            });
          });
          previousStyles = entry.styles;
          return;
        }
        var innerAst = _parseTransitionAnimation(entry, time, collectedStyles, stateStyles, errors);
        if (isPresent(previousStyles)) {
          if (entry instanceof CompileAnimationWithStepsMetadata) {
            var startingStyles = new AnimationStylesAst(previousStyles);
            steps.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
          } else {
            var innerStep = innerAst;
            (_a = innerStep.startingStyles.styles).push.apply(_a, previousStyles);
          }
          previousStyles = null;
        }
        var astDuration = innerAst.playTime;
        currentTime += astDuration;
        playTime += astDuration;
        maxDuration = Math.max(astDuration, maxDuration);
        steps.push(innerAst);
        var _a;
      });
      if (isPresent(previousStyles)) {
        var startingStyles = new AnimationStylesAst(previousStyles);
        steps.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
      }
      if (isGroup) {
        ast = new AnimationGroupAst(steps);
        playTime = maxDuration;
        currentTime = startingTime + playTime;
      } else {
        ast = new AnimationSequenceAst(steps);
      }
    } else if (entry instanceof CompileAnimationAnimateMetadata) {
      var timings = _parseTimeExpression(entry.timings, errors);
      var styles = entry.styles;
      var keyframes;
      if (styles instanceof CompileAnimationKeyframesSequenceMetadata) {
        keyframes = _parseAnimationKeyframes(styles, currentTime, collectedStyles, stateStyles, errors);
      } else {
        var styleData = styles;
        var offset = _TERMINAL_KEYFRAME;
        var styleAst = new AnimationStylesAst(styleData.styles);
        var keyframe = new AnimationKeyframeAst(offset, styleAst);
        keyframes = [keyframe];
      }
      ast = new AnimationStepAst(new AnimationStylesAst([]), keyframes, timings.duration, timings.delay, timings.easing);
      playTime = timings.duration + timings.delay;
      currentTime += playTime;
      keyframes.forEach(function(keyframe) {
        return keyframe.styles.styles.forEach(function(entry) {
          return Object.keys(entry).forEach(function(prop) {
            collectedStyles.insertAtTime(prop, currentTime, entry[prop]);
          });
        });
      });
    } else {
      ast = new AnimationStepAst(null, [], 0, 0, '');
    }
    ast.playTime = playTime;
    ast.startTime = startingTime;
    return ast;
  }
  function _fillAnimationAstStartingKeyframes(ast, collectedStyles, errors) {
    if ((ast instanceof AnimationStepAst) && ast.keyframes.length > 0) {
      var keyframes = ast.keyframes;
      if (keyframes.length == 1) {
        var endKeyframe = keyframes[0];
        var startKeyframe = _createStartKeyframeFromEndKeyframe(endKeyframe, ast.startTime, ast.playTime, collectedStyles, errors);
        ast.keyframes = [startKeyframe, endKeyframe];
      }
    } else if (ast instanceof AnimationWithStepsAst) {
      ast.steps.forEach(function(entry) {
        return _fillAnimationAstStartingKeyframes(entry, collectedStyles, errors);
      });
    }
  }
  function _parseTimeExpression(exp, errors) {
    var regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?/i;
    var duration;
    var delay = 0;
    var easing = null;
    if (typeof exp === 'string') {
      var matches = exp.match(regex);
      if (matches === null) {
        errors.push(new AnimationParseError("The provided timing value \"" + exp + "\" is invalid."));
        return new _AnimationTimings(0, 0, null);
      }
      var durationMatch = parseFloat(matches[1]);
      var durationUnit = matches[2];
      if (durationUnit == 's') {
        durationMatch *= _ONE_SECOND;
      }
      duration = Math.floor(durationMatch);
      var delayMatch = matches[3];
      var delayUnit = matches[4];
      if (isPresent(delayMatch)) {
        var delayVal = parseFloat(delayMatch);
        if (isPresent(delayUnit) && delayUnit == 's') {
          delayVal *= _ONE_SECOND;
        }
        delay = Math.floor(delayVal);
      }
      var easingVal = matches[5];
      if (!isBlank(easingVal)) {
        easing = easingVal;
      }
    } else {
      duration = exp;
    }
    return new _AnimationTimings(duration, delay, easing);
  }
  function _createStartKeyframeFromEndKeyframe(endKeyframe, startTime, duration, collectedStyles, errors) {
    var values = {};
    var endTime = startTime + duration;
    endKeyframe.styles.styles.forEach(function(styleData) {
      Object.keys(styleData).forEach(function(prop) {
        var val = styleData[prop];
        if (prop == 'offset')
          return;
        var resultIndex = collectedStyles.indexOfAtOrBeforeTime(prop, startTime);
        var resultEntry,
            nextEntry,
            value;
        if (isPresent(resultIndex)) {
          resultEntry = collectedStyles.getByIndex(prop, resultIndex);
          value = resultEntry.value;
          nextEntry = collectedStyles.getByIndex(prop, resultIndex + 1);
        } else {
          value = FILL_STYLE_FLAG;
        }
        if (isPresent(nextEntry) && !nextEntry.matches(endTime, val)) {
          errors.push(new AnimationParseError("The animated CSS property \"" + prop + "\" unexpectedly changes between steps \"" + resultEntry.time + "ms\" and \"" + endTime + "ms\" at \"" + nextEntry.time + "ms\""));
        }
        values[prop] = value;
      });
    });
    return new AnimationKeyframeAst(_INITIAL_KEYFRAME, new AnimationStylesAst([values]));
  }
  return {
    setters: [function($__m) {
      CompileAnimationAnimateMetadata = $__m.CompileAnimationAnimateMetadata;
      CompileAnimationGroupMetadata = $__m.CompileAnimationGroupMetadata;
      CompileAnimationKeyframesSequenceMetadata = $__m.CompileAnimationKeyframesSequenceMetadata;
      CompileAnimationSequenceMetadata = $__m.CompileAnimationSequenceMetadata;
      CompileAnimationStateDeclarationMetadata = $__m.CompileAnimationStateDeclarationMetadata;
      CompileAnimationStyleMetadata = $__m.CompileAnimationStyleMetadata;
      CompileAnimationWithStepsMetadata = $__m.CompileAnimationWithStepsMetadata;
    }, function($__m) {
      StringMapWrapper = $__m.StringMapWrapper;
    }, function($__m) {
      isBlank = $__m.isBlank;
      isPresent = $__m.isPresent;
    }, function($__m) {
      ParseError = $__m.ParseError;
    }, function($__m) {
      ANY_STATE = $__m.ANY_STATE;
      FILL_STYLE_FLAG = $__m.FILL_STYLE_FLAG;
    }, function($__m) {
      AnimationEntryAst = $__m.AnimationEntryAst;
      AnimationGroupAst = $__m.AnimationGroupAst;
      AnimationKeyframeAst = $__m.AnimationKeyframeAst;
      AnimationSequenceAst = $__m.AnimationSequenceAst;
      AnimationStateDeclarationAst = $__m.AnimationStateDeclarationAst;
      AnimationStateTransitionAst = $__m.AnimationStateTransitionAst;
      AnimationStateTransitionExpression = $__m.AnimationStateTransitionExpression;
      AnimationStepAst = $__m.AnimationStepAst;
      AnimationStylesAst = $__m.AnimationStylesAst;
      AnimationWithStepsAst = $__m.AnimationWithStepsAst;
    }, function($__m) {
      StylesCollection = $__m.StylesCollection;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      _INITIAL_KEYFRAME = 0;
      _TERMINAL_KEYFRAME = 1;
      _ONE_SECOND = 1000;
      AnimationParseError = (function(_super) {
        __extends(AnimationParseError, _super);
        function AnimationParseError(message) {
          _super.call(this, null, message);
        }
        AnimationParseError.prototype.toString = function() {
          return "" + this.msg;
        };
        return AnimationParseError;
      }(ParseError));
      $__export("AnimationParseError", AnimationParseError);
      AnimationEntryParseResult = (function() {
        function AnimationEntryParseResult(ast, errors) {
          this.ast = ast;
          this.errors = errors;
        }
        return AnimationEntryParseResult;
      }());
      $__export("AnimationEntryParseResult", AnimationEntryParseResult);
      AnimationParser = (function() {
        function AnimationParser() {}
        AnimationParser.prototype.parseComponent = function(component) {
          var _this = this;
          var errors = [];
          var componentName = component.type.name;
          var animationTriggerNames = new Set();
          var asts = component.template.animations.map(function(entry) {
            var result = _this.parseEntry(entry);
            var ast = result.ast;
            var triggerName = ast.name;
            if (animationTriggerNames.has(triggerName)) {
              result.errors.push(new AnimationParseError("The animation trigger \"" + triggerName + "\" has already been registered for the " + componentName + " component"));
            } else {
              animationTriggerNames.add(triggerName);
            }
            if (result.errors.length > 0) {
              var errorMessage_1 = "- Unable to parse the animation sequence for \"" + triggerName + "\" on the " + componentName + " component due to the following errors:";
              result.errors.forEach(function(error) {
                errorMessage_1 += '\n-- ' + error.msg;
              });
              errors.push(errorMessage_1);
            }
            return ast;
          });
          if (errors.length > 0) {
            var errorString = errors.join('\n');
            throw new Error("Animation parse errors:\n" + errorString);
          }
          return asts;
        };
        AnimationParser.prototype.parseEntry = function(entry) {
          var errors = [];
          var stateStyles = {};
          var transitions = [];
          var stateDeclarationAsts = [];
          entry.definitions.forEach(function(def) {
            if (def instanceof CompileAnimationStateDeclarationMetadata) {
              _parseAnimationDeclarationStates(def, errors).forEach(function(ast) {
                stateDeclarationAsts.push(ast);
                stateStyles[ast.stateName] = ast.styles;
              });
            } else {
              transitions.push(def);
            }
          });
          var stateTransitionAsts = transitions.map(function(transDef) {
            return _parseAnimationStateTransition(transDef, stateStyles, errors);
          });
          var ast = new AnimationEntryAst(entry.name, stateDeclarationAsts, stateTransitionAsts);
          return new AnimationEntryParseResult(ast, errors);
        };
        return AnimationParser;
      }());
      $__export("AnimationParser", AnimationParser);
      _AnimationTimings = (function() {
        function _AnimationTimings(duration, delay, easing) {
          this.duration = duration;
          this.delay = delay;
          this.easing = easing;
        }
        return _AnimationTimings;
      }());
    }
  };
});

$__System.register("1b", ["16", "14", "1c"], function($__export) {
  "use strict";
  var isPresent,
      o,
      debugOutputAstAsTypeScript,
      _ExecutionContext,
      ReturnValue,
      StatementInterpreter,
      CATCH_ERROR_VAR,
      CATCH_STACK_VAR;
  function interpretStatements(statements, resultVar) {
    var stmtsWithReturn = statements.concat([new o.ReturnStatement(o.variable(resultVar))]);
    var ctx = new _ExecutionContext(null, null, null, new Map());
    var visitor = new StatementInterpreter();
    var result = visitor.visitAllStatements(stmtsWithReturn, ctx);
    return isPresent(result) ? result.value : null;
  }
  function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
    var childCtx = ctx.createChildWihtLocalVars();
    for (var i = 0; i < varNames.length; i++) {
      childCtx.vars.set(varNames[i], varValues[i]);
    }
    var result = visitor.visitAllStatements(statements, childCtx);
    return isPresent(result) ? result.value : null;
  }
  function createDynamicClass(_classStmt, _ctx, _visitor) {
    var propertyDescriptors = {};
    _classStmt.getters.forEach(function(getter) {
      propertyDescriptors[getter.name] = {
        configurable: false,
        get: function() {
          var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
          return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
        }
      };
    });
    _classStmt.methods.forEach(function(method) {
      var paramNames = method.params.map(function(param) {
        return param.name;
      });
      propertyDescriptors[method.name] = {
        writable: false,
        configurable: false,
        value: function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
          }
          var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
          return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
        }
      };
    });
    var ctorParamNames = _classStmt.constructorMethod.params.map(function(param) {
      return param.name;
    });
    var ctor = function() {
      var _this = this;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
      _classStmt.fields.forEach(function(field) {
        _this[field.name] = undefined;
      });
      _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
    };
    var superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;
    ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);
    return ctor;
  }
  function _declareFn(varNames, statements, ctx, visitor) {
    return function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
    };
  }
  $__export("interpretStatements", interpretStatements);
  return {
    setters: [function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      o = $__m;
    }, function($__m) {
      debugOutputAstAsTypeScript = $__m.debugOutputAstAsTypeScript;
    }],
    execute: function() {
      _ExecutionContext = (function() {
        function _ExecutionContext(parent, instance, className, vars) {
          this.parent = parent;
          this.instance = instance;
          this.className = className;
          this.vars = vars;
        }
        _ExecutionContext.prototype.createChildWihtLocalVars = function() {
          return new _ExecutionContext(this, this.instance, this.className, new Map());
        };
        return _ExecutionContext;
      }());
      ReturnValue = (function() {
        function ReturnValue(value) {
          this.value = value;
        }
        return ReturnValue;
      }());
      StatementInterpreter = (function() {
        function StatementInterpreter() {}
        StatementInterpreter.prototype.debugAst = function(ast) {
          return debugOutputAstAsTypeScript(ast);
        };
        StatementInterpreter.prototype.visitDeclareVarStmt = function(stmt, ctx) {
          ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));
          return null;
        };
        StatementInterpreter.prototype.visitWriteVarExpr = function(expr, ctx) {
          var value = expr.value.visitExpression(this, ctx);
          var currCtx = ctx;
          while (currCtx != null) {
            if (currCtx.vars.has(expr.name)) {
              currCtx.vars.set(expr.name, value);
              return value;
            }
            currCtx = currCtx.parent;
          }
          throw new Error("Not declared variable " + expr.name);
        };
        StatementInterpreter.prototype.visitReadVarExpr = function(ast, ctx) {
          var varName = ast.name;
          if (isPresent(ast.builtin)) {
            switch (ast.builtin) {
              case o.BuiltinVar.Super:
                return ctx.instance.__proto__;
              case o.BuiltinVar.This:
                return ctx.instance;
              case o.BuiltinVar.CatchError:
                varName = CATCH_ERROR_VAR;
                break;
              case o.BuiltinVar.CatchStack:
                varName = CATCH_STACK_VAR;
                break;
              default:
                throw new Error("Unknown builtin variable " + ast.builtin);
            }
          }
          var currCtx = ctx;
          while (currCtx != null) {
            if (currCtx.vars.has(varName)) {
              return currCtx.vars.get(varName);
            }
            currCtx = currCtx.parent;
          }
          throw new Error("Not declared variable " + varName);
        };
        StatementInterpreter.prototype.visitWriteKeyExpr = function(expr, ctx) {
          var receiver = expr.receiver.visitExpression(this, ctx);
          var index = expr.index.visitExpression(this, ctx);
          var value = expr.value.visitExpression(this, ctx);
          receiver[index] = value;
          return value;
        };
        StatementInterpreter.prototype.visitWritePropExpr = function(expr, ctx) {
          var receiver = expr.receiver.visitExpression(this, ctx);
          var value = expr.value.visitExpression(this, ctx);
          receiver[expr.name] = value;
          return value;
        };
        StatementInterpreter.prototype.visitInvokeMethodExpr = function(expr, ctx) {
          var receiver = expr.receiver.visitExpression(this, ctx);
          var args = this.visitAllExpressions(expr.args, ctx);
          var result;
          if (isPresent(expr.builtin)) {
            switch (expr.builtin) {
              case o.BuiltinMethod.ConcatArray:
                result = receiver.concat(args[0]);
                break;
              case o.BuiltinMethod.SubscribeObservable:
                result = receiver.subscribe({next: args[0]});
                break;
              case o.BuiltinMethod.Bind:
                result = receiver.bind(args[0]);
                break;
              default:
                throw new Error("Unknown builtin method " + expr.builtin);
            }
          } else {
            result = receiver[expr.name].apply(receiver, args);
          }
          return result;
        };
        StatementInterpreter.prototype.visitInvokeFunctionExpr = function(stmt, ctx) {
          var args = this.visitAllExpressions(stmt.args, ctx);
          var fnExpr = stmt.fn;
          if (fnExpr instanceof o.ReadVarExpr && fnExpr.builtin === o.BuiltinVar.Super) {
            ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);
            return null;
          } else {
            var fn = stmt.fn.visitExpression(this, ctx);
            return fn.apply(null, args);
          }
        };
        StatementInterpreter.prototype.visitReturnStmt = function(stmt, ctx) {
          return new ReturnValue(stmt.value.visitExpression(this, ctx));
        };
        StatementInterpreter.prototype.visitDeclareClassStmt = function(stmt, ctx) {
          var clazz = createDynamicClass(stmt, ctx, this);
          ctx.vars.set(stmt.name, clazz);
          return null;
        };
        StatementInterpreter.prototype.visitExpressionStmt = function(stmt, ctx) {
          return stmt.expr.visitExpression(this, ctx);
        };
        StatementInterpreter.prototype.visitIfStmt = function(stmt, ctx) {
          var condition = stmt.condition.visitExpression(this, ctx);
          if (condition) {
            return this.visitAllStatements(stmt.trueCase, ctx);
          } else if (isPresent(stmt.falseCase)) {
            return this.visitAllStatements(stmt.falseCase, ctx);
          }
          return null;
        };
        StatementInterpreter.prototype.visitTryCatchStmt = function(stmt, ctx) {
          try {
            return this.visitAllStatements(stmt.bodyStmts, ctx);
          } catch (e) {
            var childCtx = ctx.createChildWihtLocalVars();
            childCtx.vars.set(CATCH_ERROR_VAR, e);
            childCtx.vars.set(CATCH_STACK_VAR, e.stack);
            return this.visitAllStatements(stmt.catchStmts, childCtx);
          }
        };
        StatementInterpreter.prototype.visitThrowStmt = function(stmt, ctx) {
          throw stmt.error.visitExpression(this, ctx);
        };
        StatementInterpreter.prototype.visitCommentStmt = function(stmt, context) {
          return null;
        };
        StatementInterpreter.prototype.visitInstantiateExpr = function(ast, ctx) {
          var args = this.visitAllExpressions(ast.args, ctx);
          var clazz = ast.classExpr.visitExpression(this, ctx);
          return new (clazz.bind.apply(clazz, [void 0].concat(args)))();
        };
        StatementInterpreter.prototype.visitLiteralExpr = function(ast, ctx) {
          return ast.value;
        };
        StatementInterpreter.prototype.visitExternalExpr = function(ast, ctx) {
          return ast.value.reference;
        };
        StatementInterpreter.prototype.visitConditionalExpr = function(ast, ctx) {
          if (ast.condition.visitExpression(this, ctx)) {
            return ast.trueCase.visitExpression(this, ctx);
          } else if (isPresent(ast.falseCase)) {
            return ast.falseCase.visitExpression(this, ctx);
          }
          return null;
        };
        StatementInterpreter.prototype.visitNotExpr = function(ast, ctx) {
          return !ast.condition.visitExpression(this, ctx);
        };
        StatementInterpreter.prototype.visitCastExpr = function(ast, ctx) {
          return ast.value.visitExpression(this, ctx);
        };
        StatementInterpreter.prototype.visitFunctionExpr = function(ast, ctx) {
          var paramNames = ast.params.map(function(param) {
            return param.name;
          });
          return _declareFn(paramNames, ast.statements, ctx, this);
        };
        StatementInterpreter.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
          var paramNames = stmt.params.map(function(param) {
            return param.name;
          });
          ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
          return null;
        };
        StatementInterpreter.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
          var _this = this;
          var lhs = function() {
            return ast.lhs.visitExpression(_this, ctx);
          };
          var rhs = function() {
            return ast.rhs.visitExpression(_this, ctx);
          };
          switch (ast.operator) {
            case o.BinaryOperator.Equals:
              return lhs() == rhs();
            case o.BinaryOperator.Identical:
              return lhs() === rhs();
            case o.BinaryOperator.NotEquals:
              return lhs() != rhs();
            case o.BinaryOperator.NotIdentical:
              return lhs() !== rhs();
            case o.BinaryOperator.And:
              return lhs() && rhs();
            case o.BinaryOperator.Or:
              return lhs() || rhs();
            case o.BinaryOperator.Plus:
              return lhs() + rhs();
            case o.BinaryOperator.Minus:
              return lhs() - rhs();
            case o.BinaryOperator.Divide:
              return lhs() / rhs();
            case o.BinaryOperator.Multiply:
              return lhs() * rhs();
            case o.BinaryOperator.Modulo:
              return lhs() % rhs();
            case o.BinaryOperator.Lower:
              return lhs() < rhs();
            case o.BinaryOperator.LowerEquals:
              return lhs() <= rhs();
            case o.BinaryOperator.Bigger:
              return lhs() > rhs();
            case o.BinaryOperator.BiggerEquals:
              return lhs() >= rhs();
            default:
              throw new Error("Unknown operator " + ast.operator);
          }
        };
        StatementInterpreter.prototype.visitReadPropExpr = function(ast, ctx) {
          var result;
          var receiver = ast.receiver.visitExpression(this, ctx);
          result = receiver[ast.name];
          return result;
        };
        StatementInterpreter.prototype.visitReadKeyExpr = function(ast, ctx) {
          var receiver = ast.receiver.visitExpression(this, ctx);
          var prop = ast.index.visitExpression(this, ctx);
          return receiver[prop];
        };
        StatementInterpreter.prototype.visitLiteralArrayExpr = function(ast, ctx) {
          return this.visitAllExpressions(ast.entries, ctx);
        };
        StatementInterpreter.prototype.visitLiteralMapExpr = function(ast, ctx) {
          var _this = this;
          var result = {};
          ast.entries.forEach(function(entry) {
            return result[entry[0]] = entry[1].visitExpression(_this, ctx);
          });
          return result;
        };
        StatementInterpreter.prototype.visitAllExpressions = function(expressions, ctx) {
          var _this = this;
          return expressions.map(function(expr) {
            return expr.visitExpression(_this, ctx);
          });
        };
        StatementInterpreter.prototype.visitAllStatements = function(statements, ctx) {
          for (var i = 0; i < statements.length; i++) {
            var stmt = statements[i];
            var val = stmt.visitStatement(this, ctx);
            if (val instanceof ReturnValue) {
              return val;
            }
          }
          return null;
        };
        return StatementInterpreter;
      }());
      CATCH_ERROR_VAR = 'error';
      CATCH_STACK_VAR = 'stack';
    }
  };
});

$__System.register("1d", ["16", "1e", "14"], function($__export) {
  "use strict";
  var __extends,
      isPresent,
      AbstractEmitterVisitor,
      CATCH_ERROR_VAR,
      CATCH_STACK_VAR,
      o,
      AbstractJsEmitterVisitor;
  return {
    setters: [function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      AbstractEmitterVisitor = $__m.AbstractEmitterVisitor;
      CATCH_ERROR_VAR = $__m.CATCH_ERROR_VAR;
      CATCH_STACK_VAR = $__m.CATCH_STACK_VAR;
    }, function($__m) {
      o = $__m;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      AbstractJsEmitterVisitor = (function(_super) {
        __extends(AbstractJsEmitterVisitor, _super);
        function AbstractJsEmitterVisitor() {
          _super.call(this, false);
        }
        AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
          var _this = this;
          ctx.pushClass(stmt);
          this._visitClassConstructor(stmt, ctx);
          if (isPresent(stmt.parent)) {
            ctx.print(stmt.name + ".prototype = Object.create(");
            stmt.parent.visitExpression(this, ctx);
            ctx.println(".prototype);");
          }
          stmt.getters.forEach(function(getter) {
            return _this._visitClassGetter(stmt, getter, ctx);
          });
          stmt.methods.forEach(function(method) {
            return _this._visitClassMethod(stmt, method, ctx);
          });
          ctx.popClass();
          return null;
        };
        AbstractJsEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
          ctx.print("function " + stmt.name + "(");
          if (isPresent(stmt.constructorMethod)) {
            this._visitParams(stmt.constructorMethod.params, ctx);
          }
          ctx.println(") {");
          ctx.incIndent();
          if (isPresent(stmt.constructorMethod)) {
            if (stmt.constructorMethod.body.length > 0) {
              ctx.println("var self = this;");
              this.visitAllStatements(stmt.constructorMethod.body, ctx);
            }
          }
          ctx.decIndent();
          ctx.println("}");
        };
        AbstractJsEmitterVisitor.prototype._visitClassGetter = function(stmt, getter, ctx) {
          ctx.println("Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {");
          ctx.incIndent();
          if (getter.body.length > 0) {
            ctx.println("var self = this;");
            this.visitAllStatements(getter.body, ctx);
          }
          ctx.decIndent();
          ctx.println("}});");
        };
        AbstractJsEmitterVisitor.prototype._visitClassMethod = function(stmt, method, ctx) {
          ctx.print(stmt.name + ".prototype." + method.name + " = function(");
          this._visitParams(method.params, ctx);
          ctx.println(") {");
          ctx.incIndent();
          if (method.body.length > 0) {
            ctx.println("var self = this;");
            this.visitAllStatements(method.body, ctx);
          }
          ctx.decIndent();
          ctx.println("};");
        };
        AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function(ast, ctx) {
          if (ast.builtin === o.BuiltinVar.This) {
            ctx.print('self');
          } else if (ast.builtin === o.BuiltinVar.Super) {
            throw new Error("'super' needs to be handled at a parent ast node, not at the variable level!");
          } else {
            _super.prototype.visitReadVarExpr.call(this, ast, ctx);
          }
          return null;
        };
        AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
          ctx.print("var " + stmt.name + " = ");
          stmt.value.visitExpression(this, ctx);
          ctx.println(";");
          return null;
        };
        AbstractJsEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
          ast.value.visitExpression(this, ctx);
          return null;
        };
        AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function(expr, ctx) {
          var fnExpr = expr.fn;
          if (fnExpr instanceof o.ReadVarExpr && fnExpr.builtin === o.BuiltinVar.Super) {
            ctx.currentClass.parent.visitExpression(this, ctx);
            ctx.print(".call(this");
            if (expr.args.length > 0) {
              ctx.print(", ");
              this.visitAllExpressions(expr.args, ctx, ',');
            }
            ctx.print(")");
          } else {
            _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);
          }
          return null;
        };
        AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
          ctx.print("function(");
          this._visitParams(ast.params, ctx);
          ctx.println(") {");
          ctx.incIndent();
          this.visitAllStatements(ast.statements, ctx);
          ctx.decIndent();
          ctx.print("}");
          return null;
        };
        AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
          ctx.print("function " + stmt.name + "(");
          this._visitParams(stmt.params, ctx);
          ctx.println(") {");
          ctx.incIndent();
          this.visitAllStatements(stmt.statements, ctx);
          ctx.decIndent();
          ctx.println("}");
          return null;
        };
        AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
          ctx.println("try {");
          ctx.incIndent();
          this.visitAllStatements(stmt.bodyStmts, ctx);
          ctx.decIndent();
          ctx.println("} catch (" + CATCH_ERROR_VAR.name + ") {");
          ctx.incIndent();
          var catchStmts = [CATCH_STACK_VAR.set(CATCH_ERROR_VAR.prop('stack')).toDeclStmt(null, [o.StmtModifier.Final])].concat(stmt.catchStmts);
          this.visitAllStatements(catchStmts, ctx);
          ctx.decIndent();
          ctx.println("}");
          return null;
        };
        AbstractJsEmitterVisitor.prototype._visitParams = function(params, ctx) {
          this.visitAllObjects(function(param) {
            return ctx.print(param.name);
          }, params, ctx, ',');
        };
        AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
          var name;
          switch (method) {
            case o.BuiltinMethod.ConcatArray:
              name = 'concat';
              break;
            case o.BuiltinMethod.SubscribeObservable:
              name = 'subscribe';
              break;
            case o.BuiltinMethod.Bind:
              name = 'bind';
              break;
            default:
              throw new Error("Unknown builtin method: " + method);
          }
          return name;
        };
        return AbstractJsEmitterVisitor;
      }(AbstractEmitterVisitor));
      $__export("AbstractJsEmitterVisitor", AbstractJsEmitterVisitor);
    }
  };
});

$__System.register("1f", ["16", "20", "1e", "1d"], function($__export) {
  "use strict";
  var __extends,
      isPresent,
      sanitizeIdentifier,
      EmitterVisitorContext,
      AbstractJsEmitterVisitor,
      JitEmitterVisitor;
  function evalExpression(sourceUrl, expr, declarations, vars) {
    var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
    var fnArgNames = [];
    var fnArgValues = [];
    for (var argName in vars) {
      fnArgNames.push(argName);
      fnArgValues.push(vars[argName]);
    }
    return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
  }
  function jitStatements(sourceUrl, statements, resultVar) {
    var converter = new JitEmitterVisitor();
    var ctx = EmitterVisitorContext.createRoot([resultVar]);
    converter.visitAllStatements(statements, ctx);
    return evalExpression(sourceUrl, resultVar, ctx.toSource(), converter.getArgs());
  }
  $__export("jitStatements", jitStatements);
  return {
    setters: [function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      sanitizeIdentifier = $__m.sanitizeIdentifier;
    }, function($__m) {
      EmitterVisitorContext = $__m.EmitterVisitorContext;
    }, function($__m) {
      AbstractJsEmitterVisitor = $__m.AbstractJsEmitterVisitor;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      JitEmitterVisitor = (function(_super) {
        __extends(JitEmitterVisitor, _super);
        function JitEmitterVisitor() {
          _super.apply(this, arguments);
          this._evalArgNames = [];
          this._evalArgValues = [];
        }
        JitEmitterVisitor.prototype.getArgs = function() {
          var result = {};
          for (var i = 0; i < this._evalArgNames.length; i++) {
            result[this._evalArgNames[i]] = this._evalArgValues[i];
          }
          return result;
        };
        JitEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
          var value = ast.value.reference;
          var id = this._evalArgValues.indexOf(value);
          if (id === -1) {
            id = this._evalArgValues.length;
            this._evalArgValues.push(value);
            var name = isPresent(ast.value.name) ? sanitizeIdentifier(ast.value.name) : 'val';
            this._evalArgNames.push(sanitizeIdentifier("jit_" + name + id));
          }
          ctx.print(this._evalArgNames[id]);
          return null;
        };
        return JitEmitterVisitor;
      }(AbstractJsEmitterVisitor));
    }
  };
});

$__System.register("21", ["c", "f", "10", "11", "22", "23", "24", "16", "25", "26", "14", "1b", "1f", "17", "27", "28", "20", "15"], function($__export) {
  "use strict";
  var Compiler,
      ComponentFactory,
      Injectable,
      Injector,
      ModuleWithComponentFactories,
      AnimationCompiler,
      AnimationParser,
      ProviderMeta,
      createHostComponentMeta,
      CompilerConfig,
      DirectiveNormalizer,
      DirectiveWrapperCompiler,
      stringify,
      CompileMetadataResolver,
      NgModuleCompiler,
      ir,
      interpretStatements,
      jitStatements,
      ComponentStillLoadingError,
      StyleCompiler,
      TemplateParser,
      SyncAsyncResult,
      ComponentFactoryDependency,
      DirectiveWrapperDependency,
      ViewCompiler,
      ViewFactoryDependency,
      RuntimeCompiler,
      CompiledTemplate,
      ModuleBoundCompiler;
  function assertComponent(meta) {
    if (!meta.isComponent) {
      throw new Error("Could not compile '" + meta.type.name + "' because it is not a component.");
    }
  }
  return {
    setters: [function($__m) {
      Compiler = $__m.Compiler;
      ComponentFactory = $__m.ComponentFactory;
      Injectable = $__m.Injectable;
      Injector = $__m.Injector;
      ModuleWithComponentFactories = $__m.ModuleWithComponentFactories;
    }, function($__m) {
      AnimationCompiler = $__m.AnimationCompiler;
    }, function($__m) {
      AnimationParser = $__m.AnimationParser;
    }, function($__m) {
      ProviderMeta = $__m.ProviderMeta;
      createHostComponentMeta = $__m.createHostComponentMeta;
    }, function($__m) {
      CompilerConfig = $__m.CompilerConfig;
    }, function($__m) {
      DirectiveNormalizer = $__m.DirectiveNormalizer;
    }, function($__m) {
      DirectiveWrapperCompiler = $__m.DirectiveWrapperCompiler;
    }, function($__m) {
      stringify = $__m.stringify;
    }, function($__m) {
      CompileMetadataResolver = $__m.CompileMetadataResolver;
    }, function($__m) {
      NgModuleCompiler = $__m.NgModuleCompiler;
    }, function($__m) {
      ir = $__m;
    }, function($__m) {
      interpretStatements = $__m.interpretStatements;
    }, function($__m) {
      jitStatements = $__m.jitStatements;
    }, function($__m) {
      ComponentStillLoadingError = $__m.ComponentStillLoadingError;
    }, function($__m) {
      StyleCompiler = $__m.StyleCompiler;
    }, function($__m) {
      TemplateParser = $__m.TemplateParser;
    }, function($__m) {
      SyncAsyncResult = $__m.SyncAsyncResult;
    }, function($__m) {
      ComponentFactoryDependency = $__m.ComponentFactoryDependency;
      DirectiveWrapperDependency = $__m.DirectiveWrapperDependency;
      ViewCompiler = $__m.ViewCompiler;
      ViewFactoryDependency = $__m.ViewFactoryDependency;
    }],
    execute: function() {
      RuntimeCompiler = (function() {
        function RuntimeCompiler(_injector, _metadataResolver, _templateNormalizer, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _directiveWrapperCompiler, _compilerConfig) {
          this._injector = _injector;
          this._metadataResolver = _metadataResolver;
          this._templateNormalizer = _templateNormalizer;
          this._templateParser = _templateParser;
          this._styleCompiler = _styleCompiler;
          this._viewCompiler = _viewCompiler;
          this._ngModuleCompiler = _ngModuleCompiler;
          this._directiveWrapperCompiler = _directiveWrapperCompiler;
          this._compilerConfig = _compilerConfig;
          this._compiledTemplateCache = new Map();
          this._compiledHostTemplateCache = new Map();
          this._compiledDirectiveWrapperCache = new Map();
          this._compiledNgModuleCache = new Map();
          this._animationParser = new AnimationParser();
          this._animationCompiler = new AnimationCompiler();
        }
        Object.defineProperty(RuntimeCompiler.prototype, "injector", {
          get: function() {
            return this._injector;
          },
          enumerable: true,
          configurable: true
        });
        RuntimeCompiler.prototype.compileModuleSync = function(moduleType) {
          return this._compileModuleAndComponents(moduleType, true).syncResult;
        };
        RuntimeCompiler.prototype.compileModuleAsync = function(moduleType) {
          return this._compileModuleAndComponents(moduleType, false).asyncResult;
        };
        RuntimeCompiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
          return this._compileModuleAndAllComponents(moduleType, true).syncResult;
        };
        RuntimeCompiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
          return this._compileModuleAndAllComponents(moduleType, false).asyncResult;
        };
        RuntimeCompiler.prototype._compileModuleAndComponents = function(moduleType, isSync) {
          var componentPromise = this._compileComponents(moduleType, isSync);
          var ngModuleFactory = this._compileModule(moduleType);
          return new SyncAsyncResult(ngModuleFactory, componentPromise.then(function() {
            return ngModuleFactory;
          }));
        };
        RuntimeCompiler.prototype._compileModuleAndAllComponents = function(moduleType, isSync) {
          var _this = this;
          var componentPromise = this._compileComponents(moduleType, isSync);
          var ngModuleFactory = this._compileModule(moduleType);
          var moduleMeta = this._metadataResolver.getNgModuleMetadata(moduleType);
          var componentFactories = [];
          var templates = new Set();
          moduleMeta.transitiveModule.modules.forEach(function(localModuleMeta) {
            localModuleMeta.declaredDirectives.forEach(function(dirMeta) {
              if (dirMeta.isComponent) {
                var template = _this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);
                templates.add(template);
                componentFactories.push(template.proxyComponentFactory);
              }
            });
          });
          var syncResult = new ModuleWithComponentFactories(ngModuleFactory, componentFactories);
          var compile = function() {
            templates.forEach(function(template) {
              _this._compileTemplate(template);
            });
            return syncResult;
          };
          var asyncResult = isSync ? Promise.resolve(compile()) : componentPromise.then(compile);
          return new SyncAsyncResult(syncResult, asyncResult);
        };
        RuntimeCompiler.prototype._compileModule = function(moduleType) {
          var _this = this;
          var ngModuleFactory = this._compiledNgModuleCache.get(moduleType);
          if (!ngModuleFactory) {
            var moduleMeta_1 = this._metadataResolver.getNgModuleMetadata(moduleType);
            var extraProviders = [this._metadataResolver.getProviderMetadata(new ProviderMeta(Compiler, {useFactory: function() {
                return new ModuleBoundCompiler(_this, moduleMeta_1.type.reference);
              }}))];
            var compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders);
            compileResult.dependencies.forEach(function(dep) {
              dep.placeholder.reference = _this._assertComponentKnown(dep.comp.reference, true).proxyComponentFactory;
              dep.placeholder.name = "compFactory_" + dep.comp.name;
            });
            if (!this._compilerConfig.useJit) {
              ngModuleFactory = interpretStatements(compileResult.statements, compileResult.ngModuleFactoryVar);
            } else {
              ngModuleFactory = jitStatements("/" + moduleMeta_1.type.name + "/module.ngfactory.js", compileResult.statements, compileResult.ngModuleFactoryVar);
            }
            this._compiledNgModuleCache.set(moduleMeta_1.type.reference, ngModuleFactory);
          }
          return ngModuleFactory;
        };
        RuntimeCompiler.prototype._compileComponents = function(mainModule, isSync) {
          var _this = this;
          var templates = new Set();
          var loadingPromises = [];
          var ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
          var moduleByDirective = new Map();
          ngModule.transitiveModule.modules.forEach(function(localModuleMeta) {
            localModuleMeta.declaredDirectives.forEach(function(dirMeta) {
              moduleByDirective.set(dirMeta.type.reference, localModuleMeta);
              _this._compileDirectiveWrapper(dirMeta, localModuleMeta);
              if (dirMeta.isComponent) {
                templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));
              }
            });
          });
          ngModule.transitiveModule.modules.forEach(function(localModuleMeta) {
            localModuleMeta.declaredDirectives.forEach(function(dirMeta) {
              if (dirMeta.isComponent) {
                dirMeta.entryComponents.forEach(function(entryComponentType) {
                  var moduleMeta = moduleByDirective.get(entryComponentType.reference);
                  templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta));
                });
              }
            });
            localModuleMeta.entryComponents.forEach(function(entryComponentType) {
              var moduleMeta = moduleByDirective.get(entryComponentType.reference);
              templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta));
            });
          });
          templates.forEach(function(template) {
            if (template.loading) {
              if (isSync) {
                throw new ComponentStillLoadingError(template.compType.reference);
              } else {
                loadingPromises.push(template.loading);
              }
            }
          });
          var compile = function() {
            templates.forEach(function(template) {
              _this._compileTemplate(template);
            });
          };
          if (isSync) {
            compile();
            return Promise.resolve(null);
          } else {
            return Promise.all(loadingPromises).then(compile);
          }
        };
        RuntimeCompiler.prototype.clearCacheFor = function(type) {
          this._compiledNgModuleCache.delete(type);
          this._metadataResolver.clearCacheFor(type);
          this._compiledHostTemplateCache.delete(type);
          var compiledTemplate = this._compiledTemplateCache.get(type);
          if (compiledTemplate) {
            this._templateNormalizer.clearCacheFor(compiledTemplate.normalizedCompMeta);
            this._compiledTemplateCache.delete(type);
          }
        };
        RuntimeCompiler.prototype.clearCache = function() {
          this._metadataResolver.clearCache();
          this._compiledTemplateCache.clear();
          this._compiledHostTemplateCache.clear();
          this._templateNormalizer.clearCache();
          this._compiledNgModuleCache.clear();
        };
        RuntimeCompiler.prototype._createCompiledHostTemplate = function(compType, ngModule) {
          if (!ngModule) {
            throw new Error("Component " + stringify(compType) + " is not part of any NgModule or the module has not been imported into your module.");
          }
          var compiledTemplate = this._compiledHostTemplateCache.get(compType);
          if (!compiledTemplate) {
            var compMeta = this._metadataResolver.getDirectiveMetadata(compType);
            assertComponent(compMeta);
            var hostMeta = createHostComponentMeta(compMeta);
            compiledTemplate = new CompiledTemplate(true, compMeta.selector, compMeta.type, ngModule, [compMeta], this._templateNormalizer.normalizeDirective(hostMeta));
            this._compiledHostTemplateCache.set(compType, compiledTemplate);
          }
          return compiledTemplate;
        };
        RuntimeCompiler.prototype._createCompiledTemplate = function(compMeta, ngModule) {
          var compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);
          if (!compiledTemplate) {
            assertComponent(compMeta);
            compiledTemplate = new CompiledTemplate(false, compMeta.selector, compMeta.type, ngModule, ngModule.transitiveModule.directives, this._templateNormalizer.normalizeDirective(compMeta));
            this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);
          }
          return compiledTemplate;
        };
        RuntimeCompiler.prototype._assertComponentKnown = function(compType, isHost) {
          var compiledTemplate = isHost ? this._compiledHostTemplateCache.get(compType) : this._compiledTemplateCache.get(compType);
          if (!compiledTemplate) {
            throw new Error("Illegal state: Compiled view for component " + stringify(compType) + " does not exist!");
          }
          return compiledTemplate;
        };
        RuntimeCompiler.prototype._assertComponentLoaded = function(compType, isHost) {
          var compiledTemplate = this._assertComponentKnown(compType, isHost);
          if (compiledTemplate.loading) {
            throw new Error("Illegal state: CompiledTemplate for " + stringify(compType) + " (isHost: " + isHost + ") is still loading!");
          }
          return compiledTemplate;
        };
        RuntimeCompiler.prototype._assertDirectiveWrapper = function(dirType) {
          var dirWrapper = this._compiledDirectiveWrapperCache.get(dirType);
          if (!dirWrapper) {
            throw new Error("Illegal state: Directive wrapper for " + stringify(dirType) + " has not been compiled!");
          }
          return dirWrapper;
        };
        RuntimeCompiler.prototype._compileDirectiveWrapper = function(dirMeta, moduleMeta) {
          var compileResult = this._directiveWrapperCompiler.compile(dirMeta);
          var statements = compileResult.statements;
          var directiveWrapperClass;
          if (!this._compilerConfig.useJit) {
            directiveWrapperClass = interpretStatements(statements, compileResult.dirWrapperClassVar);
          } else {
            directiveWrapperClass = jitStatements("/" + moduleMeta.type.name + "/" + dirMeta.type.name + "/wrapper.ngfactory.js", statements, compileResult.dirWrapperClassVar);
          }
          this._compiledDirectiveWrapperCache.set(dirMeta.type.reference, directiveWrapperClass);
        };
        RuntimeCompiler.prototype._compileTemplate = function(template) {
          var _this = this;
          if (template.isCompiled) {
            return;
          }
          var compMeta = template.normalizedCompMeta;
          var externalStylesheetsByModuleUrl = new Map();
          var stylesCompileResult = this._styleCompiler.compileComponent(compMeta);
          stylesCompileResult.externalStylesheets.forEach(function(r) {
            externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r);
          });
          this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);
          var viewCompMetas = template.viewComponentTypes.map(function(compType) {
            return _this._assertComponentLoaded(compType, false).normalizedCompMeta;
          });
          var parsedAnimations = this._animationParser.parseComponent(compMeta);
          var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, template.viewDirectives.concat(viewCompMetas), template.viewPipes, template.schemas, compMeta.type.name);
          var compiledAnimations = this._animationCompiler.compile(compMeta.type.name, parsedAnimations);
          var compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, ir.variable(stylesCompileResult.componentStylesheet.stylesVar), template.viewPipes, compiledAnimations);
          compileResult.dependencies.forEach(function(dep) {
            var depTemplate;
            if (dep instanceof ViewFactoryDependency) {
              var vfd = dep;
              depTemplate = _this._assertComponentLoaded(vfd.comp.reference, false);
              vfd.placeholder.reference = depTemplate.proxyViewFactory;
              vfd.placeholder.name = "viewFactory_" + vfd.comp.name;
            } else if (dep instanceof ComponentFactoryDependency) {
              var cfd = dep;
              depTemplate = _this._assertComponentLoaded(cfd.comp.reference, true);
              cfd.placeholder.reference = depTemplate.proxyComponentFactory;
              cfd.placeholder.name = "compFactory_" + cfd.comp.name;
            } else if (dep instanceof DirectiveWrapperDependency) {
              var dwd = dep;
              dwd.placeholder.reference = _this._assertDirectiveWrapper(dwd.dir.reference);
            }
          });
          var statements = stylesCompileResult.componentStylesheet.statements.concat(compileResult.statements);
          compiledAnimations.forEach(function(entry) {
            entry.statements.forEach(function(statement) {
              statements.push(statement);
            });
          });
          var factory;
          if (!this._compilerConfig.useJit) {
            factory = interpretStatements(statements, compileResult.viewFactoryVar);
          } else {
            factory = jitStatements("/" + template.ngModule.type.name + "/" + template.compType.name + "/" + (template.isHost ? 'host' : 'component') + ".ngfactory.js", statements, compileResult.viewFactoryVar);
          }
          template.compiled(factory);
        };
        RuntimeCompiler.prototype._resolveStylesCompileResult = function(result, externalStylesheetsByModuleUrl) {
          var _this = this;
          result.dependencies.forEach(function(dep, i) {
            var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);
            var nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
            dep.valuePlaceholder.reference = nestedStylesArr;
            dep.valuePlaceholder.name = "importedStyles" + i;
          });
        };
        RuntimeCompiler.prototype._resolveAndEvalStylesCompileResult = function(result, externalStylesheetsByModuleUrl) {
          this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);
          if (!this._compilerConfig.useJit) {
            return interpretStatements(result.statements, result.stylesVar);
          } else {
            return jitStatements("/" + result.meta.moduleUrl + ".css.js", result.statements, result.stylesVar);
          }
        };
        RuntimeCompiler.decorators = [{type: Injectable}];
        RuntimeCompiler.ctorParameters = [{type: Injector}, {type: CompileMetadataResolver}, {type: DirectiveNormalizer}, {type: TemplateParser}, {type: StyleCompiler}, {type: ViewCompiler}, {type: NgModuleCompiler}, {type: DirectiveWrapperCompiler}, {type: CompilerConfig}];
        return RuntimeCompiler;
      }());
      $__export("RuntimeCompiler", RuntimeCompiler);
      CompiledTemplate = (function() {
        function CompiledTemplate(isHost, selector, compType, ngModule, viewDirectiveAndComponents, _normalizeResult) {
          var _this = this;
          this.isHost = isHost;
          this.compType = compType;
          this.ngModule = ngModule;
          this._viewFactory = null;
          this.loading = null;
          this._normalizedCompMeta = null;
          this.isCompiled = false;
          this.isCompiledWithDeps = false;
          this.viewComponentTypes = [];
          this.viewDirectives = [];
          this.viewPipes = ngModule.transitiveModule.pipes;
          this.schemas = ngModule.schemas;
          viewDirectiveAndComponents.forEach(function(dirMeta) {
            if (dirMeta.isComponent) {
              _this.viewComponentTypes.push(dirMeta.type.reference);
            } else {
              _this.viewDirectives.push(dirMeta);
            }
          });
          this.proxyViewFactory = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i - 0] = arguments[_i];
            }
            if (!_this._viewFactory) {
              throw new Error("Illegal state: CompiledTemplate for " + stringify(_this.compType) + " is not compiled yet!");
            }
            return _this._viewFactory.apply(null, args);
          };
          this.proxyComponentFactory = isHost ? new ComponentFactory(selector, this.proxyViewFactory, compType.reference) : null;
          if (_normalizeResult.syncResult) {
            this._normalizedCompMeta = _normalizeResult.syncResult;
          } else {
            this.loading = _normalizeResult.asyncResult.then(function(normalizedCompMeta) {
              _this._normalizedCompMeta = normalizedCompMeta;
              _this.loading = null;
            });
          }
        }
        Object.defineProperty(CompiledTemplate.prototype, "normalizedCompMeta", {
          get: function() {
            if (this.loading) {
              throw new Error("Template is still loading for " + this.compType.name + "!");
            }
            return this._normalizedCompMeta;
          },
          enumerable: true,
          configurable: true
        });
        CompiledTemplate.prototype.compiled = function(viewFactory) {
          this._viewFactory = viewFactory;
          this.isCompiled = true;
        };
        CompiledTemplate.prototype.depsCompiled = function() {
          this.isCompiledWithDeps = true;
        };
        return CompiledTemplate;
      }());
      ModuleBoundCompiler = (function() {
        function ModuleBoundCompiler(_delegate, _ngModule) {
          this._delegate = _delegate;
          this._ngModule = _ngModule;
        }
        Object.defineProperty(ModuleBoundCompiler.prototype, "_injector", {
          get: function() {
            return this._delegate.injector;
          },
          enumerable: true,
          configurable: true
        });
        ModuleBoundCompiler.prototype.compileModuleSync = function(moduleType) {
          return this._delegate.compileModuleSync(moduleType);
        };
        ModuleBoundCompiler.prototype.compileModuleAsync = function(moduleType) {
          return this._delegate.compileModuleAsync(moduleType);
        };
        ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
          return this._delegate.compileModuleAndAllComponentsSync(moduleType);
        };
        ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
          return this._delegate.compileModuleAndAllComponentsAsync(moduleType);
        };
        ModuleBoundCompiler.prototype.clearCache = function() {
          this._delegate.clearCache();
        };
        ModuleBoundCompiler.prototype.clearCacheFor = function(type) {
          this._delegate.clearCacheFor(type);
        };
        return ModuleBoundCompiler;
      }());
    }
  };
});

$__System.register("29", ["1a", "2a"], function($__export) {
  "use strict";
  var __extends,
      ParseError,
      html,
      PLURAL_CASES,
      ExpansionResult,
      ExpansionError,
      _Expander;
  function expandNodes(nodes) {
    var expander = new _Expander();
    return new ExpansionResult(html.visitAll(expander, nodes), expander.isExpanded, expander.errors);
  }
  function _expandPluralForm(ast, errors) {
    var children = ast.cases.map(function(c) {
      if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
        errors.push(new ExpansionError(c.valueSourceSpan, "Plural cases should be \"=<number>\" or one of " + PLURAL_CASES.join(", ")));
      }
      var expansionResult = expandNodes(c.expression);
      errors.push.apply(errors, expansionResult.errors);
      return new html.Element("template", [new html.Attribute('ngPluralCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
    });
    var switchAttr = new html.Attribute('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);
    return new html.Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
  }
  function _expandDefaultForm(ast, errors) {
    var children = ast.cases.map(function(c) {
      var expansionResult = expandNodes(c.expression);
      errors.push.apply(errors, expansionResult.errors);
      return new html.Element("template", [new html.Attribute('ngSwitchCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
    });
    var switchAttr = new html.Attribute('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);
    return new html.Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
  }
  $__export("expandNodes", expandNodes);
  return {
    setters: [function($__m) {
      ParseError = $__m.ParseError;
    }, function($__m) {
      html = $__m;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];
      ExpansionResult = (function() {
        function ExpansionResult(nodes, expanded, errors) {
          this.nodes = nodes;
          this.expanded = expanded;
          this.errors = errors;
        }
        return ExpansionResult;
      }());
      $__export("ExpansionResult", ExpansionResult);
      ExpansionError = (function(_super) {
        __extends(ExpansionError, _super);
        function ExpansionError(span, errorMsg) {
          _super.call(this, span, errorMsg);
        }
        return ExpansionError;
      }(ParseError));
      $__export("ExpansionError", ExpansionError);
      _Expander = (function() {
        function _Expander() {
          this.isExpanded = false;
          this.errors = [];
        }
        _Expander.prototype.visitElement = function(element, context) {
          return new html.Element(element.name, element.attrs, html.visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
        };
        _Expander.prototype.visitAttribute = function(attribute, context) {
          return attribute;
        };
        _Expander.prototype.visitText = function(text, context) {
          return text;
        };
        _Expander.prototype.visitComment = function(comment, context) {
          return comment;
        };
        _Expander.prototype.visitExpansion = function(icu, context) {
          this.isExpanded = true;
          return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) : _expandDefaultForm(icu, this.errors);
        };
        _Expander.prototype.visitExpansionCase = function(icuCase, context) {
          throw new Error('Should not be reached');
        };
        return _Expander;
      }());
    }
  };
});

$__System.register("28", ["c", "11", "2b", "16", "2c", "13", "2a", "2d", "29", "2e", "2f", "1a", "17", "30", "31", "32", "33", "34", "35", "36"], function($__export) {
  "use strict";
  var __extends,
      Inject,
      Injectable,
      OpaqueToken,
      Optional,
      removeIdentifierDuplicates,
      Parser,
      isPresent,
      I18NHtmlParser,
      Identifiers,
      identifierToken,
      resolveIdentifierToken,
      html,
      ParseTreeResult,
      expandNodes,
      InterpolationConfig,
      splitNsName,
      ParseError,
      ParseErrorLevel,
      ParseSourceSpan,
      Console,
      ProviderElementContext,
      ProviderViewContext,
      ElementSchemaRegistry,
      CssSelector,
      SelectorMatcher,
      isStyleUrlResolvable,
      BindingParser,
      AttrAst,
      BoundDirectivePropertyAst,
      BoundTextAst,
      DirectiveAst,
      ElementAst,
      EmbeddedTemplateAst,
      NgContentAst,
      PropertyBindingType,
      ReferenceAst,
      TextAst,
      VariableAst,
      templateVisitAll,
      PreparsedElementType,
      preparseElement,
      BIND_NAME_REGEXP,
      KW_BIND_IDX,
      KW_LET_IDX,
      KW_REF_IDX,
      KW_ON_IDX,
      KW_BINDON_IDX,
      KW_AT_IDX,
      IDENT_KW_IDX,
      IDENT_BANANA_BOX_IDX,
      IDENT_PROPERTY_IDX,
      IDENT_EVENT_IDX,
      TEMPLATE_ELEMENT,
      TEMPLATE_ATTR,
      TEMPLATE_ATTR_PREFIX,
      CLASS_ATTR,
      TEXT_CSS_SELECTOR,
      TEMPLATE_TRANSFORMS,
      TemplateParseError,
      TemplateParseResult,
      TemplateParser,
      TemplateParseVisitor,
      NonBindableVisitor,
      ElementOrDirectiveRef,
      ElementContext,
      EMPTY_ELEMENT_CONTEXT,
      NON_BINDABLE_VISITOR;
  function splitClasses(classAttrValue) {
    return classAttrValue.trim().split(/\s+/g);
  }
  function createElementCssSelector(elementName, matchableAttrs) {
    var cssSelector = new CssSelector();
    var elNameNoNs = splitNsName(elementName)[1];
    cssSelector.setElement(elNameNoNs);
    for (var i = 0; i < matchableAttrs.length; i++) {
      var attrName = matchableAttrs[i][0];
      var attrNameNoNs = splitNsName(attrName)[1];
      var attrValue = matchableAttrs[i][1];
      cssSelector.addAttribute(attrNameNoNs, attrValue);
      if (attrName.toLowerCase() == CLASS_ATTR) {
        var classes = splitClasses(attrValue);
        classes.forEach(function(className) {
          return cssSelector.addClassName(className);
        });
      }
    }
    return cssSelector;
  }
  function _isEmptyTextNode(node) {
    return node instanceof html.Text && node.value.trim().length == 0;
  }
  $__export("splitClasses", splitClasses);
  return {
    setters: [function($__m) {
      Inject = $__m.Inject;
      Injectable = $__m.Injectable;
      OpaqueToken = $__m.OpaqueToken;
      Optional = $__m.Optional;
    }, function($__m) {
      removeIdentifierDuplicates = $__m.removeIdentifierDuplicates;
    }, function($__m) {
      Parser = $__m.Parser;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      I18NHtmlParser = $__m.I18NHtmlParser;
    }, function($__m) {
      Identifiers = $__m.Identifiers;
      identifierToken = $__m.identifierToken;
      resolveIdentifierToken = $__m.resolveIdentifierToken;
    }, function($__m) {
      html = $__m;
    }, function($__m) {
      ParseTreeResult = $__m.ParseTreeResult;
    }, function($__m) {
      expandNodes = $__m.expandNodes;
    }, function($__m) {
      InterpolationConfig = $__m.InterpolationConfig;
    }, function($__m) {
      splitNsName = $__m.splitNsName;
    }, function($__m) {
      ParseError = $__m.ParseError;
      ParseErrorLevel = $__m.ParseErrorLevel;
      ParseSourceSpan = $__m.ParseSourceSpan;
    }, function($__m) {
      Console = $__m.Console;
    }, function($__m) {
      ProviderElementContext = $__m.ProviderElementContext;
      ProviderViewContext = $__m.ProviderViewContext;
    }, function($__m) {
      ElementSchemaRegistry = $__m.ElementSchemaRegistry;
    }, function($__m) {
      CssSelector = $__m.CssSelector;
      SelectorMatcher = $__m.SelectorMatcher;
    }, function($__m) {
      isStyleUrlResolvable = $__m.isStyleUrlResolvable;
    }, function($__m) {
      BindingParser = $__m.BindingParser;
    }, function($__m) {
      AttrAst = $__m.AttrAst;
      BoundDirectivePropertyAst = $__m.BoundDirectivePropertyAst;
      BoundTextAst = $__m.BoundTextAst;
      DirectiveAst = $__m.DirectiveAst;
      ElementAst = $__m.ElementAst;
      EmbeddedTemplateAst = $__m.EmbeddedTemplateAst;
      NgContentAst = $__m.NgContentAst;
      PropertyBindingType = $__m.PropertyBindingType;
      ReferenceAst = $__m.ReferenceAst;
      TextAst = $__m.TextAst;
      VariableAst = $__m.VariableAst;
      templateVisitAll = $__m.templateVisitAll;
    }, function($__m) {
      PreparsedElementType = $__m.PreparsedElementType;
      preparseElement = $__m.preparseElement;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;
      KW_BIND_IDX = 1;
      KW_LET_IDX = 2;
      KW_REF_IDX = 3;
      KW_ON_IDX = 4;
      KW_BINDON_IDX = 5;
      KW_AT_IDX = 6;
      IDENT_KW_IDX = 7;
      IDENT_BANANA_BOX_IDX = 8;
      IDENT_PROPERTY_IDX = 9;
      IDENT_EVENT_IDX = 10;
      TEMPLATE_ELEMENT = 'template';
      TEMPLATE_ATTR = 'template';
      TEMPLATE_ATTR_PREFIX = '*';
      CLASS_ATTR = 'class';
      TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];
      TEMPLATE_TRANSFORMS = new OpaqueToken('TemplateTransforms');
      $__export("TEMPLATE_TRANSFORMS", TEMPLATE_TRANSFORMS);
      TemplateParseError = (function(_super) {
        __extends(TemplateParseError, _super);
        function TemplateParseError(message, span, level) {
          _super.call(this, span, message, level);
        }
        return TemplateParseError;
      }(ParseError));
      $__export("TemplateParseError", TemplateParseError);
      TemplateParseResult = (function() {
        function TemplateParseResult(templateAst, errors) {
          this.templateAst = templateAst;
          this.errors = errors;
        }
        return TemplateParseResult;
      }());
      $__export("TemplateParseResult", TemplateParseResult);
      TemplateParser = (function() {
        function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
          this._exprParser = _exprParser;
          this._schemaRegistry = _schemaRegistry;
          this._htmlParser = _htmlParser;
          this._console = _console;
          this.transforms = transforms;
        }
        TemplateParser.prototype.parse = function(component, template, directives, pipes, schemas, templateUrl) {
          var result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);
          var warnings = result.errors.filter(function(error) {
            return error.level === ParseErrorLevel.WARNING;
          });
          var errors = result.errors.filter(function(error) {
            return error.level === ParseErrorLevel.FATAL;
          });
          if (warnings.length > 0) {
            this._console.warn("Template parse warnings:\n" + warnings.join('\n'));
          }
          if (errors.length > 0) {
            var errorString = errors.join('\n');
            throw new Error("Template parse errors:\n" + errorString);
          }
          return result.templateAst;
        };
        TemplateParser.prototype.tryParse = function(component, template, directives, pipes, schemas, templateUrl) {
          return this.tryParseHtml(this.expandHtml(this._htmlParser.parse(template, templateUrl, true, this.getInterpolationConfig(component))), component, template, directives, pipes, schemas, templateUrl);
        };
        TemplateParser.prototype.tryParseHtml = function(htmlAstWithErrors, component, template, directives, pipes, schemas, templateUrl) {
          var result;
          var errors = htmlAstWithErrors.errors;
          if (htmlAstWithErrors.rootNodes.length > 0) {
            var uniqDirectives = removeIdentifierDuplicates(directives);
            var uniqPipes = removeIdentifierDuplicates(pipes);
            var providerViewContext = new ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan);
            var interpolationConfig = void 0;
            if (component.template && component.template.interpolation) {
              interpolationConfig = {
                start: component.template.interpolation[0],
                end: component.template.interpolation[1]
              };
            }
            var bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors);
            var parseVisitor = new TemplateParseVisitor(providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);
            result = html.visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
            errors.push.apply(errors, providerViewContext.errors);
          } else {
            result = [];
          }
          this._assertNoReferenceDuplicationOnTemplate(result, errors);
          if (errors.length > 0) {
            return new TemplateParseResult(result, errors);
          }
          if (isPresent(this.transforms)) {
            this.transforms.forEach(function(transform) {
              result = templateVisitAll(transform, result);
            });
          }
          return new TemplateParseResult(result, errors);
        };
        TemplateParser.prototype.expandHtml = function(htmlAstWithErrors, forced) {
          if (forced === void 0) {
            forced = false;
          }
          var errors = htmlAstWithErrors.errors;
          if (errors.length == 0 || forced) {
            var expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);
            errors.push.apply(errors, expandedHtmlAst.errors);
            htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
          }
          return htmlAstWithErrors;
        };
        TemplateParser.prototype.getInterpolationConfig = function(component) {
          if (component.template) {
            return InterpolationConfig.fromArray(component.template.interpolation);
          }
        };
        TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function(result, errors) {
          var existingReferences = [];
          result.filter(function(element) {
            return !!element.references;
          }).forEach(function(element) {
            return element.references.forEach(function(reference) {
              var name = reference.name;
              if (existingReferences.indexOf(name) < 0) {
                existingReferences.push(name);
              } else {
                var error = new TemplateParseError("Reference \"#" + name + "\" is defined several times", reference.sourceSpan, ParseErrorLevel.FATAL);
                errors.push(error);
              }
            });
          });
        };
        TemplateParser.decorators = [{type: Injectable}];
        TemplateParser.ctorParameters = [{type: Parser}, {type: ElementSchemaRegistry}, {type: I18NHtmlParser}, {type: Console}, {
          type: Array,
          decorators: [{type: Optional}, {
            type: Inject,
            args: [TEMPLATE_TRANSFORMS]
          }]
        }];
        return TemplateParser;
      }());
      $__export("TemplateParser", TemplateParser);
      TemplateParseVisitor = (function() {
        function TemplateParseVisitor(providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {
          var _this = this;
          this.providerViewContext = providerViewContext;
          this._bindingParser = _bindingParser;
          this._schemaRegistry = _schemaRegistry;
          this._schemas = _schemas;
          this._targetErrors = _targetErrors;
          this.selectorMatcher = new SelectorMatcher();
          this.directivesIndex = new Map();
          this.ngContentCount = 0;
          directives.forEach(function(directive, index) {
            var selector = CssSelector.parse(directive.selector);
            _this.selectorMatcher.addSelectables(selector, directive);
            _this.directivesIndex.set(directive, index);
          });
        }
        TemplateParseVisitor.prototype.visitExpansion = function(expansion, context) {
          return null;
        };
        TemplateParseVisitor.prototype.visitExpansionCase = function(expansionCase, context) {
          return null;
        };
        TemplateParseVisitor.prototype.visitText = function(text, parent) {
          var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
          var expr = this._bindingParser.parseInterpolation(text.value, text.sourceSpan);
          if (isPresent(expr)) {
            return new BoundTextAst(expr, ngContentIndex, text.sourceSpan);
          } else {
            return new TextAst(text.value, ngContentIndex, text.sourceSpan);
          }
        };
        TemplateParseVisitor.prototype.visitAttribute = function(attribute, context) {
          return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
        };
        TemplateParseVisitor.prototype.visitComment = function(comment, context) {
          return null;
        };
        TemplateParseVisitor.prototype.visitElement = function(element, parent) {
          var _this = this;
          var nodeName = element.name;
          var preparsedElement = preparseElement(element);
          if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE) {
            return null;
          }
          if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) {
            return null;
          }
          var matchableAttrs = [];
          var elementOrDirectiveProps = [];
          var elementOrDirectiveRefs = [];
          var elementVars = [];
          var events = [];
          var templateElementOrDirectiveProps = [];
          var templateMatchableAttrs = [];
          var templateElementVars = [];
          var hasInlineTemplates = false;
          var attrs = [];
          var lcElName = splitNsName(nodeName.toLowerCase())[1];
          var isTemplateElement = lcElName == TEMPLATE_ELEMENT;
          element.attrs.forEach(function(attr) {
            var hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);
            var templateBindingsSource;
            if (_this._normalizeAttributeName(attr.name) == TEMPLATE_ATTR) {
              templateBindingsSource = attr.value;
            } else if (attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {
              var key = attr.name.substring(TEMPLATE_ATTR_PREFIX.length);
              templateBindingsSource = (attr.value.length == 0) ? key : key + ' ' + attr.value;
            }
            var hasTemplateBinding = isPresent(templateBindingsSource);
            if (hasTemplateBinding) {
              if (hasInlineTemplates) {
                _this._reportError("Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *", attr.sourceSpan);
              }
              hasInlineTemplates = true;
              _this._bindingParser.parseInlineTemplateBinding(attr.name, templateBindingsSource, attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
            }
            if (!hasBinding && !hasTemplateBinding) {
              attrs.push(_this.visitAttribute(attr, null));
              matchableAttrs.push([attr.name, attr.value]);
            }
          });
          var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
          var _a = this._parseDirectives(this.selectorMatcher, elementCssSelector),
              directiveMetas = _a.directives,
              matchElement = _a.matchElement;
          var references = [];
          var directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references);
          var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directiveAsts);
          var isViewRoot = parent.isTemplateElement || hasInlineTemplates;
          var providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, element.sourceSpan);
          var children = html.visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
          providerContext.afterElement();
          var projectionSelector = isPresent(preparsedElement.projectAs) ? CssSelector.parse(preparsedElement.projectAs)[0] : elementCssSelector;
          var ngContentIndex = parent.findNgContentIndex(projectionSelector);
          var parsedElement;
          if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
            if (element.children && !element.children.every(_isEmptyTextNode)) {
              this._reportError("<ng-content> element cannot have content.", element.sourceSpan);
            }
            parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
          } else if (isTemplateElement) {
            this._assertAllEventsPublishedByDirectives(directiveAsts, events);
            this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);
            parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
          } else {
            this._assertElementExists(matchElement, element);
            this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
            var ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
            parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan, element.endSourceSpan);
            this._findComponentDirectives(directiveAsts).forEach(function(componentDirectiveAst) {
              return _this._validateElementAnimationInputOutputs(componentDirectiveAst.hostProperties, componentDirectiveAst.hostEvents, componentDirectiveAst.directive.template);
            });
            var componentTemplate = providerContext.viewContext.component.template;
            this._validateElementAnimationInputOutputs(elementProps, events, componentTemplate);
          }
          if (hasInlineTemplates) {
            var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
            var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateCssSelector).directives;
            var templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, []);
            var templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectiveAsts);
            this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
            var templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], element.sourceSpan);
            templateProviderContext.afterElement();
            parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, [parsedElement], ngContentIndex, element.sourceSpan);
          }
          return parsedElement;
        };
        TemplateParseVisitor.prototype._validateElementAnimationInputOutputs = function(inputs, outputs, template) {
          var _this = this;
          var triggerLookup = new Set();
          template.animations.forEach(function(entry) {
            triggerLookup.add(entry.name);
          });
          var animationInputs = inputs.filter(function(input) {
            return input.isAnimation;
          });
          animationInputs.forEach(function(input) {
            var name = input.name;
            if (!triggerLookup.has(name)) {
              _this._reportError("Couldn't find an animation entry for \"" + name + "\"", input.sourceSpan);
            }
          });
          outputs.forEach(function(output) {
            if (output.isAnimation) {
              var found = animationInputs.find(function(input) {
                return input.name == output.name;
              });
              if (!found) {
                _this._reportError("Unable to listen on (@" + output.name + "." + output.phase + ") because the animation trigger [@" + output.name + "] isn't being used on the same element", output.sourceSpan);
              }
            }
          });
        };
        TemplateParseVisitor.prototype._parseAttr = function(isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {
          var name = this._normalizeAttributeName(attr.name);
          var value = attr.value;
          var srcSpan = attr.sourceSpan;
          var bindParts = name.match(BIND_NAME_REGEXP);
          var hasBinding = false;
          if (bindParts !== null) {
            hasBinding = true;
            if (isPresent(bindParts[KW_BIND_IDX])) {
              this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
            } else if (bindParts[KW_LET_IDX]) {
              if (isTemplateElement) {
                var identifier = bindParts[IDENT_KW_IDX];
                this._parseVariable(identifier, value, srcSpan, targetVars);
              } else {
                this._reportError("\"let-\" is only supported on template elements.", srcSpan);
              }
            } else if (bindParts[KW_REF_IDX]) {
              var identifier = bindParts[IDENT_KW_IDX];
              this._parseReference(identifier, value, srcSpan, targetRefs);
            } else if (bindParts[KW_ON_IDX]) {
              this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
            } else if (bindParts[KW_BINDON_IDX]) {
              this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
              this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
            } else if (bindParts[KW_AT_IDX]) {
              this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
            } else if (bindParts[IDENT_BANANA_BOX_IDX]) {
              this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
              this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
            } else if (bindParts[IDENT_PROPERTY_IDX]) {
              this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
            } else if (bindParts[IDENT_EVENT_IDX]) {
              this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
            }
          } else {
            hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);
          }
          if (!hasBinding) {
            this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
          }
          return hasBinding;
        };
        TemplateParseVisitor.prototype._normalizeAttributeName = function(attrName) {
          return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
        };
        TemplateParseVisitor.prototype._parseVariable = function(identifier, value, sourceSpan, targetVars) {
          if (identifier.indexOf('-') > -1) {
            this._reportError("\"-\" is not allowed in variable names", sourceSpan);
          }
          targetVars.push(new VariableAst(identifier, value, sourceSpan));
        };
        TemplateParseVisitor.prototype._parseReference = function(identifier, value, sourceSpan, targetRefs) {
          if (identifier.indexOf('-') > -1) {
            this._reportError("\"-\" is not allowed in reference names", sourceSpan);
          }
          targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
        };
        TemplateParseVisitor.prototype._parseAssignmentEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
          this._bindingParser.parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
        };
        TemplateParseVisitor.prototype._parseDirectives = function(selectorMatcher, elementCssSelector) {
          var _this = this;
          var directives = new Array(this.directivesIndex.size);
          var matchElement = false;
          selectorMatcher.match(elementCssSelector, function(selector, directive) {
            directives[_this.directivesIndex.get(directive)] = directive;
            matchElement = matchElement || selector.hasElementSelector();
          });
          return {
            directives: directives.filter(function(dir) {
              return !!dir;
            }),
            matchElement: matchElement
          };
        };
        TemplateParseVisitor.prototype._createDirectiveAsts = function(isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences) {
          var _this = this;
          var matchedReferences = new Set();
          var component = null;
          var directiveAsts = directives.map(function(directive) {
            var sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, "Directive " + directive.type.name);
            if (directive.isComponent) {
              component = directive;
            }
            var directiveProperties = [];
            var hostProperties = _this._bindingParser.createDirectiveHostPropertyAsts(directive, sourceSpan);
            _this._checkPropertiesInSchema(elementName, hostProperties);
            var hostEvents = _this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);
            _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);
            elementOrDirectiveRefs.forEach(function(elOrDirRef) {
              if ((elOrDirRef.value.length === 0 && directive.isComponent) || (directive.exportAs == elOrDirRef.value)) {
                targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan));
                matchedReferences.add(elOrDirRef.name);
              }
            });
            return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, sourceSpan);
          });
          elementOrDirectiveRefs.forEach(function(elOrDirRef) {
            if (elOrDirRef.value.length > 0) {
              if (!matchedReferences.has(elOrDirRef.name)) {
                _this._reportError("There is no directive with \"exportAs\" set to \"" + elOrDirRef.value + "\"", elOrDirRef.sourceSpan);
              }
            } else if (!component) {
              var refToken = null;
              if (isTemplateElement) {
                refToken = resolveIdentifierToken(Identifiers.TemplateRef);
              }
              targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
            }
          });
          return directiveAsts;
        };
        TemplateParseVisitor.prototype._createDirectivePropertyAsts = function(directiveProperties, boundProps, targetBoundDirectiveProps) {
          if (directiveProperties) {
            var boundPropsByName_1 = new Map();
            boundProps.forEach(function(boundProp) {
              var prevValue = boundPropsByName_1.get(boundProp.name);
              if (!prevValue || prevValue.isLiteral) {
                boundPropsByName_1.set(boundProp.name, boundProp);
              }
            });
            Object.keys(directiveProperties).forEach(function(dirProp) {
              var elProp = directiveProperties[dirProp];
              var boundProp = boundPropsByName_1.get(elProp);
              if (boundProp) {
                targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
              }
            });
          }
        };
        TemplateParseVisitor.prototype._createElementPropertyAsts = function(elementName, props, directives) {
          var _this = this;
          var boundElementProps = [];
          var boundDirectivePropsIndex = new Map();
          directives.forEach(function(directive) {
            directive.inputs.forEach(function(prop) {
              boundDirectivePropsIndex.set(prop.templateName, prop);
            });
          });
          props.forEach(function(prop) {
            if (!prop.isLiteral && !boundDirectivePropsIndex.get(prop.name)) {
              boundElementProps.push(_this._bindingParser.createElementPropertyAst(elementName, prop));
            }
          });
          this._checkPropertiesInSchema(elementName, boundElementProps);
          return boundElementProps;
        };
        TemplateParseVisitor.prototype._findComponentDirectives = function(directives) {
          return directives.filter(function(directive) {
            return directive.directive.isComponent;
          });
        };
        TemplateParseVisitor.prototype._findComponentDirectiveNames = function(directives) {
          return this._findComponentDirectives(directives).map(function(directive) {
            return directive.directive.type.name;
          });
        };
        TemplateParseVisitor.prototype._assertOnlyOneComponent = function(directives, sourceSpan) {
          var componentTypeNames = this._findComponentDirectiveNames(directives);
          if (componentTypeNames.length > 1) {
            this._reportError("More than one component: " + componentTypeNames.join(','), sourceSpan);
          }
        };
        TemplateParseVisitor.prototype._assertElementExists = function(matchElement, element) {
          var elName = element.name.replace(/^:xhtml:/, '');
          if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {
            var errorMsg = ("'" + elName + "' is not a known element:\n") + ("1. If '" + elName + "' is an Angular component, then verify that it is part of this module.\n") + ("2. If '" + elName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message.");
            this._reportError(errorMsg, element.sourceSpan);
          }
        };
        TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function(directives, elementProps, sourceSpan) {
          var _this = this;
          var componentTypeNames = this._findComponentDirectiveNames(directives);
          if (componentTypeNames.length > 0) {
            this._reportError("Components on an embedded template: " + componentTypeNames.join(','), sourceSpan);
          }
          elementProps.forEach(function(prop) {
            _this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"directives\" section.", sourceSpan);
          });
        };
        TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function(directives, events) {
          var _this = this;
          var allDirectiveEvents = new Set();
          directives.forEach(function(directive) {
            Object.keys(directive.directive.outputs).forEach(function(k) {
              var eventName = directive.directive.outputs[k];
              allDirectiveEvents.add(eventName);
            });
          });
          events.forEach(function(event) {
            if (isPresent(event.target) || !allDirectiveEvents.has(event.name)) {
              _this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"directives\" section.", event.sourceSpan);
            }
          });
        };
        TemplateParseVisitor.prototype._checkPropertiesInSchema = function(elementName, boundProps) {
          var _this = this;
          boundProps.forEach(function(boundProp) {
            if (boundProp.type === PropertyBindingType.Property && !_this._schemaRegistry.hasProperty(elementName, boundProp.name, _this._schemas)) {
              var errorMsg = "Can't bind to '" + boundProp.name + "' since it isn't a known property of '" + elementName + "'.";
              if (elementName.indexOf('-') > -1) {
                errorMsg += ("\n1. If '" + elementName + "' is an Angular component and it has '" + boundProp.name + "' input, then verify that it is part of this module.") + ("\n2. If '" + elementName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message.\n");
              }
              _this._reportError(errorMsg, boundProp.sourceSpan);
            }
          });
        };
        TemplateParseVisitor.prototype._reportError = function(message, sourceSpan, level) {
          if (level === void 0) {
            level = ParseErrorLevel.FATAL;
          }
          this._targetErrors.push(new ParseError(sourceSpan, message, level));
        };
        return TemplateParseVisitor;
      }());
      NonBindableVisitor = (function() {
        function NonBindableVisitor() {}
        NonBindableVisitor.prototype.visitElement = function(ast, parent) {
          var preparsedElement = preparseElement(ast);
          if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) {
            return null;
          }
          var attrNameAndValues = ast.attrs.map(function(attrAst) {
            return [attrAst.name, attrAst.value];
          });
          var selector = createElementCssSelector(ast.name, attrNameAndValues);
          var ngContentIndex = parent.findNgContentIndex(selector);
          var children = html.visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
          return new ElementAst(ast.name, html.visitAll(this, ast.attrs), [], [], [], [], [], false, children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);
        };
        NonBindableVisitor.prototype.visitComment = function(comment, context) {
          return null;
        };
        NonBindableVisitor.prototype.visitAttribute = function(attribute, context) {
          return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
        };
        NonBindableVisitor.prototype.visitText = function(text, parent) {
          var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
          return new TextAst(text.value, ngContentIndex, text.sourceSpan);
        };
        NonBindableVisitor.prototype.visitExpansion = function(expansion, context) {
          return expansion;
        };
        NonBindableVisitor.prototype.visitExpansionCase = function(expansionCase, context) {
          return expansionCase;
        };
        return NonBindableVisitor;
      }());
      ElementOrDirectiveRef = (function() {
        function ElementOrDirectiveRef(name, value, sourceSpan) {
          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
        }
        return ElementOrDirectiveRef;
      }());
      ElementContext = (function() {
        function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
          this.isTemplateElement = isTemplateElement;
          this._ngContentIndexMatcher = _ngContentIndexMatcher;
          this._wildcardNgContentIndex = _wildcardNgContentIndex;
          this.providerContext = providerContext;
        }
        ElementContext.create = function(isTemplateElement, directives, providerContext) {
          var matcher = new SelectorMatcher();
          var wildcardNgContentIndex = null;
          var component = directives.find(function(directive) {
            return directive.directive.isComponent;
          });
          if (component) {
            var ngContentSelectors = component.directive.template.ngContentSelectors;
            for (var i = 0; i < ngContentSelectors.length; i++) {
              var selector = ngContentSelectors[i];
              if (selector === '*') {
                wildcardNgContentIndex = i;
              } else {
                matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
              }
            }
          }
          return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
        };
        ElementContext.prototype.findNgContentIndex = function(selector) {
          var ngContentIndices = [];
          this._ngContentIndexMatcher.match(selector, function(selector, ngContentIndex) {
            ngContentIndices.push(ngContentIndex);
          });
          ngContentIndices.sort();
          if (isPresent(this._wildcardNgContentIndex)) {
            ngContentIndices.push(this._wildcardNgContentIndex);
          }
          return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
        };
        return ElementContext;
      }());
      EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);
      NON_BINDABLE_VISITOR = new NonBindableVisitor();
    }
  };
});

$__System.register("37", ["c", "22", "23", "38", "24", "39", "2b", "3a", "25", "2d", "26", "3b", "3c", "17", "3d", "21", "3e", "31", "27", "28", "3f", "15"], function($__export) {
  "use strict";
  var COMPILER_OPTIONS,
      Compiler,
      CompilerFactory,
      Inject,
      Injectable,
      Optional,
      PLATFORM_INITIALIZER,
      ReflectiveInjector,
      TRANSLATIONS,
      TRANSLATIONS_FORMAT,
      ViewEncapsulation,
      createPlatformFactory,
      isDevMode,
      platformCore,
      CompilerConfig,
      DirectiveNormalizer,
      DirectiveResolver,
      DirectiveWrapperCompiler,
      Lexer,
      Parser,
      i18n,
      CompileMetadataResolver,
      HtmlParser,
      NgModuleCompiler,
      NgModuleResolver,
      PipeResolver,
      Console,
      ReflectionCapabilities,
      Reflector,
      ReflectorReader,
      reflector,
      ResourceLoader,
      RuntimeCompiler,
      DomElementSchemaRegistry,
      ElementSchemaRegistry,
      StyleCompiler,
      TemplateParser,
      DEFAULT_PACKAGE_URL_PROVIDER,
      UrlResolver,
      ViewCompiler,
      _NO_RESOURCE_LOADER,
      COMPILER_PROVIDERS,
      RuntimeCompilerFactory,
      platformCoreDynamic;
  function _initReflector() {
    reflector.reflectionCapabilities = new ReflectionCapabilities();
  }
  function _mergeOptions(optionsArr) {
    return {
      useDebug: _lastDefined(optionsArr.map(function(options) {
        return options.useDebug;
      })),
      useJit: _lastDefined(optionsArr.map(function(options) {
        return options.useJit;
      })),
      defaultEncapsulation: _lastDefined(optionsArr.map(function(options) {
        return options.defaultEncapsulation;
      })),
      providers: _mergeArrays(optionsArr.map(function(options) {
        return options.providers;
      }))
    };
  }
  function _lastDefined(args) {
    for (var i = args.length - 1; i >= 0; i--) {
      if (args[i] !== undefined) {
        return args[i];
      }
    }
    return undefined;
  }
  function _mergeArrays(parts) {
    var result = [];
    parts.forEach(function(part) {
      return part && result.push.apply(result, part);
    });
    return result;
  }
  return {
    setters: [function($__m) {
      COMPILER_OPTIONS = $__m.COMPILER_OPTIONS;
      Compiler = $__m.Compiler;
      CompilerFactory = $__m.CompilerFactory;
      Inject = $__m.Inject;
      Injectable = $__m.Injectable;
      Optional = $__m.Optional;
      PLATFORM_INITIALIZER = $__m.PLATFORM_INITIALIZER;
      ReflectiveInjector = $__m.ReflectiveInjector;
      TRANSLATIONS = $__m.TRANSLATIONS;
      TRANSLATIONS_FORMAT = $__m.TRANSLATIONS_FORMAT;
      ViewEncapsulation = $__m.ViewEncapsulation;
      createPlatformFactory = $__m.createPlatformFactory;
      isDevMode = $__m.isDevMode;
      platformCore = $__m.platformCore;
    }, function($__m) {
      CompilerConfig = $__m.CompilerConfig;
    }, function($__m) {
      DirectiveNormalizer = $__m.DirectiveNormalizer;
    }, function($__m) {
      DirectiveResolver = $__m.DirectiveResolver;
    }, function($__m) {
      DirectiveWrapperCompiler = $__m.DirectiveWrapperCompiler;
    }, function($__m) {
      Lexer = $__m.Lexer;
    }, function($__m) {
      Parser = $__m.Parser;
    }, function($__m) {
      i18n = $__m;
    }, function($__m) {
      CompileMetadataResolver = $__m.CompileMetadataResolver;
    }, function($__m) {
      HtmlParser = $__m.HtmlParser;
    }, function($__m) {
      NgModuleCompiler = $__m.NgModuleCompiler;
    }, function($__m) {
      NgModuleResolver = $__m.NgModuleResolver;
    }, function($__m) {
      PipeResolver = $__m.PipeResolver;
    }, function($__m) {
      Console = $__m.Console;
      ReflectionCapabilities = $__m.ReflectionCapabilities;
      Reflector = $__m.Reflector;
      ReflectorReader = $__m.ReflectorReader;
      reflector = $__m.reflector;
    }, function($__m) {
      ResourceLoader = $__m.ResourceLoader;
    }, function($__m) {
      RuntimeCompiler = $__m.RuntimeCompiler;
    }, function($__m) {
      DomElementSchemaRegistry = $__m.DomElementSchemaRegistry;
    }, function($__m) {
      ElementSchemaRegistry = $__m.ElementSchemaRegistry;
    }, function($__m) {
      StyleCompiler = $__m.StyleCompiler;
    }, function($__m) {
      TemplateParser = $__m.TemplateParser;
    }, function($__m) {
      DEFAULT_PACKAGE_URL_PROVIDER = $__m.DEFAULT_PACKAGE_URL_PROVIDER;
      UrlResolver = $__m.UrlResolver;
    }, function($__m) {
      ViewCompiler = $__m.ViewCompiler;
    }],
    execute: function() {
      _NO_RESOURCE_LOADER = {get: function(url) {
          throw new Error("No ResourceLoader implementation has been provided. Can't read the url \"" + url + "\"");
        }};
      COMPILER_PROVIDERS = [{
        provide: Reflector,
        useValue: reflector
      }, {
        provide: ReflectorReader,
        useExisting: Reflector
      }, {
        provide: ResourceLoader,
        useValue: _NO_RESOURCE_LOADER
      }, Console, Lexer, Parser, HtmlParser, {
        provide: i18n.I18NHtmlParser,
        useFactory: function(parser, translations, format) {
          return new i18n.I18NHtmlParser(parser, translations, format);
        },
        deps: [HtmlParser, [new Optional(), new Inject(TRANSLATIONS)], [new Optional(), new Inject(TRANSLATIONS_FORMAT)]]
      }, TemplateParser, DirectiveNormalizer, CompileMetadataResolver, DEFAULT_PACKAGE_URL_PROVIDER, StyleCompiler, ViewCompiler, NgModuleCompiler, DirectiveWrapperCompiler, {
        provide: CompilerConfig,
        useValue: new CompilerConfig()
      }, RuntimeCompiler, {
        provide: Compiler,
        useExisting: RuntimeCompiler
      }, DomElementSchemaRegistry, {
        provide: ElementSchemaRegistry,
        useExisting: DomElementSchemaRegistry
      }, UrlResolver, DirectiveResolver, PipeResolver, NgModuleResolver];
      $__export("COMPILER_PROVIDERS", COMPILER_PROVIDERS);
      RuntimeCompilerFactory = (function() {
        function RuntimeCompilerFactory(defaultOptions) {
          this._defaultOptions = [{
            useDebug: isDevMode(),
            useJit: true,
            defaultEncapsulation: ViewEncapsulation.Emulated
          }].concat(defaultOptions);
        }
        RuntimeCompilerFactory.prototype.createCompiler = function(options) {
          if (options === void 0) {
            options = [];
          }
          var mergedOptions = _mergeOptions(this._defaultOptions.concat(options));
          var injector = ReflectiveInjector.resolveAndCreate([COMPILER_PROVIDERS, {
            provide: CompilerConfig,
            useFactory: function() {
              return new CompilerConfig({
                genDebugInfo: mergedOptions.useDebug,
                useJit: mergedOptions.useJit,
                defaultEncapsulation: mergedOptions.defaultEncapsulation,
                logBindingUpdate: mergedOptions.useDebug
              });
            },
            deps: []
          }, mergedOptions.providers]);
          return injector.get(Compiler);
        };
        RuntimeCompilerFactory.decorators = [{type: Injectable}];
        RuntimeCompilerFactory.ctorParameters = [{
          type: Array,
          decorators: [{
            type: Inject,
            args: [COMPILER_OPTIONS]
          }]
        }];
        return RuntimeCompilerFactory;
      }());
      $__export("RuntimeCompilerFactory", RuntimeCompilerFactory);
      platformCoreDynamic = createPlatformFactory(platformCore, 'coreDynamic', [{
        provide: COMPILER_OPTIONS,
        useValue: {},
        multi: true
      }, {
        provide: CompilerFactory,
        useClass: RuntimeCompilerFactory
      }, {
        provide: PLATFORM_INITIALIZER,
        useValue: _initReflector,
        multi: true
      }]);
      $__export("platformCoreDynamic", platformCoreDynamic);
    }
  };
});

$__System.register("40", [], function($__export) {
  "use strict";
  var TranslationBundle;
  return {
    setters: [],
    execute: function() {
      TranslationBundle = (function() {
        function TranslationBundle(_messageMap) {
          if (_messageMap === void 0) {
            _messageMap = {};
          }
          this._messageMap = _messageMap;
        }
        TranslationBundle.load = function(content, url, messageBundle, serializer) {
          return new TranslationBundle(serializer.load(content, url, messageBundle));
        };
        TranslationBundle.prototype.get = function(id) {
          return this._messageMap[id];
        };
        TranslationBundle.prototype.has = function(id) {
          return id in this._messageMap;
        };
        return TranslationBundle;
      }());
      $__export("TranslationBundle", TranslationBundle);
    }
  };
});

$__System.register("2c", ["2e", "41", "42", "43", "44", "45", "46", "40"], function($__export) {
  "use strict";
  var DEFAULT_INTERPOLATION_CONFIG,
      ParseTreeResult,
      mergeTranslations,
      MessageBundle,
      Xliff,
      Xmb,
      Xtb,
      TranslationBundle,
      I18NHtmlParser;
  return {
    setters: [function($__m) {
      DEFAULT_INTERPOLATION_CONFIG = $__m.DEFAULT_INTERPOLATION_CONFIG;
    }, function($__m) {
      ParseTreeResult = $__m.ParseTreeResult;
    }, function($__m) {
      mergeTranslations = $__m.mergeTranslations;
    }, function($__m) {
      MessageBundle = $__m.MessageBundle;
    }, function($__m) {
      Xliff = $__m.Xliff;
    }, function($__m) {
      Xmb = $__m.Xmb;
    }, function($__m) {
      Xtb = $__m.Xtb;
    }, function($__m) {
      TranslationBundle = $__m.TranslationBundle;
    }],
    execute: function() {
      I18NHtmlParser = (function() {
        function I18NHtmlParser(_htmlParser, _translations, _translationsFormat) {
          this._htmlParser = _htmlParser;
          this._translations = _translations;
          this._translationsFormat = _translationsFormat;
        }
        I18NHtmlParser.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
          if (parseExpansionForms === void 0) {
            parseExpansionForms = false;
          }
          if (interpolationConfig === void 0) {
            interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
          }
          var parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);
          if (!this._translations || this._translations === '') {
            return parseResult;
          }
          var messageBundle = new MessageBundle(this._htmlParser, [], {});
          var errors = messageBundle.updateFromTemplate(source, url, interpolationConfig);
          if (errors && errors.length) {
            return new ParseTreeResult(parseResult.rootNodes, parseResult.errors.concat(errors));
          }
          var serializer = this._createSerializer(interpolationConfig);
          var translationBundle = TranslationBundle.load(this._translations, url, messageBundle, serializer);
          return mergeTranslations(parseResult.rootNodes, translationBundle, interpolationConfig, [], {});
        };
        I18NHtmlParser.prototype._createSerializer = function(interpolationConfig) {
          var format = (this._translationsFormat || 'xlf').toLowerCase();
          switch (format) {
            case 'xmb':
              return new Xmb();
            case 'xtb':
              return new Xtb(this._htmlParser, interpolationConfig);
            case 'xliff':
            case 'xlf':
            default:
              return new Xliff(this._htmlParser, interpolationConfig);
          }
        };
        return I18NHtmlParser;
      }());
      $__export("I18NHtmlParser", I18NHtmlParser);
    }
  };
});

$__System.register("47", [], function($__export) {
  "use strict";
  var _SerializerVisitor,
      serializerVisitor;
  function digestMessage(message) {
    return sha1(serializeNodes(message.nodes).join('') + ("[" + message.meaning + "]"));
  }
  function serializeNodes(nodes) {
    return nodes.map(function(a) {
      return a.visit(serializerVisitor, null);
    });
  }
  function sha1(str) {
    var utf8 = utf8Encode(str);
    var words32 = stringToWords32(utf8);
    var len = utf8.length * 8;
    var w = new Array(80);
    var _a = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0],
        a = _a[0],
        b = _a[1],
        c = _a[2],
        d = _a[3],
        e = _a[4];
    words32[len >> 5] |= 0x80 << (24 - len % 32);
    words32[((len + 64 >> 9) << 4) + 15] = len;
    for (var i = 0; i < words32.length; i += 16) {
      var _b = [a, b, c, d, e],
          h0 = _b[0],
          h1 = _b[1],
          h2 = _b[2],
          h3 = _b[3],
          h4 = _b[4];
      for (var j = 0; j < 80; j++) {
        if (j < 16) {
          w[j] = words32[i + j];
        } else {
          w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
        }
        var _c = fk(j, b, c, d),
            f = _c[0],
            k = _c[1];
        var temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
        _d = [d, c, rol32(b, 30), a, temp], e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4];
      }
      _e = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4];
    }
    var sha1 = words32ToString([a, b, c, d, e]);
    var hex = '';
    for (var i = 0; i < sha1.length; i++) {
      var b_1 = sha1.charCodeAt(i);
      hex += (b_1 >>> 4 & 0x0f).toString(16) + (b_1 & 0x0f).toString(16);
    }
    return hex.toLowerCase();
    var _d,
        _e;
  }
  function utf8Encode(str) {
    var encoded = '';
    for (var index = 0; index < str.length; index++) {
      var codePoint = decodeSurrogatePairs(str, index);
      if (codePoint <= 0x7f) {
        encoded += String.fromCharCode(codePoint);
      } else if (codePoint <= 0x7ff) {
        encoded += String.fromCharCode(0xc0 | codePoint >>> 6, 0x80 | codePoint & 0x3f);
      } else if (codePoint <= 0xffff) {
        encoded += String.fromCharCode(0xe0 | codePoint >>> 12, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
      } else if (codePoint <= 0x1fffff) {
        encoded += String.fromCharCode(0xf0 | codePoint >>> 18, 0x80 | codePoint >>> 12 & 0x3f, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
      }
    }
    return encoded;
  }
  function decodeSurrogatePairs(str, index) {
    if (index < 0 || index >= str.length) {
      throw new Error("index=" + index + " is out of range in \"" + str + "\"");
    }
    var high = str.charCodeAt(index);
    var low;
    if (high >= 0xd800 && high <= 0xdfff && str.length > index + 1) {
      low = str.charCodeAt(index + 1);
      if (low >= 0xdc00 && low <= 0xdfff) {
        return (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;
      }
    }
    return high;
  }
  function stringToWords32(str) {
    var words32 = Array(str.length >>> 2);
    for (var i = 0; i < words32.length; i++) {
      words32[i] = 0;
    }
    for (var i = 0; i < str.length; i++) {
      words32[i >>> 2] |= (str.charCodeAt(i) & 0xff) << 8 * (3 - i & 0x3);
    }
    return words32;
  }
  function words32ToString(words32) {
    var str = '';
    for (var i = 0; i < words32.length * 4; i++) {
      str += String.fromCharCode((words32[i >>> 2] >>> 8 * (3 - i & 0x3)) & 0xff);
    }
    return str;
  }
  function fk(index, b, c, d) {
    if (index < 20) {
      return [(b & c) | (~b & d), 0x5a827999];
    }
    if (index < 40) {
      return [b ^ c ^ d, 0x6ed9eba1];
    }
    if (index < 60) {
      return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];
    }
    return [b ^ c ^ d, 0xca62c1d6];
  }
  function add32(a, b) {
    var low = (a & 0xffff) + (b & 0xffff);
    var high = (a >> 16) + (b >> 16) + (low >> 16);
    return (high << 16) | (low & 0xffff);
  }
  function rol32(a, count) {
    return (a << count) | (a >>> (32 - count));
  }
  $__export("digestMessage", digestMessage);
  $__export("serializeNodes", serializeNodes);
  $__export("sha1", sha1);
  return {
    setters: [],
    execute: function() {
      _SerializerVisitor = (function() {
        function _SerializerVisitor() {}
        _SerializerVisitor.prototype.visitText = function(text, context) {
          return text.value;
        };
        _SerializerVisitor.prototype.visitContainer = function(container, context) {
          var _this = this;
          return "[" + container.children.map(function(child) {
            return child.visit(_this);
          }).join(', ') + "]";
        };
        _SerializerVisitor.prototype.visitIcu = function(icu, context) {
          var _this = this;
          var strCases = Object.keys(icu.cases).map(function(k) {
            return (k + " {" + icu.cases[k].visit(_this) + "}");
          });
          return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(', ') + "}";
        };
        _SerializerVisitor.prototype.visitTagPlaceholder = function(ph, context) {
          var _this = this;
          return ph.isVoid ? "<ph tag name=\"" + ph.startName + "\"/>" : "<ph tag name=\"" + ph.startName + "\">" + ph.children.map(function(child) {
            return child.visit(_this);
          }).join(', ') + "</ph name=\"" + ph.closeName + "\">";
        };
        _SerializerVisitor.prototype.visitPlaceholder = function(ph, context) {
          return "<ph name=\"" + ph.name + "\">" + ph.value + "</ph>";
        };
        _SerializerVisitor.prototype.visitIcuPlaceholder = function(ph, context) {
          return "<ph icu name=\"" + ph.name + "\">" + ph.value.visit(this) + "</ph>";
        };
        return _SerializerVisitor;
      }());
      serializerVisitor = new _SerializerVisitor();
    }
  };
});

$__System.register("48", [], function($__export) {
  "use strict";
  var Message,
      Text,
      Container,
      Icu,
      TagPlaceholder,
      Placeholder,
      IcuPlaceholder;
  return {
    setters: [],
    execute: function() {
      Message = (function() {
        function Message(nodes, placeholders, placeholderToMsgIds, meaning, description) {
          this.nodes = nodes;
          this.placeholders = placeholders;
          this.placeholderToMsgIds = placeholderToMsgIds;
          this.meaning = meaning;
          this.description = description;
        }
        return Message;
      }());
      $__export("Message", Message);
      Text = (function() {
        function Text(value, sourceSpan) {
          this.value = value;
          this.sourceSpan = sourceSpan;
        }
        Text.prototype.visit = function(visitor, context) {
          return visitor.visitText(this, context);
        };
        return Text;
      }());
      $__export("Text", Text);
      Container = (function() {
        function Container(children, sourceSpan) {
          this.children = children;
          this.sourceSpan = sourceSpan;
        }
        Container.prototype.visit = function(visitor, context) {
          return visitor.visitContainer(this, context);
        };
        return Container;
      }());
      $__export("Container", Container);
      Icu = (function() {
        function Icu(expression, type, cases, sourceSpan) {
          this.expression = expression;
          this.type = type;
          this.cases = cases;
          this.sourceSpan = sourceSpan;
        }
        Icu.prototype.visit = function(visitor, context) {
          return visitor.visitIcu(this, context);
        };
        return Icu;
      }());
      $__export("Icu", Icu);
      TagPlaceholder = (function() {
        function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
          this.tag = tag;
          this.attrs = attrs;
          this.startName = startName;
          this.closeName = closeName;
          this.children = children;
          this.isVoid = isVoid;
          this.sourceSpan = sourceSpan;
        }
        TagPlaceholder.prototype.visit = function(visitor, context) {
          return visitor.visitTagPlaceholder(this, context);
        };
        return TagPlaceholder;
      }());
      $__export("TagPlaceholder", TagPlaceholder);
      Placeholder = (function() {
        function Placeholder(value, name, sourceSpan) {
          if (name === void 0) {
            name = '';
          }
          this.value = value;
          this.name = name;
          this.sourceSpan = sourceSpan;
        }
        Placeholder.prototype.visit = function(visitor, context) {
          return visitor.visitPlaceholder(this, context);
        };
        return Placeholder;
      }());
      $__export("Placeholder", Placeholder);
      IcuPlaceholder = (function() {
        function IcuPlaceholder(value, name, sourceSpan) {
          if (name === void 0) {
            name = '';
          }
          this.value = value;
          this.name = name;
          this.sourceSpan = sourceSpan;
        }
        IcuPlaceholder.prototype.visit = function(visitor, context) {
          return visitor.visitIcuPlaceholder(this, context);
        };
        return IcuPlaceholder;
      }());
      $__export("IcuPlaceholder", IcuPlaceholder);
    }
  };
});

$__System.register("49", [], function($__export) {
  "use strict";
  var TAG_TO_PLACEHOLDER_NAMES,
      PlaceholderRegistry;
  return {
    setters: [],
    execute: function() {
      TAG_TO_PLACEHOLDER_NAMES = {
        'A': 'LINK',
        'B': 'BOLD_TEXT',
        'BR': 'LINE_BREAK',
        'EM': 'EMPHASISED_TEXT',
        'H1': 'HEADING_LEVEL1',
        'H2': 'HEADING_LEVEL2',
        'H3': 'HEADING_LEVEL3',
        'H4': 'HEADING_LEVEL4',
        'H5': 'HEADING_LEVEL5',
        'H6': 'HEADING_LEVEL6',
        'HR': 'HORIZONTAL_RULE',
        'I': 'ITALIC_TEXT',
        'LI': 'LIST_ITEM',
        'LINK': 'MEDIA_LINK',
        'OL': 'ORDERED_LIST',
        'P': 'PARAGRAPH',
        'Q': 'QUOTATION',
        'S': 'STRIKETHROUGH_TEXT',
        'SMALL': 'SMALL_TEXT',
        'SUB': 'SUBSTRIPT',
        'SUP': 'SUPERSCRIPT',
        'TBODY': 'TABLE_BODY',
        'TD': 'TABLE_CELL',
        'TFOOT': 'TABLE_FOOTER',
        'TH': 'TABLE_HEADER_CELL',
        'THEAD': 'TABLE_HEADER',
        'TR': 'TABLE_ROW',
        'TT': 'MONOSPACED_TEXT',
        'U': 'UNDERLINED_TEXT',
        'UL': 'UNORDERED_LIST'
      };
      PlaceholderRegistry = (function() {
        function PlaceholderRegistry() {
          this._placeHolderNameCounts = {};
          this._signatureToName = {};
        }
        PlaceholderRegistry.prototype.getStartTagPlaceholderName = function(tag, attrs, isVoid) {
          var signature = this._hashTag(tag, attrs, isVoid);
          if (this._signatureToName[signature]) {
            return this._signatureToName[signature];
          }
          var upperTag = tag.toUpperCase();
          var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
          var name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName);
          this._signatureToName[signature] = name;
          return name;
        };
        PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function(tag) {
          var signature = this._hashClosingTag(tag);
          if (this._signatureToName[signature]) {
            return this._signatureToName[signature];
          }
          var upperTag = tag.toUpperCase();
          var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
          var name = this._generateUniqueName("CLOSE_" + baseName);
          this._signatureToName[signature] = name;
          return name;
        };
        PlaceholderRegistry.prototype.getPlaceholderName = function(name, content) {
          var upperName = name.toUpperCase();
          var signature = "PH: " + upperName + "=" + content;
          if (this._signatureToName[signature]) {
            return this._signatureToName[signature];
          }
          var uniqueName = this._generateUniqueName(upperName);
          this._signatureToName[signature] = uniqueName;
          return uniqueName;
        };
        PlaceholderRegistry.prototype._hashTag = function(tag, attrs, isVoid) {
          var start = "<" + tag;
          var strAttrs = Object.keys(attrs).sort().map(function(name) {
            return (" " + name + "=" + attrs[name]);
          }).join('');
          var end = isVoid ? '/>' : "></" + tag + ">";
          return start + strAttrs + end;
        };
        PlaceholderRegistry.prototype._hashClosingTag = function(tag) {
          return this._hashTag("/" + tag, {}, false);
        };
        PlaceholderRegistry.prototype._generateUniqueName = function(base) {
          var name = base;
          var next = this._placeHolderNameCounts[name];
          if (!next) {
            next = 1;
          } else {
            name += "_" + next;
            next++;
          }
          this._placeHolderNameCounts[base] = next;
          return name;
        };
        return PlaceholderRegistry;
      }());
      $__export("PlaceholderRegistry", PlaceholderRegistry);
    }
  };
});

$__System.register("4a", ["39", "2b", "2a", "4b", "47", "48", "49"], function($__export) {
  "use strict";
  var ExpressionLexer,
      ExpressionParser,
      html,
      getHtmlTagDefinition,
      digestMessage,
      i18n,
      PlaceholderRegistry,
      _expParser,
      _I18nVisitor,
      _CUSTOM_PH_EXP;
  function createI18nMessageFactory(interpolationConfig) {
    var visitor = new _I18nVisitor(_expParser, interpolationConfig);
    return function(nodes, meaning, description) {
      return visitor.toI18nMessage(nodes, meaning, description);
    };
  }
  function _extractPlaceholderName(input) {
    return input.split(_CUSTOM_PH_EXP)[1];
  }
  $__export("createI18nMessageFactory", createI18nMessageFactory);
  return {
    setters: [function($__m) {
      ExpressionLexer = $__m.Lexer;
    }, function($__m) {
      ExpressionParser = $__m.Parser;
    }, function($__m) {
      html = $__m;
    }, function($__m) {
      getHtmlTagDefinition = $__m.getHtmlTagDefinition;
    }, function($__m) {
      digestMessage = $__m.digestMessage;
    }, function($__m) {
      i18n = $__m;
    }, function($__m) {
      PlaceholderRegistry = $__m.PlaceholderRegistry;
    }],
    execute: function() {
      _expParser = new ExpressionParser(new ExpressionLexer());
      _I18nVisitor = (function() {
        function _I18nVisitor(_expressionParser, _interpolationConfig) {
          this._expressionParser = _expressionParser;
          this._interpolationConfig = _interpolationConfig;
        }
        _I18nVisitor.prototype.toI18nMessage = function(nodes, meaning, description) {
          this._isIcu = nodes.length == 1 && nodes[0] instanceof html.Expansion;
          this._icuDepth = 0;
          this._placeholderRegistry = new PlaceholderRegistry();
          this._placeholderToContent = {};
          this._placeholderToIds = {};
          var i18nodes = html.visitAll(this, nodes, {});
          return new i18n.Message(i18nodes, this._placeholderToContent, this._placeholderToIds, meaning, description);
        };
        _I18nVisitor.prototype.visitElement = function(el, context) {
          var children = html.visitAll(this, el.children);
          var attrs = {};
          el.attrs.forEach(function(attr) {
            attrs[attr.name] = attr.value;
          });
          var isVoid = getHtmlTagDefinition(el.name).isVoid;
          var startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
          this._placeholderToContent[startPhName] = el.sourceSpan.toString();
          var closePhName = '';
          if (!isVoid) {
            closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);
            this._placeholderToContent[closePhName] = "</" + el.name + ">";
          }
          return new i18n.TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);
        };
        _I18nVisitor.prototype.visitAttribute = function(attribute, context) {
          return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
        };
        _I18nVisitor.prototype.visitText = function(text, context) {
          return this._visitTextWithInterpolation(text.value, text.sourceSpan);
        };
        _I18nVisitor.prototype.visitComment = function(comment, context) {
          return null;
        };
        _I18nVisitor.prototype.visitExpansion = function(icu, context) {
          var _this = this;
          this._icuDepth++;
          var i18nIcuCases = {};
          var i18nIcu = new i18n.Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
          icu.cases.forEach(function(caze) {
            i18nIcuCases[caze.value] = new i18n.Container(caze.expression.map(function(node) {
              return node.visit(_this, {});
            }), caze.expSourceSpan);
          });
          this._icuDepth--;
          if (this._isIcu || this._icuDepth > 0) {
            return i18nIcu;
          }
          var phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());
          var visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);
          this._placeholderToIds[phName] = digestMessage(visitor.toI18nMessage([icu], '', ''));
          return new i18n.IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
        };
        _I18nVisitor.prototype.visitExpansionCase = function(icuCase, context) {
          throw new Error('Unreachable code');
        };
        _I18nVisitor.prototype._visitTextWithInterpolation = function(text, sourceSpan) {
          var splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
          if (!splitInterpolation) {
            return new i18n.Text(text, sourceSpan);
          }
          var nodes = [];
          var container = new i18n.Container(nodes, sourceSpan);
          var _a = this._interpolationConfig,
              sDelimiter = _a.start,
              eDelimiter = _a.end;
          for (var i = 0; i < splitInterpolation.strings.length - 1; i++) {
            var expression = splitInterpolation.expressions[i];
            var baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';
            var phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);
            if (splitInterpolation.strings[i].length) {
              nodes.push(new i18n.Text(splitInterpolation.strings[i], sourceSpan));
            }
            nodes.push(new i18n.Placeholder(expression, phName, sourceSpan));
            this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
          }
          var lastStringIdx = splitInterpolation.strings.length - 1;
          if (splitInterpolation.strings[lastStringIdx].length) {
            nodes.push(new i18n.Text(splitInterpolation.strings[lastStringIdx], sourceSpan));
          }
          return container;
        };
        return _I18nVisitor;
      }());
      _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g;
    }
  };
});

$__System.register("42", ["2a", "41", "47", "48", "4a", "4c"], function($__export) {
  "use strict";
  var html,
      ParseTreeResult,
      digestMessage,
      i18n,
      createI18nMessageFactory,
      I18nError,
      _I18N_ATTR,
      _I18N_ATTR_PREFIX,
      _I18N_COMMENT_PREFIX_REGEXP,
      ExtractionResult,
      _VisitorMode,
      _Visitor;
  function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
    var visitor = new _Visitor(implicitTags, implicitAttrs);
    return visitor.extract(nodes, interpolationConfig);
  }
  function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
    var visitor = new _Visitor(implicitTags, implicitAttrs);
    return visitor.merge(nodes, translations, interpolationConfig);
  }
  function _isOpeningComment(n) {
    return n instanceof html.Comment && n.value && n.value.startsWith('i18n');
  }
  function _isClosingComment(n) {
    return n instanceof html.Comment && n.value && n.value === '/i18n';
  }
  function _getI18nAttr(p) {
    return p.attrs.find(function(attr) {
      return attr.name === _I18N_ATTR;
    }) || null;
  }
  function _splitMeaningAndDesc(i18n) {
    if (!i18n)
      return ['', ''];
    var pipeIndex = i18n.indexOf('|');
    return pipeIndex == -1 ? ['', i18n] : [i18n.slice(0, pipeIndex), i18n.slice(pipeIndex + 1)];
  }
  $__export("extractMessages", extractMessages);
  $__export("mergeTranslations", mergeTranslations);
  return {
    setters: [function($__m) {
      html = $__m;
    }, function($__m) {
      ParseTreeResult = $__m.ParseTreeResult;
    }, function($__m) {
      digestMessage = $__m.digestMessage;
    }, function($__m) {
      i18n = $__m;
    }, function($__m) {
      createI18nMessageFactory = $__m.createI18nMessageFactory;
    }, function($__m) {
      I18nError = $__m.I18nError;
    }],
    execute: function() {
      _I18N_ATTR = 'i18n';
      _I18N_ATTR_PREFIX = 'i18n-';
      _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
      ExtractionResult = (function() {
        function ExtractionResult(messages, errors) {
          this.messages = messages;
          this.errors = errors;
        }
        return ExtractionResult;
      }());
      $__export("ExtractionResult", ExtractionResult);
      (function(_VisitorMode) {
        _VisitorMode[_VisitorMode["Extract"] = 0] = "Extract";
        _VisitorMode[_VisitorMode["Merge"] = 1] = "Merge";
      })(_VisitorMode || (_VisitorMode = {}));
      _Visitor = (function() {
        function _Visitor(_implicitTags, _implicitAttrs) {
          this._implicitTags = _implicitTags;
          this._implicitAttrs = _implicitAttrs;
        }
        _Visitor.prototype.extract = function(nodes, interpolationConfig) {
          var _this = this;
          this._init(_VisitorMode.Extract, interpolationConfig);
          nodes.forEach(function(node) {
            return node.visit(_this, null);
          });
          if (this._inI18nBlock) {
            this._reportError(nodes[nodes.length - 1], 'Unclosed block');
          }
          return new ExtractionResult(this._messages, this._errors);
        };
        _Visitor.prototype.merge = function(nodes, translations, interpolationConfig) {
          this._init(_VisitorMode.Merge, interpolationConfig);
          this._translations = translations;
          var wrapper = new html.Element('wrapper', [], nodes, null, null, null);
          var translatedNode = wrapper.visit(this, null);
          if (this._inI18nBlock) {
            this._reportError(nodes[nodes.length - 1], 'Unclosed block');
          }
          return new ParseTreeResult(translatedNode.children, this._errors);
        };
        _Visitor.prototype.visitExpansionCase = function(icuCase, context) {
          var expression = html.visitAll(this, icuCase.expression, context);
          if (this._mode === _VisitorMode.Merge) {
            return new html.ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
          }
        };
        _Visitor.prototype.visitExpansion = function(icu, context) {
          this._mayBeAddBlockChildren(icu);
          var wasInIcu = this._inIcu;
          if (!this._inIcu) {
            if (this._isInTranslatableSection) {
              this._addMessage([icu]);
            }
            this._inIcu = true;
          }
          var cases = html.visitAll(this, icu.cases, context);
          if (this._mode === _VisitorMode.Merge) {
            icu = new html.Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
          }
          this._inIcu = wasInIcu;
          return icu;
        };
        _Visitor.prototype.visitComment = function(comment, context) {
          var isOpening = _isOpeningComment(comment);
          if (isOpening && this._isInTranslatableSection) {
            this._reportError(comment, 'Could not start a block inside a translatable section');
            return;
          }
          var isClosing = _isClosingComment(comment);
          if (isClosing && !this._inI18nBlock) {
            this._reportError(comment, 'Trying to close an unopened block');
            return;
          }
          if (!this._inI18nNode && !this._inIcu) {
            if (!this._inI18nBlock) {
              if (isOpening) {
                this._inI18nBlock = true;
                this._blockStartDepth = this._depth;
                this._blockChildren = [];
                this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();
                this._openTranslatableSection(comment);
              }
            } else {
              if (isClosing) {
                if (this._depth == this._blockStartDepth) {
                  this._closeTranslatableSection(comment, this._blockChildren);
                  this._inI18nBlock = false;
                  var message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);
                  var nodes = this._translateMessage(comment, message);
                  return html.visitAll(this, nodes);
                } else {
                  this._reportError(comment, 'I18N blocks should not cross element boundaries');
                  return;
                }
              }
            }
          }
        };
        _Visitor.prototype.visitText = function(text, context) {
          if (this._isInTranslatableSection) {
            this._mayBeAddBlockChildren(text);
          }
          return text;
        };
        _Visitor.prototype.visitElement = function(el, context) {
          var _this = this;
          this._mayBeAddBlockChildren(el);
          this._depth++;
          var wasInI18nNode = this._inI18nNode;
          var wasInImplicitNode = this._inImplicitNode;
          var childNodes;
          var i18nAttr = _getI18nAttr(el);
          var isImplicit = this._implicitTags.some(function(tag) {
            return el.name === tag;
          }) && !this._inIcu && !this._isInTranslatableSection;
          var isTopLevelImplicit = !wasInImplicitNode && isImplicit;
          this._inImplicitNode = this._inImplicitNode || isImplicit;
          if (!this._isInTranslatableSection && !this._inIcu) {
            if (i18nAttr) {
              this._inI18nNode = true;
              var message = this._addMessage(el.children, i18nAttr.value);
              childNodes = this._translateMessage(el, message);
            } else if (isTopLevelImplicit) {
              this._inI18nNode = true;
              var message = this._addMessage(el.children);
              childNodes = this._translateMessage(el, message);
            }
            if (this._mode == _VisitorMode.Extract) {
              var isTranslatable = i18nAttr || isTopLevelImplicit;
              if (isTranslatable) {
                this._openTranslatableSection(el);
              }
              html.visitAll(this, el.children);
              if (isTranslatable) {
                this._closeTranslatableSection(el, el.children);
              }
            }
            if (this._mode === _VisitorMode.Merge && !i18nAttr && !isTopLevelImplicit) {
              childNodes = [];
              el.children.forEach(function(child) {
                var visited = child.visit(_this, context);
                if (visited && !_this._isInTranslatableSection) {
                  childNodes = childNodes.concat(visited);
                }
              });
            }
          } else {
            if (i18nAttr || isTopLevelImplicit) {
              this._reportError(el, 'Could not mark an element as translatable inside a translatable section');
            }
            if (this._mode == _VisitorMode.Extract) {
              html.visitAll(this, el.children);
            }
            if (this._mode == _VisitorMode.Merge) {
              childNodes = [];
              el.children.forEach(function(child) {
                var visited = child.visit(_this, context);
                if (visited && !_this._isInTranslatableSection) {
                  childNodes = childNodes.concat(visited);
                }
              });
            }
          }
          this._visitAttributesOf(el);
          this._depth--;
          this._inI18nNode = wasInI18nNode;
          this._inImplicitNode = wasInImplicitNode;
          if (this._mode === _VisitorMode.Merge) {
            var translatedAttrs = this._translateAttributes(el);
            return new html.Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
          }
        };
        _Visitor.prototype.visitAttribute = function(attribute, context) {
          throw new Error('unreachable code');
        };
        _Visitor.prototype._init = function(mode, interpolationConfig) {
          this._mode = mode;
          this._inI18nBlock = false;
          this._inI18nNode = false;
          this._depth = 0;
          this._inIcu = false;
          this._msgCountAtSectionStart = void 0;
          this._errors = [];
          this._messages = [];
          this._inImplicitNode = false;
          this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
        };
        _Visitor.prototype._visitAttributesOf = function(el) {
          var _this = this;
          var explicitAttrNameToValue = {};
          var implicitAttrNames = this._implicitAttrs[el.name] || [];
          el.attrs.filter(function(attr) {
            return attr.name.startsWith(_I18N_ATTR_PREFIX);
          }).forEach(function(attr) {
            return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] = attr.value;
          });
          el.attrs.forEach(function(attr) {
            if (attr.name in explicitAttrNameToValue) {
              _this._addMessage([attr], explicitAttrNameToValue[attr.name]);
            } else if (implicitAttrNames.some(function(name) {
              return attr.name === name;
            })) {
              _this._addMessage([attr]);
            }
          });
        };
        _Visitor.prototype._addMessage = function(ast, meaningAndDesc) {
          if (ast.length == 0 || ast.length == 1 && ast[0] instanceof html.Attribute && !ast[0].value) {
            return;
          }
          var _a = _splitMeaningAndDesc(meaningAndDesc),
              meaning = _a[0],
              description = _a[1];
          var message = this._createI18nMessage(ast, meaning, description);
          this._messages.push(message);
          return message;
        };
        _Visitor.prototype._translateMessage = function(el, message) {
          if (message && this._mode === _VisitorMode.Merge) {
            var id = digestMessage(message);
            var nodes = this._translations.get(id);
            if (nodes) {
              return nodes;
            }
            this._reportError(el, "Translation unavailable for message id=\"" + id + "\"");
          }
          return [];
        };
        _Visitor.prototype._translateAttributes = function(el) {
          var _this = this;
          var attributes = el.attrs;
          var i18nAttributeMeanings = {};
          attributes.forEach(function(attr) {
            if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
              i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)] = _splitMeaningAndDesc(attr.value)[0];
            }
          });
          var translatedAttributes = [];
          attributes.forEach(function(attr) {
            if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
              return;
            }
            if (attr.value && attr.value != '' && i18nAttributeMeanings.hasOwnProperty(attr.name)) {
              var meaning = i18nAttributeMeanings[attr.name];
              var message = _this._createI18nMessage([attr], meaning, '');
              var id = digestMessage(message);
              var nodes = _this._translations.get(id);
              if (nodes) {
                if (nodes[0] instanceof html.Text) {
                  var value = nodes[0].value;
                  translatedAttributes.push(new html.Attribute(attr.name, value, attr.sourceSpan));
                } else {
                  _this._reportError(el, "Unexpected translation for attribute \"" + attr.name + "\" (id=\"" + id + "\")");
                }
              } else {
                _this._reportError(el, "Translation unavailable for attribute \"" + attr.name + "\" (id=\"" + id + "\")");
              }
            } else {
              translatedAttributes.push(attr);
            }
          });
          return translatedAttributes;
        };
        _Visitor.prototype._mayBeAddBlockChildren = function(node) {
          if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
            this._blockChildren.push(node);
          }
        };
        _Visitor.prototype._openTranslatableSection = function(node) {
          if (this._isInTranslatableSection) {
            this._reportError(node, 'Unexpected section start');
          } else {
            this._msgCountAtSectionStart = this._messages.length;
          }
        };
        Object.defineProperty(_Visitor.prototype, "_isInTranslatableSection", {
          get: function() {
            return this._msgCountAtSectionStart !== void 0;
          },
          enumerable: true,
          configurable: true
        });
        _Visitor.prototype._closeTranslatableSection = function(node, directChildren) {
          if (!this._isInTranslatableSection) {
            this._reportError(node, 'Unexpected section end');
            return;
          }
          var startIndex = this._msgCountAtSectionStart;
          var significantChildren = directChildren.reduce(function(count, node) {
            return count + (node instanceof html.Comment ? 0 : 1);
          }, 0);
          if (significantChildren == 1) {
            for (var i = this._messages.length - 1; i >= startIndex; i--) {
              var ast = this._messages[i].nodes;
              if (!(ast.length == 1 && ast[0] instanceof i18n.Text)) {
                this._messages.splice(i, 1);
                break;
              }
            }
          }
          this._msgCountAtSectionStart = void 0;
        };
        _Visitor.prototype._reportError = function(node, msg) {
          this._errors.push(new I18nError(node.sourceSpan, msg));
        };
        return _Visitor;
      }());
    }
  };
});

$__System.register("43", ["47", "42"], function($__export) {
  "use strict";
  var digestMessage,
      extractMessages,
      MessageBundle;
  return {
    setters: [function($__m) {
      digestMessage = $__m.digestMessage;
    }, function($__m) {
      extractMessages = $__m.extractMessages;
    }],
    execute: function() {
      MessageBundle = (function() {
        function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs) {
          this._htmlParser = _htmlParser;
          this._implicitTags = _implicitTags;
          this._implicitAttrs = _implicitAttrs;
          this._messageMap = {};
        }
        MessageBundle.prototype.updateFromTemplate = function(html, url, interpolationConfig) {
          var _this = this;
          var htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);
          if (htmlParserResult.errors.length) {
            return htmlParserResult.errors;
          }
          var i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);
          if (i18nParserResult.errors.length) {
            return i18nParserResult.errors;
          }
          i18nParserResult.messages.forEach(function(message) {
            _this._messageMap[digestMessage(message)] = message;
          });
        };
        MessageBundle.prototype.getMessageMap = function() {
          return this._messageMap;
        };
        MessageBundle.prototype.write = function(serializer) {
          return serializer.write(this._messageMap);
        };
        return MessageBundle;
      }());
      $__export("MessageBundle", MessageBundle);
    }
  };
});

$__System.register("44", ["12", "2a", "4d", "4c", "4e", "4f"], function($__export) {
  "use strict";
  var ListWrapper,
      ml,
      XmlParser,
      I18nError,
      extractPlaceholderToIds,
      extractPlaceholders,
      xml,
      _VERSION,
      _XMLNS,
      _SOURCE_LANG,
      _PLACEHOLDER_TAG,
      _SOURCE_TAG,
      _TARGET_TAG,
      _UNIT_TAG,
      Xliff,
      _WriteVisitor,
      _LoadVisitor;
  function getCtypeForTag(tag) {
    switch (tag.toLowerCase()) {
      case 'br':
        return 'lb';
      case 'img':
        return 'image';
      default:
        return "x-" + tag;
    }
  }
  return {
    setters: [function($__m) {
      ListWrapper = $__m.ListWrapper;
    }, function($__m) {
      ml = $__m;
    }, function($__m) {
      XmlParser = $__m.XmlParser;
    }, function($__m) {
      I18nError = $__m.I18nError;
    }, function($__m) {
      extractPlaceholderToIds = $__m.extractPlaceholderToIds;
      extractPlaceholders = $__m.extractPlaceholders;
    }, function($__m) {
      xml = $__m;
    }],
    execute: function() {
      _VERSION = '1.2';
      _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';
      _SOURCE_LANG = 'en';
      _PLACEHOLDER_TAG = 'x';
      _SOURCE_TAG = 'source';
      _TARGET_TAG = 'target';
      _UNIT_TAG = 'trans-unit';
      Xliff = (function() {
        function Xliff(_htmlParser, _interpolationConfig) {
          this._htmlParser = _htmlParser;
          this._interpolationConfig = _interpolationConfig;
        }
        Xliff.prototype.write = function(messageMap) {
          var visitor = new _WriteVisitor();
          var transUnits = [];
          Object.keys(messageMap).forEach(function(id) {
            var message = messageMap[id];
            var transUnit = new xml.Tag(_UNIT_TAG, {
              id: id,
              datatype: 'html'
            });
            transUnit.children.push(new xml.CR(8), new xml.Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new xml.CR(8), new xml.Tag(_TARGET_TAG));
            if (message.description) {
              transUnit.children.push(new xml.CR(8), new xml.Tag('note', {
                priority: '1',
                from: 'description'
              }, [new xml.Text(message.description)]));
            }
            if (message.meaning) {
              transUnit.children.push(new xml.CR(8), new xml.Tag('note', {
                priority: '1',
                from: 'meaning'
              }, [new xml.Text(message.meaning)]));
            }
            transUnit.children.push(new xml.CR(6));
            transUnits.push(new xml.CR(6), transUnit);
          });
          var body = new xml.Tag('body', {}, transUnits.concat([new xml.CR(4)]));
          var file = new xml.Tag('file', {
            'source-language': _SOURCE_LANG,
            datatype: 'plaintext',
            original: 'ng2.template'
          }, [new xml.CR(4), body, new xml.CR(2)]);
          var xliff = new xml.Tag('xliff', {
            version: _VERSION,
            xmlns: _XMLNS
          }, [new xml.CR(2), file, new xml.CR()]);
          return xml.serialize([new xml.Declaration({
            version: '1.0',
            encoding: 'UTF-8'
          }), new xml.CR(), xliff, new xml.CR()]);
        };
        Xliff.prototype.load = function(content, url, messageBundle) {
          var _this = this;
          var result = new XmlParser().parse(content, url);
          if (result.errors.length) {
            throw new Error("xtb parse errors:\n" + result.errors.join('\n'));
          }
          var _a = new _LoadVisitor().parse(result.rootNodes, messageBundle),
              messages = _a.messages,
              errors = _a.errors;
          if (errors.length) {
            throw new Error("xtb parse errors:\n" + errors.join('\n'));
          }
          var messageMap = {};
          var parseErrors = [];
          Object.keys(messages).forEach(function(id) {
            var res = _this._htmlParser.parse(messages[id], url, true, _this._interpolationConfig);
            parseErrors.push.apply(parseErrors, res.errors);
            messageMap[id] = res.rootNodes;
          });
          if (parseErrors.length) {
            throw new Error("xtb parse errors:\n" + parseErrors.join('\n'));
          }
          return messageMap;
        };
        return Xliff;
      }());
      $__export("Xliff", Xliff);
      _WriteVisitor = (function() {
        function _WriteVisitor() {}
        _WriteVisitor.prototype.visitText = function(text, context) {
          return [new xml.Text(text.value)];
        };
        _WriteVisitor.prototype.visitContainer = function(container, context) {
          var _this = this;
          var nodes = [];
          container.children.forEach(function(node) {
            return nodes.push.apply(nodes, node.visit(_this));
          });
          return nodes;
        };
        _WriteVisitor.prototype.visitIcu = function(icu, context) {
          if (this._isInIcu) {
            throw new Error('xliff does not support nested ICU messages');
          }
          this._isInIcu = true;
          var nodes = [];
          this._isInIcu = false;
          return nodes;
        };
        _WriteVisitor.prototype.visitTagPlaceholder = function(ph, context) {
          var ctype = getCtypeForTag(ph.tag);
          var startTagPh = new xml.Tag(_PLACEHOLDER_TAG, {
            id: ph.startName,
            ctype: ctype
          });
          if (ph.isVoid) {
            return [startTagPh];
          }
          var closeTagPh = new xml.Tag(_PLACEHOLDER_TAG, {
            id: ph.closeName,
            ctype: ctype
          });
          return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
        };
        _WriteVisitor.prototype.visitPlaceholder = function(ph, context) {
          return [new xml.Tag(_PLACEHOLDER_TAG, {id: ph.name})];
        };
        _WriteVisitor.prototype.visitIcuPlaceholder = function(ph, context) {
          return [new xml.Tag(_PLACEHOLDER_TAG, {id: ph.name})];
        };
        _WriteVisitor.prototype.serialize = function(nodes) {
          var _this = this;
          this._isInIcu = false;
          return ListWrapper.flatten(nodes.map(function(node) {
            return node.visit(_this);
          }));
        };
        return _WriteVisitor;
      }());
      _LoadVisitor = (function() {
        function _LoadVisitor() {}
        _LoadVisitor.prototype.parse = function(nodes, messageBundle) {
          var _this = this;
          this._messageNodes = [];
          this._translatedMessages = {};
          this._msgId = '';
          this._target = [];
          this._errors = [];
          ml.visitAll(this, nodes, null);
          var messageMap = messageBundle.getMessageMap();
          var placeholders = extractPlaceholders(messageBundle);
          var placeholderToIds = extractPlaceholderToIds(messageBundle);
          this._messageNodes.filter(function(message) {
            return messageMap.hasOwnProperty(message[0]);
          }).sort(function(a, b) {
            if (Object.keys(messageMap[a[0]].placeholderToMsgIds).length == 0) {
              return -1;
            }
            if (Object.keys(messageMap[b[0]].placeholderToMsgIds).length == 0) {
              return 1;
            }
            return 0;
          }).forEach(function(message) {
            var id = message[0];
            _this._placeholders = placeholders[id] || {};
            _this._placeholderToIds = placeholderToIds[id] || {};
            _this._translatedMessages[id] = ml.visitAll(_this, message[1]).join('');
          });
          return {
            messages: this._translatedMessages,
            errors: this._errors
          };
        };
        _LoadVisitor.prototype.visitElement = function(element, context) {
          switch (element.name) {
            case _UNIT_TAG:
              this._target = null;
              var msgId = element.attrs.find(function(attr) {
                return attr.name === 'id';
              });
              if (!msgId) {
                this._addError(element, "<" + _UNIT_TAG + "> misses the \"id\" attribute");
              } else {
                this._msgId = msgId.value;
              }
              ml.visitAll(this, element.children, null);
              if (this._msgId !== null) {
                this._messageNodes.push([this._msgId, this._target]);
              }
              break;
            case _SOURCE_TAG:
              break;
            case _TARGET_TAG:
              this._target = element.children;
              break;
            case _PLACEHOLDER_TAG:
              var idAttr = element.attrs.find(function(attr) {
                return attr.name === 'id';
              });
              if (!idAttr) {
                this._addError(element, "<" + _PLACEHOLDER_TAG + "> misses the \"id\" attribute");
              } else {
                var id = idAttr.value;
                if (this._placeholders.hasOwnProperty(id)) {
                  return this._placeholders[id];
                }
                if (this._placeholderToIds.hasOwnProperty(id) && this._translatedMessages.hasOwnProperty(this._placeholderToIds[id])) {
                  return this._translatedMessages[this._placeholderToIds[id]];
                }
                this._addError(element, "The placeholder \"" + id + "\" does not exists in the source message");
              }
              break;
            default:
              ml.visitAll(this, element.children, null);
          }
        };
        _LoadVisitor.prototype.visitAttribute = function(attribute, context) {
          throw new Error('unreachable code');
        };
        _LoadVisitor.prototype.visitText = function(text, context) {
          return text.value;
        };
        _LoadVisitor.prototype.visitComment = function(comment, context) {
          return '';
        };
        _LoadVisitor.prototype.visitExpansion = function(expansion, context) {
          throw new Error('unreachable code');
        };
        _LoadVisitor.prototype.visitExpansionCase = function(expansionCase, context) {
          throw new Error('unreachable code');
        };
        _LoadVisitor.prototype._addError = function(node, message) {
          this._errors.push(new I18nError(node.sourceSpan, message));
        };
        return _LoadVisitor;
      }());
    }
  };
});

$__System.register("4f", [], function($__export) {
  "use strict";
  var __extends,
      _Visitor,
      _visitor,
      Declaration,
      Doctype,
      Tag,
      Text,
      CR,
      _ESCAPED_CHARS;
  function serialize(nodes) {
    return nodes.map(function(node) {
      return node.visit(_visitor);
    }).join('');
  }
  function _escapeXml(text) {
    return _ESCAPED_CHARS.reduce(function(text, entry) {
      return text.replace(entry[0], entry[1]);
    }, text);
  }
  $__export("serialize", serialize);
  return {
    setters: [],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      _Visitor = (function() {
        function _Visitor() {}
        _Visitor.prototype.visitTag = function(tag) {
          var _this = this;
          var strAttrs = this._serializeAttributes(tag.attrs);
          if (tag.children.length == 0) {
            return "<" + tag.name + strAttrs + "/>";
          }
          var strChildren = tag.children.map(function(node) {
            return node.visit(_this);
          });
          return "<" + tag.name + strAttrs + ">" + strChildren.join('') + "</" + tag.name + ">";
        };
        _Visitor.prototype.visitText = function(text) {
          return text.value;
        };
        _Visitor.prototype.visitDeclaration = function(decl) {
          return "<?xml" + this._serializeAttributes(decl.attrs) + " ?>";
        };
        _Visitor.prototype._serializeAttributes = function(attrs) {
          var strAttrs = Object.keys(attrs).map(function(name) {
            return (name + "=\"" + attrs[name] + "\"");
          }).join(' ');
          return strAttrs.length > 0 ? ' ' + strAttrs : '';
        };
        _Visitor.prototype.visitDoctype = function(doctype) {
          return "<!DOCTYPE " + doctype.rootTag + " [\n" + doctype.dtd + "\n]>";
        };
        return _Visitor;
      }());
      _visitor = new _Visitor();
      Declaration = (function() {
        function Declaration(unescapedAttrs) {
          var _this = this;
          this.attrs = {};
          Object.keys(unescapedAttrs).forEach(function(k) {
            _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
          });
        }
        Declaration.prototype.visit = function(visitor) {
          return visitor.visitDeclaration(this);
        };
        return Declaration;
      }());
      $__export("Declaration", Declaration);
      Doctype = (function() {
        function Doctype(rootTag, dtd) {
          this.rootTag = rootTag;
          this.dtd = dtd;
        }
        ;
        Doctype.prototype.visit = function(visitor) {
          return visitor.visitDoctype(this);
        };
        return Doctype;
      }());
      $__export("Doctype", Doctype);
      Tag = (function() {
        function Tag(name, unescapedAttrs, children) {
          var _this = this;
          if (unescapedAttrs === void 0) {
            unescapedAttrs = {};
          }
          if (children === void 0) {
            children = [];
          }
          this.name = name;
          this.children = children;
          this.attrs = {};
          Object.keys(unescapedAttrs).forEach(function(k) {
            _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
          });
        }
        Tag.prototype.visit = function(visitor) {
          return visitor.visitTag(this);
        };
        return Tag;
      }());
      $__export("Tag", Tag);
      Text = (function() {
        function Text(unescapedValue) {
          this.value = _escapeXml(unescapedValue);
        }
        ;
        Text.prototype.visit = function(visitor) {
          return visitor.visitText(this);
        };
        return Text;
      }());
      $__export("Text", Text);
      CR = (function(_super) {
        __extends(CR, _super);
        function CR(ws) {
          if (ws === void 0) {
            ws = 0;
          }
          _super.call(this, "\n" + new Array(ws + 1).join(' '));
        }
        return CR;
      }(Text));
      $__export("CR", CR);
      _ESCAPED_CHARS = [[/&/g, '&amp;'], [/"/g, '&quot;'], [/'/g, '&apos;'], [/</g, '&lt;'], [/>/g, '&gt;']];
    }
  };
});

$__System.register("45", ["12", "4f"], function($__export) {
  "use strict";
  var ListWrapper,
      xml,
      _MESSAGES_TAG,
      _MESSAGE_TAG,
      _PLACEHOLDER_TAG,
      _EXEMPLE_TAG,
      _DOCTYPE,
      Xmb,
      _Visitor;
  return {
    setters: [function($__m) {
      ListWrapper = $__m.ListWrapper;
    }, function($__m) {
      xml = $__m;
    }],
    execute: function() {
      _MESSAGES_TAG = 'messagebundle';
      _MESSAGE_TAG = 'msg';
      _PLACEHOLDER_TAG = 'ph';
      _EXEMPLE_TAG = 'ex';
      _DOCTYPE = "<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>";
      Xmb = (function() {
        function Xmb() {}
        Xmb.prototype.write = function(messageMap) {
          var visitor = new _Visitor();
          var rootNode = new xml.Tag(_MESSAGES_TAG);
          Object.keys(messageMap).forEach(function(id) {
            var message = messageMap[id];
            var attrs = {id: id};
            if (message.description) {
              attrs['desc'] = message.description;
            }
            if (message.meaning) {
              attrs['meaning'] = message.meaning;
            }
            rootNode.children.push(new xml.CR(2), new xml.Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes)));
          });
          rootNode.children.push(new xml.CR());
          return xml.serialize([new xml.Declaration({
            version: '1.0',
            encoding: 'UTF-8'
          }), new xml.CR(), new xml.Doctype(_MESSAGES_TAG, _DOCTYPE), new xml.CR(), rootNode, new xml.CR()]);
        };
        Xmb.prototype.load = function(content, url, messageBundle) {
          throw new Error('Unsupported');
        };
        return Xmb;
      }());
      $__export("Xmb", Xmb);
      _Visitor = (function() {
        function _Visitor() {}
        _Visitor.prototype.visitText = function(text, context) {
          return [new xml.Text(text.value)];
        };
        _Visitor.prototype.visitContainer = function(container, context) {
          var _this = this;
          var nodes = [];
          container.children.forEach(function(node) {
            return nodes.push.apply(nodes, node.visit(_this));
          });
          return nodes;
        };
        _Visitor.prototype.visitIcu = function(icu, context) {
          var _this = this;
          var nodes = [new xml.Text("{" + icu.expression + ", " + icu.type + ", ")];
          Object.keys(icu.cases).forEach(function(c) {
            nodes.push.apply(nodes, [new xml.Text(c + " {")].concat(icu.cases[c].visit(_this), [new xml.Text("} ")]));
          });
          nodes.push(new xml.Text("}"));
          return nodes;
        };
        _Visitor.prototype.visitTagPlaceholder = function(ph, context) {
          var startEx = new xml.Tag(_EXEMPLE_TAG, {}, [new xml.Text("<" + ph.tag + ">")]);
          var startTagPh = new xml.Tag(_PLACEHOLDER_TAG, {name: ph.startName}, [startEx]);
          if (ph.isVoid) {
            return [startTagPh];
          }
          var closeEx = new xml.Tag(_EXEMPLE_TAG, {}, [new xml.Text("</" + ph.tag + ">")]);
          var closeTagPh = new xml.Tag(_PLACEHOLDER_TAG, {name: ph.closeName}, [closeEx]);
          return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
        };
        _Visitor.prototype.visitPlaceholder = function(ph, context) {
          return [new xml.Tag(_PLACEHOLDER_TAG, {name: ph.name})];
        };
        _Visitor.prototype.visitIcuPlaceholder = function(ph, context) {
          return [new xml.Tag(_PLACEHOLDER_TAG, {name: ph.name})];
        };
        _Visitor.prototype.serialize = function(nodes) {
          var _this = this;
          return ListWrapper.flatten(nodes.map(function(node) {
            return node.visit(_this);
          }));
        };
        return _Visitor;
      }());
    }
  };
});

$__System.register("50", ["2f"], function($__export) {
  "use strict";
  var TagContentType,
      XmlTagDefinition,
      _TAG_DEFINITION;
  function getXmlTagDefinition(tagName) {
    return _TAG_DEFINITION;
  }
  $__export("getXmlTagDefinition", getXmlTagDefinition);
  return {
    setters: [function($__m) {
      TagContentType = $__m.TagContentType;
    }],
    execute: function() {
      XmlTagDefinition = (function() {
        function XmlTagDefinition() {
          this.closedByParent = false;
          this.contentType = TagContentType.PARSABLE_DATA;
          this.isVoid = false;
          this.ignoreFirstLf = false;
          this.canSelfClose = true;
        }
        XmlTagDefinition.prototype.requireExtraParent = function(currentParent) {
          return false;
        };
        XmlTagDefinition.prototype.isClosedByChild = function(name) {
          return false;
        };
        return XmlTagDefinition;
      }());
      $__export("XmlTagDefinition", XmlTagDefinition);
      _TAG_DEFINITION = new XmlTagDefinition();
    }
  };
});

$__System.register("4d", ["41", "50"], function($__export) {
  "use strict";
  var __extends,
      Parser,
      getXmlTagDefinition,
      XmlParser;
  return {
    setters: [function($__m) {
      Parser = $__m.Parser;
      $__export({
        ParseTreeResult: $__m.ParseTreeResult,
        TreeError: $__m.TreeError
      });
    }, function($__m) {
      getXmlTagDefinition = $__m.getXmlTagDefinition;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      XmlParser = (function(_super) {
        __extends(XmlParser, _super);
        function XmlParser() {
          _super.call(this, getXmlTagDefinition);
        }
        XmlParser.prototype.parse = function(source, url, parseExpansionForms) {
          if (parseExpansionForms === void 0) {
            parseExpansionForms = false;
          }
          return _super.prototype.parse.call(this, source, url, parseExpansionForms, null);
        };
        return XmlParser;
      }(Parser));
      $__export("XmlParser", XmlParser);
    }
  };
});

$__System.register("4c", ["1a"], function($__export) {
  "use strict";
  var __extends,
      ParseError,
      I18nError;
  return {
    setters: [function($__m) {
      ParseError = $__m.ParseError;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      I18nError = (function(_super) {
        __extends(I18nError, _super);
        function I18nError(span, msg) {
          _super.call(this, span, msg);
        }
        return I18nError;
      }(ParseError));
      $__export("I18nError", I18nError);
    }
  };
});

$__System.register("4e", [], function($__export) {
  "use strict";
  function extractPlaceholders(messageBundle) {
    var messageMap = messageBundle.getMessageMap();
    var placeholders = {};
    Object.keys(messageMap).forEach(function(msgId) {
      placeholders[msgId] = messageMap[msgId].placeholders;
    });
    return placeholders;
  }
  function extractPlaceholderToIds(messageBundle) {
    var messageMap = messageBundle.getMessageMap();
    var placeholderToIds = {};
    Object.keys(messageMap).forEach(function(msgId) {
      placeholderToIds[msgId] = messageMap[msgId].placeholderToMsgIds;
    });
    return placeholderToIds;
  }
  $__export("extractPlaceholders", extractPlaceholders);
  $__export("extractPlaceholderToIds", extractPlaceholderToIds);
  return {
    setters: [],
    execute: function() {}
  };
});

$__System.register("46", ["2a", "4d", "4c", "4e"], function($__export) {
  "use strict";
  var ml,
      XmlParser,
      I18nError,
      extractPlaceholderToIds,
      extractPlaceholders,
      _TRANSLATIONS_TAG,
      _TRANSLATION_TAG,
      _PLACEHOLDER_TAG,
      Xtb,
      _Visitor;
  return {
    setters: [function($__m) {
      ml = $__m;
    }, function($__m) {
      XmlParser = $__m.XmlParser;
    }, function($__m) {
      I18nError = $__m.I18nError;
    }, function($__m) {
      extractPlaceholderToIds = $__m.extractPlaceholderToIds;
      extractPlaceholders = $__m.extractPlaceholders;
    }],
    execute: function() {
      _TRANSLATIONS_TAG = 'translationbundle';
      _TRANSLATION_TAG = 'translation';
      _PLACEHOLDER_TAG = 'ph';
      Xtb = (function() {
        function Xtb(_htmlParser, _interpolationConfig) {
          this._htmlParser = _htmlParser;
          this._interpolationConfig = _interpolationConfig;
        }
        Xtb.prototype.write = function(messageMap) {
          throw new Error('Unsupported');
        };
        Xtb.prototype.load = function(content, url, messageBundle) {
          var _this = this;
          var result = new XmlParser().parse(content, url);
          if (result.errors.length) {
            throw new Error("xtb parse errors:\n" + result.errors.join('\n'));
          }
          var _a = new _Visitor().parse(result.rootNodes, messageBundle),
              messages = _a.messages,
              errors = _a.errors;
          if (errors.length) {
            throw new Error("xtb parse errors:\n" + errors.join('\n'));
          }
          var messageMap = {};
          var parseErrors = [];
          Object.keys(messages).forEach(function(id) {
            var res = _this._htmlParser.parse(messages[id], url, true, _this._interpolationConfig);
            parseErrors.push.apply(parseErrors, res.errors);
            messageMap[id] = res.rootNodes;
          });
          if (parseErrors.length) {
            throw new Error("xtb parse errors:\n" + parseErrors.join('\n'));
          }
          return messageMap;
        };
        return Xtb;
      }());
      $__export("Xtb", Xtb);
      _Visitor = (function() {
        function _Visitor() {}
        _Visitor.prototype.parse = function(nodes, messageBundle) {
          var _this = this;
          this._messageNodes = [];
          this._translatedMessages = {};
          this._bundleDepth = 0;
          this._translationDepth = 0;
          this._errors = [];
          ml.visitAll(this, nodes, null);
          var messageMap = messageBundle.getMessageMap();
          var placeholders = extractPlaceholders(messageBundle);
          var placeholderToIds = extractPlaceholderToIds(messageBundle);
          this._messageNodes.filter(function(message) {
            return messageMap.hasOwnProperty(message[0]);
          }).sort(function(a, b) {
            if (Object.keys(messageMap[a[0]].placeholderToMsgIds).length == 0) {
              return -1;
            }
            if (Object.keys(messageMap[b[0]].placeholderToMsgIds).length == 0) {
              return 1;
            }
            return 0;
          }).forEach(function(message) {
            var id = message[0];
            _this._placeholders = placeholders[id] || {};
            _this._placeholderToIds = placeholderToIds[id] || {};
            _this._translatedMessages[id] = ml.visitAll(_this, message[1]).join('');
          });
          return {
            messages: this._translatedMessages,
            errors: this._errors
          };
        };
        _Visitor.prototype.visitElement = function(element, context) {
          switch (element.name) {
            case _TRANSLATIONS_TAG:
              this._bundleDepth++;
              if (this._bundleDepth > 1) {
                this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested");
              }
              ml.visitAll(this, element.children, null);
              this._bundleDepth--;
              break;
            case _TRANSLATION_TAG:
              this._translationDepth++;
              if (this._translationDepth > 1) {
                this._addError(element, "<" + _TRANSLATION_TAG + "> elements can not be nested");
              }
              var idAttr = element.attrs.find(function(attr) {
                return attr.name === 'id';
              });
              if (!idAttr) {
                this._addError(element, "<" + _TRANSLATION_TAG + "> misses the \"id\" attribute");
              } else {
                this._messageNodes.push([idAttr.value, element.children]);
              }
              this._translationDepth--;
              break;
            case _PLACEHOLDER_TAG:
              var nameAttr = element.attrs.find(function(attr) {
                return attr.name === 'name';
              });
              if (!nameAttr) {
                this._addError(element, "<" + _PLACEHOLDER_TAG + "> misses the \"name\" attribute");
              } else {
                var name_1 = nameAttr.value;
                if (this._placeholders.hasOwnProperty(name_1)) {
                  return this._placeholders[name_1];
                }
                if (this._placeholderToIds.hasOwnProperty(name_1) && this._translatedMessages.hasOwnProperty(this._placeholderToIds[name_1])) {
                  return this._translatedMessages[this._placeholderToIds[name_1]];
                }
                this._addError(element, "The placeholder \"" + name_1 + "\" does not exists in the source message");
              }
              break;
            default:
              this._addError(element, 'Unexpected tag');
          }
        };
        _Visitor.prototype.visitAttribute = function(attribute, context) {
          throw new Error('unreachable code');
        };
        _Visitor.prototype.visitText = function(text, context) {
          return text.value;
        };
        _Visitor.prototype.visitComment = function(comment, context) {
          return '';
        };
        _Visitor.prototype.visitExpansion = function(expansion, context) {
          var _this = this;
          var strCases = expansion.cases.map(function(c) {
            return c.visit(_this, null);
          });
          return "{" + expansion.switchValue + ", " + expansion.type + ", strCases.join(' ')}";
        };
        _Visitor.prototype.visitExpansionCase = function(expansionCase, context) {
          return expansionCase.value + " {" + ml.visitAll(this, expansionCase.expression, null) + "}";
        };
        _Visitor.prototype._addError = function(node, message) {
          this._errors.push(new I18nError(node.sourceSpan, message));
        };
        return _Visitor;
      }());
    }
  };
});

$__System.register("3a", ["2c", "43", "44", "45", "46"], function($__export) {
  "use strict";
  return {
    setters: [function($__m) {
      $__export({I18NHtmlParser: $__m.I18NHtmlParser});
    }, function($__m) {
      $__export({MessageBundle: $__m.MessageBundle});
    }, function($__m) {
      $__export({Xliff: $__m.Xliff});
    }, function($__m) {
      $__export({Xmb: $__m.Xmb});
    }, function($__m) {
      $__export({Xtb: $__m.Xtb});
    }],
    execute: function() {}
  };
});

$__System.register("3d", [], function($__export) {
  "use strict";
  var ResourceLoader;
  return {
    setters: [],
    execute: function() {
      ResourceLoader = (function() {
        function ResourceLoader() {}
        ResourceLoader.prototype.get = function(url) {
          return null;
        };
        return ResourceLoader;
      }());
      $__export("ResourceLoader", ResourceLoader);
    }
  };
});

$__System.register("33", ["16"], function($__export) {
  "use strict";
  var isBlank,
      StyleWithImports,
      _cssImportRe,
      _urlWithSchemaRe;
  function isStyleUrlResolvable(url) {
    if (isBlank(url) || url.length === 0 || url[0] == '/')
      return false;
    var schemeMatch = url.match(_urlWithSchemaRe);
    return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
  }
  function extractStyleUrls(resolver, baseUrl, cssText) {
    var foundUrls = [];
    var modifiedCssText = cssText.replace(_cssImportRe, function() {
      var m = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        m[_i - 0] = arguments[_i];
      }
      var url = m[1] || m[2];
      if (!isStyleUrlResolvable(url)) {
        return m[0];
      }
      foundUrls.push(resolver.resolve(baseUrl, url));
      return '';
    });
    return new StyleWithImports(modifiedCssText, foundUrls);
  }
  $__export("isStyleUrlResolvable", isStyleUrlResolvable);
  $__export("extractStyleUrls", extractStyleUrls);
  return {
    setters: [function($__m) {
      isBlank = $__m.isBlank;
    }],
    execute: function() {
      StyleWithImports = (function() {
        function StyleWithImports(style, styleUrls) {
          this.style = style;
          this.styleUrls = styleUrls;
        }
        return StyleWithImports;
      }());
      $__export("StyleWithImports", StyleWithImports);
      _cssImportRe = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
      _urlWithSchemaRe = /^([^:/?#]+):/;
    }
  };
});

$__System.register("36", ["2f"], function($__export) {
  "use strict";
  var splitNsName,
      NG_CONTENT_SELECT_ATTR,
      NG_CONTENT_ELEMENT,
      LINK_ELEMENT,
      LINK_STYLE_REL_ATTR,
      LINK_STYLE_HREF_ATTR,
      LINK_STYLE_REL_VALUE,
      STYLE_ELEMENT,
      SCRIPT_ELEMENT,
      NG_NON_BINDABLE_ATTR,
      NG_PROJECT_AS,
      PreparsedElementType,
      PreparsedElement;
  function preparseElement(ast) {
    var selectAttr = null;
    var hrefAttr = null;
    var relAttr = null;
    var nonBindable = false;
    var projectAs = null;
    ast.attrs.forEach(function(attr) {
      var lcAttrName = attr.name.toLowerCase();
      if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
        selectAttr = attr.value;
      } else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
        hrefAttr = attr.value;
      } else if (lcAttrName == LINK_STYLE_REL_ATTR) {
        relAttr = attr.value;
      } else if (attr.name == NG_NON_BINDABLE_ATTR) {
        nonBindable = true;
      } else if (attr.name == NG_PROJECT_AS) {
        if (attr.value.length > 0) {
          projectAs = attr.value;
        }
      }
    });
    selectAttr = normalizeNgContentSelect(selectAttr);
    var nodeName = ast.name.toLowerCase();
    var type = PreparsedElementType.OTHER;
    if (splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
      type = PreparsedElementType.NG_CONTENT;
    } else if (nodeName == STYLE_ELEMENT) {
      type = PreparsedElementType.STYLE;
    } else if (nodeName == SCRIPT_ELEMENT) {
      type = PreparsedElementType.SCRIPT;
    } else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
      type = PreparsedElementType.STYLESHEET;
    }
    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
  }
  function normalizeNgContentSelect(selectAttr) {
    if (selectAttr === null || selectAttr.length === 0) {
      return '*';
    }
    return selectAttr;
  }
  $__export("preparseElement", preparseElement);
  return {
    setters: [function($__m) {
      splitNsName = $__m.splitNsName;
    }],
    execute: function() {
      NG_CONTENT_SELECT_ATTR = 'select';
      NG_CONTENT_ELEMENT = 'ng-content';
      LINK_ELEMENT = 'link';
      LINK_STYLE_REL_ATTR = 'rel';
      LINK_STYLE_HREF_ATTR = 'href';
      LINK_STYLE_REL_VALUE = 'stylesheet';
      STYLE_ELEMENT = 'style';
      SCRIPT_ELEMENT = 'script';
      NG_NON_BINDABLE_ATTR = 'ngNonBindable';
      NG_PROJECT_AS = 'ngProjectAs';
      $__export("PreparsedElementType", PreparsedElementType);
      (function(PreparsedElementType) {
        PreparsedElementType[PreparsedElementType["NG_CONTENT"] = 0] = "NG_CONTENT";
        PreparsedElementType[PreparsedElementType["STYLE"] = 1] = "STYLE";
        PreparsedElementType[PreparsedElementType["STYLESHEET"] = 2] = "STYLESHEET";
        PreparsedElementType[PreparsedElementType["SCRIPT"] = 3] = "SCRIPT";
        PreparsedElementType[PreparsedElementType["OTHER"] = 4] = "OTHER";
      })(PreparsedElementType || ($__export("PreparsedElementType", PreparsedElementType = {})));
      PreparsedElement = (function() {
        function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
          this.type = type;
          this.selectAttr = selectAttr;
          this.hrefAttr = hrefAttr;
          this.nonBindable = nonBindable;
          this.projectAs = projectAs;
        }
        return PreparsedElement;
      }());
      $__export("PreparsedElement", PreparsedElement);
    }
  };
});

$__System.register("23", ["c", "11", "22", "12", "16", "2a", "2d", "2e", "3d", "33", "36", "3f", "20"], function($__export) {
  "use strict";
  var Injectable,
      ViewEncapsulation,
      CompileDirectiveMetadata,
      CompileStylesheetMetadata,
      CompileTemplateMetadata,
      CompilerConfig,
      MapWrapper,
      isBlank,
      isPresent,
      html,
      HtmlParser,
      InterpolationConfig,
      ResourceLoader,
      extractStyleUrls,
      isStyleUrlResolvable,
      PreparsedElementType,
      preparseElement,
      UrlResolver,
      SyncAsyncResult,
      DirectiveNormalizer,
      TemplatePreparseVisitor;
  function _cloneDirectiveWithTemplate(directive, template) {
    return new CompileDirectiveMetadata({
      type: directive.type,
      isComponent: directive.isComponent,
      selector: directive.selector,
      exportAs: directive.exportAs,
      changeDetection: directive.changeDetection,
      inputs: directive.inputs,
      outputs: directive.outputs,
      hostListeners: directive.hostListeners,
      hostProperties: directive.hostProperties,
      hostAttributes: directive.hostAttributes,
      providers: directive.providers,
      viewProviders: directive.viewProviders,
      queries: directive.queries,
      viewQueries: directive.viewQueries,
      entryComponents: directive.entryComponents,
      template: template
    });
  }
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
      ViewEncapsulation = $__m.ViewEncapsulation;
    }, function($__m) {
      CompileDirectiveMetadata = $__m.CompileDirectiveMetadata;
      CompileStylesheetMetadata = $__m.CompileStylesheetMetadata;
      CompileTemplateMetadata = $__m.CompileTemplateMetadata;
    }, function($__m) {
      CompilerConfig = $__m.CompilerConfig;
    }, function($__m) {
      MapWrapper = $__m.MapWrapper;
    }, function($__m) {
      isBlank = $__m.isBlank;
      isPresent = $__m.isPresent;
    }, function($__m) {
      html = $__m;
    }, function($__m) {
      HtmlParser = $__m.HtmlParser;
    }, function($__m) {
      InterpolationConfig = $__m.InterpolationConfig;
    }, function($__m) {
      ResourceLoader = $__m.ResourceLoader;
    }, function($__m) {
      extractStyleUrls = $__m.extractStyleUrls;
      isStyleUrlResolvable = $__m.isStyleUrlResolvable;
    }, function($__m) {
      PreparsedElementType = $__m.PreparsedElementType;
      preparseElement = $__m.preparseElement;
    }, function($__m) {
      UrlResolver = $__m.UrlResolver;
    }, function($__m) {
      SyncAsyncResult = $__m.SyncAsyncResult;
    }],
    execute: function() {
      DirectiveNormalizer = (function() {
        function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {
          this._resourceLoader = _resourceLoader;
          this._urlResolver = _urlResolver;
          this._htmlParser = _htmlParser;
          this._config = _config;
          this._resourceLoaderCache = new Map();
        }
        DirectiveNormalizer.prototype.clearCache = function() {
          this._resourceLoaderCache.clear();
        };
        DirectiveNormalizer.prototype.clearCacheFor = function(normalizedDirective) {
          var _this = this;
          if (!normalizedDirective.isComponent) {
            return;
          }
          this._resourceLoaderCache.delete(normalizedDirective.template.templateUrl);
          normalizedDirective.template.externalStylesheets.forEach(function(stylesheet) {
            _this._resourceLoaderCache.delete(stylesheet.moduleUrl);
          });
        };
        DirectiveNormalizer.prototype._fetch = function(url) {
          var result = this._resourceLoaderCache.get(url);
          if (!result) {
            result = this._resourceLoader.get(url);
            this._resourceLoaderCache.set(url, result);
          }
          return result;
        };
        DirectiveNormalizer.prototype.normalizeDirective = function(directive) {
          var _this = this;
          if (!directive.isComponent) {
            return new SyncAsyncResult(directive, Promise.resolve(directive));
          }
          var normalizedTemplateSync = null;
          var normalizedTemplateAsync;
          if (isPresent(directive.template.template)) {
            normalizedTemplateSync = this.normalizeTemplateSync(directive.type, directive.template);
            normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);
          } else if (directive.template.templateUrl) {
            normalizedTemplateAsync = this.normalizeTemplateAsync(directive.type, directive.template);
          } else {
            throw new Error("No template specified for component " + directive.type.name);
          }
          if (normalizedTemplateSync && normalizedTemplateSync.styleUrls.length === 0) {
            var normalizedDirective = _cloneDirectiveWithTemplate(directive, normalizedTemplateSync);
            return new SyncAsyncResult(normalizedDirective, Promise.resolve(normalizedDirective));
          } else {
            return new SyncAsyncResult(null, normalizedTemplateAsync.then(function(normalizedTemplate) {
              return _this.normalizeExternalStylesheets(normalizedTemplate);
            }).then(function(normalizedTemplate) {
              return _cloneDirectiveWithTemplate(directive, normalizedTemplate);
            }));
          }
        };
        DirectiveNormalizer.prototype.normalizeTemplateSync = function(directiveType, template) {
          return this.normalizeLoadedTemplate(directiveType, template, template.template, directiveType.moduleUrl);
        };
        DirectiveNormalizer.prototype.normalizeTemplateAsync = function(directiveType, template) {
          var _this = this;
          var templateUrl = this._urlResolver.resolve(directiveType.moduleUrl, template.templateUrl);
          return this._fetch(templateUrl).then(function(value) {
            return _this.normalizeLoadedTemplate(directiveType, template, value, templateUrl);
          });
        };
        DirectiveNormalizer.prototype.normalizeLoadedTemplate = function(directiveType, templateMeta, template, templateAbsUrl) {
          var interpolationConfig = InterpolationConfig.fromArray(templateMeta.interpolation);
          var rootNodesAndErrors = this._htmlParser.parse(template, directiveType.name, false, interpolationConfig);
          if (rootNodesAndErrors.errors.length > 0) {
            var errorString = rootNodesAndErrors.errors.join('\n');
            throw new Error("Template parse errors:\n" + errorString);
          }
          var templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
            styles: templateMeta.styles,
            styleUrls: templateMeta.styleUrls,
            moduleUrl: directiveType.moduleUrl
          }));
          var visitor = new TemplatePreparseVisitor();
          html.visitAll(visitor, rootNodesAndErrors.rootNodes);
          var templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
            styles: visitor.styles,
            styleUrls: visitor.styleUrls,
            moduleUrl: templateAbsUrl
          }));
          var encapsulation = templateMeta.encapsulation;
          if (isBlank(encapsulation)) {
            encapsulation = this._config.defaultEncapsulation;
          }
          var styles = templateMetadataStyles.styles.concat(templateStyles.styles);
          var styleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);
          if (encapsulation === ViewEncapsulation.Emulated && styles.length === 0 && styleUrls.length === 0) {
            encapsulation = ViewEncapsulation.None;
          }
          return new CompileTemplateMetadata({
            encapsulation: encapsulation,
            template: template,
            templateUrl: templateAbsUrl,
            styles: styles,
            styleUrls: styleUrls,
            externalStylesheets: templateMeta.externalStylesheets,
            ngContentSelectors: visitor.ngContentSelectors,
            animations: templateMeta.animations,
            interpolation: templateMeta.interpolation
          });
        };
        DirectiveNormalizer.prototype.normalizeExternalStylesheets = function(templateMeta) {
          return this._loadMissingExternalStylesheets(templateMeta.styleUrls).then(function(externalStylesheets) {
            return new CompileTemplateMetadata({
              encapsulation: templateMeta.encapsulation,
              template: templateMeta.template,
              templateUrl: templateMeta.templateUrl,
              styles: templateMeta.styles,
              styleUrls: templateMeta.styleUrls,
              externalStylesheets: externalStylesheets,
              ngContentSelectors: templateMeta.ngContentSelectors,
              animations: templateMeta.animations,
              interpolation: templateMeta.interpolation
            });
          });
        };
        DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function(styleUrls, loadedStylesheets) {
          var _this = this;
          if (loadedStylesheets === void 0) {
            loadedStylesheets = new Map();
          }
          return Promise.all(styleUrls.filter(function(styleUrl) {
            return !loadedStylesheets.has(styleUrl);
          }).map(function(styleUrl) {
            return _this._fetch(styleUrl).then(function(loadedStyle) {
              var stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({
                styles: [loadedStyle],
                moduleUrl: styleUrl
              }));
              loadedStylesheets.set(styleUrl, stylesheet);
              return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
            });
          })).then(function(_) {
            return MapWrapper.values(loadedStylesheets);
          });
        };
        DirectiveNormalizer.prototype.normalizeStylesheet = function(stylesheet) {
          var _this = this;
          var allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable).map(function(url) {
            return _this._urlResolver.resolve(stylesheet.moduleUrl, url);
          });
          var allStyles = stylesheet.styles.map(function(style) {
            var styleWithImports = extractStyleUrls(_this._urlResolver, stylesheet.moduleUrl, style);
            allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls);
            return styleWithImports.style;
          });
          return new CompileStylesheetMetadata({
            styles: allStyles,
            styleUrls: allStyleUrls,
            moduleUrl: stylesheet.moduleUrl
          });
        };
        DirectiveNormalizer.decorators = [{type: Injectable}];
        DirectiveNormalizer.ctorParameters = [{type: ResourceLoader}, {type: UrlResolver}, {type: HtmlParser}, {type: CompilerConfig}];
        return DirectiveNormalizer;
      }());
      $__export("DirectiveNormalizer", DirectiveNormalizer);
      TemplatePreparseVisitor = (function() {
        function TemplatePreparseVisitor() {
          this.ngContentSelectors = [];
          this.styles = [];
          this.styleUrls = [];
          this.ngNonBindableStackCount = 0;
        }
        TemplatePreparseVisitor.prototype.visitElement = function(ast, context) {
          var preparsedElement = preparseElement(ast);
          switch (preparsedElement.type) {
            case PreparsedElementType.NG_CONTENT:
              if (this.ngNonBindableStackCount === 0) {
                this.ngContentSelectors.push(preparsedElement.selectAttr);
              }
              break;
            case PreparsedElementType.STYLE:
              var textContent = '';
              ast.children.forEach(function(child) {
                if (child instanceof html.Text) {
                  textContent += child.value;
                }
              });
              this.styles.push(textContent);
              break;
            case PreparsedElementType.STYLESHEET:
              this.styleUrls.push(preparsedElement.hrefAttr);
              break;
            default:
              break;
          }
          if (preparsedElement.nonBindable) {
            this.ngNonBindableStackCount++;
          }
          html.visitAll(this, ast.children);
          if (preparsedElement.nonBindable) {
            this.ngNonBindableStackCount--;
          }
          return null;
        };
        TemplatePreparseVisitor.prototype.visitComment = function(ast, context) {
          return null;
        };
        TemplatePreparseVisitor.prototype.visitAttribute = function(ast, context) {
          return null;
        };
        TemplatePreparseVisitor.prototype.visitText = function(ast, context) {
          return null;
        };
        TemplatePreparseVisitor.prototype.visitExpansion = function(ast, context) {
          return null;
        };
        TemplatePreparseVisitor.prototype.visitExpansionCase = function(ast, context) {
          return null;
        };
        return TemplatePreparseVisitor;
      }());
    }
  };
});

$__System.register("38", ["c", "12", "16", "17", "20"], function($__export) {
  "use strict";
  var Component,
      Directive,
      HostBinding,
      HostListener,
      Injectable,
      Input,
      Output,
      Query,
      resolveForwardRef,
      StringMapWrapper,
      stringify,
      ReflectorReader,
      reflector,
      splitAtColon,
      DirectiveResolver;
  function isDirectiveMetadata(type) {
    return type instanceof Directive;
  }
  return {
    setters: [function($__m) {
      Component = $__m.Component;
      Directive = $__m.Directive;
      HostBinding = $__m.HostBinding;
      HostListener = $__m.HostListener;
      Injectable = $__m.Injectable;
      Input = $__m.Input;
      Output = $__m.Output;
      Query = $__m.Query;
      resolveForwardRef = $__m.resolveForwardRef;
    }, function($__m) {
      StringMapWrapper = $__m.StringMapWrapper;
    }, function($__m) {
      stringify = $__m.stringify;
    }, function($__m) {
      ReflectorReader = $__m.ReflectorReader;
      reflector = $__m.reflector;
    }, function($__m) {
      splitAtColon = $__m.splitAtColon;
    }],
    execute: function() {
      DirectiveResolver = (function() {
        function DirectiveResolver(_reflector) {
          if (_reflector === void 0) {
            _reflector = reflector;
          }
          this._reflector = _reflector;
        }
        DirectiveResolver.prototype.resolve = function(type, throwIfNotFound) {
          if (throwIfNotFound === void 0) {
            throwIfNotFound = true;
          }
          var typeMetadata = this._reflector.annotations(resolveForwardRef(type));
          if (typeMetadata) {
            var metadata = typeMetadata.find(isDirectiveMetadata);
            if (metadata) {
              var propertyMetadata = this._reflector.propMetadata(type);
              return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
            }
          }
          if (throwIfNotFound) {
            throw new Error("No Directive annotation found on " + stringify(type));
          }
          return null;
        };
        DirectiveResolver.prototype._mergeWithPropertyMetadata = function(dm, propertyMetadata, directiveType) {
          var inputs = [];
          var outputs = [];
          var host = {};
          var queries = {};
          Object.keys(propertyMetadata).forEach(function(propName) {
            propertyMetadata[propName].forEach(function(a) {
              if (a instanceof Input) {
                if (a.bindingPropertyName) {
                  inputs.push(propName + ": " + a.bindingPropertyName);
                } else {
                  inputs.push(propName);
                }
              } else if (a instanceof Output) {
                var output = a;
                if (output.bindingPropertyName) {
                  outputs.push(propName + ": " + output.bindingPropertyName);
                } else {
                  outputs.push(propName);
                }
              } else if (a instanceof HostBinding) {
                var hostBinding = a;
                if (hostBinding.hostPropertyName) {
                  var startWith = hostBinding.hostPropertyName[0];
                  if (startWith === '(') {
                    throw new Error("@HostBinding can not bind to events. Use @HostListener instead.");
                  } else if (startWith === '[') {
                    throw new Error("@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.");
                  }
                  host[("[" + hostBinding.hostPropertyName + "]")] = propName;
                } else {
                  host[("[" + propName + "]")] = propName;
                }
              } else if (a instanceof HostListener) {
                var hostListener = a;
                var args = hostListener.args || [];
                host[("(" + hostListener.eventName + ")")] = propName + "(" + args.join(',') + ")";
              } else if (a instanceof Query) {
                queries[propName] = a;
              }
            });
          });
          return this._merge(dm, inputs, outputs, host, queries, directiveType);
        };
        DirectiveResolver.prototype._extractPublicName = function(def) {
          return splitAtColon(def, [null, def])[1].trim();
        };
        DirectiveResolver.prototype._merge = function(directive, inputs, outputs, host, queries, directiveType) {
          var _this = this;
          var mergedInputs = inputs;
          if (directive.inputs) {
            var inputNames_1 = directive.inputs.map(function(def) {
              return _this._extractPublicName(def);
            });
            inputs.forEach(function(inputDef) {
              var publicName = _this._extractPublicName(inputDef);
              if (inputNames_1.indexOf(publicName) > -1) {
                throw new Error("Input '" + publicName + "' defined multiple times in '" + stringify(directiveType) + "'");
              }
            });
            mergedInputs.unshift.apply(mergedInputs, directive.inputs);
          }
          var mergedOutputs = outputs;
          if (directive.outputs) {
            var outputNames_1 = directive.outputs.map(function(def) {
              return _this._extractPublicName(def);
            });
            outputs.forEach(function(outputDef) {
              var publicName = _this._extractPublicName(outputDef);
              if (outputNames_1.indexOf(publicName) > -1) {
                throw new Error("Output event '" + publicName + "' defined multiple times in '" + stringify(directiveType) + "'");
              }
            });
            mergedOutputs.unshift.apply(mergedOutputs, directive.outputs);
          }
          var mergedHost = directive.host ? StringMapWrapper.merge(directive.host, host) : host;
          var mergedQueries = directive.queries ? StringMapWrapper.merge(directive.queries, queries) : queries;
          if (directive instanceof Component) {
            return new Component({
              selector: directive.selector,
              inputs: mergedInputs,
              outputs: mergedOutputs,
              host: mergedHost,
              exportAs: directive.exportAs,
              moduleId: directive.moduleId,
              queries: mergedQueries,
              changeDetection: directive.changeDetection,
              providers: directive.providers,
              viewProviders: directive.viewProviders,
              entryComponents: directive.entryComponents,
              template: directive.template,
              templateUrl: directive.templateUrl,
              styles: directive.styles,
              styleUrls: directive.styleUrls,
              encapsulation: directive.encapsulation,
              animations: directive.animations,
              interpolation: directive.interpolation
            });
          } else {
            return new Directive({
              selector: directive.selector,
              inputs: mergedInputs,
              outputs: mergedOutputs,
              host: mergedHost,
              exportAs: directive.exportAs,
              queries: mergedQueries,
              providers: directive.providers
            });
          }
        };
        DirectiveResolver.decorators = [{type: Injectable}];
        DirectiveResolver.ctorParameters = [{type: ReflectorReader}];
        return DirectiveResolver;
      }());
      $__export("DirectiveResolver", DirectiveResolver);
    }
  };
});

$__System.register("51", ["17"], function($__export) {
  "use strict";
  var LifecycleHooks,
      reflector;
  function hasLifecycleHook(hook, token) {
    return reflector.hasLifecycleHook(token, getHookName(hook));
  }
  function getHookName(hook) {
    switch (hook) {
      case LifecycleHooks.OnInit:
        return 'ngOnInit';
      case LifecycleHooks.OnDestroy:
        return 'ngOnDestroy';
      case LifecycleHooks.DoCheck:
        return 'ngDoCheck';
      case LifecycleHooks.OnChanges:
        return 'ngOnChanges';
      case LifecycleHooks.AfterContentInit:
        return 'ngAfterContentInit';
      case LifecycleHooks.AfterContentChecked:
        return 'ngAfterContentChecked';
      case LifecycleHooks.AfterViewInit:
        return 'ngAfterViewInit';
      case LifecycleHooks.AfterViewChecked:
        return 'ngAfterViewChecked';
    }
  }
  $__export("hasLifecycleHook", hasLifecycleHook);
  return {
    setters: [function($__m) {
      LifecycleHooks = $__m.LifecycleHooks;
      reflector = $__m.reflector;
    }],
    execute: function() {}
  };
});

$__System.register("3b", ["c", "16", "17"], function($__export) {
  "use strict";
  var Injectable,
      NgModule,
      isPresent,
      stringify,
      ReflectorReader,
      reflector,
      NgModuleResolver;
  function _isNgModuleMetadata(obj) {
    return obj instanceof NgModule;
  }
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
      NgModule = $__m.NgModule;
    }, function($__m) {
      isPresent = $__m.isPresent;
      stringify = $__m.stringify;
    }, function($__m) {
      ReflectorReader = $__m.ReflectorReader;
      reflector = $__m.reflector;
    }],
    execute: function() {
      NgModuleResolver = (function() {
        function NgModuleResolver(_reflector) {
          if (_reflector === void 0) {
            _reflector = reflector;
          }
          this._reflector = _reflector;
        }
        NgModuleResolver.prototype.resolve = function(type, throwIfNotFound) {
          if (throwIfNotFound === void 0) {
            throwIfNotFound = true;
          }
          var ngModuleMeta = this._reflector.annotations(type).find(_isNgModuleMetadata);
          if (isPresent(ngModuleMeta)) {
            return ngModuleMeta;
          } else {
            if (throwIfNotFound) {
              throw new Error("No NgModule metadata found for '" + stringify(type) + "'.");
            }
            return null;
          }
        };
        NgModuleResolver.decorators = [{type: Injectable}];
        NgModuleResolver.ctorParameters = [{type: ReflectorReader}];
        return NgModuleResolver;
      }());
      $__export("NgModuleResolver", NgModuleResolver);
    }
  };
});

$__System.register("3c", ["c", "16", "17"], function($__export) {
  "use strict";
  var Injectable,
      Pipe,
      resolveForwardRef,
      isPresent,
      stringify,
      ReflectorReader,
      reflector,
      PipeResolver;
  function _isPipeMetadata(type) {
    return type instanceof Pipe;
  }
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
      Pipe = $__m.Pipe;
      resolveForwardRef = $__m.resolveForwardRef;
    }, function($__m) {
      isPresent = $__m.isPresent;
      stringify = $__m.stringify;
    }, function($__m) {
      ReflectorReader = $__m.ReflectorReader;
      reflector = $__m.reflector;
    }],
    execute: function() {
      PipeResolver = (function() {
        function PipeResolver(_reflector) {
          if (_reflector === void 0) {
            _reflector = reflector;
          }
          this._reflector = _reflector;
        }
        PipeResolver.prototype.resolve = function(type, throwIfNotFound) {
          if (throwIfNotFound === void 0) {
            throwIfNotFound = true;
          }
          var metas = this._reflector.annotations(resolveForwardRef(type));
          if (isPresent(metas)) {
            var annotation = metas.find(_isPipeMetadata);
            if (isPresent(annotation)) {
              return annotation;
            }
          }
          if (throwIfNotFound) {
            throw new Error("No Pipe decorator found on " + stringify(type));
          }
          return null;
        };
        PipeResolver.decorators = [{type: Injectable}];
        PipeResolver.ctorParameters = [{type: ReflectorReader}];
        return PipeResolver;
      }());
      $__export("PipeResolver", PipeResolver);
    }
  };
});

$__System.register("25", ["c", "52", "11", "38", "16", "13", "51", "3b", "3c", "17", "31", "3f", "20"], function($__export) {
  "use strict";
  var __extends,
      AnimationAnimateMetadata,
      AnimationGroupMetadata,
      AnimationKeyframesSequenceMetadata,
      AnimationStateDeclarationMetadata,
      AnimationStateTransitionMetadata,
      AnimationStyleMetadata,
      AnimationWithStepsMetadata,
      Attribute,
      Component,
      Host,
      Inject,
      Injectable,
      Optional,
      Query,
      Self,
      SkipSelf,
      Type,
      resolveForwardRef,
      assertArrayOfStrings,
      assertInterpolationSymbols,
      cpl,
      DirectiveResolver,
      isBlank,
      isPresent,
      stringify,
      Identifiers,
      resolveIdentifierToken,
      hasLifecycleHook,
      NgModuleResolver,
      PipeResolver,
      LIFECYCLE_HOOKS_VALUES,
      ReflectorReader,
      reflector,
      ElementSchemaRegistry,
      getUrlScheme,
      MODULE_SUFFIX,
      ValueTransformer,
      sanitizeIdentifier,
      visitValue,
      CompileMetadataResolver,
      _CompileValueConverter;
  function getTransitiveModules(modules, includeImports, targetModules, visitedModules) {
    if (targetModules === void 0) {
      targetModules = [];
    }
    if (visitedModules === void 0) {
      visitedModules = new Set();
    }
    modules.forEach(function(ngModule) {
      if (!visitedModules.has(ngModule.type.reference)) {
        visitedModules.add(ngModule.type.reference);
        var nestedModules = includeImports ? ngModule.importedModules.concat(ngModule.exportedModules) : ngModule.exportedModules;
        getTransitiveModules(nestedModules, includeImports, targetModules, visitedModules);
        targetModules.push(ngModule);
      }
    });
    return targetModules;
  }
  function flattenArray(tree, out) {
    if (out === void 0) {
      out = [];
    }
    if (tree) {
      for (var i = 0; i < tree.length; i++) {
        var item = resolveForwardRef(tree[i]);
        if (Array.isArray(item)) {
          flattenArray(item, out);
        } else {
          out.push(item);
        }
      }
    }
    return out;
  }
  function isValidType(value) {
    return cpl.isStaticSymbol(value) || (value instanceof Type);
  }
  function staticTypeModuleUrl(value) {
    return cpl.isStaticSymbol(value) ? value.filePath : null;
  }
  function componentModuleUrl(reflector, type, cmpMetadata) {
    if (cpl.isStaticSymbol(type)) {
      return staticTypeModuleUrl(type);
    }
    var moduleId = cmpMetadata.moduleId;
    if (typeof moduleId === 'string') {
      var scheme = getUrlScheme(moduleId);
      return scheme ? moduleId : "package:" + moduleId + MODULE_SUFFIX;
    } else if (moduleId !== null && moduleId !== void 0) {
      throw new Error(("moduleId should be a string in \"" + stringify(type) + "\". See https://goo.gl/wIDDiL for more information.\n") + "If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.");
    }
    return reflector.importUri(type);
  }
  function convertToCompileValue(value, targetIdentifiers) {
    return visitValue(value, new _CompileValueConverter(), targetIdentifiers);
  }
  return {
    setters: [function($__m) {
      AnimationAnimateMetadata = $__m.AnimationAnimateMetadata;
      AnimationGroupMetadata = $__m.AnimationGroupMetadata;
      AnimationKeyframesSequenceMetadata = $__m.AnimationKeyframesSequenceMetadata;
      AnimationStateDeclarationMetadata = $__m.AnimationStateDeclarationMetadata;
      AnimationStateTransitionMetadata = $__m.AnimationStateTransitionMetadata;
      AnimationStyleMetadata = $__m.AnimationStyleMetadata;
      AnimationWithStepsMetadata = $__m.AnimationWithStepsMetadata;
      Attribute = $__m.Attribute;
      Component = $__m.Component;
      Host = $__m.Host;
      Inject = $__m.Inject;
      Injectable = $__m.Injectable;
      Optional = $__m.Optional;
      Query = $__m.Query;
      Self = $__m.Self;
      SkipSelf = $__m.SkipSelf;
      Type = $__m.Type;
      resolveForwardRef = $__m.resolveForwardRef;
    }, function($__m) {
      assertArrayOfStrings = $__m.assertArrayOfStrings;
      assertInterpolationSymbols = $__m.assertInterpolationSymbols;
    }, function($__m) {
      cpl = $__m;
    }, function($__m) {
      DirectiveResolver = $__m.DirectiveResolver;
    }, function($__m) {
      isBlank = $__m.isBlank;
      isPresent = $__m.isPresent;
      stringify = $__m.stringify;
    }, function($__m) {
      Identifiers = $__m.Identifiers;
      resolveIdentifierToken = $__m.resolveIdentifierToken;
    }, function($__m) {
      hasLifecycleHook = $__m.hasLifecycleHook;
    }, function($__m) {
      NgModuleResolver = $__m.NgModuleResolver;
    }, function($__m) {
      PipeResolver = $__m.PipeResolver;
    }, function($__m) {
      LIFECYCLE_HOOKS_VALUES = $__m.LIFECYCLE_HOOKS_VALUES;
      ReflectorReader = $__m.ReflectorReader;
      reflector = $__m.reflector;
    }, function($__m) {
      ElementSchemaRegistry = $__m.ElementSchemaRegistry;
    }, function($__m) {
      getUrlScheme = $__m.getUrlScheme;
    }, function($__m) {
      MODULE_SUFFIX = $__m.MODULE_SUFFIX;
      ValueTransformer = $__m.ValueTransformer;
      sanitizeIdentifier = $__m.sanitizeIdentifier;
      visitValue = $__m.visitValue;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      CompileMetadataResolver = (function() {
        function CompileMetadataResolver(_ngModuleResolver, _directiveResolver, _pipeResolver, _schemaRegistry, _reflector) {
          if (_reflector === void 0) {
            _reflector = reflector;
          }
          this._ngModuleResolver = _ngModuleResolver;
          this._directiveResolver = _directiveResolver;
          this._pipeResolver = _pipeResolver;
          this._schemaRegistry = _schemaRegistry;
          this._reflector = _reflector;
          this._directiveCache = new Map();
          this._pipeCache = new Map();
          this._ngModuleCache = new Map();
          this._ngModuleOfTypes = new Map();
          this._anonymousTypes = new Map();
          this._anonymousTypeIndex = 0;
        }
        CompileMetadataResolver.prototype.sanitizeTokenName = function(token) {
          var identifier = stringify(token);
          if (identifier.indexOf('(') >= 0) {
            var found = this._anonymousTypes.get(token);
            if (!found) {
              this._anonymousTypes.set(token, this._anonymousTypeIndex++);
              found = this._anonymousTypes.get(token);
            }
            identifier = "anonymous_token_" + found + "_";
          }
          return sanitizeIdentifier(identifier);
        };
        CompileMetadataResolver.prototype.clearCacheFor = function(type) {
          this._directiveCache.delete(type);
          this._pipeCache.delete(type);
          this._ngModuleOfTypes.delete(type);
          this._ngModuleCache.clear();
        };
        CompileMetadataResolver.prototype.clearCache = function() {
          this._directiveCache.clear();
          this._pipeCache.clear();
          this._ngModuleCache.clear();
          this._ngModuleOfTypes.clear();
        };
        CompileMetadataResolver.prototype.getAnimationEntryMetadata = function(entry) {
          var _this = this;
          var defs = entry.definitions.map(function(def) {
            return _this.getAnimationStateMetadata(def);
          });
          return new cpl.CompileAnimationEntryMetadata(entry.name, defs);
        };
        CompileMetadataResolver.prototype.getAnimationStateMetadata = function(value) {
          if (value instanceof AnimationStateDeclarationMetadata) {
            var styles = this.getAnimationStyleMetadata(value.styles);
            return new cpl.CompileAnimationStateDeclarationMetadata(value.stateNameExpr, styles);
          }
          if (value instanceof AnimationStateTransitionMetadata) {
            return new cpl.CompileAnimationStateTransitionMetadata(value.stateChangeExpr, this.getAnimationMetadata(value.steps));
          }
          return null;
        };
        CompileMetadataResolver.prototype.getAnimationStyleMetadata = function(value) {
          return new cpl.CompileAnimationStyleMetadata(value.offset, value.styles);
        };
        CompileMetadataResolver.prototype.getAnimationMetadata = function(value) {
          var _this = this;
          if (value instanceof AnimationStyleMetadata) {
            return this.getAnimationStyleMetadata(value);
          }
          if (value instanceof AnimationKeyframesSequenceMetadata) {
            return new cpl.CompileAnimationKeyframesSequenceMetadata(value.steps.map(function(entry) {
              return _this.getAnimationStyleMetadata(entry);
            }));
          }
          if (value instanceof AnimationAnimateMetadata) {
            var animateData = this.getAnimationMetadata(value.styles);
            return new cpl.CompileAnimationAnimateMetadata(value.timings, animateData);
          }
          if (value instanceof AnimationWithStepsMetadata) {
            var steps = value.steps.map(function(step) {
              return _this.getAnimationMetadata(step);
            });
            if (value instanceof AnimationGroupMetadata) {
              return new cpl.CompileAnimationGroupMetadata(steps);
            }
            return new cpl.CompileAnimationSequenceMetadata(steps);
          }
          return null;
        };
        CompileMetadataResolver.prototype.getDirectiveMetadata = function(directiveType, throwIfNotFound) {
          var _this = this;
          if (throwIfNotFound === void 0) {
            throwIfNotFound = true;
          }
          directiveType = resolveForwardRef(directiveType);
          var meta = this._directiveCache.get(directiveType);
          if (!meta) {
            var dirMeta = this._directiveResolver.resolve(directiveType, throwIfNotFound);
            if (!dirMeta) {
              return null;
            }
            var templateMeta = null;
            var changeDetectionStrategy = null;
            var viewProviders = [];
            var moduleUrl = staticTypeModuleUrl(directiveType);
            var entryComponentMetadata = [];
            var selector = dirMeta.selector;
            if (dirMeta instanceof Component) {
              assertArrayOfStrings('styles', dirMeta.styles);
              assertArrayOfStrings('styleUrls', dirMeta.styleUrls);
              assertInterpolationSymbols('interpolation', dirMeta.interpolation);
              var animations = dirMeta.animations ? dirMeta.animations.map(function(e) {
                return _this.getAnimationEntryMetadata(e);
              }) : null;
              templateMeta = new cpl.CompileTemplateMetadata({
                encapsulation: dirMeta.encapsulation,
                template: dirMeta.template,
                templateUrl: dirMeta.templateUrl,
                styles: dirMeta.styles,
                styleUrls: dirMeta.styleUrls,
                animations: animations,
                interpolation: dirMeta.interpolation
              });
              changeDetectionStrategy = dirMeta.changeDetection;
              if (dirMeta.viewProviders) {
                viewProviders = this.getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, "viewProviders for \"" + stringify(directiveType) + "\"");
              }
              moduleUrl = componentModuleUrl(this._reflector, directiveType, dirMeta);
              if (dirMeta.entryComponents) {
                entryComponentMetadata = flattenArray(dirMeta.entryComponents).map(function(type) {
                  return _this.getTypeMetadata(type, staticTypeModuleUrl(type));
                }).concat(entryComponentMetadata);
              }
              if (!selector) {
                selector = this._schemaRegistry.getDefaultComponentElementName();
              }
            } else {
              if (!selector) {
                throw new Error("Directive " + stringify(directiveType) + " has no selector, please add it!");
              }
            }
            var providers = [];
            if (isPresent(dirMeta.providers)) {
              providers = this.getProvidersMetadata(dirMeta.providers, entryComponentMetadata, "providers for \"" + stringify(directiveType) + "\"");
            }
            var queries = [];
            var viewQueries = [];
            if (isPresent(dirMeta.queries)) {
              queries = this.getQueriesMetadata(dirMeta.queries, false, directiveType);
              viewQueries = this.getQueriesMetadata(dirMeta.queries, true, directiveType);
            }
            meta = cpl.CompileDirectiveMetadata.create({
              selector: selector,
              exportAs: dirMeta.exportAs,
              isComponent: !!templateMeta,
              type: this.getTypeMetadata(directiveType, moduleUrl),
              template: templateMeta,
              changeDetection: changeDetectionStrategy,
              inputs: dirMeta.inputs,
              outputs: dirMeta.outputs,
              host: dirMeta.host,
              providers: providers,
              viewProviders: viewProviders,
              queries: queries,
              viewQueries: viewQueries,
              entryComponents: entryComponentMetadata
            });
            this._directiveCache.set(directiveType, meta);
          }
          return meta;
        };
        CompileMetadataResolver.prototype.getNgModuleMetadata = function(moduleType, throwIfNotFound) {
          var _this = this;
          if (throwIfNotFound === void 0) {
            throwIfNotFound = true;
          }
          moduleType = resolveForwardRef(moduleType);
          var compileMeta = this._ngModuleCache.get(moduleType);
          if (!compileMeta) {
            var meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);
            if (!meta) {
              return null;
            }
            var declaredDirectives_1 = [];
            var exportedDirectives_1 = [];
            var declaredPipes_1 = [];
            var exportedPipes_1 = [];
            var importedModules_1 = [];
            var exportedModules_1 = [];
            var providers_1 = [];
            var entryComponents_1 = [];
            var bootstrapComponents = [];
            var schemas = [];
            if (meta.imports) {
              flattenArray(meta.imports).forEach(function(importedType) {
                var importedModuleType;
                if (isValidType(importedType)) {
                  importedModuleType = importedType;
                } else if (importedType && importedType.ngModule) {
                  var moduleWithProviders = importedType;
                  importedModuleType = moduleWithProviders.ngModule;
                  if (moduleWithProviders.providers) {
                    providers_1.push.apply(providers_1, _this.getProvidersMetadata(moduleWithProviders.providers, entryComponents_1, "provider for the NgModule '" + stringify(importedModuleType) + "'"));
                  }
                }
                if (importedModuleType) {
                  var importedMeta = _this.getNgModuleMetadata(importedModuleType, false);
                  if (importedMeta === null) {
                    throw new Error("Unexpected " + _this._getTypeDescriptor(importedType) + " '" + stringify(importedType) + "' imported by the module '" + stringify(moduleType) + "'");
                  }
                  importedModules_1.push(importedMeta);
                } else {
                  throw new Error("Unexpected value '" + stringify(importedType) + "' imported by the module '" + stringify(moduleType) + "'");
                }
              });
            }
            if (meta.exports) {
              flattenArray(meta.exports).forEach(function(exportedType) {
                if (!isValidType(exportedType)) {
                  throw new Error("Unexpected value '" + stringify(exportedType) + "' exported by the module '" + stringify(moduleType) + "'");
                }
                var exportedDirMeta;
                var exportedPipeMeta;
                var exportedModuleMeta;
                if (exportedDirMeta = _this.getDirectiveMetadata(exportedType, false)) {
                  exportedDirectives_1.push(exportedDirMeta);
                } else if (exportedPipeMeta = _this.getPipeMetadata(exportedType, false)) {
                  exportedPipes_1.push(exportedPipeMeta);
                } else if (exportedModuleMeta = _this.getNgModuleMetadata(exportedType, false)) {
                  exportedModules_1.push(exportedModuleMeta);
                } else {
                  throw new Error("Unexpected " + _this._getTypeDescriptor(exportedType) + " '" + stringify(exportedType) + "' exported by the module '" + stringify(moduleType) + "'");
                }
              });
            }
            var transitiveModule_1 = this._getTransitiveNgModuleMetadata(importedModules_1, exportedModules_1);
            if (meta.declarations) {
              flattenArray(meta.declarations).forEach(function(declaredType) {
                if (!isValidType(declaredType)) {
                  throw new Error("Unexpected value '" + stringify(declaredType) + "' declared by the module '" + stringify(moduleType) + "'");
                }
                var declaredDirMeta;
                var declaredPipeMeta;
                if (declaredDirMeta = _this.getDirectiveMetadata(declaredType, false)) {
                  _this._addDirectiveToModule(declaredDirMeta, moduleType, transitiveModule_1, declaredDirectives_1, true);
                } else if (declaredPipeMeta = _this.getPipeMetadata(declaredType, false)) {
                  _this._addPipeToModule(declaredPipeMeta, moduleType, transitiveModule_1, declaredPipes_1, true);
                } else {
                  throw new Error("Unexpected " + _this._getTypeDescriptor(declaredType) + " '" + stringify(declaredType) + "' declared by the module '" + stringify(moduleType) + "'");
                }
              });
            }
            if (meta.providers) {
              providers_1.push.apply(providers_1, this.getProvidersMetadata(meta.providers, entryComponents_1, "provider for the NgModule '" + stringify(moduleType) + "'"));
            }
            if (meta.entryComponents) {
              entryComponents_1.push.apply(entryComponents_1, flattenArray(meta.entryComponents).map(function(type) {
                return _this.getTypeMetadata(type, staticTypeModuleUrl(type));
              }));
            }
            if (meta.bootstrap) {
              var typeMetadata = flattenArray(meta.bootstrap).map(function(type) {
                if (!isValidType(type)) {
                  throw new Error("Unexpected value '" + stringify(type) + "' used in the bootstrap property of module '" + stringify(moduleType) + "'");
                }
                return _this.getTypeMetadata(type, staticTypeModuleUrl(type));
              });
              bootstrapComponents.push.apply(bootstrapComponents, typeMetadata);
            }
            entryComponents_1.push.apply(entryComponents_1, bootstrapComponents);
            if (meta.schemas) {
              schemas.push.apply(schemas, flattenArray(meta.schemas));
            }
            (_a = transitiveModule_1.entryComponents).push.apply(_a, entryComponents_1);
            (_b = transitiveModule_1.providers).push.apply(_b, providers_1);
            compileMeta = new cpl.CompileNgModuleMetadata({
              type: this.getTypeMetadata(moduleType, staticTypeModuleUrl(moduleType)),
              providers: providers_1,
              entryComponents: entryComponents_1,
              bootstrapComponents: bootstrapComponents,
              schemas: schemas,
              declaredDirectives: declaredDirectives_1,
              exportedDirectives: exportedDirectives_1,
              declaredPipes: declaredPipes_1,
              exportedPipes: exportedPipes_1,
              importedModules: importedModules_1,
              exportedModules: exportedModules_1,
              transitiveModule: transitiveModule_1,
              id: meta.id
            });
            transitiveModule_1.modules.push(compileMeta);
            this._verifyModule(compileMeta);
            this._ngModuleCache.set(moduleType, compileMeta);
          }
          return compileMeta;
          var _a,
              _b;
        };
        CompileMetadataResolver.prototype._verifyModule = function(moduleMeta) {
          moduleMeta.exportedDirectives.forEach(function(dirMeta) {
            if (!moduleMeta.transitiveModule.directivesSet.has(dirMeta.type.reference)) {
              throw new Error("Can't export directive " + stringify(dirMeta.type.reference) + " from " + stringify(moduleMeta.type.reference) + " as it was neither declared nor imported!");
            }
          });
          moduleMeta.exportedPipes.forEach(function(pipeMeta) {
            if (!moduleMeta.transitiveModule.pipesSet.has(pipeMeta.type.reference)) {
              throw new Error("Can't export pipe " + stringify(pipeMeta.type.reference) + " from " + stringify(moduleMeta.type.reference) + " as it was neither declared nor imported!");
            }
          });
        };
        CompileMetadataResolver.prototype._getTypeDescriptor = function(type) {
          if (this._directiveResolver.resolve(type, false)) {
            return 'directive';
          }
          if (this._pipeResolver.resolve(type, false)) {
            return 'pipe';
          }
          if (this._ngModuleResolver.resolve(type, false)) {
            return 'module';
          }
          if (type.provide) {
            return 'provider';
          }
          return 'value';
        };
        CompileMetadataResolver.prototype._addTypeToModule = function(type, moduleType) {
          var oldModule = this._ngModuleOfTypes.get(type);
          if (oldModule && oldModule !== moduleType) {
            throw new Error(("Type " + stringify(type) + " is part of the declarations of 2 modules: " + stringify(oldModule) + " and " + stringify(moduleType) + "! ") + ("Please consider moving " + stringify(type) + " to a higher module that imports " + stringify(oldModule) + " and " + stringify(moduleType) + ". ") + ("You can also create a new NgModule that exports and includes " + stringify(type) + " then import that NgModule in " + stringify(oldModule) + " and " + stringify(moduleType) + "."));
          }
          this._ngModuleOfTypes.set(type, moduleType);
        };
        CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function(importedModules, exportedModules) {
          var transitiveModules = getTransitiveModules(importedModules.concat(exportedModules), true);
          var providers = flattenArray(transitiveModules.map(function(ngModule) {
            return ngModule.providers;
          }));
          var entryComponents = flattenArray(transitiveModules.map(function(ngModule) {
            return ngModule.entryComponents;
          }));
          var transitiveExportedModules = getTransitiveModules(importedModules, false);
          var directives = flattenArray(transitiveExportedModules.map(function(ngModule) {
            return ngModule.exportedDirectives;
          }));
          var pipes = flattenArray(transitiveExportedModules.map(function(ngModule) {
            return ngModule.exportedPipes;
          }));
          return new cpl.TransitiveCompileNgModuleMetadata(transitiveModules, providers, entryComponents, directives, pipes);
        };
        CompileMetadataResolver.prototype._addDirectiveToModule = function(dirMeta, moduleType, transitiveModule, declaredDirectives, force) {
          if (force === void 0) {
            force = false;
          }
          if (force || !transitiveModule.directivesSet.has(dirMeta.type.reference)) {
            transitiveModule.directivesSet.add(dirMeta.type.reference);
            transitiveModule.directives.push(dirMeta);
            declaredDirectives.push(dirMeta);
            this._addTypeToModule(dirMeta.type.reference, moduleType);
            return true;
          }
          return false;
        };
        CompileMetadataResolver.prototype._addPipeToModule = function(pipeMeta, moduleType, transitiveModule, declaredPipes, force) {
          if (force === void 0) {
            force = false;
          }
          if (force || !transitiveModule.pipesSet.has(pipeMeta.type.reference)) {
            transitiveModule.pipesSet.add(pipeMeta.type.reference);
            transitiveModule.pipes.push(pipeMeta);
            declaredPipes.push(pipeMeta);
            this._addTypeToModule(pipeMeta.type.reference, moduleType);
            return true;
          }
          return false;
        };
        CompileMetadataResolver.prototype.getTypeMetadata = function(type, moduleUrl, dependencies) {
          if (dependencies === void 0) {
            dependencies = null;
          }
          type = resolveForwardRef(type);
          return new cpl.CompileTypeMetadata({
            name: this.sanitizeTokenName(type),
            moduleUrl: moduleUrl,
            reference: type,
            diDeps: this.getDependenciesMetadata(type, dependencies),
            lifecycleHooks: LIFECYCLE_HOOKS_VALUES.filter(function(hook) {
              return hasLifecycleHook(hook, type);
            })
          });
        };
        CompileMetadataResolver.prototype.getFactoryMetadata = function(factory, moduleUrl, dependencies) {
          if (dependencies === void 0) {
            dependencies = null;
          }
          factory = resolveForwardRef(factory);
          return new cpl.CompileFactoryMetadata({
            name: this.sanitizeTokenName(factory),
            moduleUrl: moduleUrl,
            reference: factory,
            diDeps: this.getDependenciesMetadata(factory, dependencies)
          });
        };
        CompileMetadataResolver.prototype.getPipeMetadata = function(pipeType, throwIfNotFound) {
          if (throwIfNotFound === void 0) {
            throwIfNotFound = true;
          }
          pipeType = resolveForwardRef(pipeType);
          var meta = this._pipeCache.get(pipeType);
          if (!meta) {
            var pipeMeta = this._pipeResolver.resolve(pipeType, throwIfNotFound);
            if (!pipeMeta) {
              return null;
            }
            meta = new cpl.CompilePipeMetadata({
              type: this.getTypeMetadata(pipeType, staticTypeModuleUrl(pipeType)),
              name: pipeMeta.name,
              pure: pipeMeta.pure
            });
            this._pipeCache.set(pipeType, meta);
          }
          return meta;
        };
        CompileMetadataResolver.prototype.getDependenciesMetadata = function(typeOrFunc, dependencies) {
          var _this = this;
          var hasUnknownDeps = false;
          var params = dependencies || this._reflector.parameters(typeOrFunc) || [];
          var dependenciesMetadata = params.map(function(param) {
            var isAttribute = false;
            var isHost = false;
            var isSelf = false;
            var isSkipSelf = false;
            var isOptional = false;
            var query = null;
            var viewQuery = null;
            var token = null;
            if (Array.isArray(param)) {
              param.forEach(function(paramEntry) {
                if (paramEntry instanceof Host) {
                  isHost = true;
                } else if (paramEntry instanceof Self) {
                  isSelf = true;
                } else if (paramEntry instanceof SkipSelf) {
                  isSkipSelf = true;
                } else if (paramEntry instanceof Optional) {
                  isOptional = true;
                } else if (paramEntry instanceof Attribute) {
                  isAttribute = true;
                  token = paramEntry.attributeName;
                } else if (paramEntry instanceof Query) {
                  if (paramEntry.isViewQuery) {
                    viewQuery = paramEntry;
                  } else {
                    query = paramEntry;
                  }
                } else if (paramEntry instanceof Inject) {
                  token = paramEntry.token;
                } else if (isValidType(paramEntry) && isBlank(token)) {
                  token = paramEntry;
                }
              });
            } else {
              token = param;
            }
            if (isBlank(token)) {
              hasUnknownDeps = true;
              return null;
            }
            return new cpl.CompileDiDependencyMetadata({
              isAttribute: isAttribute,
              isHost: isHost,
              isSelf: isSelf,
              isSkipSelf: isSkipSelf,
              isOptional: isOptional,
              query: query ? _this.getQueryMetadata(query, null, typeOrFunc) : null,
              viewQuery: viewQuery ? _this.getQueryMetadata(viewQuery, null, typeOrFunc) : null,
              token: _this.getTokenMetadata(token)
            });
          });
          if (hasUnknownDeps) {
            var depsTokens = dependenciesMetadata.map(function(dep) {
              return dep ? stringify(dep.token) : '?';
            }).join(', ');
            throw new Error("Can't resolve all parameters for " + stringify(typeOrFunc) + ": (" + depsTokens + ").");
          }
          return dependenciesMetadata;
        };
        CompileMetadataResolver.prototype.getTokenMetadata = function(token) {
          token = resolveForwardRef(token);
          var compileToken;
          if (typeof token === 'string') {
            compileToken = new cpl.CompileTokenMetadata({value: token});
          } else {
            compileToken = new cpl.CompileTokenMetadata({identifier: new cpl.CompileIdentifierMetadata({
                reference: token,
                name: this.sanitizeTokenName(token),
                moduleUrl: staticTypeModuleUrl(token)
              })});
          }
          return compileToken;
        };
        CompileMetadataResolver.prototype.getProvidersMetadata = function(providers, targetEntryComponents, debugInfo) {
          var _this = this;
          var compileProviders = [];
          providers.forEach(function(provider, providerIdx) {
            provider = resolveForwardRef(provider);
            if (provider && (typeof provider === 'undefined' ? 'undefined' : $traceurRuntime.typeof(provider)) == 'object' && provider.hasOwnProperty('provide')) {
              provider = new cpl.ProviderMeta(provider.provide, provider);
            }
            var compileProvider;
            if (Array.isArray(provider)) {
              compileProvider = _this.getProvidersMetadata(provider, targetEntryComponents, debugInfo);
            } else if (provider instanceof cpl.ProviderMeta) {
              var tokenMeta = _this.getTokenMetadata(provider.token);
              if (tokenMeta.reference === resolveIdentifierToken(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS).reference) {
                targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(provider));
              } else {
                compileProvider = _this.getProviderMetadata(provider);
              }
            } else if (isValidType(provider)) {
              compileProvider = _this.getTypeMetadata(provider, staticTypeModuleUrl(provider));
            } else {
              var providersInfo = providers.reduce(function(soFar, seenProvider, seenProviderIdx) {
                if (seenProviderIdx < providerIdx) {
                  soFar.push("" + stringify(seenProvider));
                } else if (seenProviderIdx == providerIdx) {
                  soFar.push("?" + stringify(seenProvider) + "?");
                } else if (seenProviderIdx == providerIdx + 1) {
                  soFar.push('...');
                }
                return soFar;
              }, []).join(', ');
              throw new Error("Invalid " + (debugInfo ? debugInfo : 'provider') + " - only instances of Provider and Type are allowed, got: [" + providersInfo + "]");
            }
            if (compileProvider) {
              compileProviders.push(compileProvider);
            }
          });
          return compileProviders;
        };
        CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function(provider) {
          var _this = this;
          var components = [];
          var collectedIdentifiers = [];
          if (provider.useFactory || provider.useExisting || provider.useClass) {
            throw new Error("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!");
          }
          if (!provider.multi) {
            throw new Error("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!");
          }
          convertToCompileValue(provider.useValue, collectedIdentifiers);
          collectedIdentifiers.forEach(function(identifier) {
            var dirMeta = _this.getDirectiveMetadata(identifier.reference, false);
            if (dirMeta) {
              components.push(dirMeta.type);
            }
          });
          return components;
        };
        CompileMetadataResolver.prototype.getProviderMetadata = function(provider) {
          var compileDeps;
          var compileTypeMetadata = null;
          var compileFactoryMetadata = null;
          if (provider.useClass) {
            compileTypeMetadata = this.getTypeMetadata(provider.useClass, staticTypeModuleUrl(provider.useClass), provider.dependencies);
            compileDeps = compileTypeMetadata.diDeps;
          } else if (provider.useFactory) {
            compileFactoryMetadata = this.getFactoryMetadata(provider.useFactory, staticTypeModuleUrl(provider.useFactory), provider.dependencies);
            compileDeps = compileFactoryMetadata.diDeps;
          }
          return new cpl.CompileProviderMetadata({
            token: this.getTokenMetadata(provider.token),
            useClass: compileTypeMetadata,
            useValue: convertToCompileValue(provider.useValue, []),
            useFactory: compileFactoryMetadata,
            useExisting: provider.useExisting ? this.getTokenMetadata(provider.useExisting) : null,
            deps: compileDeps,
            multi: provider.multi
          });
        };
        CompileMetadataResolver.prototype.getQueriesMetadata = function(queries, isViewQuery, directiveType) {
          var _this = this;
          var res = [];
          Object.keys(queries).forEach(function(propertyName) {
            var query = queries[propertyName];
            if (query.isViewQuery === isViewQuery) {
              res.push(_this.getQueryMetadata(query, propertyName, directiveType));
            }
          });
          return res;
        };
        CompileMetadataResolver.prototype._queryVarBindings = function(selector) {
          return selector.split(/\s*,\s*/);
        };
        CompileMetadataResolver.prototype.getQueryMetadata = function(q, propertyName, typeOrFunc) {
          var _this = this;
          var selectors;
          if (typeof q.selector === 'string') {
            selectors = this._queryVarBindings(q.selector).map(function(varName) {
              return _this.getTokenMetadata(varName);
            });
          } else {
            if (!q.selector) {
              throw new Error("Can't construct a query for the property \"" + propertyName + "\" of \"" + stringify(typeOrFunc) + "\" since the query selector wasn't defined.");
            }
            selectors = [this.getTokenMetadata(q.selector)];
          }
          return new cpl.CompileQueryMetadata({
            selectors: selectors,
            first: q.first,
            descendants: q.descendants,
            propertyName: propertyName,
            read: q.read ? this.getTokenMetadata(q.read) : null
          });
        };
        CompileMetadataResolver.decorators = [{type: Injectable}];
        CompileMetadataResolver.ctorParameters = [{type: NgModuleResolver}, {type: DirectiveResolver}, {type: PipeResolver}, {type: ElementSchemaRegistry}, {type: ReflectorReader}];
        return CompileMetadataResolver;
      }());
      $__export("CompileMetadataResolver", CompileMetadataResolver);
      _CompileValueConverter = (function(_super) {
        __extends(_CompileValueConverter, _super);
        function _CompileValueConverter() {
          _super.apply(this, arguments);
        }
        _CompileValueConverter.prototype.visitOther = function(value, targetIdentifiers) {
          var identifier;
          if (cpl.isStaticSymbol(value)) {
            identifier = new cpl.CompileIdentifierMetadata({
              name: value.name,
              moduleUrl: value.filePath,
              reference: value
            });
          } else {
            identifier = new cpl.CompileIdentifierMetadata({reference: value});
          }
          targetIdentifiers.push(identifier);
          return identifier;
        };
        return _CompileValueConverter;
      }(ValueTransformer));
    }
  };
});

$__System.register("2a", [], function($__export) {
  "use strict";
  var Text,
      Expansion,
      ExpansionCase,
      Attribute,
      Element,
      Comment;
  function visitAll(visitor, nodes, context) {
    if (context === void 0) {
      context = null;
    }
    var result = [];
    var visit = visitor.visit ? function(ast) {
      return visitor.visit(ast, context) || ast.visit(visitor, context);
    } : function(ast) {
      return ast.visit(visitor, context);
    };
    nodes.forEach(function(ast) {
      var astResult = visit(ast);
      if (astResult) {
        result.push(astResult);
      }
    });
    return result;
  }
  $__export("visitAll", visitAll);
  return {
    setters: [],
    execute: function() {
      Text = (function() {
        function Text(value, sourceSpan) {
          this.value = value;
          this.sourceSpan = sourceSpan;
        }
        Text.prototype.visit = function(visitor, context) {
          return visitor.visitText(this, context);
        };
        return Text;
      }());
      $__export("Text", Text);
      Expansion = (function() {
        function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
          this.switchValue = switchValue;
          this.type = type;
          this.cases = cases;
          this.sourceSpan = sourceSpan;
          this.switchValueSourceSpan = switchValueSourceSpan;
        }
        Expansion.prototype.visit = function(visitor, context) {
          return visitor.visitExpansion(this, context);
        };
        return Expansion;
      }());
      $__export("Expansion", Expansion);
      ExpansionCase = (function() {
        function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
          this.value = value;
          this.expression = expression;
          this.sourceSpan = sourceSpan;
          this.valueSourceSpan = valueSourceSpan;
          this.expSourceSpan = expSourceSpan;
        }
        ExpansionCase.prototype.visit = function(visitor, context) {
          return visitor.visitExpansionCase(this, context);
        };
        return ExpansionCase;
      }());
      $__export("ExpansionCase", ExpansionCase);
      Attribute = (function() {
        function Attribute(name, value, sourceSpan, valueSpan) {
          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
          this.valueSpan = valueSpan;
        }
        Attribute.prototype.visit = function(visitor, context) {
          return visitor.visitAttribute(this, context);
        };
        return Attribute;
      }());
      $__export("Attribute", Attribute);
      Element = (function() {
        function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
          this.name = name;
          this.attrs = attrs;
          this.children = children;
          this.sourceSpan = sourceSpan;
          this.startSourceSpan = startSourceSpan;
          this.endSourceSpan = endSourceSpan;
        }
        Element.prototype.visit = function(visitor, context) {
          return visitor.visitElement(this, context);
        };
        return Element;
      }());
      $__export("Element", Element);
      Comment = (function() {
        function Comment(value, sourceSpan) {
          this.value = value;
          this.sourceSpan = sourceSpan;
        }
        Comment.prototype.visit = function(visitor, context) {
          return visitor.visitComment(this, context);
        };
        return Comment;
      }());
      $__export("Comment", Comment);
    }
  };
});

$__System.register("53", ["54", "1a", "2e", "2f"], function($__export) {
  "use strict";
  var __extends,
      chars,
      ParseError,
      ParseLocation,
      ParseSourceFile,
      ParseSourceSpan,
      DEFAULT_INTERPOLATION_CONFIG,
      NAMED_ENTITIES,
      TagContentType,
      TokenType,
      Token,
      TokenError,
      TokenizeResult,
      _CR_OR_CRLF_REGEXP,
      _ControlFlowError,
      _Tokenizer;
  function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {
    if (tokenizeExpansionForms === void 0) {
      tokenizeExpansionForms = false;
    }
    if (interpolationConfig === void 0) {
      interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
    }
    return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig).tokenize();
  }
  function _unexpectedCharacterErrorMsg(charCode) {
    var char = charCode === chars.$EOF ? 'EOF' : String.fromCharCode(charCode);
    return "Unexpected character \"" + char + "\"";
  }
  function _unknownEntityErrorMsg(entitySrc) {
    return "Unknown entity \"" + entitySrc + "\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax";
  }
  function isNotWhitespace(code) {
    return !chars.isWhitespace(code) || code === chars.$EOF;
  }
  function isNameEnd(code) {
    return chars.isWhitespace(code) || code === chars.$GT || code === chars.$SLASH || code === chars.$SQ || code === chars.$DQ || code === chars.$EQ;
  }
  function isPrefixEnd(code) {
    return (code < chars.$a || chars.$z < code) && (code < chars.$A || chars.$Z < code) && (code < chars.$0 || code > chars.$9);
  }
  function isDigitEntityEnd(code) {
    return code == chars.$SEMICOLON || code == chars.$EOF || !chars.isAsciiHexDigit(code);
  }
  function isNamedEntityEnd(code) {
    return code == chars.$SEMICOLON || code == chars.$EOF || !chars.isAsciiLetter(code);
  }
  function isExpansionFormStart(input, offset, interpolationConfig) {
    var isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;
    return input.charCodeAt(offset) == chars.$LBRACE && !isInterpolationStart;
  }
  function isExpansionCaseStart(peek) {
    return peek === chars.$EQ || chars.isAsciiLetter(peek);
  }
  function compareCharCodeCaseInsensitive(code1, code2) {
    return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
  }
  function toUpperCaseCharCode(code) {
    return code >= chars.$a && code <= chars.$z ? code - chars.$a + chars.$A : code;
  }
  function mergeTextTokens(srcTokens) {
    var dstTokens = [];
    var lastDstToken;
    for (var i = 0; i < srcTokens.length; i++) {
      var token = srcTokens[i];
      if (lastDstToken && lastDstToken.type == TokenType.TEXT && token.type == TokenType.TEXT) {
        lastDstToken.parts[0] += token.parts[0];
        lastDstToken.sourceSpan.end = token.sourceSpan.end;
      } else {
        lastDstToken = token;
        dstTokens.push(lastDstToken);
      }
    }
    return dstTokens;
  }
  $__export("tokenize", tokenize);
  return {
    setters: [function($__m) {
      chars = $__m;
    }, function($__m) {
      ParseError = $__m.ParseError;
      ParseLocation = $__m.ParseLocation;
      ParseSourceFile = $__m.ParseSourceFile;
      ParseSourceSpan = $__m.ParseSourceSpan;
    }, function($__m) {
      DEFAULT_INTERPOLATION_CONFIG = $__m.DEFAULT_INTERPOLATION_CONFIG;
    }, function($__m) {
      NAMED_ENTITIES = $__m.NAMED_ENTITIES;
      TagContentType = $__m.TagContentType;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      $__export("TokenType", TokenType);
      (function(TokenType) {
        TokenType[TokenType["TAG_OPEN_START"] = 0] = "TAG_OPEN_START";
        TokenType[TokenType["TAG_OPEN_END"] = 1] = "TAG_OPEN_END";
        TokenType[TokenType["TAG_OPEN_END_VOID"] = 2] = "TAG_OPEN_END_VOID";
        TokenType[TokenType["TAG_CLOSE"] = 3] = "TAG_CLOSE";
        TokenType[TokenType["TEXT"] = 4] = "TEXT";
        TokenType[TokenType["ESCAPABLE_RAW_TEXT"] = 5] = "ESCAPABLE_RAW_TEXT";
        TokenType[TokenType["RAW_TEXT"] = 6] = "RAW_TEXT";
        TokenType[TokenType["COMMENT_START"] = 7] = "COMMENT_START";
        TokenType[TokenType["COMMENT_END"] = 8] = "COMMENT_END";
        TokenType[TokenType["CDATA_START"] = 9] = "CDATA_START";
        TokenType[TokenType["CDATA_END"] = 10] = "CDATA_END";
        TokenType[TokenType["ATTR_NAME"] = 11] = "ATTR_NAME";
        TokenType[TokenType["ATTR_VALUE"] = 12] = "ATTR_VALUE";
        TokenType[TokenType["DOC_TYPE"] = 13] = "DOC_TYPE";
        TokenType[TokenType["EXPANSION_FORM_START"] = 14] = "EXPANSION_FORM_START";
        TokenType[TokenType["EXPANSION_CASE_VALUE"] = 15] = "EXPANSION_CASE_VALUE";
        TokenType[TokenType["EXPANSION_CASE_EXP_START"] = 16] = "EXPANSION_CASE_EXP_START";
        TokenType[TokenType["EXPANSION_CASE_EXP_END"] = 17] = "EXPANSION_CASE_EXP_END";
        TokenType[TokenType["EXPANSION_FORM_END"] = 18] = "EXPANSION_FORM_END";
        TokenType[TokenType["EOF"] = 19] = "EOF";
      })(TokenType || ($__export("TokenType", TokenType = {})));
      Token = (function() {
        function Token(type, parts, sourceSpan) {
          this.type = type;
          this.parts = parts;
          this.sourceSpan = sourceSpan;
        }
        return Token;
      }());
      $__export("Token", Token);
      TokenError = (function(_super) {
        __extends(TokenError, _super);
        function TokenError(errorMsg, tokenType, span) {
          _super.call(this, span, errorMsg);
          this.tokenType = tokenType;
        }
        return TokenError;
      }(ParseError));
      $__export("TokenError", TokenError);
      TokenizeResult = (function() {
        function TokenizeResult(tokens, errors) {
          this.tokens = tokens;
          this.errors = errors;
        }
        return TokenizeResult;
      }());
      $__export("TokenizeResult", TokenizeResult);
      _CR_OR_CRLF_REGEXP = /\r\n?/g;
      _ControlFlowError = (function() {
        function _ControlFlowError(error) {
          this.error = error;
        }
        return _ControlFlowError;
      }());
      _Tokenizer = (function() {
        function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {
          if (_interpolationConfig === void 0) {
            _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
          }
          this._file = _file;
          this._getTagDefinition = _getTagDefinition;
          this._tokenizeIcu = _tokenizeIcu;
          this._interpolationConfig = _interpolationConfig;
          this._peek = -1;
          this._nextPeek = -1;
          this._index = -1;
          this._line = 0;
          this._column = -1;
          this._expansionCaseStack = [];
          this._inInterpolation = false;
          this.tokens = [];
          this.errors = [];
          this._input = _file.content;
          this._length = _file.content.length;
          this._advance();
        }
        _Tokenizer.prototype._processCarriageReturns = function(content) {
          return content.replace(_CR_OR_CRLF_REGEXP, '\n');
        };
        _Tokenizer.prototype.tokenize = function() {
          while (this._peek !== chars.$EOF) {
            var start = this._getLocation();
            try {
              if (this._attemptCharCode(chars.$LT)) {
                if (this._attemptCharCode(chars.$BANG)) {
                  if (this._attemptCharCode(chars.$LBRACKET)) {
                    this._consumeCdata(start);
                  } else if (this._attemptCharCode(chars.$MINUS)) {
                    this._consumeComment(start);
                  } else {
                    this._consumeDocType(start);
                  }
                } else if (this._attemptCharCode(chars.$SLASH)) {
                  this._consumeTagClose(start);
                } else {
                  this._consumeTagOpen(start);
                }
              } else if (!this._tokenizeIcu || !this._tokenizeExpansionForm()) {
                this._consumeText();
              }
            } catch (e) {
              if (e instanceof _ControlFlowError) {
                this.errors.push(e.error);
              } else {
                throw e;
              }
            }
          }
          this._beginToken(TokenType.EOF);
          this._endToken([]);
          return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
        };
        _Tokenizer.prototype._tokenizeExpansionForm = function() {
          if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
            this._consumeExpansionFormStart();
            return true;
          }
          if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {
            this._consumeExpansionCaseStart();
            return true;
          }
          if (this._peek === chars.$RBRACE) {
            if (this._isInExpansionCase()) {
              this._consumeExpansionCaseEnd();
              return true;
            }
            if (this._isInExpansionForm()) {
              this._consumeExpansionFormEnd();
              return true;
            }
          }
          return false;
        };
        _Tokenizer.prototype._getLocation = function() {
          return new ParseLocation(this._file, this._index, this._line, this._column);
        };
        _Tokenizer.prototype._getSpan = function(start, end) {
          if (start === void 0) {
            start = this._getLocation();
          }
          if (end === void 0) {
            end = this._getLocation();
          }
          return new ParseSourceSpan(start, end);
        };
        _Tokenizer.prototype._beginToken = function(type, start) {
          if (start === void 0) {
            start = this._getLocation();
          }
          this._currentTokenStart = start;
          this._currentTokenType = type;
        };
        _Tokenizer.prototype._endToken = function(parts, end) {
          if (end === void 0) {
            end = this._getLocation();
          }
          var token = new Token(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));
          this.tokens.push(token);
          this._currentTokenStart = null;
          this._currentTokenType = null;
          return token;
        };
        _Tokenizer.prototype._createError = function(msg, span) {
          if (this._isInExpansionForm()) {
            msg += " (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)";
          }
          var error = new TokenError(msg, this._currentTokenType, span);
          this._currentTokenStart = null;
          this._currentTokenType = null;
          return new _ControlFlowError(error);
        };
        _Tokenizer.prototype._advance = function() {
          if (this._index >= this._length) {
            throw this._createError(_unexpectedCharacterErrorMsg(chars.$EOF), this._getSpan());
          }
          if (this._peek === chars.$LF) {
            this._line++;
            this._column = 0;
          } else if (this._peek !== chars.$LF && this._peek !== chars.$CR) {
            this._column++;
          }
          this._index++;
          this._peek = this._index >= this._length ? chars.$EOF : this._input.charCodeAt(this._index);
          this._nextPeek = this._index + 1 >= this._length ? chars.$EOF : this._input.charCodeAt(this._index + 1);
        };
        _Tokenizer.prototype._attemptCharCode = function(charCode) {
          if (this._peek === charCode) {
            this._advance();
            return true;
          }
          return false;
        };
        _Tokenizer.prototype._attemptCharCodeCaseInsensitive = function(charCode) {
          if (compareCharCodeCaseInsensitive(this._peek, charCode)) {
            this._advance();
            return true;
          }
          return false;
        };
        _Tokenizer.prototype._requireCharCode = function(charCode) {
          var location = this._getLocation();
          if (!this._attemptCharCode(charCode)) {
            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
          }
        };
        _Tokenizer.prototype._attemptStr = function(chars) {
          var len = chars.length;
          if (this._index + len > this._length) {
            return false;
          }
          var initialPosition = this._savePosition();
          for (var i = 0; i < len; i++) {
            if (!this._attemptCharCode(chars.charCodeAt(i))) {
              this._restorePosition(initialPosition);
              return false;
            }
          }
          return true;
        };
        _Tokenizer.prototype._attemptStrCaseInsensitive = function(chars) {
          for (var i = 0; i < chars.length; i++) {
            if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
              return false;
            }
          }
          return true;
        };
        _Tokenizer.prototype._requireStr = function(chars) {
          var location = this._getLocation();
          if (!this._attemptStr(chars)) {
            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
          }
        };
        _Tokenizer.prototype._attemptCharCodeUntilFn = function(predicate) {
          while (!predicate(this._peek)) {
            this._advance();
          }
        };
        _Tokenizer.prototype._requireCharCodeUntilFn = function(predicate, len) {
          var start = this._getLocation();
          this._attemptCharCodeUntilFn(predicate);
          if (this._index - start.offset < len) {
            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
          }
        };
        _Tokenizer.prototype._attemptUntilChar = function(char) {
          while (this._peek !== char) {
            this._advance();
          }
        };
        _Tokenizer.prototype._readChar = function(decodeEntities) {
          if (decodeEntities && this._peek === chars.$AMPERSAND) {
            return this._decodeEntity();
          } else {
            var index = this._index;
            this._advance();
            return this._input[index];
          }
        };
        _Tokenizer.prototype._decodeEntity = function() {
          var start = this._getLocation();
          this._advance();
          if (this._attemptCharCode(chars.$HASH)) {
            var isHex = this._attemptCharCode(chars.$x) || this._attemptCharCode(chars.$X);
            var numberStart = this._getLocation().offset;
            this._attemptCharCodeUntilFn(isDigitEntityEnd);
            if (this._peek != chars.$SEMICOLON) {
              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
            }
            this._advance();
            var strNum = this._input.substring(numberStart, this._index - 1);
            try {
              var charCode = parseInt(strNum, isHex ? 16 : 10);
              return String.fromCharCode(charCode);
            } catch (e) {
              var entity = this._input.substring(start.offset + 1, this._index - 1);
              throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
            }
          } else {
            var startPosition = this._savePosition();
            this._attemptCharCodeUntilFn(isNamedEntityEnd);
            if (this._peek != chars.$SEMICOLON) {
              this._restorePosition(startPosition);
              return '&';
            }
            this._advance();
            var name_1 = this._input.substring(start.offset + 1, this._index - 1);
            var char = NAMED_ENTITIES[name_1];
            if (!char) {
              throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start));
            }
            return char;
          }
        };
        _Tokenizer.prototype._consumeRawText = function(decodeEntities, firstCharOfEnd, attemptEndRest) {
          var tagCloseStart;
          var textStart = this._getLocation();
          this._beginToken(decodeEntities ? TokenType.ESCAPABLE_RAW_TEXT : TokenType.RAW_TEXT, textStart);
          var parts = [];
          while (true) {
            tagCloseStart = this._getLocation();
            if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
              break;
            }
            if (this._index > tagCloseStart.offset) {
              parts.push(this._input.substring(tagCloseStart.offset, this._index));
            }
            while (this._peek !== firstCharOfEnd) {
              parts.push(this._readChar(decodeEntities));
            }
          }
          return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);
        };
        _Tokenizer.prototype._consumeComment = function(start) {
          var _this = this;
          this._beginToken(TokenType.COMMENT_START, start);
          this._requireCharCode(chars.$MINUS);
          this._endToken([]);
          var textToken = this._consumeRawText(false, chars.$MINUS, function() {
            return _this._attemptStr('->');
          });
          this._beginToken(TokenType.COMMENT_END, textToken.sourceSpan.end);
          this._endToken([]);
        };
        _Tokenizer.prototype._consumeCdata = function(start) {
          var _this = this;
          this._beginToken(TokenType.CDATA_START, start);
          this._requireStr('CDATA[');
          this._endToken([]);
          var textToken = this._consumeRawText(false, chars.$RBRACKET, function() {
            return _this._attemptStr(']>');
          });
          this._beginToken(TokenType.CDATA_END, textToken.sourceSpan.end);
          this._endToken([]);
        };
        _Tokenizer.prototype._consumeDocType = function(start) {
          this._beginToken(TokenType.DOC_TYPE, start);
          this._attemptUntilChar(chars.$GT);
          this._advance();
          this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
        };
        _Tokenizer.prototype._consumePrefixAndName = function() {
          var nameOrPrefixStart = this._index;
          var prefix = null;
          while (this._peek !== chars.$COLON && !isPrefixEnd(this._peek)) {
            this._advance();
          }
          var nameStart;
          if (this._peek === chars.$COLON) {
            this._advance();
            prefix = this._input.substring(nameOrPrefixStart, this._index - 1);
            nameStart = this._index;
          } else {
            nameStart = nameOrPrefixStart;
          }
          this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
          var name = this._input.substring(nameStart, this._index);
          return [prefix, name];
        };
        _Tokenizer.prototype._consumeTagOpen = function(start) {
          var savedPos = this._savePosition();
          var tagName;
          var lowercaseTagName;
          try {
            if (!chars.isAsciiLetter(this._peek)) {
              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
            }
            var nameStart = this._index;
            this._consumeTagOpenStart(start);
            tagName = this._input.substring(nameStart, this._index);
            lowercaseTagName = tagName.toLowerCase();
            this._attemptCharCodeUntilFn(isNotWhitespace);
            while (this._peek !== chars.$SLASH && this._peek !== chars.$GT) {
              this._consumeAttributeName();
              this._attemptCharCodeUntilFn(isNotWhitespace);
              if (this._attemptCharCode(chars.$EQ)) {
                this._attemptCharCodeUntilFn(isNotWhitespace);
                this._consumeAttributeValue();
              }
              this._attemptCharCodeUntilFn(isNotWhitespace);
            }
            this._consumeTagOpenEnd();
          } catch (e) {
            if (e instanceof _ControlFlowError) {
              this._restorePosition(savedPos);
              this._beginToken(TokenType.TEXT, start);
              this._endToken(['<']);
              return;
            }
            throw e;
          }
          var contentTokenType = this._getTagDefinition(tagName).contentType;
          if (contentTokenType === TagContentType.RAW_TEXT) {
            this._consumeRawTextWithTagClose(lowercaseTagName, false);
          } else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
            this._consumeRawTextWithTagClose(lowercaseTagName, true);
          }
        };
        _Tokenizer.prototype._consumeRawTextWithTagClose = function(lowercaseTagName, decodeEntities) {
          var _this = this;
          var textToken = this._consumeRawText(decodeEntities, chars.$LT, function() {
            if (!_this._attemptCharCode(chars.$SLASH))
              return false;
            _this._attemptCharCodeUntilFn(isNotWhitespace);
            if (!_this._attemptStrCaseInsensitive(lowercaseTagName))
              return false;
            _this._attemptCharCodeUntilFn(isNotWhitespace);
            return _this._attemptCharCode(chars.$GT);
          });
          this._beginToken(TokenType.TAG_CLOSE, textToken.sourceSpan.end);
          this._endToken([null, lowercaseTagName]);
        };
        _Tokenizer.prototype._consumeTagOpenStart = function(start) {
          this._beginToken(TokenType.TAG_OPEN_START, start);
          var parts = this._consumePrefixAndName();
          this._endToken(parts);
        };
        _Tokenizer.prototype._consumeAttributeName = function() {
          this._beginToken(TokenType.ATTR_NAME);
          var prefixAndName = this._consumePrefixAndName();
          this._endToken(prefixAndName);
        };
        _Tokenizer.prototype._consumeAttributeValue = function() {
          this._beginToken(TokenType.ATTR_VALUE);
          var value;
          if (this._peek === chars.$SQ || this._peek === chars.$DQ) {
            var quoteChar = this._peek;
            this._advance();
            var parts = [];
            while (this._peek !== quoteChar) {
              parts.push(this._readChar(true));
            }
            value = parts.join('');
            this._advance();
          } else {
            var valueStart = this._index;
            this._requireCharCodeUntilFn(isNameEnd, 1);
            value = this._input.substring(valueStart, this._index);
          }
          this._endToken([this._processCarriageReturns(value)]);
        };
        _Tokenizer.prototype._consumeTagOpenEnd = function() {
          var tokenType = this._attemptCharCode(chars.$SLASH) ? TokenType.TAG_OPEN_END_VOID : TokenType.TAG_OPEN_END;
          this._beginToken(tokenType);
          this._requireCharCode(chars.$GT);
          this._endToken([]);
        };
        _Tokenizer.prototype._consumeTagClose = function(start) {
          this._beginToken(TokenType.TAG_CLOSE, start);
          this._attemptCharCodeUntilFn(isNotWhitespace);
          var prefixAndName = this._consumePrefixAndName();
          this._attemptCharCodeUntilFn(isNotWhitespace);
          this._requireCharCode(chars.$GT);
          this._endToken(prefixAndName);
        };
        _Tokenizer.prototype._consumeExpansionFormStart = function() {
          this._beginToken(TokenType.EXPANSION_FORM_START, this._getLocation());
          this._requireCharCode(chars.$LBRACE);
          this._endToken([]);
          this._expansionCaseStack.push(TokenType.EXPANSION_FORM_START);
          this._beginToken(TokenType.RAW_TEXT, this._getLocation());
          var condition = this._readUntil(chars.$COMMA);
          this._endToken([condition], this._getLocation());
          this._requireCharCode(chars.$COMMA);
          this._attemptCharCodeUntilFn(isNotWhitespace);
          this._beginToken(TokenType.RAW_TEXT, this._getLocation());
          var type = this._readUntil(chars.$COMMA);
          this._endToken([type], this._getLocation());
          this._requireCharCode(chars.$COMMA);
          this._attemptCharCodeUntilFn(isNotWhitespace);
        };
        _Tokenizer.prototype._consumeExpansionCaseStart = function() {
          this._beginToken(TokenType.EXPANSION_CASE_VALUE, this._getLocation());
          var value = this._readUntil(chars.$LBRACE).trim();
          this._endToken([value], this._getLocation());
          this._attemptCharCodeUntilFn(isNotWhitespace);
          this._beginToken(TokenType.EXPANSION_CASE_EXP_START, this._getLocation());
          this._requireCharCode(chars.$LBRACE);
          this._endToken([], this._getLocation());
          this._attemptCharCodeUntilFn(isNotWhitespace);
          this._expansionCaseStack.push(TokenType.EXPANSION_CASE_EXP_START);
        };
        _Tokenizer.prototype._consumeExpansionCaseEnd = function() {
          this._beginToken(TokenType.EXPANSION_CASE_EXP_END, this._getLocation());
          this._requireCharCode(chars.$RBRACE);
          this._endToken([], this._getLocation());
          this._attemptCharCodeUntilFn(isNotWhitespace);
          this._expansionCaseStack.pop();
        };
        _Tokenizer.prototype._consumeExpansionFormEnd = function() {
          this._beginToken(TokenType.EXPANSION_FORM_END, this._getLocation());
          this._requireCharCode(chars.$RBRACE);
          this._endToken([]);
          this._expansionCaseStack.pop();
        };
        _Tokenizer.prototype._consumeText = function() {
          var start = this._getLocation();
          this._beginToken(TokenType.TEXT, start);
          var parts = [];
          do {
            if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
              parts.push(this._interpolationConfig.start);
              this._inInterpolation = true;
            } else if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.end) && this._inInterpolation) {
              parts.push(this._interpolationConfig.end);
              this._inInterpolation = false;
            } else {
              parts.push(this._readChar(true));
            }
          } while (!this._isTextEnd());
          this._endToken([this._processCarriageReturns(parts.join(''))]);
        };
        _Tokenizer.prototype._isTextEnd = function() {
          if (this._peek === chars.$LT || this._peek === chars.$EOF) {
            return true;
          }
          if (this._tokenizeIcu && !this._inInterpolation) {
            if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
              return true;
            }
            if (this._peek === chars.$RBRACE && this._isInExpansionCase()) {
              return true;
            }
          }
          return false;
        };
        _Tokenizer.prototype._savePosition = function() {
          return [this._peek, this._index, this._column, this._line, this.tokens.length];
        };
        _Tokenizer.prototype._readUntil = function(char) {
          var start = this._index;
          this._attemptUntilChar(char);
          return this._input.substring(start, this._index);
        };
        _Tokenizer.prototype._restorePosition = function(position) {
          this._peek = position[0];
          this._index = position[1];
          this._column = position[2];
          this._line = position[3];
          var nbTokens = position[4];
          if (nbTokens < this.tokens.length) {
            this.tokens = this.tokens.slice(0, nbTokens);
          }
        };
        _Tokenizer.prototype._isInExpansionCase = function() {
          return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType.EXPANSION_CASE_EXP_START;
        };
        _Tokenizer.prototype._isInExpansionForm = function() {
          return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType.EXPANSION_FORM_START;
        };
        return _Tokenizer;
      }());
    }
  };
});

$__System.register("41", ["16", "1a", "2a", "2e", "53", "2f"], function($__export) {
  "use strict";
  var __extends,
      isBlank,
      isPresent,
      ParseError,
      ParseSourceSpan,
      html,
      DEFAULT_INTERPOLATION_CONFIG,
      lex,
      getNsPrefix,
      mergeNsAndName,
      TreeError,
      ParseTreeResult,
      Parser,
      _TreeBuilder;
  function lastOnStack(stack, element) {
    return stack.length > 0 && stack[stack.length - 1] === element;
  }
  return {
    setters: [function($__m) {
      isBlank = $__m.isBlank;
      isPresent = $__m.isPresent;
    }, function($__m) {
      ParseError = $__m.ParseError;
      ParseSourceSpan = $__m.ParseSourceSpan;
    }, function($__m) {
      html = $__m;
    }, function($__m) {
      DEFAULT_INTERPOLATION_CONFIG = $__m.DEFAULT_INTERPOLATION_CONFIG;
    }, function($__m) {
      lex = $__m;
    }, function($__m) {
      getNsPrefix = $__m.getNsPrefix;
      mergeNsAndName = $__m.mergeNsAndName;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      TreeError = (function(_super) {
        __extends(TreeError, _super);
        function TreeError(elementName, span, msg) {
          _super.call(this, span, msg);
          this.elementName = elementName;
        }
        TreeError.create = function(elementName, span, msg) {
          return new TreeError(elementName, span, msg);
        };
        return TreeError;
      }(ParseError));
      $__export("TreeError", TreeError);
      ParseTreeResult = (function() {
        function ParseTreeResult(rootNodes, errors) {
          this.rootNodes = rootNodes;
          this.errors = errors;
        }
        return ParseTreeResult;
      }());
      $__export("ParseTreeResult", ParseTreeResult);
      Parser = (function() {
        function Parser(getTagDefinition) {
          this.getTagDefinition = getTagDefinition;
        }
        Parser.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
          if (parseExpansionForms === void 0) {
            parseExpansionForms = false;
          }
          if (interpolationConfig === void 0) {
            interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
          }
          var tokensAndErrors = lex.tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);
          var treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();
          return new ParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));
        };
        return Parser;
      }());
      $__export("Parser", Parser);
      _TreeBuilder = (function() {
        function _TreeBuilder(tokens, getTagDefinition) {
          this.tokens = tokens;
          this.getTagDefinition = getTagDefinition;
          this._index = -1;
          this._rootNodes = [];
          this._errors = [];
          this._elementStack = [];
          this._advance();
        }
        _TreeBuilder.prototype.build = function() {
          while (this._peek.type !== lex.TokenType.EOF) {
            if (this._peek.type === lex.TokenType.TAG_OPEN_START) {
              this._consumeStartTag(this._advance());
            } else if (this._peek.type === lex.TokenType.TAG_CLOSE) {
              this._consumeEndTag(this._advance());
            } else if (this._peek.type === lex.TokenType.CDATA_START) {
              this._closeVoidElement();
              this._consumeCdata(this._advance());
            } else if (this._peek.type === lex.TokenType.COMMENT_START) {
              this._closeVoidElement();
              this._consumeComment(this._advance());
            } else if (this._peek.type === lex.TokenType.TEXT || this._peek.type === lex.TokenType.RAW_TEXT || this._peek.type === lex.TokenType.ESCAPABLE_RAW_TEXT) {
              this._closeVoidElement();
              this._consumeText(this._advance());
            } else if (this._peek.type === lex.TokenType.EXPANSION_FORM_START) {
              this._consumeExpansion(this._advance());
            } else {
              this._advance();
            }
          }
          return new ParseTreeResult(this._rootNodes, this._errors);
        };
        _TreeBuilder.prototype._advance = function() {
          var prev = this._peek;
          if (this._index < this.tokens.length - 1) {
            this._index++;
          }
          this._peek = this.tokens[this._index];
          return prev;
        };
        _TreeBuilder.prototype._advanceIf = function(type) {
          if (this._peek.type === type) {
            return this._advance();
          }
          return null;
        };
        _TreeBuilder.prototype._consumeCdata = function(startToken) {
          this._consumeText(this._advance());
          this._advanceIf(lex.TokenType.CDATA_END);
        };
        _TreeBuilder.prototype._consumeComment = function(token) {
          var text = this._advanceIf(lex.TokenType.RAW_TEXT);
          this._advanceIf(lex.TokenType.COMMENT_END);
          var value = isPresent(text) ? text.parts[0].trim() : null;
          this._addToParent(new html.Comment(value, token.sourceSpan));
        };
        _TreeBuilder.prototype._consumeExpansion = function(token) {
          var switchValue = this._advance();
          var type = this._advance();
          var cases = [];
          while (this._peek.type === lex.TokenType.EXPANSION_CASE_VALUE) {
            var expCase = this._parseExpansionCase();
            if (!expCase)
              return;
            cases.push(expCase);
          }
          if (this._peek.type !== lex.TokenType.EXPANSION_FORM_END) {
            this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
            return;
          }
          var sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
          this._addToParent(new html.Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
          this._advance();
        };
        _TreeBuilder.prototype._parseExpansionCase = function() {
          var value = this._advance();
          if (this._peek.type !== lex.TokenType.EXPANSION_CASE_EXP_START) {
            this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'."));
            return null;
          }
          var start = this._advance();
          var exp = this._collectExpansionExpTokens(start);
          if (!exp)
            return null;
          var end = this._advance();
          exp.push(new lex.Token(lex.TokenType.EOF, [], end.sourceSpan));
          var parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
          if (parsedExp.errors.length > 0) {
            this._errors = this._errors.concat(parsedExp.errors);
            return null;
          }
          var sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
          var expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
          return new html.ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
        };
        _TreeBuilder.prototype._collectExpansionExpTokens = function(start) {
          var exp = [];
          var expansionFormStack = [lex.TokenType.EXPANSION_CASE_EXP_START];
          while (true) {
            if (this._peek.type === lex.TokenType.EXPANSION_FORM_START || this._peek.type === lex.TokenType.EXPANSION_CASE_EXP_START) {
              expansionFormStack.push(this._peek.type);
            }
            if (this._peek.type === lex.TokenType.EXPANSION_CASE_EXP_END) {
              if (lastOnStack(expansionFormStack, lex.TokenType.EXPANSION_CASE_EXP_START)) {
                expansionFormStack.pop();
                if (expansionFormStack.length == 0)
                  return exp;
              } else {
                this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
                return null;
              }
            }
            if (this._peek.type === lex.TokenType.EXPANSION_FORM_END) {
              if (lastOnStack(expansionFormStack, lex.TokenType.EXPANSION_FORM_START)) {
                expansionFormStack.pop();
              } else {
                this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
                return null;
              }
            }
            if (this._peek.type === lex.TokenType.EOF) {
              this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
              return null;
            }
            exp.push(this._advance());
          }
        };
        _TreeBuilder.prototype._consumeText = function(token) {
          var text = token.parts[0];
          if (text.length > 0 && text[0] == '\n') {
            var parent_1 = this._getParentElement();
            if (isPresent(parent_1) && parent_1.children.length == 0 && this.getTagDefinition(parent_1.name).ignoreFirstLf) {
              text = text.substring(1);
            }
          }
          if (text.length > 0) {
            this._addToParent(new html.Text(text, token.sourceSpan));
          }
        };
        _TreeBuilder.prototype._closeVoidElement = function() {
          if (this._elementStack.length > 0) {
            var el = this._elementStack[this._elementStack.length - 1];
            if (this.getTagDefinition(el.name).isVoid) {
              this._elementStack.pop();
            }
          }
        };
        _TreeBuilder.prototype._consumeStartTag = function(startTagToken) {
          var prefix = startTagToken.parts[0];
          var name = startTagToken.parts[1];
          var attrs = [];
          while (this._peek.type === lex.TokenType.ATTR_NAME) {
            attrs.push(this._consumeAttr(this._advance()));
          }
          var fullName = this._getElementFullName(prefix, name, this._getParentElement());
          var selfClosing = false;
          if (this._peek.type === lex.TokenType.TAG_OPEN_END_VOID) {
            this._advance();
            selfClosing = true;
            var tagDef = this.getTagDefinition(fullName);
            if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
              this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, "Only void and foreign elements can be self closed \"" + startTagToken.parts[1] + "\""));
            }
          } else if (this._peek.type === lex.TokenType.TAG_OPEN_END) {
            this._advance();
            selfClosing = false;
          }
          var end = this._peek.sourceSpan.start;
          var span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);
          var el = new html.Element(fullName, attrs, [], span, span, null);
          this._pushElement(el);
          if (selfClosing) {
            this._popElement(fullName);
            el.endSourceSpan = span;
          }
        };
        _TreeBuilder.prototype._pushElement = function(el) {
          if (this._elementStack.length > 0) {
            var parentEl = this._elementStack[this._elementStack.length - 1];
            if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
              this._elementStack.pop();
            }
          }
          var tagDef = this.getTagDefinition(el.name);
          var _a = this._getParentElementSkippingContainers(),
              parent = _a.parent,
              container = _a.container;
          if (isPresent(parent) && tagDef.requireExtraParent(parent.name)) {
            var newParent = new html.Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
            this._insertBeforeContainer(parent, container, newParent);
          }
          this._addToParent(el);
          this._elementStack.push(el);
        };
        _TreeBuilder.prototype._consumeEndTag = function(endTagToken) {
          var fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
          if (this._getParentElement()) {
            this._getParentElement().endSourceSpan = endTagToken.sourceSpan;
          }
          if (this.getTagDefinition(fullName).isVoid) {
            this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Void elements do not have end tags \"" + endTagToken.parts[1] + "\""));
          } else if (!this._popElement(fullName)) {
            this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Unexpected closing tag \"" + endTagToken.parts[1] + "\""));
          }
        };
        _TreeBuilder.prototype._popElement = function(fullName) {
          for (var stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
            var el = this._elementStack[stackIndex];
            if (el.name == fullName) {
              this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);
              return true;
            }
            if (!this.getTagDefinition(el.name).closedByParent) {
              return false;
            }
          }
          return false;
        };
        _TreeBuilder.prototype._consumeAttr = function(attrName) {
          var fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
          var end = attrName.sourceSpan.end;
          var value = '';
          var valueSpan;
          if (this._peek.type === lex.TokenType.ATTR_VALUE) {
            var valueToken = this._advance();
            value = valueToken.parts[0];
            end = valueToken.sourceSpan.end;
            valueSpan = valueToken.sourceSpan;
          }
          return new html.Attribute(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);
        };
        _TreeBuilder.prototype._getParentElement = function() {
          return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;
        };
        _TreeBuilder.prototype._getParentElementSkippingContainers = function() {
          var container = null;
          for (var i = this._elementStack.length - 1; i >= 0; i--) {
            if (this._elementStack[i].name !== 'ng-container') {
              return {
                parent: this._elementStack[i],
                container: container
              };
            }
            container = this._elementStack[i];
          }
          return {
            parent: this._elementStack[this._elementStack.length - 1],
            container: container
          };
        };
        _TreeBuilder.prototype._addToParent = function(node) {
          var parent = this._getParentElement();
          if (isPresent(parent)) {
            parent.children.push(node);
          } else {
            this._rootNodes.push(node);
          }
        };
        _TreeBuilder.prototype._insertBeforeContainer = function(parent, container, node) {
          if (!container) {
            this._addToParent(node);
            this._elementStack.push(node);
          } else {
            if (parent) {
              var index = parent.children.indexOf(container);
              parent.children[index] = node;
            } else {
              this._rootNodes.push(node);
            }
            node.children.push(container);
            this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
          }
        };
        _TreeBuilder.prototype._getElementFullName = function(prefix, localName, parentElement) {
          if (isBlank(prefix)) {
            prefix = this.getTagDefinition(localName).implicitNamespacePrefix;
            if (isBlank(prefix) && isPresent(parentElement)) {
              prefix = getNsPrefix(parentElement.name);
            }
          }
          return mergeNsAndName(prefix, localName);
        };
        return _TreeBuilder;
      }());
    }
  };
});

$__System.register("2d", ["c", "4b", "2e", "41"], function($__export) {
  "use strict";
  var __extends,
      Injectable,
      getHtmlTagDefinition,
      DEFAULT_INTERPOLATION_CONFIG,
      Parser,
      HtmlParser;
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
    }, function($__m) {
      getHtmlTagDefinition = $__m.getHtmlTagDefinition;
    }, function($__m) {
      DEFAULT_INTERPOLATION_CONFIG = $__m.DEFAULT_INTERPOLATION_CONFIG;
    }, function($__m) {
      Parser = $__m.Parser;
      $__export({
        ParseTreeResult: $__m.ParseTreeResult,
        TreeError: $__m.TreeError
      });
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      HtmlParser = (function(_super) {
        __extends(HtmlParser, _super);
        function HtmlParser() {
          _super.call(this, getHtmlTagDefinition);
        }
        HtmlParser.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
          if (parseExpansionForms === void 0) {
            parseExpansionForms = false;
          }
          if (interpolationConfig === void 0) {
            interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
          }
          return _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);
        };
        HtmlParser.decorators = [{type: Injectable}];
        HtmlParser.ctorParameters = [];
        return HtmlParser;
      }(Parser));
      $__export("HtmlParser", HtmlParser);
    }
  };
});

$__System.register("30", ["11", "12", "16", "13", "1a", "35"], function($__export) {
  "use strict";
  var __extends,
      CompileDiDependencyMetadata,
      CompileProviderMetadata,
      CompileTokenMetadata,
      CompileTypeMetadata,
      MapWrapper,
      isBlank,
      isPresent,
      Identifiers,
      resolveIdentifierToken,
      ParseError,
      ProviderAst,
      ProviderAstType,
      ProviderError,
      ProviderViewContext,
      ProviderElementContext,
      NgModuleProviderAnalyzer;
  function _transformProvider(provider, _a) {
    var useExisting = _a.useExisting,
        useValue = _a.useValue,
        deps = _a.deps;
    return new CompileProviderMetadata({
      token: provider.token,
      useClass: provider.useClass,
      useExisting: useExisting,
      useFactory: provider.useFactory,
      useValue: useValue,
      deps: deps,
      multi: provider.multi
    });
  }
  function _transformProviderAst(provider, _a) {
    var eager = _a.eager,
        providers = _a.providers;
    return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);
  }
  function _normalizeProviders(providers, sourceSpan, targetErrors, targetProviders) {
    if (targetProviders === void 0) {
      targetProviders = null;
    }
    if (!targetProviders) {
      targetProviders = [];
    }
    if (isPresent(providers)) {
      providers.forEach(function(provider) {
        if (Array.isArray(provider)) {
          _normalizeProviders(provider, sourceSpan, targetErrors, targetProviders);
        } else {
          var normalizeProvider = void 0;
          if (provider instanceof CompileProviderMetadata) {
            normalizeProvider = provider;
          } else if (provider instanceof CompileTypeMetadata) {
            normalizeProvider = new CompileProviderMetadata({
              token: new CompileTokenMetadata({identifier: provider}),
              useClass: provider
            });
          } else {
            targetErrors.push(new ProviderError("Unknown provider type " + provider, sourceSpan));
          }
          if (isPresent(normalizeProvider)) {
            targetProviders.push(normalizeProvider);
          }
        }
      });
    }
    return targetProviders;
  }
  function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
    var providersByToken = new Map();
    directives.forEach(function(directive) {
      var dirProvider = new CompileProviderMetadata({
        token: new CompileTokenMetadata({identifier: directive.type}),
        useClass: directive.type
      });
      _resolveProviders([dirProvider], directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);
    });
    var directivesWithComponentFirst = directives.filter(function(dir) {
      return dir.isComponent;
    }).concat(directives.filter(function(dir) {
      return !dir.isComponent;
    }));
    directivesWithComponentFirst.forEach(function(directive) {
      _resolveProviders(_normalizeProviders(directive.providers, sourceSpan, targetErrors), ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);
      _resolveProviders(_normalizeProviders(directive.viewProviders, sourceSpan, targetErrors), ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);
    });
    return providersByToken;
  }
  function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
    providers.forEach(function(provider) {
      var resolvedProvider = targetProvidersByToken.get(provider.token.reference);
      if (isPresent(resolvedProvider) && resolvedProvider.multiProvider !== provider.multi) {
        targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + resolvedProvider.token.name, sourceSpan));
      }
      if (!resolvedProvider) {
        var lifecycleHooks = provider.token.identifier && provider.token.identifier instanceof CompileTypeMetadata ? provider.token.identifier.lifecycleHooks : [];
        resolvedProvider = new ProviderAst(provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider], providerType, lifecycleHooks, sourceSpan);
        targetProvidersByToken.set(provider.token.reference, resolvedProvider);
      } else {
        if (!provider.multi) {
          resolvedProvider.providers.length = 0;
        }
        resolvedProvider.providers.push(provider);
      }
    });
  }
  function _getViewQueries(component) {
    var viewQueries = new Map();
    if (isPresent(component.viewQueries)) {
      component.viewQueries.forEach(function(query) {
        return _addQueryToTokenMap(viewQueries, query);
      });
    }
    component.type.diDeps.forEach(function(dep) {
      if (isPresent(dep.viewQuery)) {
        _addQueryToTokenMap(viewQueries, dep.viewQuery);
      }
    });
    return viewQueries;
  }
  function _getContentQueries(directives) {
    var contentQueries = new Map();
    directives.forEach(function(directive) {
      if (isPresent(directive.queries)) {
        directive.queries.forEach(function(query) {
          return _addQueryToTokenMap(contentQueries, query);
        });
      }
      directive.type.diDeps.forEach(function(dep) {
        if (isPresent(dep.query)) {
          _addQueryToTokenMap(contentQueries, dep.query);
        }
      });
    });
    return contentQueries;
  }
  function _addQueryToTokenMap(map, query) {
    query.selectors.forEach(function(token) {
      var entry = map.get(token.reference);
      if (!entry) {
        entry = [];
        map.set(token.reference, entry);
      }
      entry.push(query);
    });
  }
  return {
    setters: [function($__m) {
      CompileDiDependencyMetadata = $__m.CompileDiDependencyMetadata;
      CompileProviderMetadata = $__m.CompileProviderMetadata;
      CompileTokenMetadata = $__m.CompileTokenMetadata;
      CompileTypeMetadata = $__m.CompileTypeMetadata;
    }, function($__m) {
      MapWrapper = $__m.MapWrapper;
    }, function($__m) {
      isBlank = $__m.isBlank;
      isPresent = $__m.isPresent;
    }, function($__m) {
      Identifiers = $__m.Identifiers;
      resolveIdentifierToken = $__m.resolveIdentifierToken;
    }, function($__m) {
      ParseError = $__m.ParseError;
    }, function($__m) {
      ProviderAst = $__m.ProviderAst;
      ProviderAstType = $__m.ProviderAstType;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      ProviderError = (function(_super) {
        __extends(ProviderError, _super);
        function ProviderError(message, span) {
          _super.call(this, span, message);
        }
        return ProviderError;
      }(ParseError));
      $__export("ProviderError", ProviderError);
      ProviderViewContext = (function() {
        function ProviderViewContext(component, sourceSpan) {
          var _this = this;
          this.component = component;
          this.sourceSpan = sourceSpan;
          this.errors = [];
          this.viewQueries = _getViewQueries(component);
          this.viewProviders = new Map();
          _normalizeProviders(component.viewProviders, sourceSpan, this.errors).forEach(function(provider) {
            if (isBlank(_this.viewProviders.get(provider.token.reference))) {
              _this.viewProviders.set(provider.token.reference, true);
            }
          });
        }
        return ProviderViewContext;
      }());
      $__export("ProviderViewContext", ProviderViewContext);
      ProviderElementContext = (function() {
        function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, _sourceSpan) {
          var _this = this;
          this.viewContext = viewContext;
          this._parent = _parent;
          this._isViewRoot = _isViewRoot;
          this._directiveAsts = _directiveAsts;
          this._sourceSpan = _sourceSpan;
          this._transformedProviders = new Map();
          this._seenProviders = new Map();
          this._hasViewContainer = false;
          this._attrs = {};
          attrs.forEach(function(attrAst) {
            return _this._attrs[attrAst.name] = attrAst.value;
          });
          var directivesMeta = _directiveAsts.map(function(directiveAst) {
            return directiveAst.directive;
          });
          this._allProviders = _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);
          this._contentQueries = _getContentQueries(directivesMeta);
          var queriedTokens = new Map();
          MapWrapper.values(this._allProviders).forEach(function(provider) {
            _this._addQueryReadsTo(provider.token, queriedTokens);
          });
          refs.forEach(function(refAst) {
            _this._addQueryReadsTo(new CompileTokenMetadata({value: refAst.name}), queriedTokens);
          });
          if (isPresent(queriedTokens.get(resolveIdentifierToken(Identifiers.ViewContainerRef).reference))) {
            this._hasViewContainer = true;
          }
          MapWrapper.values(this._allProviders).forEach(function(provider) {
            var eager = provider.eager || isPresent(queriedTokens.get(provider.token.reference));
            if (eager) {
              _this._getOrCreateLocalProvider(provider.providerType, provider.token, true);
            }
          });
        }
        ProviderElementContext.prototype.afterElement = function() {
          var _this = this;
          MapWrapper.values(this._allProviders).forEach(function(provider) {
            _this._getOrCreateLocalProvider(provider.providerType, provider.token, false);
          });
        };
        Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
          get: function() {
            return MapWrapper.values(this._transformedProviders);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
          get: function() {
            var sortedProviderTypes = this.transformProviders.map(function(provider) {
              return provider.token.identifier;
            });
            var sortedDirectives = this._directiveAsts.slice();
            sortedDirectives.sort(function(dir1, dir2) {
              return sortedProviderTypes.indexOf(dir1.directive.type) - sortedProviderTypes.indexOf(dir2.directive.type);
            });
            return sortedDirectives;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", {
          get: function() {
            return this._hasViewContainer;
          },
          enumerable: true,
          configurable: true
        });
        ProviderElementContext.prototype._addQueryReadsTo = function(token, queryReadTokens) {
          this._getQueriesFor(token).forEach(function(query) {
            var queryReadToken = query.read || token;
            if (isBlank(queryReadTokens.get(queryReadToken.reference))) {
              queryReadTokens.set(queryReadToken.reference, true);
            }
          });
        };
        ProviderElementContext.prototype._getQueriesFor = function(token) {
          var result = [];
          var currentEl = this;
          var distance = 0;
          var queries;
          while (currentEl !== null) {
            queries = currentEl._contentQueries.get(token.reference);
            if (isPresent(queries)) {
              result.push.apply(result, queries.filter(function(query) {
                return query.descendants || distance <= 1;
              }));
            }
            if (currentEl._directiveAsts.length > 0) {
              distance++;
            }
            currentEl = currentEl._parent;
          }
          queries = this.viewContext.viewQueries.get(token.reference);
          if (isPresent(queries)) {
            result.push.apply(result, queries);
          }
          return result;
        };
        ProviderElementContext.prototype._getOrCreateLocalProvider = function(requestingProviderType, token, eager) {
          var _this = this;
          var resolvedProvider = this._allProviders.get(token.reference);
          if (!resolvedProvider || ((requestingProviderType === ProviderAstType.Directive || requestingProviderType === ProviderAstType.PublicService) && resolvedProvider.providerType === ProviderAstType.PrivateService) || ((requestingProviderType === ProviderAstType.PrivateService || requestingProviderType === ProviderAstType.PublicService) && resolvedProvider.providerType === ProviderAstType.Builtin)) {
            return null;
          }
          var transformedProviderAst = this._transformedProviders.get(token.reference);
          if (isPresent(transformedProviderAst)) {
            return transformedProviderAst;
          }
          if (isPresent(this._seenProviders.get(token.reference))) {
            this.viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, this._sourceSpan));
            return null;
          }
          this._seenProviders.set(token.reference, true);
          var transformedProviders = resolvedProvider.providers.map(function(provider) {
            var transformedUseValue = provider.useValue;
            var transformedUseExisting = provider.useExisting;
            var transformedDeps;
            if (isPresent(provider.useExisting)) {
              var existingDiDep = _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({token: provider.useExisting}), eager);
              if (isPresent(existingDiDep.token)) {
                transformedUseExisting = existingDiDep.token;
              } else {
                transformedUseExisting = null;
                transformedUseValue = existingDiDep.value;
              }
            } else if (isPresent(provider.useFactory)) {
              var deps = provider.deps || provider.useFactory.diDeps;
              transformedDeps = deps.map(function(dep) {
                return _this._getDependency(resolvedProvider.providerType, dep, eager);
              });
            } else if (isPresent(provider.useClass)) {
              var deps = provider.deps || provider.useClass.diDeps;
              transformedDeps = deps.map(function(dep) {
                return _this._getDependency(resolvedProvider.providerType, dep, eager);
              });
            }
            return _transformProvider(provider, {
              useExisting: transformedUseExisting,
              useValue: transformedUseValue,
              deps: transformedDeps
            });
          });
          transformedProviderAst = _transformProviderAst(resolvedProvider, {
            eager: eager,
            providers: transformedProviders
          });
          this._transformedProviders.set(token.reference, transformedProviderAst);
          return transformedProviderAst;
        };
        ProviderElementContext.prototype._getLocalDependency = function(requestingProviderType, dep, eager) {
          if (eager === void 0) {
            eager = null;
          }
          if (dep.isAttribute) {
            var attrValue = this._attrs[dep.token.value];
            return new CompileDiDependencyMetadata({
              isValue: true,
              value: attrValue == null ? null : attrValue
            });
          }
          if (isPresent(dep.query) || isPresent(dep.viewQuery)) {
            return dep;
          }
          if (isPresent(dep.token)) {
            if ((requestingProviderType === ProviderAstType.Directive || requestingProviderType === ProviderAstType.Component)) {
              if (dep.token.reference === resolveIdentifierToken(Identifiers.Renderer).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ElementRef).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference || dep.token.reference === resolveIdentifierToken(Identifiers.TemplateRef).reference) {
                return dep;
              }
              if (dep.token.reference === resolveIdentifierToken(Identifiers.ViewContainerRef).reference) {
                this._hasViewContainer = true;
              }
            }
            if (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference) {
              return dep;
            }
            if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {
              return dep;
            }
          }
          return null;
        };
        ProviderElementContext.prototype._getDependency = function(requestingProviderType, dep, eager) {
          if (eager === void 0) {
            eager = null;
          }
          var currElement = this;
          var currEager = eager;
          var result = null;
          if (!dep.isSkipSelf) {
            result = this._getLocalDependency(requestingProviderType, dep, eager);
          }
          if (dep.isSelf) {
            if (!result && dep.isOptional) {
              result = new CompileDiDependencyMetadata({
                isValue: true,
                value: null
              });
            }
          } else {
            while (!result && isPresent(currElement._parent)) {
              var prevElement = currElement;
              currElement = currElement._parent;
              if (prevElement._isViewRoot) {
                currEager = false;
              }
              result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);
            }
            if (!result) {
              if (!dep.isHost || this.viewContext.component.type.isHost || this.viewContext.component.type.reference === dep.token.reference || isPresent(this.viewContext.viewProviders.get(dep.token.reference))) {
                result = dep;
              } else {
                result = dep.isOptional ? result = new CompileDiDependencyMetadata({
                  isValue: true,
                  value: null
                }) : null;
              }
            }
          }
          if (!result) {
            this.viewContext.errors.push(new ProviderError("No provider for " + dep.token.name, this._sourceSpan));
          }
          return result;
        };
        return ProviderElementContext;
      }());
      $__export("ProviderElementContext", ProviderElementContext);
      NgModuleProviderAnalyzer = (function() {
        function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {
          var _this = this;
          this._transformedProviders = new Map();
          this._seenProviders = new Map();
          this._errors = [];
          this._allProviders = new Map();
          var ngModuleTypes = ngModule.transitiveModule.modules.map(function(moduleMeta) {
            return moduleMeta.type;
          });
          ngModuleTypes.forEach(function(ngModuleType) {
            var ngModuleProvider = new CompileProviderMetadata({
              token: new CompileTokenMetadata({identifier: ngModuleType}),
              useClass: ngModuleType
            });
            _resolveProviders([ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders);
          });
          _resolveProviders(_normalizeProviders(ngModule.transitiveModule.providers.concat(extraProviders), sourceSpan, this._errors), ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);
        }
        NgModuleProviderAnalyzer.prototype.parse = function() {
          var _this = this;
          MapWrapper.values(this._allProviders).forEach(function(provider) {
            _this._getOrCreateLocalProvider(provider.token, provider.eager);
          });
          if (this._errors.length > 0) {
            var errorString = this._errors.join('\n');
            throw new Error("Provider parse errors:\n" + errorString);
          }
          return MapWrapper.values(this._transformedProviders);
        };
        NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function(token, eager) {
          var _this = this;
          var resolvedProvider = this._allProviders.get(token.reference);
          if (!resolvedProvider) {
            return null;
          }
          var transformedProviderAst = this._transformedProviders.get(token.reference);
          if (isPresent(transformedProviderAst)) {
            return transformedProviderAst;
          }
          if (isPresent(this._seenProviders.get(token.reference))) {
            this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, resolvedProvider.sourceSpan));
            return null;
          }
          this._seenProviders.set(token.reference, true);
          var transformedProviders = resolvedProvider.providers.map(function(provider) {
            var transformedUseValue = provider.useValue;
            var transformedUseExisting = provider.useExisting;
            var transformedDeps;
            if (isPresent(provider.useExisting)) {
              var existingDiDep = _this._getDependency(new CompileDiDependencyMetadata({token: provider.useExisting}), eager, resolvedProvider.sourceSpan);
              if (isPresent(existingDiDep.token)) {
                transformedUseExisting = existingDiDep.token;
              } else {
                transformedUseExisting = null;
                transformedUseValue = existingDiDep.value;
              }
            } else if (isPresent(provider.useFactory)) {
              var deps = provider.deps || provider.useFactory.diDeps;
              transformedDeps = deps.map(function(dep) {
                return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
              });
            } else if (isPresent(provider.useClass)) {
              var deps = provider.deps || provider.useClass.diDeps;
              transformedDeps = deps.map(function(dep) {
                return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
              });
            }
            return _transformProvider(provider, {
              useExisting: transformedUseExisting,
              useValue: transformedUseValue,
              deps: transformedDeps
            });
          });
          transformedProviderAst = _transformProviderAst(resolvedProvider, {
            eager: eager,
            providers: transformedProviders
          });
          this._transformedProviders.set(token.reference, transformedProviderAst);
          return transformedProviderAst;
        };
        NgModuleProviderAnalyzer.prototype._getDependency = function(dep, eager, requestorSourceSpan) {
          if (eager === void 0) {
            eager = null;
          }
          var foundLocal = false;
          if (!dep.isSkipSelf && isPresent(dep.token)) {
            if (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ComponentFactoryResolver).reference) {
              foundLocal = true;
            } else if (isPresent(this._getOrCreateLocalProvider(dep.token, eager))) {
              foundLocal = true;
            }
          }
          var result = dep;
          if (dep.isSelf && !foundLocal) {
            if (dep.isOptional) {
              result = new CompileDiDependencyMetadata({
                isValue: true,
                value: null
              });
            } else {
              this._errors.push(new ProviderError("No provider for " + dep.token.name, requestorSourceSpan));
            }
          }
          return result;
        };
        return NgModuleProviderAnalyzer;
      }());
      $__export("NgModuleProviderAnalyzer", NgModuleProviderAnalyzer);
    }
  };
});

$__System.register("26", ["c", "11", "55", "16", "13", "56", "14", "57", "1a", "17", "30"], function($__export) {
  "use strict";
  var Injectable,
      CompileDiDependencyMetadata,
      CompileIdentifierMetadata,
      createDiTokenExpression,
      isPresent,
      Identifiers,
      resolveIdentifier,
      resolveIdentifierToken,
      createClassStmt,
      o,
      convertValueToOutputAst,
      ParseLocation,
      ParseSourceFile,
      ParseSourceSpan,
      LifecycleHooks,
      NgModuleProviderAnalyzer,
      ComponentFactoryDependency,
      NgModuleCompileResult,
      NgModuleCompiler,
      _InjectorBuilder,
      InjectorProps,
      InjectMethodVars;
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
    }, function($__m) {
      CompileDiDependencyMetadata = $__m.CompileDiDependencyMetadata;
      CompileIdentifierMetadata = $__m.CompileIdentifierMetadata;
    }, function($__m) {
      createDiTokenExpression = $__m.createDiTokenExpression;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      Identifiers = $__m.Identifiers;
      resolveIdentifier = $__m.resolveIdentifier;
      resolveIdentifierToken = $__m.resolveIdentifierToken;
    }, function($__m) {
      createClassStmt = $__m.createClassStmt;
    }, function($__m) {
      o = $__m;
    }, function($__m) {
      convertValueToOutputAst = $__m.convertValueToOutputAst;
    }, function($__m) {
      ParseLocation = $__m.ParseLocation;
      ParseSourceFile = $__m.ParseSourceFile;
      ParseSourceSpan = $__m.ParseSourceSpan;
    }, function($__m) {
      LifecycleHooks = $__m.LifecycleHooks;
    }, function($__m) {
      NgModuleProviderAnalyzer = $__m.NgModuleProviderAnalyzer;
    }],
    execute: function() {
      ComponentFactoryDependency = (function() {
        function ComponentFactoryDependency(comp, placeholder) {
          this.comp = comp;
          this.placeholder = placeholder;
        }
        return ComponentFactoryDependency;
      }());
      $__export("ComponentFactoryDependency", ComponentFactoryDependency);
      NgModuleCompileResult = (function() {
        function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {
          this.statements = statements;
          this.ngModuleFactoryVar = ngModuleFactoryVar;
          this.dependencies = dependencies;
        }
        return NgModuleCompileResult;
      }());
      $__export("NgModuleCompileResult", NgModuleCompileResult);
      NgModuleCompiler = (function() {
        function NgModuleCompiler() {}
        NgModuleCompiler.prototype.compile = function(ngModuleMeta, extraProviders) {
          var sourceFileName = isPresent(ngModuleMeta.type.moduleUrl) ? "in NgModule " + ngModuleMeta.type.name + " in " + ngModuleMeta.type.moduleUrl : "in NgModule " + ngModuleMeta.type.name;
          var sourceFile = new ParseSourceFile('', sourceFileName);
          var sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
          var deps = [];
          var bootstrapComponentFactories = [];
          var entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function(entryComponent) {
            var id = new CompileIdentifierMetadata({name: entryComponent.name});
            if (ngModuleMeta.bootstrapComponents.indexOf(entryComponent) > -1) {
              bootstrapComponentFactories.push(id);
            }
            deps.push(new ComponentFactoryDependency(entryComponent, id));
            return id;
          });
          var builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan);
          var providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);
          providerParser.parse().forEach(function(provider) {
            return builder.addProvider(provider);
          });
          var injectorClass = builder.build();
          var ngModuleFactoryVar = ngModuleMeta.type.name + "NgFactory";
          var ngModuleFactoryStmt = o.variable(ngModuleFactoryVar).set(o.importExpr(resolveIdentifier(Identifiers.NgModuleFactory)).instantiate([o.variable(injectorClass.name), o.importExpr(ngModuleMeta.type)], o.importType(resolveIdentifier(Identifiers.NgModuleFactory), [o.importType(ngModuleMeta.type)], [o.TypeModifier.Const]))).toDeclStmt(null, [o.StmtModifier.Final]);
          var stmts = [injectorClass, ngModuleFactoryStmt];
          if (ngModuleMeta.id) {
            var registerFactoryStmt = o.importExpr(resolveIdentifier(Identifiers.RegisterModuleFactoryFn)).callFn([o.literal(ngModuleMeta.id), o.variable(ngModuleFactoryVar)]).toStmt();
            stmts.push(registerFactoryStmt);
          }
          return new NgModuleCompileResult(stmts, ngModuleFactoryVar, deps);
        };
        NgModuleCompiler.decorators = [{type: Injectable}];
        NgModuleCompiler.ctorParameters = [];
        return NgModuleCompiler;
      }());
      $__export("NgModuleCompiler", NgModuleCompiler);
      _InjectorBuilder = (function() {
        function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {
          this._ngModuleMeta = _ngModuleMeta;
          this._entryComponentFactories = _entryComponentFactories;
          this._bootstrapComponentFactories = _bootstrapComponentFactories;
          this._sourceSpan = _sourceSpan;
          this.fields = [];
          this.getters = [];
          this.methods = [];
          this.ctorStmts = [];
          this._tokens = [];
          this._instances = new Map();
          this._createStmts = [];
          this._destroyStmts = [];
        }
        _InjectorBuilder.prototype.addProvider = function(resolvedProvider) {
          var _this = this;
          var providerValueExpressions = resolvedProvider.providers.map(function(provider) {
            return _this._getProviderValue(provider);
          });
          var propName = "_" + resolvedProvider.token.name + "_" + this._instances.size;
          var instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);
          if (resolvedProvider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
            this._destroyStmts.push(instance.callMethod('ngOnDestroy', []).toStmt());
          }
          this._tokens.push(resolvedProvider.token);
          this._instances.set(resolvedProvider.token.reference, instance);
        };
        _InjectorBuilder.prototype.build = function() {
          var _this = this;
          var getMethodStmts = this._tokens.map(function(token) {
            var providerExpr = _this._instances.get(token.reference);
            return new o.IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(token)), [new o.ReturnStatement(providerExpr)]);
          });
          var methods = [new o.ClassMethod('createInternal', [], this._createStmts.concat(new o.ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))), o.importType(this._ngModuleMeta.type)), new o.ClassMethod('getInternal', [new o.FnParam(InjectMethodVars.token.name, o.DYNAMIC_TYPE), new o.FnParam(InjectMethodVars.notFoundResult.name, o.DYNAMIC_TYPE)], getMethodStmts.concat([new o.ReturnStatement(InjectMethodVars.notFoundResult)]), o.DYNAMIC_TYPE), new o.ClassMethod('destroyInternal', [], this._destroyStmts)];
          var parentArgs = [o.variable(InjectorProps.parent.name), o.literalArr(this._entryComponentFactories.map(function(componentFactory) {
            return o.importExpr(componentFactory);
          })), o.literalArr(this._bootstrapComponentFactories.map(function(componentFactory) {
            return o.importExpr(componentFactory);
          }))];
          var injClassName = this._ngModuleMeta.type.name + "Injector";
          return createClassStmt({
            name: injClassName,
            ctorParams: [new o.FnParam(InjectorProps.parent.name, o.importType(resolveIdentifier(Identifiers.Injector)))],
            parent: o.importExpr(resolveIdentifier(Identifiers.NgModuleInjector), [o.importType(this._ngModuleMeta.type)]),
            parentArgs: parentArgs,
            builders: [{methods: methods}, this]
          });
        };
        _InjectorBuilder.prototype._getProviderValue = function(provider) {
          var _this = this;
          var result;
          if (isPresent(provider.useExisting)) {
            result = this._getDependency(new CompileDiDependencyMetadata({token: provider.useExisting}));
          } else if (isPresent(provider.useFactory)) {
            var deps = provider.deps || provider.useFactory.diDeps;
            var depsExpr = deps.map(function(dep) {
              return _this._getDependency(dep);
            });
            result = o.importExpr(provider.useFactory).callFn(depsExpr);
          } else if (isPresent(provider.useClass)) {
            var deps = provider.deps || provider.useClass.diDeps;
            var depsExpr = deps.map(function(dep) {
              return _this._getDependency(dep);
            });
            result = o.importExpr(provider.useClass).instantiate(depsExpr, o.importType(provider.useClass));
          } else {
            result = convertValueToOutputAst(provider.useValue);
          }
          return result;
        };
        _InjectorBuilder.prototype._createProviderProperty = function(propName, provider, providerValueExpressions, isMulti, isEager) {
          var resolvedProviderValueExpr;
          var type;
          if (isMulti) {
            resolvedProviderValueExpr = o.literalArr(providerValueExpressions);
            type = new o.ArrayType(o.DYNAMIC_TYPE);
          } else {
            resolvedProviderValueExpr = providerValueExpressions[0];
            type = providerValueExpressions[0].type;
          }
          if (!type) {
            type = o.DYNAMIC_TYPE;
          }
          if (isEager) {
            this.fields.push(new o.ClassField(propName, type));
            this._createStmts.push(o.THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
          } else {
            var internalField = "_" + propName;
            this.fields.push(new o.ClassField(internalField, type));
            var getterStmts = [new o.IfStmt(o.THIS_EXPR.prop(internalField).isBlank(), [o.THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]), new o.ReturnStatement(o.THIS_EXPR.prop(internalField))];
            this.getters.push(new o.ClassGetter(propName, getterStmts, type));
          }
          return o.THIS_EXPR.prop(propName);
        };
        _InjectorBuilder.prototype._getDependency = function(dep) {
          var result = null;
          if (dep.isValue) {
            result = o.literal(dep.value);
          }
          if (!dep.isSkipSelf) {
            if (dep.token && (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ComponentFactoryResolver).reference)) {
              result = o.THIS_EXPR;
            }
            if (!result) {
              result = this._instances.get(dep.token.reference);
            }
          }
          if (!result) {
            var args = [createDiTokenExpression(dep.token)];
            if (dep.isOptional) {
              args.push(o.NULL_EXPR);
            }
            result = InjectorProps.parent.callMethod('get', args);
          }
          return result;
        };
        return _InjectorBuilder;
      }());
      InjectorProps = (function() {
        function InjectorProps() {}
        InjectorProps.parent = o.THIS_EXPR.prop('parent');
        return InjectorProps;
      }());
      InjectMethodVars = (function() {
        function InjectMethodVars() {}
        InjectMethodVars.token = o.variable('token');
        InjectMethodVars.notFoundResult = o.variable('notFoundResult');
        return InjectMethodVars;
      }());
    }
  };
});

$__System.register("58", [], function($__export) {
  "use strict";
  var _ASSET_URL_RE,
      ImportGenerator,
      AssetUrl;
  return {
    setters: [],
    execute: function() {
      _ASSET_URL_RE = /asset:([^\/]+)\/([^\/]+)\/(.+)/;
      ImportGenerator = (function() {
        function ImportGenerator() {}
        ImportGenerator.parseAssetUrl = function(url) {
          return AssetUrl.parse(url);
        };
        return ImportGenerator;
      }());
      $__export("ImportGenerator", ImportGenerator);
      AssetUrl = (function() {
        function AssetUrl(packageName, firstLevelDir, modulePath) {
          this.packageName = packageName;
          this.firstLevelDir = firstLevelDir;
          this.modulePath = modulePath;
        }
        AssetUrl.parse = function(url, allowNonMatching) {
          if (allowNonMatching === void 0) {
            allowNonMatching = true;
          }
          var match = url.match(_ASSET_URL_RE);
          if (match !== null) {
            return new AssetUrl(match[1], match[2], match[3]);
          }
          if (allowNonMatching) {
            return null;
          }
          throw new Error("Url " + url + " is not a valid asset: url");
        };
        return AssetUrl;
      }());
      $__export("AssetUrl", AssetUrl);
    }
  };
});

$__System.register("1e", ["16", "14"], function($__export) {
  "use strict";
  var isBlank,
      isPresent,
      o,
      _SINGLE_QUOTE_ESCAPE_STRING_RE,
      _LEGAL_IDENTIFIER_RE,
      CATCH_ERROR_VAR,
      CATCH_STACK_VAR,
      OutputEmitter,
      _EmittedLine,
      EmitterVisitorContext,
      AbstractEmitterVisitor;
  function escapeIdentifier(input, escapeDollar, alwaysQuote) {
    if (alwaysQuote === void 0) {
      alwaysQuote = true;
    }
    if (isBlank(input)) {
      return null;
    }
    var body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function() {
      var match = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        match[_i - 0] = arguments[_i];
      }
      if (match[0] == '$') {
        return escapeDollar ? '\\$' : '$';
      } else if (match[0] == '\n') {
        return '\\n';
      } else if (match[0] == '\r') {
        return '\\r';
      } else {
        return "\\" + match[0];
      }
    });
    var requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
    return requiresQuotes ? "'" + body + "'" : body;
  }
  function _createIndent(count) {
    var res = '';
    for (var i = 0; i < count; i++) {
      res += '  ';
    }
    return res;
  }
  $__export("escapeIdentifier", escapeIdentifier);
  return {
    setters: [function($__m) {
      isBlank = $__m.isBlank;
      isPresent = $__m.isPresent;
    }, function($__m) {
      o = $__m;
    }],
    execute: function() {
      _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
      _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
      CATCH_ERROR_VAR = o.variable('error');
      $__export("CATCH_ERROR_VAR", CATCH_ERROR_VAR);
      CATCH_STACK_VAR = o.variable('stack');
      $__export("CATCH_STACK_VAR", CATCH_STACK_VAR);
      OutputEmitter = (function() {
        function OutputEmitter() {}
        return OutputEmitter;
      }());
      $__export("OutputEmitter", OutputEmitter);
      _EmittedLine = (function() {
        function _EmittedLine(indent) {
          this.indent = indent;
          this.parts = [];
        }
        return _EmittedLine;
      }());
      EmitterVisitorContext = (function() {
        function EmitterVisitorContext(_exportedVars, _indent) {
          this._exportedVars = _exportedVars;
          this._indent = _indent;
          this._classes = [];
          this._lines = [new _EmittedLine(_indent)];
        }
        EmitterVisitorContext.createRoot = function(exportedVars) {
          return new EmitterVisitorContext(exportedVars, 0);
        };
        Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
          get: function() {
            return this._lines[this._lines.length - 1];
          },
          enumerable: true,
          configurable: true
        });
        EmitterVisitorContext.prototype.isExportedVar = function(varName) {
          return this._exportedVars.indexOf(varName) !== -1;
        };
        EmitterVisitorContext.prototype.println = function(lastPart) {
          if (lastPart === void 0) {
            lastPart = '';
          }
          this.print(lastPart, true);
        };
        EmitterVisitorContext.prototype.lineIsEmpty = function() {
          return this._currentLine.parts.length === 0;
        };
        EmitterVisitorContext.prototype.print = function(part, newLine) {
          if (newLine === void 0) {
            newLine = false;
          }
          if (part.length > 0) {
            this._currentLine.parts.push(part);
          }
          if (newLine) {
            this._lines.push(new _EmittedLine(this._indent));
          }
        };
        EmitterVisitorContext.prototype.removeEmptyLastLine = function() {
          if (this.lineIsEmpty()) {
            this._lines.pop();
          }
        };
        EmitterVisitorContext.prototype.incIndent = function() {
          this._indent++;
          this._currentLine.indent = this._indent;
        };
        EmitterVisitorContext.prototype.decIndent = function() {
          this._indent--;
          this._currentLine.indent = this._indent;
        };
        EmitterVisitorContext.prototype.pushClass = function(clazz) {
          this._classes.push(clazz);
        };
        EmitterVisitorContext.prototype.popClass = function() {
          return this._classes.pop();
        };
        Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
          get: function() {
            return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
          },
          enumerable: true,
          configurable: true
        });
        EmitterVisitorContext.prototype.toSource = function() {
          var lines = this._lines;
          if (lines[lines.length - 1].parts.length === 0) {
            lines = lines.slice(0, lines.length - 1);
          }
          return lines.map(function(line) {
            if (line.parts.length > 0) {
              return _createIndent(line.indent) + line.parts.join('');
            } else {
              return '';
            }
          }).join('\n');
        };
        return EmitterVisitorContext;
      }());
      $__export("EmitterVisitorContext", EmitterVisitorContext);
      AbstractEmitterVisitor = (function() {
        function AbstractEmitterVisitor(_escapeDollarInStrings) {
          this._escapeDollarInStrings = _escapeDollarInStrings;
        }
        AbstractEmitterVisitor.prototype.visitExpressionStmt = function(stmt, ctx) {
          stmt.expr.visitExpression(this, ctx);
          ctx.println(';');
          return null;
        };
        AbstractEmitterVisitor.prototype.visitReturnStmt = function(stmt, ctx) {
          ctx.print("return ");
          stmt.value.visitExpression(this, ctx);
          ctx.println(';');
          return null;
        };
        AbstractEmitterVisitor.prototype.visitIfStmt = function(stmt, ctx) {
          ctx.print("if (");
          stmt.condition.visitExpression(this, ctx);
          ctx.print(") {");
          var hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;
          if (stmt.trueCase.length <= 1 && !hasElseCase) {
            ctx.print(" ");
            this.visitAllStatements(stmt.trueCase, ctx);
            ctx.removeEmptyLastLine();
            ctx.print(" ");
          } else {
            ctx.println();
            ctx.incIndent();
            this.visitAllStatements(stmt.trueCase, ctx);
            ctx.decIndent();
            if (hasElseCase) {
              ctx.println("} else {");
              ctx.incIndent();
              this.visitAllStatements(stmt.falseCase, ctx);
              ctx.decIndent();
            }
          }
          ctx.println("}");
          return null;
        };
        AbstractEmitterVisitor.prototype.visitThrowStmt = function(stmt, ctx) {
          ctx.print("throw ");
          stmt.error.visitExpression(this, ctx);
          ctx.println(";");
          return null;
        };
        AbstractEmitterVisitor.prototype.visitCommentStmt = function(stmt, ctx) {
          var lines = stmt.comment.split('\n');
          lines.forEach(function(line) {
            ctx.println("// " + line);
          });
          return null;
        };
        AbstractEmitterVisitor.prototype.visitWriteVarExpr = function(expr, ctx) {
          var lineWasEmpty = ctx.lineIsEmpty();
          if (!lineWasEmpty) {
            ctx.print('(');
          }
          ctx.print(expr.name + " = ");
          expr.value.visitExpression(this, ctx);
          if (!lineWasEmpty) {
            ctx.print(')');
          }
          return null;
        };
        AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function(expr, ctx) {
          var lineWasEmpty = ctx.lineIsEmpty();
          if (!lineWasEmpty) {
            ctx.print('(');
          }
          expr.receiver.visitExpression(this, ctx);
          ctx.print("[");
          expr.index.visitExpression(this, ctx);
          ctx.print("] = ");
          expr.value.visitExpression(this, ctx);
          if (!lineWasEmpty) {
            ctx.print(')');
          }
          return null;
        };
        AbstractEmitterVisitor.prototype.visitWritePropExpr = function(expr, ctx) {
          var lineWasEmpty = ctx.lineIsEmpty();
          if (!lineWasEmpty) {
            ctx.print('(');
          }
          expr.receiver.visitExpression(this, ctx);
          ctx.print("." + expr.name + " = ");
          expr.value.visitExpression(this, ctx);
          if (!lineWasEmpty) {
            ctx.print(')');
          }
          return null;
        };
        AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function(expr, ctx) {
          expr.receiver.visitExpression(this, ctx);
          var name = expr.name;
          if (isPresent(expr.builtin)) {
            name = this.getBuiltinMethodName(expr.builtin);
            if (isBlank(name)) {
              return null;
            }
          }
          ctx.print("." + name + "(");
          this.visitAllExpressions(expr.args, ctx, ",");
          ctx.print(")");
          return null;
        };
        AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function(expr, ctx) {
          expr.fn.visitExpression(this, ctx);
          ctx.print("(");
          this.visitAllExpressions(expr.args, ctx, ',');
          ctx.print(")");
          return null;
        };
        AbstractEmitterVisitor.prototype.visitReadVarExpr = function(ast, ctx) {
          var varName = ast.name;
          if (isPresent(ast.builtin)) {
            switch (ast.builtin) {
              case o.BuiltinVar.Super:
                varName = 'super';
                break;
              case o.BuiltinVar.This:
                varName = 'this';
                break;
              case o.BuiltinVar.CatchError:
                varName = CATCH_ERROR_VAR.name;
                break;
              case o.BuiltinVar.CatchStack:
                varName = CATCH_STACK_VAR.name;
                break;
              default:
                throw new Error("Unknown builtin variable " + ast.builtin);
            }
          }
          ctx.print(varName);
          return null;
        };
        AbstractEmitterVisitor.prototype.visitInstantiateExpr = function(ast, ctx) {
          ctx.print("new ");
          ast.classExpr.visitExpression(this, ctx);
          ctx.print("(");
          this.visitAllExpressions(ast.args, ctx, ',');
          ctx.print(")");
          return null;
        };
        AbstractEmitterVisitor.prototype.visitLiteralExpr = function(ast, ctx, absentValue) {
          if (absentValue === void 0) {
            absentValue = 'null';
          }
          var value = ast.value;
          if (typeof value === 'string') {
            ctx.print(escapeIdentifier(value, this._escapeDollarInStrings));
          } else if (isBlank(value)) {
            ctx.print(absentValue);
          } else {
            ctx.print("" + value);
          }
          return null;
        };
        AbstractEmitterVisitor.prototype.visitConditionalExpr = function(ast, ctx) {
          ctx.print("(");
          ast.condition.visitExpression(this, ctx);
          ctx.print('? ');
          ast.trueCase.visitExpression(this, ctx);
          ctx.print(': ');
          ast.falseCase.visitExpression(this, ctx);
          ctx.print(")");
          return null;
        };
        AbstractEmitterVisitor.prototype.visitNotExpr = function(ast, ctx) {
          ctx.print('!');
          ast.condition.visitExpression(this, ctx);
          return null;
        };
        AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
          var opStr;
          switch (ast.operator) {
            case o.BinaryOperator.Equals:
              opStr = '==';
              break;
            case o.BinaryOperator.Identical:
              opStr = '===';
              break;
            case o.BinaryOperator.NotEquals:
              opStr = '!=';
              break;
            case o.BinaryOperator.NotIdentical:
              opStr = '!==';
              break;
            case o.BinaryOperator.And:
              opStr = '&&';
              break;
            case o.BinaryOperator.Or:
              opStr = '||';
              break;
            case o.BinaryOperator.Plus:
              opStr = '+';
              break;
            case o.BinaryOperator.Minus:
              opStr = '-';
              break;
            case o.BinaryOperator.Divide:
              opStr = '/';
              break;
            case o.BinaryOperator.Multiply:
              opStr = '*';
              break;
            case o.BinaryOperator.Modulo:
              opStr = '%';
              break;
            case o.BinaryOperator.Lower:
              opStr = '<';
              break;
            case o.BinaryOperator.LowerEquals:
              opStr = '<=';
              break;
            case o.BinaryOperator.Bigger:
              opStr = '>';
              break;
            case o.BinaryOperator.BiggerEquals:
              opStr = '>=';
              break;
            default:
              throw new Error("Unknown operator " + ast.operator);
          }
          ctx.print("(");
          ast.lhs.visitExpression(this, ctx);
          ctx.print(" " + opStr + " ");
          ast.rhs.visitExpression(this, ctx);
          ctx.print(")");
          return null;
        };
        AbstractEmitterVisitor.prototype.visitReadPropExpr = function(ast, ctx) {
          ast.receiver.visitExpression(this, ctx);
          ctx.print(".");
          ctx.print(ast.name);
          return null;
        };
        AbstractEmitterVisitor.prototype.visitReadKeyExpr = function(ast, ctx) {
          ast.receiver.visitExpression(this, ctx);
          ctx.print("[");
          ast.index.visitExpression(this, ctx);
          ctx.print("]");
          return null;
        };
        AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function(ast, ctx) {
          var useNewLine = ast.entries.length > 1;
          ctx.print("[", useNewLine);
          ctx.incIndent();
          this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);
          ctx.decIndent();
          ctx.print("]", useNewLine);
          return null;
        };
        AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function(ast, ctx) {
          var _this = this;
          var useNewLine = ast.entries.length > 1;
          ctx.print("{", useNewLine);
          ctx.incIndent();
          this.visitAllObjects(function(entry) {
            ctx.print(escapeIdentifier(entry[0], _this._escapeDollarInStrings, false) + ": ");
            entry[1].visitExpression(_this, ctx);
          }, ast.entries, ctx, ',', useNewLine);
          ctx.decIndent();
          ctx.print("}", useNewLine);
          return null;
        };
        AbstractEmitterVisitor.prototype.visitAllExpressions = function(expressions, ctx, separator, newLine) {
          var _this = this;
          if (newLine === void 0) {
            newLine = false;
          }
          this.visitAllObjects(function(expr) {
            return expr.visitExpression(_this, ctx);
          }, expressions, ctx, separator, newLine);
        };
        AbstractEmitterVisitor.prototype.visitAllObjects = function(handler, expressions, ctx, separator, newLine) {
          if (newLine === void 0) {
            newLine = false;
          }
          for (var i = 0; i < expressions.length; i++) {
            if (i > 0) {
              ctx.print(separator, newLine);
            }
            handler(expressions[i]);
          }
          if (newLine) {
            ctx.println();
          }
        };
        AbstractEmitterVisitor.prototype.visitAllStatements = function(statements, ctx) {
          var _this = this;
          statements.forEach(function(stmt) {
            return stmt.visitStatement(_this, ctx);
          });
        };
        return AbstractEmitterVisitor;
      }());
      $__export("AbstractEmitterVisitor", AbstractEmitterVisitor);
    }
  };
});

$__System.register("1c", ["16", "1e", "14"], function($__export) {
  "use strict";
  var __extends,
      isBlank,
      isPresent,
      AbstractEmitterVisitor,
      CATCH_ERROR_VAR,
      CATCH_STACK_VAR,
      EmitterVisitorContext,
      o,
      _debugModuleUrl,
      TypeScriptEmitter,
      _TsEmitterVisitor;
  function debugOutputAstAsTypeScript(ast) {
    var converter = new _TsEmitterVisitor(_debugModuleUrl);
    var ctx = EmitterVisitorContext.createRoot([]);
    var asts = Array.isArray(ast) ? ast : [ast];
    asts.forEach(function(ast) {
      if (ast instanceof o.Statement) {
        ast.visitStatement(converter, ctx);
      } else if (ast instanceof o.Expression) {
        ast.visitExpression(converter, ctx);
      } else if (ast instanceof o.Type) {
        ast.visitType(converter, ctx);
      } else {
        throw new Error("Don't know how to print debug info for " + ast);
      }
    });
    return ctx.toSource();
  }
  $__export("debugOutputAstAsTypeScript", debugOutputAstAsTypeScript);
  return {
    setters: [function($__m) {
      isBlank = $__m.isBlank;
      isPresent = $__m.isPresent;
    }, function($__m) {
      AbstractEmitterVisitor = $__m.AbstractEmitterVisitor;
      CATCH_ERROR_VAR = $__m.CATCH_ERROR_VAR;
      CATCH_STACK_VAR = $__m.CATCH_STACK_VAR;
      EmitterVisitorContext = $__m.EmitterVisitorContext;
    }, function($__m) {
      o = $__m;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      _debugModuleUrl = 'asset://debug/lib';
      TypeScriptEmitter = (function() {
        function TypeScriptEmitter(_importGenerator) {
          this._importGenerator = _importGenerator;
        }
        TypeScriptEmitter.prototype.emitStatements = function(moduleUrl, stmts, exportedVars) {
          var _this = this;
          var converter = new _TsEmitterVisitor(moduleUrl);
          var ctx = EmitterVisitorContext.createRoot(exportedVars);
          converter.visitAllStatements(stmts, ctx);
          var srcParts = [];
          converter.importsWithPrefixes.forEach(function(prefix, importedModuleUrl) {
            srcParts.push("imp" + ("ort * as " + prefix + " from '" + _this._importGenerator.getImportPath(moduleUrl, importedModuleUrl) + "';"));
          });
          srcParts.push(ctx.toSource());
          return srcParts.join('\n');
        };
        return TypeScriptEmitter;
      }());
      $__export("TypeScriptEmitter", TypeScriptEmitter);
      _TsEmitterVisitor = (function(_super) {
        __extends(_TsEmitterVisitor, _super);
        function _TsEmitterVisitor(_moduleUrl) {
          _super.call(this, false);
          this._moduleUrl = _moduleUrl;
          this.importsWithPrefixes = new Map();
        }
        _TsEmitterVisitor.prototype.visitType = function(t, ctx, defaultType) {
          if (defaultType === void 0) {
            defaultType = 'any';
          }
          if (isPresent(t)) {
            t.visitType(this, ctx);
          } else {
            ctx.print(defaultType);
          }
        };
        _TsEmitterVisitor.prototype.visitLiteralExpr = function(ast, ctx) {
          _super.prototype.visitLiteralExpr.call(this, ast, ctx, '(null as any)');
        };
        _TsEmitterVisitor.prototype.visitLiteralArrayExpr = function(ast, ctx) {
          if (ast.entries.length === 0) {
            ctx.print('(');
          }
          var result = _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);
          if (ast.entries.length === 0) {
            ctx.print(' as any[])');
          }
          return result;
        };
        _TsEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
          this._visitIdentifier(ast.value, ast.typeParams, ctx);
          return null;
        };
        _TsEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
          if (ctx.isExportedVar(stmt.name)) {
            ctx.print("export ");
          }
          if (stmt.hasModifier(o.StmtModifier.Final)) {
            ctx.print("const");
          } else {
            ctx.print("var");
          }
          ctx.print(" " + stmt.name + ":");
          this.visitType(stmt.type, ctx);
          ctx.print(" = ");
          stmt.value.visitExpression(this, ctx);
          ctx.println(";");
          return null;
        };
        _TsEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
          ctx.print("(<");
          ast.type.visitType(this, ctx);
          ctx.print(">");
          ast.value.visitExpression(this, ctx);
          ctx.print(")");
          return null;
        };
        _TsEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
          var _this = this;
          ctx.pushClass(stmt);
          if (ctx.isExportedVar(stmt.name)) {
            ctx.print("export ");
          }
          ctx.print("class " + stmt.name);
          if (isPresent(stmt.parent)) {
            ctx.print(" extends ");
            stmt.parent.visitExpression(this, ctx);
          }
          ctx.println(" {");
          ctx.incIndent();
          stmt.fields.forEach(function(field) {
            return _this._visitClassField(field, ctx);
          });
          if (isPresent(stmt.constructorMethod)) {
            this._visitClassConstructor(stmt, ctx);
          }
          stmt.getters.forEach(function(getter) {
            return _this._visitClassGetter(getter, ctx);
          });
          stmt.methods.forEach(function(method) {
            return _this._visitClassMethod(method, ctx);
          });
          ctx.decIndent();
          ctx.println("}");
          ctx.popClass();
          return null;
        };
        _TsEmitterVisitor.prototype._visitClassField = function(field, ctx) {
          if (field.hasModifier(o.StmtModifier.Private)) {
            ctx.print("/*private*/ ");
          }
          ctx.print(field.name);
          ctx.print(':');
          this.visitType(field.type, ctx);
          ctx.println(";");
        };
        _TsEmitterVisitor.prototype._visitClassGetter = function(getter, ctx) {
          if (getter.hasModifier(o.StmtModifier.Private)) {
            ctx.print("private ");
          }
          ctx.print("get " + getter.name + "()");
          ctx.print(':');
          this.visitType(getter.type, ctx);
          ctx.println(" {");
          ctx.incIndent();
          this.visitAllStatements(getter.body, ctx);
          ctx.decIndent();
          ctx.println("}");
        };
        _TsEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
          ctx.print("constructor(");
          this._visitParams(stmt.constructorMethod.params, ctx);
          ctx.println(") {");
          ctx.incIndent();
          this.visitAllStatements(stmt.constructorMethod.body, ctx);
          ctx.decIndent();
          ctx.println("}");
        };
        _TsEmitterVisitor.prototype._visitClassMethod = function(method, ctx) {
          if (method.hasModifier(o.StmtModifier.Private)) {
            ctx.print("private ");
          }
          ctx.print(method.name + "(");
          this._visitParams(method.params, ctx);
          ctx.print("):");
          this.visitType(method.type, ctx, 'void');
          ctx.println(" {");
          ctx.incIndent();
          this.visitAllStatements(method.body, ctx);
          ctx.decIndent();
          ctx.println("}");
        };
        _TsEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
          ctx.print("(");
          this._visitParams(ast.params, ctx);
          ctx.print("):");
          this.visitType(ast.type, ctx, 'void');
          ctx.println(" => {");
          ctx.incIndent();
          this.visitAllStatements(ast.statements, ctx);
          ctx.decIndent();
          ctx.print("}");
          return null;
        };
        _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
          if (ctx.isExportedVar(stmt.name)) {
            ctx.print("export ");
          }
          ctx.print("function " + stmt.name + "(");
          this._visitParams(stmt.params, ctx);
          ctx.print("):");
          this.visitType(stmt.type, ctx, 'void');
          ctx.println(" {");
          ctx.incIndent();
          this.visitAllStatements(stmt.statements, ctx);
          ctx.decIndent();
          ctx.println("}");
          return null;
        };
        _TsEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
          ctx.println("try {");
          ctx.incIndent();
          this.visitAllStatements(stmt.bodyStmts, ctx);
          ctx.decIndent();
          ctx.println("} catch (" + CATCH_ERROR_VAR.name + ") {");
          ctx.incIndent();
          var catchStmts = [CATCH_STACK_VAR.set(CATCH_ERROR_VAR.prop('stack')).toDeclStmt(null, [o.StmtModifier.Final])].concat(stmt.catchStmts);
          this.visitAllStatements(catchStmts, ctx);
          ctx.decIndent();
          ctx.println("}");
          return null;
        };
        _TsEmitterVisitor.prototype.visitBuiltintType = function(type, ctx) {
          var typeStr;
          switch (type.name) {
            case o.BuiltinTypeName.Bool:
              typeStr = 'boolean';
              break;
            case o.BuiltinTypeName.Dynamic:
              typeStr = 'any';
              break;
            case o.BuiltinTypeName.Function:
              typeStr = 'Function';
              break;
            case o.BuiltinTypeName.Number:
              typeStr = 'number';
              break;
            case o.BuiltinTypeName.Int:
              typeStr = 'number';
              break;
            case o.BuiltinTypeName.String:
              typeStr = 'string';
              break;
            default:
              throw new Error("Unsupported builtin type " + type.name);
          }
          ctx.print(typeStr);
          return null;
        };
        _TsEmitterVisitor.prototype.visitExternalType = function(ast, ctx) {
          this._visitIdentifier(ast.value, ast.typeParams, ctx);
          return null;
        };
        _TsEmitterVisitor.prototype.visitArrayType = function(type, ctx) {
          this.visitType(type.of, ctx);
          ctx.print("[]");
          return null;
        };
        _TsEmitterVisitor.prototype.visitMapType = function(type, ctx) {
          ctx.print("{[key: string]:");
          this.visitType(type.valueType, ctx);
          ctx.print("}");
          return null;
        };
        _TsEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
          var name;
          switch (method) {
            case o.BuiltinMethod.ConcatArray:
              name = 'concat';
              break;
            case o.BuiltinMethod.SubscribeObservable:
              name = 'subscribe';
              break;
            case o.BuiltinMethod.Bind:
              name = 'bind';
              break;
            default:
              throw new Error("Unknown builtin method: " + method);
          }
          return name;
        };
        _TsEmitterVisitor.prototype._visitParams = function(params, ctx) {
          var _this = this;
          this.visitAllObjects(function(param) {
            ctx.print(param.name);
            ctx.print(':');
            _this.visitType(param.type, ctx);
          }, params, ctx, ',');
        };
        _TsEmitterVisitor.prototype._visitIdentifier = function(value, typeParams, ctx) {
          var _this = this;
          if (isBlank(value.name)) {
            throw new Error("Internal error: unknown identifier " + value);
          }
          if (isPresent(value.moduleUrl) && value.moduleUrl != this._moduleUrl) {
            var prefix = this.importsWithPrefixes.get(value.moduleUrl);
            if (isBlank(prefix)) {
              prefix = "import" + this.importsWithPrefixes.size;
              this.importsWithPrefixes.set(value.moduleUrl, prefix);
            }
            ctx.print(prefix + ".");
          }
          if (value.reference && value.reference.members) {
            ctx.print(value.reference.name);
            ctx.print('.');
            ctx.print(value.reference.members.join('.'));
          } else {
            ctx.print(value.name);
          }
          if (isPresent(typeParams) && typeParams.length > 0) {
            ctx.print("<");
            this.visitAllObjects(function(type) {
              return type.visitType(_this, ctx);
            }, typeParams, ctx, ',');
            ctx.print(">");
          }
        };
        return _TsEmitterVisitor;
      }(AbstractEmitterVisitor));
    }
  };
});

$__System.register("59", ["c"], function($__export) {
  "use strict";
  var SecurityContext,
      SECURITY_SCHEMA;
  function registerContext(ctx, specs) {
    for (var _i = 0,
        specs_1 = specs; _i < specs_1.length; _i++) {
      var spec = specs_1[_i];
      SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
    }
  }
  return {
    setters: [function($__m) {
      SecurityContext = $__m.SecurityContext;
    }],
    execute: function() {
      SECURITY_SCHEMA = {};
      $__export("SECURITY_SCHEMA", SECURITY_SCHEMA);
      registerContext(SecurityContext.HTML, ['iframe|srcdoc', '*|innerHTML', '*|outerHTML']);
      registerContext(SecurityContext.STYLE, ['*|style']);
      registerContext(SecurityContext.URL, ['*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href', 'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action', 'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite', 'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src']);
      registerContext(SecurityContext.RESOURCE_URL, ['applet|code', 'applet|codebase', 'base|href', 'embed|src', 'frame|src', 'head|profile', 'html|manifest', 'iframe|src', 'link|href', 'media|src', 'object|codebase', 'object|data', 'script|src']);
    }
  };
});

$__System.register("3e", ["c", "59", "31"], function($__export) {
  "use strict";
  var __extends,
      CUSTOM_ELEMENTS_SCHEMA,
      Injectable,
      NO_ERRORS_SCHEMA,
      SecurityContext,
      SECURITY_SCHEMA,
      ElementSchemaRegistry,
      BOOLEAN,
      NUMBER,
      STRING,
      OBJECT,
      SCHEMA,
      _ATTR_TO_PROP,
      DomElementSchemaRegistry;
  return {
    setters: [function($__m) {
      CUSTOM_ELEMENTS_SCHEMA = $__m.CUSTOM_ELEMENTS_SCHEMA;
      Injectable = $__m.Injectable;
      NO_ERRORS_SCHEMA = $__m.NO_ERRORS_SCHEMA;
      SecurityContext = $__m.SecurityContext;
    }, function($__m) {
      SECURITY_SCHEMA = $__m.SECURITY_SCHEMA;
    }, function($__m) {
      ElementSchemaRegistry = $__m.ElementSchemaRegistry;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      BOOLEAN = 'boolean';
      NUMBER = 'number';
      STRING = 'string';
      OBJECT = 'object';
      SCHEMA = ['[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop', '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate', 'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate', 'media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume', ':svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex', ':svg:graphics^:svg:|', ':svg:animation^:svg:|*begin,*end,*repeat', ':svg:geometry^:svg:|', ':svg:componentTransferFunction^:svg:|', ':svg:gradient^:svg:|', ':svg:textContent^:svg:graphics|', ':svg:textPositioning^:svg:textContent|', 'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username', 'area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username', 'audio^media|', 'br^[HTMLElement]|clear', 'base^[HTMLElement]|href,target', 'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink', 'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value', 'canvas^[HTMLElement]|#height,#width', 'content^[HTMLElement]|select', 'dl^[HTMLElement]|!compact', 'datalist^[HTMLElement]|', 'details^[HTMLElement]|!open', 'dialog^[HTMLElement]|!open,returnValue', 'dir^[HTMLElement]|!compact', 'div^[HTMLElement]|align', 'embed^[HTMLElement]|align,height,name,src,type,width', 'fieldset^[HTMLElement]|!disabled,name', 'font^[HTMLElement]|color,face,size', 'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target', 'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src', 'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows', 'hr^[HTMLElement]|align,color,!noShade,size,width', 'head^[HTMLElement]|', 'h1,h2,h3,h4,h5,h6^[HTMLElement]|align', 'html^[HTMLElement]|version', 'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width', 'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width', 'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width', 'keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name', 'li^[HTMLElement]|type,#value', 'label^[HTMLElement]|htmlFor', 'legend^[HTMLElement]|align', 'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type', 'map^[HTMLElement]|name', 'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width', 'menu^[HTMLElement]|!compact', 'meta^[HTMLElement]|content,httpEquiv,name,scheme', 'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value', 'ins,del^[HTMLElement]|cite,dateTime', 'ol^[HTMLElement]|!compact,!reversed,#start,type', 'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width', 'optgroup^[HTMLElement]|!disabled,label', 'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value', 'output^[HTMLElement]|defaultValue,%htmlFor,name,value', 'p^[HTMLElement]|align', 'param^[HTMLElement]|name,type,value,valueType', 'picture^[HTMLElement]|', 'pre^[HTMLElement]|#width', 'progress^[HTMLElement]|#max,#value', 'q,blockquote,cite^[HTMLElement]|', 'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type', 'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value', 'shadow^[HTMLElement]|', 'source^[HTMLElement]|media,sizes,src,srcset,type', 'span^[HTMLElement]|', 'style^[HTMLElement]|!disabled,media,type', 'caption^[HTMLElement]|align', 'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width', 'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width', 'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width', 'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign', 'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign', 'template^[HTMLElement]|', 'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap', 'title^[HTMLElement]|text', 'track^[HTMLElement]|!default,kind,label,src,srclang', 'ul^[HTMLElement]|!compact,type', 'unknown^[HTMLElement]|', 'video^media|#height,poster,#width', ':svg:a^:svg:graphics|', ':svg:animate^:svg:animation|', ':svg:animateMotion^:svg:animation|', ':svg:animateTransform^:svg:animation|', ':svg:circle^:svg:geometry|', ':svg:clipPath^:svg:graphics|', ':svg:cursor^:svg:|', ':svg:defs^:svg:graphics|', ':svg:desc^:svg:|', ':svg:discard^:svg:|', ':svg:ellipse^:svg:geometry|', ':svg:feBlend^:svg:|', ':svg:feColorMatrix^:svg:|', ':svg:feComponentTransfer^:svg:|', ':svg:feComposite^:svg:|', ':svg:feConvolveMatrix^:svg:|', ':svg:feDiffuseLighting^:svg:|', ':svg:feDisplacementMap^:svg:|', ':svg:feDistantLight^:svg:|', ':svg:feDropShadow^:svg:|', ':svg:feFlood^:svg:|', ':svg:feFuncA^:svg:componentTransferFunction|', ':svg:feFuncB^:svg:componentTransferFunction|', ':svg:feFuncG^:svg:componentTransferFunction|', ':svg:feFuncR^:svg:componentTransferFunction|', ':svg:feGaussianBlur^:svg:|', ':svg:feImage^:svg:|', ':svg:feMerge^:svg:|', ':svg:feMergeNode^:svg:|', ':svg:feMorphology^:svg:|', ':svg:feOffset^:svg:|', ':svg:fePointLight^:svg:|', ':svg:feSpecularLighting^:svg:|', ':svg:feSpotLight^:svg:|', ':svg:feTile^:svg:|', ':svg:feTurbulence^:svg:|', ':svg:filter^:svg:|', ':svg:foreignObject^:svg:graphics|', ':svg:g^:svg:graphics|', ':svg:image^:svg:graphics|', ':svg:line^:svg:geometry|', ':svg:linearGradient^:svg:gradient|', ':svg:mpath^:svg:|', ':svg:marker^:svg:|', ':svg:mask^:svg:|', ':svg:metadata^:svg:|', ':svg:path^:svg:geometry|', ':svg:pattern^:svg:|', ':svg:polygon^:svg:geometry|', ':svg:polyline^:svg:geometry|', ':svg:radialGradient^:svg:gradient|', ':svg:rect^:svg:geometry|', ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan', ':svg:script^:svg:|type', ':svg:set^:svg:animation|', ':svg:stop^:svg:|', ':svg:style^:svg:|!disabled,media,title,type', ':svg:switch^:svg:graphics|', ':svg:symbol^:svg:|', ':svg:tspan^:svg:textPositioning|', ':svg:text^:svg:textPositioning|', ':svg:textPath^:svg:textContent|', ':svg:title^:svg:|', ':svg:use^:svg:graphics|', ':svg:view^:svg:|#zoomAndPan', 'data^[HTMLElement]|value', 'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default', 'summary^[HTMLElement]|', 'time^[HTMLElement]|dateTime'];
      _ATTR_TO_PROP = {
        'class': 'className',
        'formaction': 'formAction',
        'innerHtml': 'innerHTML',
        'readonly': 'readOnly',
        'tabindex': 'tabIndex'
      };
      DomElementSchemaRegistry = (function(_super) {
        __extends(DomElementSchemaRegistry, _super);
        function DomElementSchemaRegistry() {
          var _this = this;
          _super.call(this);
          this._schema = {};
          SCHEMA.forEach(function(encodedType) {
            var type = {};
            var _a = encodedType.split('|'),
                strType = _a[0],
                strProperties = _a[1];
            var properties = strProperties.split(',');
            var _b = strType.split('^'),
                typeNames = _b[0],
                superName = _b[1];
            typeNames.split(',').forEach(function(tag) {
              return _this._schema[tag.toLowerCase()] = type;
            });
            var superType = superName && _this._schema[superName.toLowerCase()];
            if (superType) {
              Object.keys(superType).forEach(function(prop) {
                type[prop] = superType[prop];
              });
            }
            properties.forEach(function(property) {
              if (property.length > 0) {
                switch (property[0]) {
                  case '*':
                    break;
                  case '!':
                    type[property.substring(1)] = BOOLEAN;
                    break;
                  case '#':
                    type[property.substring(1)] = NUMBER;
                    break;
                  case '%':
                    type[property.substring(1)] = OBJECT;
                    break;
                  default:
                    type[property] = STRING;
                }
              }
            });
          });
        }
        DomElementSchemaRegistry.prototype.hasProperty = function(tagName, propName, schemaMetas) {
          if (schemaMetas.some(function(schema) {
            return schema.name === NO_ERRORS_SCHEMA.name;
          })) {
            return true;
          }
          if (tagName.indexOf('-') > -1) {
            if (tagName === 'ng-container' || tagName === 'ng-content') {
              return false;
            }
            if (schemaMetas.some(function(schema) {
              return schema.name === CUSTOM_ELEMENTS_SCHEMA.name;
            })) {
              return true;
            }
          }
          var elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];
          return !!elementProperties[propName];
        };
        DomElementSchemaRegistry.prototype.hasElement = function(tagName, schemaMetas) {
          if (schemaMetas.some(function(schema) {
            return schema.name === NO_ERRORS_SCHEMA.name;
          })) {
            return true;
          }
          if (tagName.indexOf('-') > -1) {
            if (tagName === 'ng-container' || tagName === 'ng-content') {
              return true;
            }
            if (schemaMetas.some(function(schema) {
              return schema.name === CUSTOM_ELEMENTS_SCHEMA.name;
            })) {
              return true;
            }
          }
          return !!this._schema[tagName.toLowerCase()];
        };
        DomElementSchemaRegistry.prototype.securityContext = function(tagName, propName, isAttribute) {
          if (isAttribute) {
            propName = this.getMappedPropName(propName);
          }
          tagName = tagName.toLowerCase();
          propName = propName.toLowerCase();
          var ctx = SECURITY_SCHEMA[tagName + '|' + propName];
          if (ctx) {
            return ctx;
          }
          ctx = SECURITY_SCHEMA['*|' + propName];
          return ctx ? ctx : SecurityContext.NONE;
        };
        DomElementSchemaRegistry.prototype.getMappedPropName = function(propName) {
          return _ATTR_TO_PROP[propName] || propName;
        };
        DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function() {
          return 'ng-component';
        };
        DomElementSchemaRegistry.prototype.validateProperty = function(name) {
          if (name.toLowerCase().startsWith('on')) {
            var msg = ("Binding to event property '" + name + "' is disallowed for security reasons, ") + ("please use (" + name.slice(2) + ")=...") + ("\nIf '" + name + "' is a directive input, make sure the directive is imported by the") + " current module.";
            return {
              error: true,
              msg: msg
            };
          } else {
            return {error: false};
          }
        };
        DomElementSchemaRegistry.prototype.validateAttribute = function(name) {
          if (name.toLowerCase().startsWith('on')) {
            var msg = ("Binding to event attribute '" + name + "' is disallowed for security reasons, ") + ("please use (" + name.slice(2) + ")=...");
            return {
              error: true,
              msg: msg
            };
          } else {
            return {error: false};
          }
        };
        DomElementSchemaRegistry.prototype.allKnownElementNames = function() {
          return Object.keys(this._schema);
        };
        DomElementSchemaRegistry.decorators = [{type: Injectable}];
        DomElementSchemaRegistry.ctorParameters = [];
        return DomElementSchemaRegistry;
      }(ElementSchemaRegistry));
      $__export("DomElementSchemaRegistry", DomElementSchemaRegistry);
    }
  };
});

$__System.register("5a", [], function($__export) {
  "use strict";
  var ShadowCss,
      _cssContentNextSelectorRe,
      _cssContentRuleRe,
      _cssContentUnscopedRuleRe,
      _polyfillHost,
      _polyfillHostContext,
      _parenSuffix,
      _cssColonHostRe,
      _cssColonHostContextRe,
      _polyfillHostNoCombinator,
      _polyfillHostNoCombinatorRe,
      _shadowDOMSelectorsRe,
      _shadowDeepSelectors,
      _selectorReSuffix,
      _polyfillHostRe,
      _colonHostRe,
      _colonHostContextRe,
      _commentRe,
      _sourceMappingUrlRe,
      _ruleRe,
      _curlyRe,
      OPEN_CURLY,
      CLOSE_CURLY,
      BLOCK_PLACEHOLDER,
      CssRule,
      StringWithEscapedBlocks;
  function stripComments(input) {
    return input.replace(_commentRe, '');
  }
  function extractSourceMappingUrl(input) {
    var matcher = input.match(_sourceMappingUrlRe);
    return matcher ? matcher[0] : '';
  }
  function processRules(input, ruleCallback) {
    var inputWithEscapedBlocks = escapeBlocks(input);
    var nextBlockIndex = 0;
    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function() {
      var m = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        m[_i - 0] = arguments[_i];
      }
      var selector = m[2];
      var content = '';
      var suffix = m[4];
      var contentPrefix = '';
      if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {
        content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
        suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
        contentPrefix = '{';
      }
      var rule = ruleCallback(new CssRule(selector, content));
      return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
    });
  }
  function escapeBlocks(input) {
    var inputParts = input.split(_curlyRe);
    var resultParts = [];
    var escapedBlocks = [];
    var bracketCount = 0;
    var currentBlockParts = [];
    for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {
      var part = inputParts[partIndex];
      if (part == CLOSE_CURLY) {
        bracketCount--;
      }
      if (bracketCount > 0) {
        currentBlockParts.push(part);
      } else {
        if (currentBlockParts.length > 0) {
          escapedBlocks.push(currentBlockParts.join(''));
          resultParts.push(BLOCK_PLACEHOLDER);
          currentBlockParts = [];
        }
        resultParts.push(part);
      }
      if (part == OPEN_CURLY) {
        bracketCount++;
      }
    }
    if (currentBlockParts.length > 0) {
      escapedBlocks.push(currentBlockParts.join(''));
      resultParts.push(BLOCK_PLACEHOLDER);
    }
    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
  }
  $__export("processRules", processRules);
  return {
    setters: [],
    execute: function() {
      ShadowCss = (function() {
        function ShadowCss() {
          this.strictStyling = true;
        }
        ShadowCss.prototype.shimCssText = function(cssText, selector, hostSelector) {
          if (hostSelector === void 0) {
            hostSelector = '';
          }
          var sourceMappingUrl = extractSourceMappingUrl(cssText);
          cssText = stripComments(cssText);
          cssText = this._insertDirectives(cssText);
          return this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;
        };
        ShadowCss.prototype._insertDirectives = function(cssText) {
          cssText = this._insertPolyfillDirectivesInCssText(cssText);
          return this._insertPolyfillRulesInCssText(cssText);
        };
        ShadowCss.prototype._insertPolyfillDirectivesInCssText = function(cssText) {
          return cssText.replace(_cssContentNextSelectorRe, function() {
            var m = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              m[_i - 0] = arguments[_i];
            }
            return m[2] + '{';
          });
        };
        ShadowCss.prototype._insertPolyfillRulesInCssText = function(cssText) {
          return cssText.replace(_cssContentRuleRe, function() {
            var m = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              m[_i - 0] = arguments[_i];
            }
            var rule = m[0].replace(m[1], '').replace(m[2], '');
            return m[4] + rule;
          });
        };
        ShadowCss.prototype._scopeCssText = function(cssText, scopeSelector, hostSelector) {
          var unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
          cssText = this._insertPolyfillHostInCssText(cssText);
          cssText = this._convertColonHost(cssText);
          cssText = this._convertColonHostContext(cssText);
          cssText = this._convertShadowDOMSelectors(cssText);
          if (scopeSelector) {
            cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
          }
          cssText = cssText + '\n' + unscopedRules;
          return cssText.trim();
        };
        ShadowCss.prototype._extractUnscopedRulesFromCssText = function(cssText) {
          var r = '';
          var m;
          _cssContentUnscopedRuleRe.lastIndex = 0;
          while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
            var rule = m[0].replace(m[2], '').replace(m[1], m[4]);
            r += rule + '\n\n';
          }
          return r;
        };
        ShadowCss.prototype._convertColonHost = function(cssText) {
          return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
        };
        ShadowCss.prototype._convertColonHostContext = function(cssText) {
          return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
        };
        ShadowCss.prototype._convertColonRule = function(cssText, regExp, partReplacer) {
          return cssText.replace(regExp, function() {
            var m = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              m[_i - 0] = arguments[_i];
            }
            if (m[2]) {
              var parts = m[2].split(',');
              var r = [];
              for (var i = 0; i < parts.length; i++) {
                var p = parts[i].trim();
                if (!p)
                  break;
                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
              }
              return r.join(',');
            } else {
              return _polyfillHostNoCombinator + m[3];
            }
          });
        };
        ShadowCss.prototype._colonHostContextPartReplacer = function(host, part, suffix) {
          if (part.indexOf(_polyfillHost) > -1) {
            return this._colonHostPartReplacer(host, part, suffix);
          } else {
            return host + part + suffix + ', ' + part + ' ' + host + suffix;
          }
        };
        ShadowCss.prototype._colonHostPartReplacer = function(host, part, suffix) {
          return host + part.replace(_polyfillHost, '') + suffix;
        };
        ShadowCss.prototype._convertShadowDOMSelectors = function(cssText) {
          return _shadowDOMSelectorsRe.reduce(function(result, pattern) {
            return result.replace(pattern, ' ');
          }, cssText);
        };
        ShadowCss.prototype._scopeSelectors = function(cssText, scopeSelector, hostSelector) {
          var _this = this;
          return processRules(cssText, function(rule) {
            var selector = rule.selector;
            var content = rule.content;
            if (rule.selector[0] != '@') {
              selector = _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
            } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {
              content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
            }
            return new CssRule(selector, content);
          });
        };
        ShadowCss.prototype._scopeSelector = function(selector, scopeSelector, hostSelector, strict) {
          var _this = this;
          return selector.split(',').map(function(part) {
            return part.trim().split(_shadowDeepSelectors);
          }).map(function(deepParts) {
            var shallowPart = deepParts[0],
                otherParts = deepParts.slice(1);
            var applyScope = function(shallowPart) {
              if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {
                return strict ? _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) : _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
              } else {
                return shallowPart;
              }
            };
            return [applyScope(shallowPart)].concat(otherParts).join(' ');
          }).join(', ');
        };
        ShadowCss.prototype._selectorNeedsScoping = function(selector, scopeSelector) {
          var re = this._makeScopeMatcher(scopeSelector);
          return !re.test(selector);
        };
        ShadowCss.prototype._makeScopeMatcher = function(scopeSelector) {
          var lre = /\[/g;
          var rre = /\]/g;
          scopeSelector = scopeSelector.replace(lre, '\\[').replace(rre, '\\]');
          return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
        };
        ShadowCss.prototype._applySelectorScope = function(selector, scopeSelector, hostSelector) {
          return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
        };
        ShadowCss.prototype._applySimpleSelectorScope = function(selector, scopeSelector, hostSelector) {
          _polyfillHostRe.lastIndex = 0;
          if (_polyfillHostRe.test(selector)) {
            var replaceBy_1 = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
            return selector.replace(_polyfillHostNoCombinatorRe, function(hnc, selector) {
              return selector[0] === ':' ? replaceBy_1 + selector : selector + replaceBy_1;
            }).replace(_polyfillHostRe, replaceBy_1 + ' ');
          }
          return scopeSelector + ' ' + selector;
        };
        ShadowCss.prototype._applyStrictSelectorScope = function(selector, scopeSelector, hostSelector) {
          var _this = this;
          var isRe = /\[is=([^\]]*)\]/g;
          scopeSelector = scopeSelector.replace(isRe, function(_) {
            var parts = [];
            for (var _i = 1; _i < arguments.length; _i++) {
              parts[_i - 1] = arguments[_i];
            }
            return parts[0];
          });
          var attrName = '[' + scopeSelector + ']';
          var _scopeSelectorPart = function(p) {
            var scopedP = p.trim();
            if (!scopedP) {
              return '';
            }
            if (p.indexOf(_polyfillHostNoCombinator) > -1) {
              scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
            } else {
              var t = p.replace(_polyfillHostRe, '');
              if (t.length > 0) {
                var matches = t.match(/([^:]*)(:*)(.*)/);
                if (matches !== null) {
                  scopedP = matches[1] + attrName + matches[2] + matches[3];
                }
              }
            }
            return scopedP;
          };
          var attrSelectorIndex = 0;
          var attrSelectors = [];
          selector = selector.replace(/\[[^\]]*\]/g, function(attrSelector) {
            var replaceBy = "__attr_sel_" + attrSelectorIndex + "__";
            attrSelectors.push(attrSelector);
            attrSelectorIndex++;
            return replaceBy;
          });
          var scopedSelector = '';
          var startIndex = 0;
          var res;
          var sep = /( |>|\+|~(?!=))\s*/g;
          var scopeAfter = selector.indexOf(_polyfillHostNoCombinator);
          while ((res = sep.exec(selector)) !== null) {
            var separator = res[1];
            var part = selector.slice(startIndex, res.index).trim();
            var scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part;
            scopedSelector += scopedPart + " " + separator + " ";
            startIndex = sep.lastIndex;
          }
          scopedSelector += _scopeSelectorPart(selector.substring(startIndex));
          return scopedSelector.replace(/__attr_sel_(\d+)__/g, function(ph, index) {
            return attrSelectors[+index];
          });
        };
        ShadowCss.prototype._insertPolyfillHostInCssText = function(selector) {
          return selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost);
        };
        return ShadowCss;
      }());
      $__export("ShadowCss", ShadowCss);
      _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
      _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
      _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
      _polyfillHost = '-shadowcsshost';
      _polyfillHostContext = '-shadowcsscontext';
      _parenSuffix = ')(?:\\((' + '(?:\\([^)(]*\\)|[^)(]*)+?' + ')\\))?([^,{]*)';
      _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');
      _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');
      _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
      _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
      _shadowDOMSelectorsRe = [/::shadow/g, /::content/g, /\/shadow-deep\//g, /\/shadow\//g];
      _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
      _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
      _polyfillHostRe = /-shadowcsshost/gim;
      _colonHostRe = /:host/gim;
      _colonHostContextRe = /:host-context/gim;
      _commentRe = /\/\*\s*[\s\S]*?\*\//g;
      _sourceMappingUrlRe = /\/\*\s*#\s*sourceMappingURL=[\s\S]+?\*\//;
      _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
      _curlyRe = /([{}])/g;
      OPEN_CURLY = '{';
      CLOSE_CURLY = '}';
      BLOCK_PLACEHOLDER = '%BLOCK%';
      CssRule = (function() {
        function CssRule(selector, content) {
          this.selector = selector;
          this.content = content;
        }
        return CssRule;
      }());
      $__export("CssRule", CssRule);
      StringWithEscapedBlocks = (function() {
        function StringWithEscapedBlocks(escapedString, blocks) {
          this.escapedString = escapedString;
          this.blocks = blocks;
        }
        return StringWithEscapedBlocks;
      }());
    }
  };
});

$__System.register("3f", ["c", "16"], function($__export) {
  "use strict";
  var Inject,
      Injectable,
      PACKAGE_ROOT_URL,
      isBlank,
      isPresent,
      _ASSET_SCHEME,
      DEFAULT_PACKAGE_URL_PROVIDER,
      UrlResolver,
      _splitRe,
      _ComponentIndex;
  function createUrlResolverWithoutPackagePrefix() {
    return new UrlResolver();
  }
  function createOfflineCompileUrlResolver() {
    return new UrlResolver(_ASSET_SCHEME);
  }
  function getUrlScheme(url) {
    var match = _split(url);
    return (match && match[_ComponentIndex.Scheme]) || '';
  }
  function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
    var out = [];
    if (isPresent(opt_scheme)) {
      out.push(opt_scheme + ':');
    }
    if (isPresent(opt_domain)) {
      out.push('//');
      if (isPresent(opt_userInfo)) {
        out.push(opt_userInfo + '@');
      }
      out.push(opt_domain);
      if (isPresent(opt_port)) {
        out.push(':' + opt_port);
      }
    }
    if (isPresent(opt_path)) {
      out.push(opt_path);
    }
    if (isPresent(opt_queryData)) {
      out.push('?' + opt_queryData);
    }
    if (isPresent(opt_fragment)) {
      out.push('#' + opt_fragment);
    }
    return out.join('');
  }
  function _split(uri) {
    return uri.match(_splitRe);
  }
  function _removeDotSegments(path) {
    if (path == '/')
      return '/';
    var leadingSlash = path[0] == '/' ? '/' : '';
    var trailingSlash = path[path.length - 1] === '/' ? '/' : '';
    var segments = path.split('/');
    var out = [];
    var up = 0;
    for (var pos = 0; pos < segments.length; pos++) {
      var segment = segments[pos];
      switch (segment) {
        case '':
        case '.':
          break;
        case '..':
          if (out.length > 0) {
            out.pop();
          } else {
            up++;
          }
          break;
        default:
          out.push(segment);
      }
    }
    if (leadingSlash == '') {
      while (up-- > 0) {
        out.unshift('..');
      }
      if (out.length === 0)
        out.push('.');
    }
    return leadingSlash + out.join('/') + trailingSlash;
  }
  function _joinAndCanonicalizePath(parts) {
    var path = parts[_ComponentIndex.Path];
    path = isBlank(path) ? '' : _removeDotSegments(path);
    parts[_ComponentIndex.Path] = path;
    return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
  }
  function _resolveUrl(base, url) {
    var parts = _split(encodeURI(url));
    var baseParts = _split(base);
    if (isPresent(parts[_ComponentIndex.Scheme])) {
      return _joinAndCanonicalizePath(parts);
    } else {
      parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
    }
    for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
      if (isBlank(parts[i])) {
        parts[i] = baseParts[i];
      }
    }
    if (parts[_ComponentIndex.Path][0] == '/') {
      return _joinAndCanonicalizePath(parts);
    }
    var path = baseParts[_ComponentIndex.Path];
    if (isBlank(path))
      path = '/';
    var index = path.lastIndexOf('/');
    path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
    parts[_ComponentIndex.Path] = path;
    return _joinAndCanonicalizePath(parts);
  }
  $__export("createUrlResolverWithoutPackagePrefix", createUrlResolverWithoutPackagePrefix);
  $__export("createOfflineCompileUrlResolver", createOfflineCompileUrlResolver);
  $__export("getUrlScheme", getUrlScheme);
  return {
    setters: [function($__m) {
      Inject = $__m.Inject;
      Injectable = $__m.Injectable;
      PACKAGE_ROOT_URL = $__m.PACKAGE_ROOT_URL;
    }, function($__m) {
      isBlank = $__m.isBlank;
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      _ASSET_SCHEME = 'asset:';
      DEFAULT_PACKAGE_URL_PROVIDER = {
        provide: PACKAGE_ROOT_URL,
        useValue: '/'
      };
      $__export("DEFAULT_PACKAGE_URL_PROVIDER", DEFAULT_PACKAGE_URL_PROVIDER);
      UrlResolver = (function() {
        function UrlResolver(_packagePrefix) {
          if (_packagePrefix === void 0) {
            _packagePrefix = null;
          }
          this._packagePrefix = _packagePrefix;
        }
        UrlResolver.prototype.resolve = function(baseUrl, url) {
          var resolvedUrl = url;
          if (isPresent(baseUrl) && baseUrl.length > 0) {
            resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
          }
          var resolvedParts = _split(resolvedUrl);
          var prefix = this._packagePrefix;
          if (isPresent(prefix) && isPresent(resolvedParts) && resolvedParts[_ComponentIndex.Scheme] == 'package') {
            var path = resolvedParts[_ComponentIndex.Path];
            if (this._packagePrefix === _ASSET_SCHEME) {
              var pathSegements = path.split(/\//);
              resolvedUrl = "asset:" + pathSegements[0] + "/lib/" + pathSegements.slice(1).join('/');
            } else {
              prefix = prefix.replace(/\/+$/, '');
              path = path.replace(/^\/+/, '');
              return prefix + "/" + path;
            }
          }
          return resolvedUrl;
        };
        UrlResolver.decorators = [{type: Injectable}];
        UrlResolver.ctorParameters = [{
          type: undefined,
          decorators: [{
            type: Inject,
            args: [PACKAGE_ROOT_URL]
          }]
        }];
        return UrlResolver;
      }());
      $__export("UrlResolver", UrlResolver);
      _splitRe = new RegExp('^' + '(?:' + '([^:/?#.]+)' + ':)?' + '(?://' + '(?:([^/?#]*)@)?' + '([\\w\\d\\-\\u0100-\\uffff.%]*)' + '(?::([0-9]+))?' + ')?' + '([^?#]+)?' + '(?:\\?([^#]*))?' + '(?:#(.*))?' + '$');
      (function(_ComponentIndex) {
        _ComponentIndex[_ComponentIndex["Scheme"] = 1] = "Scheme";
        _ComponentIndex[_ComponentIndex["UserInfo"] = 2] = "UserInfo";
        _ComponentIndex[_ComponentIndex["Domain"] = 3] = "Domain";
        _ComponentIndex[_ComponentIndex["Port"] = 4] = "Port";
        _ComponentIndex[_ComponentIndex["Path"] = 5] = "Path";
        _ComponentIndex[_ComponentIndex["QueryData"] = 6] = "QueryData";
        _ComponentIndex[_ComponentIndex["Fragment"] = 7] = "Fragment";
      })(_ComponentIndex || (_ComponentIndex = {}));
    }
  };
});

$__System.register("27", ["c", "11", "14", "5a", "3f"], function($__export) {
  "use strict";
  var Injectable,
      ViewEncapsulation,
      CompileIdentifierMetadata,
      CompileStylesheetMetadata,
      o,
      ShadowCss,
      UrlResolver,
      COMPONENT_VARIABLE,
      HOST_ATTR,
      CONTENT_ATTR,
      StylesCompileDependency,
      StylesCompileResult,
      CompiledStylesheet,
      StyleCompiler;
  function getStylesVarName(component) {
    var result = "styles";
    if (component) {
      result += "_" + component.type.name;
    }
    return result;
  }
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
      ViewEncapsulation = $__m.ViewEncapsulation;
    }, function($__m) {
      CompileIdentifierMetadata = $__m.CompileIdentifierMetadata;
      CompileStylesheetMetadata = $__m.CompileStylesheetMetadata;
    }, function($__m) {
      o = $__m;
    }, function($__m) {
      ShadowCss = $__m.ShadowCss;
    }, function($__m) {
      UrlResolver = $__m.UrlResolver;
    }],
    execute: function() {
      COMPONENT_VARIABLE = '%COMP%';
      HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
      CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
      StylesCompileDependency = (function() {
        function StylesCompileDependency(moduleUrl, isShimmed, valuePlaceholder) {
          this.moduleUrl = moduleUrl;
          this.isShimmed = isShimmed;
          this.valuePlaceholder = valuePlaceholder;
        }
        return StylesCompileDependency;
      }());
      $__export("StylesCompileDependency", StylesCompileDependency);
      StylesCompileResult = (function() {
        function StylesCompileResult(componentStylesheet, externalStylesheets) {
          this.componentStylesheet = componentStylesheet;
          this.externalStylesheets = externalStylesheets;
        }
        return StylesCompileResult;
      }());
      $__export("StylesCompileResult", StylesCompileResult);
      CompiledStylesheet = (function() {
        function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {
          this.statements = statements;
          this.stylesVar = stylesVar;
          this.dependencies = dependencies;
          this.isShimmed = isShimmed;
          this.meta = meta;
        }
        return CompiledStylesheet;
      }());
      $__export("CompiledStylesheet", CompiledStylesheet);
      StyleCompiler = (function() {
        function StyleCompiler(_urlResolver) {
          this._urlResolver = _urlResolver;
          this._shadowCss = new ShadowCss();
        }
        StyleCompiler.prototype.compileComponent = function(comp) {
          var _this = this;
          var externalStylesheets = [];
          var componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({
            styles: comp.template.styles,
            styleUrls: comp.template.styleUrls,
            moduleUrl: comp.type.moduleUrl
          }), true);
          comp.template.externalStylesheets.forEach(function(stylesheetMeta) {
            var compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, false);
            externalStylesheets.push(compiledStylesheet);
          });
          return new StylesCompileResult(componentStylesheet, externalStylesheets);
        };
        StyleCompiler.prototype._compileStyles = function(comp, stylesheet, isComponentStylesheet) {
          var _this = this;
          var shim = comp.template.encapsulation === ViewEncapsulation.Emulated;
          var styleExpressions = stylesheet.styles.map(function(plainStyle) {
            return o.literal(_this._shimIfNeeded(plainStyle, shim));
          });
          var dependencies = [];
          for (var i = 0; i < stylesheet.styleUrls.length; i++) {
            var identifier = new CompileIdentifierMetadata({name: getStylesVarName(null)});
            dependencies.push(new StylesCompileDependency(stylesheet.styleUrls[i], shim, identifier));
            styleExpressions.push(new o.ExternalExpr(identifier));
          }
          var stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);
          var stmt = o.variable(stylesVar).set(o.literalArr(styleExpressions, new o.ArrayType(o.DYNAMIC_TYPE, [o.TypeModifier.Const]))).toDeclStmt(null, [o.StmtModifier.Final]);
          return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);
        };
        StyleCompiler.prototype._shimIfNeeded = function(style, shim) {
          return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
        };
        StyleCompiler.decorators = [{type: Injectable}];
        StyleCompiler.ctorParameters = [{type: UrlResolver}];
        return StyleCompiler;
      }());
      $__export("StyleCompiler", StyleCompiler);
    }
  };
});

$__System.register("5b", ["5c", "16", "13", "14", "5d", "5e"], function($__export) {
  "use strict";
  var EventHandlerVars,
      convertActionBinding,
      isPresent,
      identifierToken,
      o,
      CompileMethod,
      ViewProperties,
      CompileEventListener;
  function collectEventListeners(hostEvents, dirs, compileElement) {
    var eventListeners = [];
    hostEvents.forEach(function(hostEvent) {
      var listener = CompileEventListener.getOrCreate(compileElement, hostEvent.target, hostEvent.name, hostEvent.phase, eventListeners);
      listener.addAction(hostEvent, null, null);
    });
    dirs.forEach(function(directiveAst) {
      var directiveInstance = compileElement.instances.get(identifierToken(directiveAst.directive.type).reference);
      directiveAst.hostEvents.forEach(function(hostEvent) {
        var listener = CompileEventListener.getOrCreate(compileElement, hostEvent.target, hostEvent.name, hostEvent.phase, eventListeners);
        listener.addAction(hostEvent, directiveAst.directive, directiveInstance);
      });
    });
    eventListeners.forEach(function(listener) {
      return listener.finishMethod();
    });
    return eventListeners;
  }
  function bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners) {
    Object.keys(directiveAst.directive.outputs).forEach(function(observablePropName) {
      var eventName = directiveAst.directive.outputs[observablePropName];
      eventListeners.filter(function(listener) {
        return listener.eventName == eventName;
      }).forEach(function(listener) {
        listener.listenToDirective(directiveInstance, observablePropName);
      });
    });
  }
  function bindRenderOutputs(eventListeners) {
    eventListeners.forEach(function(listener) {
      if (!listener.isAnimation) {
        listener.listenToRenderer();
      }
    });
  }
  function convertStmtIntoExpression(stmt) {
    if (stmt instanceof o.ExpressionStatement) {
      return stmt.expr;
    } else if (stmt instanceof o.ReturnStatement) {
      return stmt.value;
    }
    return null;
  }
  function sanitizeEventName(name) {
    return name.replace(/[^a-zA-Z_]/g, '_');
  }
  $__export("collectEventListeners", collectEventListeners);
  $__export("bindDirectiveOutputs", bindDirectiveOutputs);
  $__export("bindRenderOutputs", bindRenderOutputs);
  return {
    setters: [function($__m) {
      EventHandlerVars = $__m.EventHandlerVars;
      convertActionBinding = $__m.convertActionBinding;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      identifierToken = $__m.identifierToken;
    }, function($__m) {
      o = $__m;
    }, function($__m) {
      CompileMethod = $__m.CompileMethod;
    }, function($__m) {
      ViewProperties = $__m.ViewProperties;
    }],
    execute: function() {
      CompileEventListener = (function() {
        function CompileEventListener(compileElement, eventTarget, eventName, eventPhase, listenerIndex) {
          this.compileElement = compileElement;
          this.eventTarget = eventTarget;
          this.eventName = eventName;
          this.eventPhase = eventPhase;
          this._hasComponentHostListener = false;
          this._actionResultExprs = [];
          this._method = new CompileMethod(compileElement.view);
          this._methodName = "_handle_" + sanitizeEventName(eventName) + "_" + compileElement.nodeIndex + "_" + listenerIndex;
          this._eventParam = new o.FnParam(EventHandlerVars.event.name, o.importType(this.compileElement.view.genConfig.renderTypes.renderEvent));
        }
        CompileEventListener.getOrCreate = function(compileElement, eventTarget, eventName, eventPhase, targetEventListeners) {
          var listener = targetEventListeners.find(function(listener) {
            return listener.eventTarget == eventTarget && listener.eventName == eventName && listener.eventPhase == eventPhase;
          });
          if (!listener) {
            listener = new CompileEventListener(compileElement, eventTarget, eventName, eventPhase, targetEventListeners.length);
            targetEventListeners.push(listener);
          }
          return listener;
        };
        Object.defineProperty(CompileEventListener.prototype, "methodName", {
          get: function() {
            return this._methodName;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(CompileEventListener.prototype, "isAnimation", {
          get: function() {
            return !!this.eventPhase;
          },
          enumerable: true,
          configurable: true
        });
        CompileEventListener.prototype.addAction = function(hostEvent, directive, directiveInstance) {
          if (isPresent(directive) && directive.isComponent) {
            this._hasComponentHostListener = true;
          }
          this._method.resetDebugInfo(this.compileElement.nodeIndex, hostEvent);
          var context = directiveInstance || this.compileElement.view.componentContext;
          var view = this.compileElement.view;
          var evalResult = convertActionBinding(view, directive ? null : view, context, hostEvent.handler, this.compileElement.nodeIndex + "_" + this._actionResultExprs.length);
          if (evalResult.preventDefault) {
            this._actionResultExprs.push(evalResult.preventDefault);
          }
          this._method.addStmts(evalResult.stmts);
        };
        CompileEventListener.prototype.finishMethod = function() {
          var markPathToRootStart = this._hasComponentHostListener ? this.compileElement.appElement.prop('componentView') : o.THIS_EXPR;
          var resultExpr = o.literal(true);
          this._actionResultExprs.forEach(function(expr) {
            resultExpr = resultExpr.and(expr);
          });
          var stmts = [markPathToRootStart.callMethod('markPathToRootAsCheckOnce', []).toStmt()].concat(this._method.finish()).concat([new o.ReturnStatement(resultExpr)]);
          this.compileElement.view.methods.push(new o.ClassMethod(this._methodName, [this._eventParam], stmts, o.BOOL_TYPE, [o.StmtModifier.Private]));
        };
        CompileEventListener.prototype.listenToRenderer = function() {
          var listenExpr;
          var eventListener = o.THIS_EXPR.callMethod('eventHandler', [o.THIS_EXPR.prop(this._methodName).callMethod(o.BuiltinMethod.Bind, [o.THIS_EXPR])]);
          if (isPresent(this.eventTarget)) {
            listenExpr = ViewProperties.renderer.callMethod('listenGlobal', [o.literal(this.eventTarget), o.literal(this.eventName), eventListener]);
          } else {
            listenExpr = ViewProperties.renderer.callMethod('listen', [this.compileElement.renderNode, o.literal(this.eventName), eventListener]);
          }
          var disposable = o.variable("disposable_" + this.compileElement.view.disposables.length);
          this.compileElement.view.disposables.push(disposable);
          this.compileElement.view.createMethod.addStmt(disposable.set(listenExpr).toDeclStmt(o.FUNCTION_TYPE, [o.StmtModifier.Private]));
        };
        CompileEventListener.prototype.listenToAnimation = function(animationTransitionVar) {
          var callbackMethod = this.eventPhase == 'start' ? 'onStart' : 'onDone';
          return animationTransitionVar.callMethod(callbackMethod, [o.THIS_EXPR.prop(this.methodName).callMethod(o.BuiltinMethod.Bind, [o.THIS_EXPR])]).toStmt();
        };
        CompileEventListener.prototype.listenToDirective = function(directiveInstance, observablePropName) {
          var subscription = o.variable("subscription_" + this.compileElement.view.subscriptions.length);
          this.compileElement.view.subscriptions.push(subscription);
          var eventListener = o.THIS_EXPR.callMethod('eventHandler', [o.THIS_EXPR.prop(this._methodName).callMethod(o.BuiltinMethod.Bind, [o.THIS_EXPR])]);
          this.compileElement.view.createMethod.addStmt(subscription.set(directiveInstance.prop(observablePropName).callMethod(o.BuiltinMethod.SubscribeObservable, [eventListener])).toDeclStmt(null, [o.StmtModifier.Final]));
        };
        return CompileEventListener;
      }());
      $__export("CompileEventListener", CompileEventListener);
    }
  };
});

$__System.register("5f", ["14", "17", "5e"], function($__export) {
  "use strict";
  var o,
      LifecycleHooks,
      DetectChangesVars,
      STATE_IS_NEVER_CHECKED,
      NOT_THROW_ON_CHANGES;
  function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
    var view = compileElement.view;
    var lifecycleHooks = directiveMeta.type.lifecycleHooks;
    var afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod;
    afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
    if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentInit) !== -1) {
      afterContentLifecycleCallbacksMethod.addStmt(new o.IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterContentInit', []).toStmt()]));
    }
    if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentChecked) !== -1) {
      afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterContentChecked', []).toStmt());
    }
  }
  function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
    var view = compileElement.view;
    var lifecycleHooks = directiveMeta.type.lifecycleHooks;
    var afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod;
    afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
    if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewInit) !== -1) {
      afterViewLifecycleCallbacksMethod.addStmt(new o.IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterViewInit', []).toStmt()]));
    }
    if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewChecked) !== -1) {
      afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterViewChecked', []).toStmt());
    }
  }
  function bindInjectableDestroyLifecycleCallbacks(provider, providerInstance, compileElement) {
    var onDestroyMethod = compileElement.view.destroyMethod;
    onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
    if (provider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
      onDestroyMethod.addStmt(providerInstance.callMethod('ngOnDestroy', []).toStmt());
    }
  }
  function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) {
    var onDestroyMethod = view.destroyMethod;
    if (pipeMeta.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
      onDestroyMethod.addStmt(pipeInstance.callMethod('ngOnDestroy', []).toStmt());
    }
  }
  $__export("bindDirectiveAfterContentLifecycleCallbacks", bindDirectiveAfterContentLifecycleCallbacks);
  $__export("bindDirectiveAfterViewLifecycleCallbacks", bindDirectiveAfterViewLifecycleCallbacks);
  $__export("bindInjectableDestroyLifecycleCallbacks", bindInjectableDestroyLifecycleCallbacks);
  $__export("bindPipeDestroyLifecycleCallbacks", bindPipeDestroyLifecycleCallbacks);
  return {
    setters: [function($__m) {
      o = $__m;
    }, function($__m) {
      LifecycleHooks = $__m.LifecycleHooks;
    }, function($__m) {
      DetectChangesVars = $__m.DetectChangesVars;
    }],
    execute: function() {
      STATE_IS_NEVER_CHECKED = o.THIS_EXPR.prop('numberOfChecks').identical(new o.LiteralExpr(0));
      NOT_THROW_ON_CHANGES = o.not(DetectChangesVars.throwOnChange);
    }
  };
});

$__System.register("60", ["61", "5c", "55", "62", "13", "14", "17", "35", "5e"], function($__export) {
  "use strict";
  var createCheckBindingField,
      createCheckBindingStmt,
      convertPropertyBinding,
      createEnumExpression,
      writeToRenderer,
      Identifiers,
      resolveIdentifier,
      o,
      EMPTY_ANIMATION_STATE,
      isDefaultChangeDetectionStrategy,
      PropertyBindingType,
      DetectChangesVars;
  function bindRenderText(boundText, compileNode, view) {
    var valueField = createCheckBindingField(view);
    var evalResult = convertPropertyBinding(view, view, view.componentContext, boundText.value, valueField.bindingId);
    if (!evalResult) {
      return null;
    }
    view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText);
    view.detectChangesRenderPropertiesMethod.addStmts(createCheckBindingStmt(evalResult, valueField.expression, DetectChangesVars.throwOnChange, [o.THIS_EXPR.prop('renderer').callMethod('setText', [compileNode.renderNode, evalResult.currValExpr]).toStmt()]));
  }
  function bindAndWriteToRenderer(boundProps, context, compileElement, isHostProp, eventListeners) {
    var view = compileElement.view;
    var renderNode = compileElement.renderNode;
    boundProps.forEach(function(boundProp) {
      var bindingField = createCheckBindingField(view);
      view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);
      var evalResult = convertPropertyBinding(view, isHostProp ? null : view, context, boundProp.value, bindingField.bindingId);
      var updateStmts = [];
      var compileMethod = view.detectChangesRenderPropertiesMethod;
      switch (boundProp.type) {
        case PropertyBindingType.Property:
        case PropertyBindingType.Attribute:
        case PropertyBindingType.Class:
        case PropertyBindingType.Style:
          updateStmts.push.apply(updateStmts, writeToRenderer(o.THIS_EXPR, boundProp, renderNode, evalResult.currValExpr, view.genConfig.logBindingUpdate));
          break;
        case PropertyBindingType.Animation:
          compileMethod = view.animationBindingsMethod;
          var detachStmts_1 = [];
          var animationName_1 = boundProp.name;
          var targetViewExpr = isHostProp ? compileElement.appElement.prop('componentView') : o.THIS_EXPR;
          var animationFnExpr = targetViewExpr.prop('componentType').prop('animations').key(o.literal(animationName_1));
          var emptyStateValue = o.literal(EMPTY_ANIMATION_STATE);
          var unitializedValue = o.importExpr(resolveIdentifier(Identifiers.UNINITIALIZED));
          var animationTransitionVar_1 = o.variable('animationTransition_' + animationName_1);
          updateStmts.push(animationTransitionVar_1.set(animationFnExpr.callFn([o.THIS_EXPR, renderNode, bindingField.expression.equals(unitializedValue).conditional(emptyStateValue, bindingField.expression), evalResult.currValExpr.equals(unitializedValue).conditional(emptyStateValue, evalResult.currValExpr)])).toDeclStmt());
          detachStmts_1.push(animationTransitionVar_1.set(animationFnExpr.callFn([o.THIS_EXPR, renderNode, bindingField.expression, emptyStateValue])).toDeclStmt());
          eventListeners.forEach(function(listener) {
            if (listener.isAnimation && listener.eventName === animationName_1) {
              var animationStmt = listener.listenToAnimation(animationTransitionVar_1);
              updateStmts.push(animationStmt);
              detachStmts_1.push(animationStmt);
            }
          });
          view.detachMethod.addStmts(detachStmts_1);
          break;
      }
      compileMethod.addStmts(createCheckBindingStmt(evalResult, bindingField.expression, DetectChangesVars.throwOnChange, updateStmts));
    });
  }
  function bindRenderInputs(boundProps, compileElement, eventListeners) {
    bindAndWriteToRenderer(boundProps, compileElement.view.componentContext, compileElement, false, eventListeners);
  }
  function bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, eventListeners, elementName, schemaRegistry) {
    bindAndWriteToRenderer(directiveAst.hostProperties.filter(function(boundProp) {
      return boundProp.isAnimation;
    }), directiveWrapperInstance.prop('context'), compileElement, true, eventListeners);
    var methodArgs = [o.THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange];
    directiveAst.hostProperties.filter(function(boundProp) {
      return boundProp.needsRuntimeSecurityContext;
    }).forEach(function(boundProp) {
      var ctx;
      switch (boundProp.type) {
        case PropertyBindingType.Property:
          ctx = schemaRegistry.securityContext(elementName, boundProp.name, false);
          break;
        case PropertyBindingType.Attribute:
          ctx = schemaRegistry.securityContext(elementName, boundProp.name, true);
          break;
        default:
          throw new Error("Illegal state: Only property / attribute bindings can have an unknown security context! Binding " + boundProp.name);
      }
      methodArgs.push(createEnumExpression(Identifiers.SecurityContext, ctx));
    });
    compileElement.view.detectChangesRenderPropertiesMethod.addStmt(directiveWrapperInstance.callMethod('detectChangesInHostProps', methodArgs).toStmt());
  }
  function bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement) {
    var view = compileElement.view;
    var detectChangesInInputsMethod = view.detectChangesInInputsMethod;
    detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
    directiveAst.inputs.forEach(function(input, inputIdx) {
      var bindingId = compileElement.nodeIndex + "_" + dirIndex + "_" + inputIdx;
      detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);
      var evalResult = convertPropertyBinding(view, view, view.componentContext, input.value, bindingId);
      if (!evalResult) {
        return;
      }
      detectChangesInInputsMethod.addStmts(evalResult.stmts);
      detectChangesInInputsMethod.addStmt(directiveWrapperInstance.callMethod("check_" + input.directiveName, [evalResult.currValExpr, DetectChangesVars.throwOnChange, evalResult.forceUpdate || o.literal(false)]).toStmt());
    });
    var isOnPushComp = directiveAst.directive.isComponent && !isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);
    var directiveDetectChangesExpr = directiveWrapperInstance.callMethod('detectChangesInInputProps', [o.THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange]);
    var directiveDetectChangesStmt = isOnPushComp ? new o.IfStmt(directiveDetectChangesExpr, [compileElement.appElement.prop('componentView').callMethod('markAsCheckOnce', []).toStmt()]) : directiveDetectChangesExpr.toStmt();
    detectChangesInInputsMethod.addStmt(directiveDetectChangesStmt);
  }
  $__export("bindRenderText", bindRenderText);
  $__export("bindRenderInputs", bindRenderInputs);
  $__export("bindDirectiveHostProps", bindDirectiveHostProps);
  $__export("bindDirectiveInputs", bindDirectiveInputs);
  return {
    setters: [function($__m) {
      createCheckBindingField = $__m.createCheckBindingField;
      createCheckBindingStmt = $__m.createCheckBindingStmt;
    }, function($__m) {
      convertPropertyBinding = $__m.convertPropertyBinding;
    }, function($__m) {
      createEnumExpression = $__m.createEnumExpression;
    }, function($__m) {
      writeToRenderer = $__m.writeToRenderer;
    }, function($__m) {
      Identifiers = $__m.Identifiers;
      resolveIdentifier = $__m.resolveIdentifier;
    }, function($__m) {
      o = $__m;
    }, function($__m) {
      EMPTY_ANIMATION_STATE = $__m.EMPTY_STATE;
      isDefaultChangeDetectionStrategy = $__m.isDefaultChangeDetectionStrategy;
    }, function($__m) {
      PropertyBindingType = $__m.PropertyBindingType;
    }, function($__m) {
      DetectChangesVars = $__m.DetectChangesVars;
    }],
    execute: function() {}
  };
});

$__System.register("63", ["35", "5b", "5f", "60"], function($__export) {
  "use strict";
  var templateVisitAll,
      bindDirectiveOutputs,
      bindRenderOutputs,
      collectEventListeners,
      bindDirectiveAfterContentLifecycleCallbacks,
      bindDirectiveAfterViewLifecycleCallbacks,
      bindInjectableDestroyLifecycleCallbacks,
      bindPipeDestroyLifecycleCallbacks,
      bindDirectiveHostProps,
      bindDirectiveInputs,
      bindRenderInputs,
      bindRenderText,
      ViewBinderVisitor;
  function bindView(view, parsedTemplate, schemaRegistry) {
    var visitor = new ViewBinderVisitor(view, schemaRegistry);
    templateVisitAll(visitor, parsedTemplate);
    view.pipes.forEach(function(pipe) {
      bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view);
    });
  }
  $__export("bindView", bindView);
  return {
    setters: [function($__m) {
      templateVisitAll = $__m.templateVisitAll;
    }, function($__m) {
      bindDirectiveOutputs = $__m.bindDirectiveOutputs;
      bindRenderOutputs = $__m.bindRenderOutputs;
      collectEventListeners = $__m.collectEventListeners;
    }, function($__m) {
      bindDirectiveAfterContentLifecycleCallbacks = $__m.bindDirectiveAfterContentLifecycleCallbacks;
      bindDirectiveAfterViewLifecycleCallbacks = $__m.bindDirectiveAfterViewLifecycleCallbacks;
      bindInjectableDestroyLifecycleCallbacks = $__m.bindInjectableDestroyLifecycleCallbacks;
      bindPipeDestroyLifecycleCallbacks = $__m.bindPipeDestroyLifecycleCallbacks;
    }, function($__m) {
      bindDirectiveHostProps = $__m.bindDirectiveHostProps;
      bindDirectiveInputs = $__m.bindDirectiveInputs;
      bindRenderInputs = $__m.bindRenderInputs;
      bindRenderText = $__m.bindRenderText;
    }],
    execute: function() {
      ViewBinderVisitor = (function() {
        function ViewBinderVisitor(view, _schemaRegistry) {
          this.view = view;
          this._schemaRegistry = _schemaRegistry;
          this._nodeIndex = 0;
        }
        ViewBinderVisitor.prototype.visitBoundText = function(ast, parent) {
          var node = this.view.nodes[this._nodeIndex++];
          bindRenderText(ast, node, this.view);
          return null;
        };
        ViewBinderVisitor.prototype.visitText = function(ast, parent) {
          this._nodeIndex++;
          return null;
        };
        ViewBinderVisitor.prototype.visitNgContent = function(ast, parent) {
          return null;
        };
        ViewBinderVisitor.prototype.visitElement = function(ast, parent) {
          var _this = this;
          var compileElement = this.view.nodes[this._nodeIndex++];
          var eventListeners = [];
          collectEventListeners(ast.outputs, ast.directives, compileElement).forEach(function(entry) {
            eventListeners.push(entry);
          });
          bindRenderInputs(ast.inputs, compileElement, eventListeners);
          bindRenderOutputs(eventListeners);
          ast.directives.forEach(function(directiveAst, dirIndex) {
            var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
            var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
            bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
            bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, eventListeners, ast.name, _this._schemaRegistry);
            bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners);
          });
          templateVisitAll(this, ast.children, compileElement);
          ast.directives.forEach(function(directiveAst) {
            var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
            bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
            bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
          });
          ast.providers.forEach(function(providerAst) {
            var providerInstance = compileElement.instances.get(providerAst.token.reference);
            bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
          });
          return null;
        };
        ViewBinderVisitor.prototype.visitEmbeddedTemplate = function(ast, parent) {
          var compileElement = this.view.nodes[this._nodeIndex++];
          var eventListeners = collectEventListeners(ast.outputs, ast.directives, compileElement);
          ast.directives.forEach(function(directiveAst, dirIndex) {
            var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
            var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
            bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
            bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners);
            bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
            bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
          });
          ast.providers.forEach(function(providerAst) {
            var providerInstance = compileElement.instances.get(providerAst.token.reference);
            bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
          });
          bindView(compileElement.embeddedView, ast.children, this._schemaRegistry);
          return null;
        };
        ViewBinderVisitor.prototype.visitAttr = function(ast, ctx) {
          return null;
        };
        ViewBinderVisitor.prototype.visitDirective = function(ast, ctx) {
          return null;
        };
        ViewBinderVisitor.prototype.visitEvent = function(ast, eventTargetAndNames) {
          return null;
        };
        ViewBinderVisitor.prototype.visitReference = function(ast, ctx) {
          return null;
        };
        ViewBinderVisitor.prototype.visitVariable = function(ast, ctx) {
          return null;
        };
        ViewBinderVisitor.prototype.visitDirectiveProperty = function(ast, context) {
          return null;
        };
        ViewBinderVisitor.prototype.visitElementProperty = function(ast, context) {
          return null;
        };
        return ViewBinderVisitor;
      }());
    }
  };
});

$__System.register("61", ["13", "14"], function($__export) {
  "use strict";
  var Identifiers,
      resolveIdentifier,
      o,
      CheckBindingField;
  function createCheckBindingField(builder) {
    var bindingId = "" + builder.fields.length;
    var fieldExpr = createBindFieldExpr(bindingId);
    builder.fields.push(new o.ClassField(fieldExpr.name, null, [o.StmtModifier.Private]));
    builder.ctorStmts.push(o.THIS_EXPR.prop(fieldExpr.name).set(o.importExpr(resolveIdentifier(Identifiers.UNINITIALIZED))).toStmt());
    return new CheckBindingField(fieldExpr, bindingId);
  }
  function createCheckBindingStmt(evalResult, fieldExpr, throwOnChangeVar, actions) {
    var condition = o.importExpr(resolveIdentifier(Identifiers.checkBinding)).callFn([throwOnChangeVar, fieldExpr, evalResult.currValExpr]);
    if (evalResult.forceUpdate) {
      condition = evalResult.forceUpdate.or(condition);
    }
    return evalResult.stmts.concat([new o.IfStmt(condition, actions.concat([o.THIS_EXPR.prop(fieldExpr.name).set(evalResult.currValExpr).toStmt()]))]);
  }
  function createBindFieldExpr(bindingId) {
    return o.THIS_EXPR.prop("_expr_" + bindingId);
  }
  $__export("createCheckBindingField", createCheckBindingField);
  $__export("createCheckBindingStmt", createCheckBindingStmt);
  return {
    setters: [function($__m) {
      Identifiers = $__m.Identifiers;
      resolveIdentifier = $__m.resolveIdentifier;
    }, function($__m) {
      o = $__m;
    }],
    execute: function() {
      CheckBindingField = (function() {
        function CheckBindingField(expression, bindingId) {
          this.expression = expression;
          this.bindingId = bindingId;
        }
        return CheckBindingField;
      }());
      $__export("CheckBindingField", CheckBindingField);
    }
  };
});

$__System.register("62", ["c", "16", "13", "14", "35", "55"], function($__export) {
  "use strict";
  var SecurityContext,
      isPresent,
      Identifiers,
      resolveIdentifier,
      o,
      PropertyBindingType,
      createEnumExpression;
  function writeToRenderer(view, boundProp, renderElement, renderValue, logBindingUpdate, securityContextExpression) {
    var updateStmts = [];
    var renderer = view.prop('renderer');
    renderValue = sanitizedValue(view, boundProp, renderValue, securityContextExpression);
    switch (boundProp.type) {
      case PropertyBindingType.Property:
        if (logBindingUpdate) {
          updateStmts.push(o.importExpr(resolveIdentifier(Identifiers.setBindingDebugInfo)).callFn([renderer, renderElement, o.literal(boundProp.name), renderValue]).toStmt());
        }
        updateStmts.push(renderer.callMethod('setElementProperty', [renderElement, o.literal(boundProp.name), renderValue]).toStmt());
        break;
      case PropertyBindingType.Attribute:
        renderValue = renderValue.isBlank().conditional(o.NULL_EXPR, renderValue.callMethod('toString', []));
        updateStmts.push(renderer.callMethod('setElementAttribute', [renderElement, o.literal(boundProp.name), renderValue]).toStmt());
        break;
      case PropertyBindingType.Class:
        updateStmts.push(renderer.callMethod('setElementClass', [renderElement, o.literal(boundProp.name), renderValue]).toStmt());
        break;
      case PropertyBindingType.Style:
        var strValue = renderValue.callMethod('toString', []);
        if (isPresent(boundProp.unit)) {
          strValue = strValue.plus(o.literal(boundProp.unit));
        }
        renderValue = renderValue.isBlank().conditional(o.NULL_EXPR, strValue);
        updateStmts.push(renderer.callMethod('setElementStyle', [renderElement, o.literal(boundProp.name), renderValue]).toStmt());
        break;
      case PropertyBindingType.Animation:
        throw new Error('Illegal state: Should not come here!');
    }
    return updateStmts;
  }
  function sanitizedValue(view, boundProp, renderValue, securityContextExpression) {
    if (boundProp.securityContext === SecurityContext.NONE) {
      return renderValue;
    }
    if (!boundProp.needsRuntimeSecurityContext) {
      securityContextExpression = createEnumExpression(Identifiers.SecurityContext, boundProp.securityContext);
    }
    if (!securityContextExpression) {
      throw new Error("internal error, no SecurityContext given " + boundProp.name);
    }
    var ctx = view.prop('viewUtils').prop('sanitizer');
    var args = [securityContextExpression, renderValue];
    return ctx.callMethod('sanitize', args);
  }
  $__export("writeToRenderer", writeToRenderer);
  return {
    setters: [function($__m) {
      SecurityContext = $__m.SecurityContext;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      Identifiers = $__m.Identifiers;
      resolveIdentifier = $__m.resolveIdentifier;
    }, function($__m) {
      o = $__m;
    }, function($__m) {
      PropertyBindingType = $__m.PropertyBindingType;
    }, function($__m) {
      createEnumExpression = $__m.createEnumExpression;
    }],
    execute: function() {}
  };
});

$__System.register("22", ["c", "13"], function($__export) {
  "use strict";
  var ViewEncapsulation,
      isDevMode,
      Identifiers,
      resolveIdentifier,
      CompilerConfig,
      RenderTypes,
      DefaultRenderTypes;
  function unimplemented() {
    throw new Error('unimplemented');
  }
  return {
    setters: [function($__m) {
      ViewEncapsulation = $__m.ViewEncapsulation;
      isDevMode = $__m.isDevMode;
    }, function($__m) {
      Identifiers = $__m.Identifiers;
      resolveIdentifier = $__m.resolveIdentifier;
    }],
    execute: function() {
      CompilerConfig = (function() {
        function CompilerConfig(_a) {
          var _b = _a === void 0 ? {} : _a,
              _c = _b.renderTypes,
              renderTypes = _c === void 0 ? new DefaultRenderTypes() : _c,
              _d = _b.defaultEncapsulation,
              defaultEncapsulation = _d === void 0 ? ViewEncapsulation.Emulated : _d,
              genDebugInfo = _b.genDebugInfo,
              logBindingUpdate = _b.logBindingUpdate,
              _e = _b.useJit,
              useJit = _e === void 0 ? true : _e;
          this.renderTypes = renderTypes;
          this.defaultEncapsulation = defaultEncapsulation;
          this._genDebugInfo = genDebugInfo;
          this._logBindingUpdate = logBindingUpdate;
          this.useJit = useJit;
        }
        Object.defineProperty(CompilerConfig.prototype, "genDebugInfo", {
          get: function() {
            return this._genDebugInfo === void 0 ? isDevMode() : this._genDebugInfo;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(CompilerConfig.prototype, "logBindingUpdate", {
          get: function() {
            return this._logBindingUpdate === void 0 ? isDevMode() : this._logBindingUpdate;
          },
          enumerable: true,
          configurable: true
        });
        return CompilerConfig;
      }());
      $__export("CompilerConfig", CompilerConfig);
      RenderTypes = (function() {
        function RenderTypes() {}
        Object.defineProperty(RenderTypes.prototype, "renderer", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderTypes.prototype, "renderText", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderTypes.prototype, "renderElement", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderTypes.prototype, "renderComment", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderTypes.prototype, "renderNode", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderTypes.prototype, "renderEvent", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        return RenderTypes;
      }());
      $__export("RenderTypes", RenderTypes);
      DefaultRenderTypes = (function() {
        function DefaultRenderTypes() {
          this.renderText = null;
          this.renderElement = null;
          this.renderComment = null;
          this.renderNode = null;
          this.renderEvent = null;
        }
        Object.defineProperty(DefaultRenderTypes.prototype, "renderer", {
          get: function() {
            return resolveIdentifier(Identifiers.Renderer);
          },
          enumerable: true,
          configurable: true
        });
        ;
        return DefaultRenderTypes;
      }());
      $__export("DefaultRenderTypes", DefaultRenderTypes);
    }
  };
});

$__System.register("54", [], function($__export) {
  "use strict";
  var $EOF,
      $TAB,
      $LF,
      $VTAB,
      $FF,
      $CR,
      $SPACE,
      $BANG,
      $DQ,
      $HASH,
      $$,
      $PERCENT,
      $AMPERSAND,
      $SQ,
      $LPAREN,
      $RPAREN,
      $STAR,
      $PLUS,
      $COMMA,
      $MINUS,
      $PERIOD,
      $SLASH,
      $COLON,
      $SEMICOLON,
      $LT,
      $EQ,
      $GT,
      $QUESTION,
      $0,
      $9,
      $A,
      $E,
      $F,
      $X,
      $Z,
      $LBRACKET,
      $BACKSLASH,
      $RBRACKET,
      $CARET,
      $_,
      $a,
      $e,
      $f,
      $n,
      $r,
      $t,
      $u,
      $v,
      $x,
      $z,
      $LBRACE,
      $BAR,
      $RBRACE,
      $NBSP,
      $PIPE,
      $TILDA,
      $AT,
      $BT;
  function isWhitespace(code) {
    return (code >= $TAB && code <= $SPACE) || (code == $NBSP);
  }
  function isDigit(code) {
    return $0 <= code && code <= $9;
  }
  function isAsciiLetter(code) {
    return code >= $a && code <= $z || code >= $A && code <= $Z;
  }
  function isAsciiHexDigit(code) {
    return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
  }
  $__export("isWhitespace", isWhitespace);
  $__export("isDigit", isDigit);
  $__export("isAsciiLetter", isAsciiLetter);
  $__export("isAsciiHexDigit", isAsciiHexDigit);
  return {
    setters: [],
    execute: function() {
      $EOF = 0;
      $__export("$EOF", $EOF);
      $TAB = 9;
      $__export("$TAB", $TAB);
      $LF = 10;
      $__export("$LF", $LF);
      $VTAB = 11;
      $__export("$VTAB", $VTAB);
      $FF = 12;
      $__export("$FF", $FF);
      $CR = 13;
      $__export("$CR", $CR);
      $SPACE = 32;
      $__export("$SPACE", $SPACE);
      $BANG = 33;
      $__export("$BANG", $BANG);
      $DQ = 34;
      $__export("$DQ", $DQ);
      $HASH = 35;
      $__export("$HASH", $HASH);
      $$ = 36;
      $__export("$$", $$);
      $PERCENT = 37;
      $__export("$PERCENT", $PERCENT);
      $AMPERSAND = 38;
      $__export("$AMPERSAND", $AMPERSAND);
      $SQ = 39;
      $__export("$SQ", $SQ);
      $LPAREN = 40;
      $__export("$LPAREN", $LPAREN);
      $RPAREN = 41;
      $__export("$RPAREN", $RPAREN);
      $STAR = 42;
      $__export("$STAR", $STAR);
      $PLUS = 43;
      $__export("$PLUS", $PLUS);
      $COMMA = 44;
      $__export("$COMMA", $COMMA);
      $MINUS = 45;
      $__export("$MINUS", $MINUS);
      $PERIOD = 46;
      $__export("$PERIOD", $PERIOD);
      $SLASH = 47;
      $__export("$SLASH", $SLASH);
      $COLON = 58;
      $__export("$COLON", $COLON);
      $SEMICOLON = 59;
      $__export("$SEMICOLON", $SEMICOLON);
      $LT = 60;
      $__export("$LT", $LT);
      $EQ = 61;
      $__export("$EQ", $EQ);
      $GT = 62;
      $__export("$GT", $GT);
      $QUESTION = 63;
      $__export("$QUESTION", $QUESTION);
      $0 = 48;
      $__export("$0", $0);
      $9 = 57;
      $__export("$9", $9);
      $A = 65;
      $__export("$A", $A);
      $E = 69;
      $__export("$E", $E);
      $F = 70;
      $__export("$F", $F);
      $X = 88;
      $__export("$X", $X);
      $Z = 90;
      $__export("$Z", $Z);
      $LBRACKET = 91;
      $__export("$LBRACKET", $LBRACKET);
      $BACKSLASH = 92;
      $__export("$BACKSLASH", $BACKSLASH);
      $RBRACKET = 93;
      $__export("$RBRACKET", $RBRACKET);
      $CARET = 94;
      $__export("$CARET", $CARET);
      $_ = 95;
      $__export("$_", $_);
      $a = 97;
      $__export("$a", $a);
      $e = 101;
      $__export("$e", $e);
      $f = 102;
      $__export("$f", $f);
      $n = 110;
      $__export("$n", $n);
      $r = 114;
      $__export("$r", $r);
      $t = 116;
      $__export("$t", $t);
      $u = 117;
      $__export("$u", $u);
      $v = 118;
      $__export("$v", $v);
      $x = 120;
      $__export("$x", $x);
      $z = 122;
      $__export("$z", $z);
      $LBRACE = 123;
      $__export("$LBRACE", $LBRACE);
      $BAR = 124;
      $__export("$BAR", $BAR);
      $RBRACE = 125;
      $__export("$RBRACE", $RBRACE);
      $NBSP = 160;
      $__export("$NBSP", $NBSP);
      $PIPE = 124;
      $__export("$PIPE", $PIPE);
      $TILDA = 126;
      $__export("$TILDA", $TILDA);
      $AT = 64;
      $__export("$AT", $AT);
      $BT = 96;
      $__export("$BT", $BT);
    }
  };
});

$__System.register("39", ["c", "54", "16"], function($__export) {
  "use strict";
  var Injectable,
      chars,
      NumberWrapper,
      isPresent,
      TokenType,
      KEYWORDS,
      Lexer,
      Token,
      EOF,
      _Scanner;
  function newCharacterToken(index, code) {
    return new Token(index, TokenType.Character, code, String.fromCharCode(code));
  }
  function newIdentifierToken(index, text) {
    return new Token(index, TokenType.Identifier, 0, text);
  }
  function newKeywordToken(index, text) {
    return new Token(index, TokenType.Keyword, 0, text);
  }
  function newOperatorToken(index, text) {
    return new Token(index, TokenType.Operator, 0, text);
  }
  function newStringToken(index, text) {
    return new Token(index, TokenType.String, 0, text);
  }
  function newNumberToken(index, n) {
    return new Token(index, TokenType.Number, n, '');
  }
  function newErrorToken(index, message) {
    return new Token(index, TokenType.Error, 0, message);
  }
  function isIdentifierStart(code) {
    return (chars.$a <= code && code <= chars.$z) || (chars.$A <= code && code <= chars.$Z) || (code == chars.$_) || (code == chars.$$);
  }
  function isIdentifier(input) {
    if (input.length == 0)
      return false;
    var scanner = new _Scanner(input);
    if (!isIdentifierStart(scanner.peek))
      return false;
    scanner.advance();
    while (scanner.peek !== chars.$EOF) {
      if (!isIdentifierPart(scanner.peek))
        return false;
      scanner.advance();
    }
    return true;
  }
  function isIdentifierPart(code) {
    return chars.isAsciiLetter(code) || chars.isDigit(code) || (code == chars.$_) || (code == chars.$$);
  }
  function isExponentStart(code) {
    return code == chars.$e || code == chars.$E;
  }
  function isExponentSign(code) {
    return code == chars.$MINUS || code == chars.$PLUS;
  }
  function isQuote(code) {
    return code === chars.$SQ || code === chars.$DQ || code === chars.$BT;
  }
  function unescape(code) {
    switch (code) {
      case chars.$n:
        return chars.$LF;
      case chars.$f:
        return chars.$FF;
      case chars.$r:
        return chars.$CR;
      case chars.$t:
        return chars.$TAB;
      case chars.$v:
        return chars.$VTAB;
      default:
        return code;
    }
  }
  $__export("isIdentifier", isIdentifier);
  $__export("isQuote", isQuote);
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
    }, function($__m) {
      chars = $__m;
    }, function($__m) {
      NumberWrapper = $__m.NumberWrapper;
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      $__export("TokenType", TokenType);
      (function(TokenType) {
        TokenType[TokenType["Character"] = 0] = "Character";
        TokenType[TokenType["Identifier"] = 1] = "Identifier";
        TokenType[TokenType["Keyword"] = 2] = "Keyword";
        TokenType[TokenType["String"] = 3] = "String";
        TokenType[TokenType["Operator"] = 4] = "Operator";
        TokenType[TokenType["Number"] = 5] = "Number";
        TokenType[TokenType["Error"] = 6] = "Error";
      })(TokenType || ($__export("TokenType", TokenType = {})));
      KEYWORDS = ['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];
      Lexer = (function() {
        function Lexer() {}
        Lexer.prototype.tokenize = function(text) {
          var scanner = new _Scanner(text);
          var tokens = [];
          var token = scanner.scanToken();
          while (token != null) {
            tokens.push(token);
            token = scanner.scanToken();
          }
          return tokens;
        };
        Lexer.decorators = [{type: Injectable}];
        Lexer.ctorParameters = [];
        return Lexer;
      }());
      $__export("Lexer", Lexer);
      Token = (function() {
        function Token(index, type, numValue, strValue) {
          this.index = index;
          this.type = type;
          this.numValue = numValue;
          this.strValue = strValue;
        }
        Token.prototype.isCharacter = function(code) {
          return this.type == TokenType.Character && this.numValue == code;
        };
        Token.prototype.isNumber = function() {
          return this.type == TokenType.Number;
        };
        Token.prototype.isString = function() {
          return this.type == TokenType.String;
        };
        Token.prototype.isOperator = function(operater) {
          return this.type == TokenType.Operator && this.strValue == operater;
        };
        Token.prototype.isIdentifier = function() {
          return this.type == TokenType.Identifier;
        };
        Token.prototype.isKeyword = function() {
          return this.type == TokenType.Keyword;
        };
        Token.prototype.isKeywordLet = function() {
          return this.type == TokenType.Keyword && this.strValue == 'let';
        };
        Token.prototype.isKeywordNull = function() {
          return this.type == TokenType.Keyword && this.strValue == 'null';
        };
        Token.prototype.isKeywordUndefined = function() {
          return this.type == TokenType.Keyword && this.strValue == 'undefined';
        };
        Token.prototype.isKeywordTrue = function() {
          return this.type == TokenType.Keyword && this.strValue == 'true';
        };
        Token.prototype.isKeywordFalse = function() {
          return this.type == TokenType.Keyword && this.strValue == 'false';
        };
        Token.prototype.isKeywordThis = function() {
          return this.type == TokenType.Keyword && this.strValue == 'this';
        };
        Token.prototype.isError = function() {
          return this.type == TokenType.Error;
        };
        Token.prototype.toNumber = function() {
          return this.type == TokenType.Number ? this.numValue : -1;
        };
        Token.prototype.toString = function() {
          switch (this.type) {
            case TokenType.Character:
            case TokenType.Identifier:
            case TokenType.Keyword:
            case TokenType.Operator:
            case TokenType.String:
            case TokenType.Error:
              return this.strValue;
            case TokenType.Number:
              return this.numValue.toString();
            default:
              return null;
          }
        };
        return Token;
      }());
      $__export("Token", Token);
      EOF = new Token(-1, TokenType.Character, 0, '');
      $__export("EOF", EOF);
      _Scanner = (function() {
        function _Scanner(input) {
          this.input = input;
          this.peek = 0;
          this.index = -1;
          this.length = input.length;
          this.advance();
        }
        _Scanner.prototype.advance = function() {
          this.peek = ++this.index >= this.length ? chars.$EOF : this.input.charCodeAt(this.index);
        };
        _Scanner.prototype.scanToken = function() {
          var input = this.input,
              length = this.length,
              peek = this.peek,
              index = this.index;
          while (peek <= chars.$SPACE) {
            if (++index >= length) {
              peek = chars.$EOF;
              break;
            } else {
              peek = input.charCodeAt(index);
            }
          }
          this.peek = peek;
          this.index = index;
          if (index >= length) {
            return null;
          }
          if (isIdentifierStart(peek))
            return this.scanIdentifier();
          if (chars.isDigit(peek))
            return this.scanNumber(index);
          var start = index;
          switch (peek) {
            case chars.$PERIOD:
              this.advance();
              return chars.isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, chars.$PERIOD);
            case chars.$LPAREN:
            case chars.$RPAREN:
            case chars.$LBRACE:
            case chars.$RBRACE:
            case chars.$LBRACKET:
            case chars.$RBRACKET:
            case chars.$COMMA:
            case chars.$COLON:
            case chars.$SEMICOLON:
              return this.scanCharacter(start, peek);
            case chars.$SQ:
            case chars.$DQ:
              return this.scanString();
            case chars.$HASH:
            case chars.$PLUS:
            case chars.$MINUS:
            case chars.$STAR:
            case chars.$SLASH:
            case chars.$PERCENT:
            case chars.$CARET:
              return this.scanOperator(start, String.fromCharCode(peek));
            case chars.$QUESTION:
              return this.scanComplexOperator(start, '?', chars.$PERIOD, '.');
            case chars.$LT:
            case chars.$GT:
              return this.scanComplexOperator(start, String.fromCharCode(peek), chars.$EQ, '=');
            case chars.$BANG:
            case chars.$EQ:
              return this.scanComplexOperator(start, String.fromCharCode(peek), chars.$EQ, '=', chars.$EQ, '=');
            case chars.$AMPERSAND:
              return this.scanComplexOperator(start, '&', chars.$AMPERSAND, '&');
            case chars.$BAR:
              return this.scanComplexOperator(start, '|', chars.$BAR, '|');
            case chars.$NBSP:
              while (chars.isWhitespace(this.peek))
                this.advance();
              return this.scanToken();
          }
          this.advance();
          return this.error("Unexpected character [" + String.fromCharCode(peek) + "]", 0);
        };
        _Scanner.prototype.scanCharacter = function(start, code) {
          this.advance();
          return newCharacterToken(start, code);
        };
        _Scanner.prototype.scanOperator = function(start, str) {
          this.advance();
          return newOperatorToken(start, str);
        };
        _Scanner.prototype.scanComplexOperator = function(start, one, twoCode, two, threeCode, three) {
          this.advance();
          var str = one;
          if (this.peek == twoCode) {
            this.advance();
            str += two;
          }
          if (isPresent(threeCode) && this.peek == threeCode) {
            this.advance();
            str += three;
          }
          return newOperatorToken(start, str);
        };
        _Scanner.prototype.scanIdentifier = function() {
          var start = this.index;
          this.advance();
          while (isIdentifierPart(this.peek))
            this.advance();
          var str = this.input.substring(start, this.index);
          return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) : newIdentifierToken(start, str);
        };
        _Scanner.prototype.scanNumber = function(start) {
          var simple = (this.index === start);
          this.advance();
          while (true) {
            if (chars.isDigit(this.peek)) {} else if (this.peek == chars.$PERIOD) {
              simple = false;
            } else if (isExponentStart(this.peek)) {
              this.advance();
              if (isExponentSign(this.peek))
                this.advance();
              if (!chars.isDigit(this.peek))
                return this.error('Invalid exponent', -1);
              simple = false;
            } else {
              break;
            }
            this.advance();
          }
          var str = this.input.substring(start, this.index);
          var value = simple ? NumberWrapper.parseIntAutoRadix(str) : parseFloat(str);
          return newNumberToken(start, value);
        };
        _Scanner.prototype.scanString = function() {
          var start = this.index;
          var quote = this.peek;
          this.advance();
          var buffer = '';
          var marker = this.index;
          var input = this.input;
          while (this.peek != quote) {
            if (this.peek == chars.$BACKSLASH) {
              buffer += input.substring(marker, this.index);
              this.advance();
              var unescapedCode = void 0;
              if (this.peek == chars.$u) {
                var hex = input.substring(this.index + 1, this.index + 5);
                try {
                  unescapedCode = NumberWrapper.parseInt(hex, 16);
                } catch (e) {
                  return this.error("Invalid unicode escape [\\u" + hex + "]", 0);
                }
                for (var i = 0; i < 5; i++) {
                  this.advance();
                }
              } else {
                unescapedCode = unescape(this.peek);
                this.advance();
              }
              buffer += String.fromCharCode(unescapedCode);
              marker = this.index;
            } else if (this.peek == chars.$EOF) {
              return this.error('Unterminated quote', 0);
            } else {
              this.advance();
            }
          }
          var last = input.substring(marker, this.index);
          this.advance();
          return newStringToken(start, buffer + last);
        };
        _Scanner.prototype.error = function(message, offset) {
          var position = this.index + offset;
          return newErrorToken(position, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
        };
        return _Scanner;
      }());
    }
  };
});

$__System.register("2b", ["c", "54", "16", "2e", "64", "39"], function($__export) {
  "use strict";
  var Injectable,
      chars,
      escapeRegExp,
      isBlank,
      isPresent,
      DEFAULT_INTERPOLATION_CONFIG,
      ASTWithSource,
      Binary,
      BindingPipe,
      Chain,
      Conditional,
      EmptyExpr,
      FunctionCall,
      ImplicitReceiver,
      Interpolation,
      KeyedRead,
      KeyedWrite,
      LiteralArray,
      LiteralMap,
      LiteralPrimitive,
      MethodCall,
      ParseSpan,
      ParserError,
      PrefixNot,
      PropertyRead,
      PropertyWrite,
      Quote,
      SafeMethodCall,
      SafePropertyRead,
      TemplateBinding,
      EOF,
      Lexer,
      TokenType,
      isIdentifier,
      isQuote,
      SplitInterpolation,
      TemplateBindingParseResult,
      Parser,
      _ParseAST,
      SimpleExpressionChecker;
  function _createInterpolateRegExp(config) {
    var pattern = escapeRegExp(config.start) + '([\\s\\S]*?)' + escapeRegExp(config.end);
    return new RegExp(pattern, 'g');
  }
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
    }, function($__m) {
      chars = $__m;
    }, function($__m) {
      escapeRegExp = $__m.escapeRegExp;
      isBlank = $__m.isBlank;
      isPresent = $__m.isPresent;
    }, function($__m) {
      DEFAULT_INTERPOLATION_CONFIG = $__m.DEFAULT_INTERPOLATION_CONFIG;
    }, function($__m) {
      ASTWithSource = $__m.ASTWithSource;
      Binary = $__m.Binary;
      BindingPipe = $__m.BindingPipe;
      Chain = $__m.Chain;
      Conditional = $__m.Conditional;
      EmptyExpr = $__m.EmptyExpr;
      FunctionCall = $__m.FunctionCall;
      ImplicitReceiver = $__m.ImplicitReceiver;
      Interpolation = $__m.Interpolation;
      KeyedRead = $__m.KeyedRead;
      KeyedWrite = $__m.KeyedWrite;
      LiteralArray = $__m.LiteralArray;
      LiteralMap = $__m.LiteralMap;
      LiteralPrimitive = $__m.LiteralPrimitive;
      MethodCall = $__m.MethodCall;
      ParseSpan = $__m.ParseSpan;
      ParserError = $__m.ParserError;
      PrefixNot = $__m.PrefixNot;
      PropertyRead = $__m.PropertyRead;
      PropertyWrite = $__m.PropertyWrite;
      Quote = $__m.Quote;
      SafeMethodCall = $__m.SafeMethodCall;
      SafePropertyRead = $__m.SafePropertyRead;
      TemplateBinding = $__m.TemplateBinding;
    }, function($__m) {
      EOF = $__m.EOF;
      Lexer = $__m.Lexer;
      TokenType = $__m.TokenType;
      isIdentifier = $__m.isIdentifier;
      isQuote = $__m.isQuote;
    }],
    execute: function() {
      SplitInterpolation = (function() {
        function SplitInterpolation(strings, expressions, offsets) {
          this.strings = strings;
          this.expressions = expressions;
          this.offsets = offsets;
        }
        return SplitInterpolation;
      }());
      $__export("SplitInterpolation", SplitInterpolation);
      TemplateBindingParseResult = (function() {
        function TemplateBindingParseResult(templateBindings, warnings, errors) {
          this.templateBindings = templateBindings;
          this.warnings = warnings;
          this.errors = errors;
        }
        return TemplateBindingParseResult;
      }());
      $__export("TemplateBindingParseResult", TemplateBindingParseResult);
      Parser = (function() {
        function Parser(_lexer) {
          this._lexer = _lexer;
          this.errors = [];
        }
        Parser.prototype.parseAction = function(input, location, interpolationConfig) {
          if (interpolationConfig === void 0) {
            interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
          }
          this._checkNoInterpolation(input, location, interpolationConfig);
          var sourceToLex = this._stripComments(input);
          var tokens = this._lexer.tokenize(this._stripComments(input));
          var ast = new _ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length).parseChain();
          return new ASTWithSource(ast, input, location, this.errors);
        };
        Parser.prototype.parseBinding = function(input, location, interpolationConfig) {
          if (interpolationConfig === void 0) {
            interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
          }
          var ast = this._parseBindingAst(input, location, interpolationConfig);
          return new ASTWithSource(ast, input, location, this.errors);
        };
        Parser.prototype.parseSimpleBinding = function(input, location, interpolationConfig) {
          if (interpolationConfig === void 0) {
            interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
          }
          var ast = this._parseBindingAst(input, location, interpolationConfig);
          var errors = SimpleExpressionChecker.check(ast);
          if (errors.length > 0) {
            this._reportError("Host binding expression cannot contain " + errors.join(' '), input, location);
          }
          return new ASTWithSource(ast, input, location, this.errors);
        };
        Parser.prototype._reportError = function(message, input, errLocation, ctxLocation) {
          this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
        };
        Parser.prototype._parseBindingAst = function(input, location, interpolationConfig) {
          var quote = this._parseQuote(input, location);
          if (isPresent(quote)) {
            return quote;
          }
          this._checkNoInterpolation(input, location, interpolationConfig);
          var sourceToLex = this._stripComments(input);
          var tokens = this._lexer.tokenize(sourceToLex);
          return new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length).parseChain();
        };
        Parser.prototype._parseQuote = function(input, location) {
          if (isBlank(input))
            return null;
          var prefixSeparatorIndex = input.indexOf(':');
          if (prefixSeparatorIndex == -1)
            return null;
          var prefix = input.substring(0, prefixSeparatorIndex).trim();
          if (!isIdentifier(prefix))
            return null;
          var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
          return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
        };
        Parser.prototype.parseTemplateBindings = function(input, location) {
          var tokens = this._lexer.tokenize(input);
          return new _ParseAST(input, location, tokens, input.length, false, this.errors, 0).parseTemplateBindings();
        };
        Parser.prototype.parseInterpolation = function(input, location, interpolationConfig) {
          if (interpolationConfig === void 0) {
            interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
          }
          var split = this.splitInterpolation(input, location, interpolationConfig);
          if (split == null)
            return null;
          var expressions = [];
          for (var i = 0; i < split.expressions.length; ++i) {
            var expressionText = split.expressions[i];
            var sourceToLex = this._stripComments(expressionText);
            var tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));
            var ast = new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length)).parseChain();
            expressions.push(ast);
          }
          return new ASTWithSource(new Interpolation(new ParseSpan(0, isBlank(input) ? 0 : input.length), split.strings, expressions), input, location, this.errors);
        };
        Parser.prototype.splitInterpolation = function(input, location, interpolationConfig) {
          if (interpolationConfig === void 0) {
            interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
          }
          var regexp = _createInterpolateRegExp(interpolationConfig);
          var parts = input.split(regexp);
          if (parts.length <= 1) {
            return null;
          }
          var strings = [];
          var expressions = [];
          var offsets = [];
          var offset = 0;
          for (var i = 0; i < parts.length; i++) {
            var part = parts[i];
            if (i % 2 === 0) {
              strings.push(part);
              offset += part.length;
            } else if (part.trim().length > 0) {
              offset += interpolationConfig.start.length;
              expressions.push(part);
              offsets.push(offset);
              offset += part.length + interpolationConfig.end.length;
            } else {
              this._reportError('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
            }
          }
          return new SplitInterpolation(strings, expressions, offsets);
        };
        Parser.prototype.wrapLiteralPrimitive = function(input, location) {
          return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, isBlank(input) ? 0 : input.length), input), input, location, this.errors);
        };
        Parser.prototype._stripComments = function(input) {
          var i = this._commentStart(input);
          return isPresent(i) ? input.substring(0, i).trim() : input;
        };
        Parser.prototype._commentStart = function(input) {
          var outerQuote = null;
          for (var i = 0; i < input.length - 1; i++) {
            var char = input.charCodeAt(i);
            var nextChar = input.charCodeAt(i + 1);
            if (char === chars.$SLASH && nextChar == chars.$SLASH && isBlank(outerQuote))
              return i;
            if (outerQuote === char) {
              outerQuote = null;
            } else if (isBlank(outerQuote) && isQuote(char)) {
              outerQuote = char;
            }
          }
          return null;
        };
        Parser.prototype._checkNoInterpolation = function(input, location, interpolationConfig) {
          var regexp = _createInterpolateRegExp(interpolationConfig);
          var parts = input.split(regexp);
          if (parts.length > 1) {
            this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
          }
        };
        Parser.prototype._findInterpolationErrorColumn = function(parts, partInErrIdx, interpolationConfig) {
          var errLocation = '';
          for (var j = 0; j < partInErrIdx; j++) {
            errLocation += j % 2 === 0 ? parts[j] : "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
          }
          return errLocation.length;
        };
        Parser.decorators = [{type: Injectable}];
        Parser.ctorParameters = [{type: Lexer}];
        return Parser;
      }());
      $__export("Parser", Parser);
      _ParseAST = (function() {
        function _ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) {
          this.input = input;
          this.location = location;
          this.tokens = tokens;
          this.inputLength = inputLength;
          this.parseAction = parseAction;
          this.errors = errors;
          this.offset = offset;
          this.rparensExpected = 0;
          this.rbracketsExpected = 0;
          this.rbracesExpected = 0;
          this.index = 0;
        }
        _ParseAST.prototype.peek = function(offset) {
          var i = this.index + offset;
          return i < this.tokens.length ? this.tokens[i] : EOF;
        };
        Object.defineProperty(_ParseAST.prototype, "next", {
          get: function() {
            return this.peek(0);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(_ParseAST.prototype, "inputIndex", {
          get: function() {
            return (this.index < this.tokens.length) ? this.next.index + this.offset : this.inputLength + this.offset;
          },
          enumerable: true,
          configurable: true
        });
        _ParseAST.prototype.span = function(start) {
          return new ParseSpan(start, this.inputIndex);
        };
        _ParseAST.prototype.advance = function() {
          this.index++;
        };
        _ParseAST.prototype.optionalCharacter = function(code) {
          if (this.next.isCharacter(code)) {
            this.advance();
            return true;
          } else {
            return false;
          }
        };
        _ParseAST.prototype.peekKeywordLet = function() {
          return this.next.isKeywordLet();
        };
        _ParseAST.prototype.expectCharacter = function(code) {
          if (this.optionalCharacter(code))
            return;
          this.error("Missing expected " + String.fromCharCode(code));
        };
        _ParseAST.prototype.optionalOperator = function(op) {
          if (this.next.isOperator(op)) {
            this.advance();
            return true;
          } else {
            return false;
          }
        };
        _ParseAST.prototype.expectOperator = function(operator) {
          if (this.optionalOperator(operator))
            return;
          this.error("Missing expected operator " + operator);
        };
        _ParseAST.prototype.expectIdentifierOrKeyword = function() {
          var n = this.next;
          if (!n.isIdentifier() && !n.isKeyword()) {
            this.error("Unexpected token " + n + ", expected identifier or keyword");
            return '';
          }
          this.advance();
          return n.toString();
        };
        _ParseAST.prototype.expectIdentifierOrKeywordOrString = function() {
          var n = this.next;
          if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
            this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
            return '';
          }
          this.advance();
          return n.toString();
        };
        _ParseAST.prototype.parseChain = function() {
          var exprs = [];
          var start = this.inputIndex;
          while (this.index < this.tokens.length) {
            var expr = this.parsePipe();
            exprs.push(expr);
            if (this.optionalCharacter(chars.$SEMICOLON)) {
              if (!this.parseAction) {
                this.error('Binding expression cannot contain chained expression');
              }
              while (this.optionalCharacter(chars.$SEMICOLON)) {}
            } else if (this.index < this.tokens.length) {
              this.error("Unexpected token '" + this.next + "'");
            }
          }
          if (exprs.length == 0)
            return new EmptyExpr(this.span(start));
          if (exprs.length == 1)
            return exprs[0];
          return new Chain(this.span(start), exprs);
        };
        _ParseAST.prototype.parsePipe = function() {
          var result = this.parseExpression();
          if (this.optionalOperator('|')) {
            if (this.parseAction) {
              this.error('Cannot have a pipe in an action expression');
            }
            do {
              var name = this.expectIdentifierOrKeyword();
              var args = [];
              while (this.optionalCharacter(chars.$COLON)) {
                args.push(this.parseExpression());
              }
              result = new BindingPipe(this.span(result.span.start - this.offset), result, name, args);
            } while (this.optionalOperator('|'));
          }
          return result;
        };
        _ParseAST.prototype.parseExpression = function() {
          return this.parseConditional();
        };
        _ParseAST.prototype.parseConditional = function() {
          var start = this.inputIndex;
          var result = this.parseLogicalOr();
          if (this.optionalOperator('?')) {
            var yes = this.parsePipe();
            var no = void 0;
            if (!this.optionalCharacter(chars.$COLON)) {
              var end = this.inputIndex;
              var expression = this.input.substring(start, end);
              this.error("Conditional expression " + expression + " requires all 3 expressions");
              no = new EmptyExpr(this.span(start));
            } else {
              no = this.parsePipe();
            }
            return new Conditional(this.span(start), result, yes, no);
          } else {
            return result;
          }
        };
        _ParseAST.prototype.parseLogicalOr = function() {
          var result = this.parseLogicalAnd();
          while (this.optionalOperator('||')) {
            var right = this.parseLogicalAnd();
            result = new Binary(this.span(result.span.start), '||', result, right);
          }
          return result;
        };
        _ParseAST.prototype.parseLogicalAnd = function() {
          var result = this.parseEquality();
          while (this.optionalOperator('&&')) {
            var right = this.parseEquality();
            result = new Binary(this.span(result.span.start), '&&', result, right);
          }
          return result;
        };
        _ParseAST.prototype.parseEquality = function() {
          var result = this.parseRelational();
          while (this.next.type == TokenType.Operator) {
            var operator = this.next.strValue;
            switch (operator) {
              case '==':
              case '===':
              case '!=':
              case '!==':
                this.advance();
                var right = this.parseRelational();
                result = new Binary(this.span(result.span.start), operator, result, right);
                continue;
            }
            break;
          }
          return result;
        };
        _ParseAST.prototype.parseRelational = function() {
          var result = this.parseAdditive();
          while (this.next.type == TokenType.Operator) {
            var operator = this.next.strValue;
            switch (operator) {
              case '<':
              case '>':
              case '<=':
              case '>=':
                this.advance();
                var right = this.parseAdditive();
                result = new Binary(this.span(result.span.start), operator, result, right);
                continue;
            }
            break;
          }
          return result;
        };
        _ParseAST.prototype.parseAdditive = function() {
          var result = this.parseMultiplicative();
          while (this.next.type == TokenType.Operator) {
            var operator = this.next.strValue;
            switch (operator) {
              case '+':
              case '-':
                this.advance();
                var right = this.parseMultiplicative();
                result = new Binary(this.span(result.span.start), operator, result, right);
                continue;
            }
            break;
          }
          return result;
        };
        _ParseAST.prototype.parseMultiplicative = function() {
          var result = this.parsePrefix();
          while (this.next.type == TokenType.Operator) {
            var operator = this.next.strValue;
            switch (operator) {
              case '*':
              case '%':
              case '/':
                this.advance();
                var right = this.parsePrefix();
                result = new Binary(this.span(result.span.start), operator, result, right);
                continue;
            }
            break;
          }
          return result;
        };
        _ParseAST.prototype.parsePrefix = function() {
          if (this.next.type == TokenType.Operator) {
            var start = this.inputIndex;
            var operator = this.next.strValue;
            var result = void 0;
            switch (operator) {
              case '+':
                this.advance();
                return this.parsePrefix();
              case '-':
                this.advance();
                result = this.parsePrefix();
                return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);
              case '!':
                this.advance();
                result = this.parsePrefix();
                return new PrefixNot(this.span(start), result);
            }
          }
          return this.parseCallChain();
        };
        _ParseAST.prototype.parseCallChain = function() {
          var result = this.parsePrimary();
          while (true) {
            if (this.optionalCharacter(chars.$PERIOD)) {
              result = this.parseAccessMemberOrMethodCall(result, false);
            } else if (this.optionalOperator('?.')) {
              result = this.parseAccessMemberOrMethodCall(result, true);
            } else if (this.optionalCharacter(chars.$LBRACKET)) {
              this.rbracketsExpected++;
              var key = this.parsePipe();
              this.rbracketsExpected--;
              this.expectCharacter(chars.$RBRACKET);
              if (this.optionalOperator('=')) {
                var value = this.parseConditional();
                result = new KeyedWrite(this.span(result.span.start), result, key, value);
              } else {
                result = new KeyedRead(this.span(result.span.start), result, key);
              }
            } else if (this.optionalCharacter(chars.$LPAREN)) {
              this.rparensExpected++;
              var args = this.parseCallArguments();
              this.rparensExpected--;
              this.expectCharacter(chars.$RPAREN);
              result = new FunctionCall(this.span(result.span.start), result, args);
            } else {
              return result;
            }
          }
        };
        _ParseAST.prototype.parsePrimary = function() {
          var start = this.inputIndex;
          if (this.optionalCharacter(chars.$LPAREN)) {
            this.rparensExpected++;
            var result = this.parsePipe();
            this.rparensExpected--;
            this.expectCharacter(chars.$RPAREN);
            return result;
          } else if (this.next.isKeywordNull()) {
            this.advance();
            return new LiteralPrimitive(this.span(start), null);
          } else if (this.next.isKeywordUndefined()) {
            this.advance();
            return new LiteralPrimitive(this.span(start), void 0);
          } else if (this.next.isKeywordTrue()) {
            this.advance();
            return new LiteralPrimitive(this.span(start), true);
          } else if (this.next.isKeywordFalse()) {
            this.advance();
            return new LiteralPrimitive(this.span(start), false);
          } else if (this.next.isKeywordThis()) {
            this.advance();
            return new ImplicitReceiver(this.span(start));
          } else if (this.optionalCharacter(chars.$LBRACKET)) {
            this.rbracketsExpected++;
            var elements = this.parseExpressionList(chars.$RBRACKET);
            this.rbracketsExpected--;
            this.expectCharacter(chars.$RBRACKET);
            return new LiteralArray(this.span(start), elements);
          } else if (this.next.isCharacter(chars.$LBRACE)) {
            return this.parseLiteralMap();
          } else if (this.next.isIdentifier()) {
            return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);
          } else if (this.next.isNumber()) {
            var value = this.next.toNumber();
            this.advance();
            return new LiteralPrimitive(this.span(start), value);
          } else if (this.next.isString()) {
            var literalValue = this.next.toString();
            this.advance();
            return new LiteralPrimitive(this.span(start), literalValue);
          } else if (this.index >= this.tokens.length) {
            this.error("Unexpected end of expression: " + this.input);
            return new EmptyExpr(this.span(start));
          } else {
            this.error("Unexpected token " + this.next);
            return new EmptyExpr(this.span(start));
          }
        };
        _ParseAST.prototype.parseExpressionList = function(terminator) {
          var result = [];
          if (!this.next.isCharacter(terminator)) {
            do {
              result.push(this.parsePipe());
            } while (this.optionalCharacter(chars.$COMMA));
          }
          return result;
        };
        _ParseAST.prototype.parseLiteralMap = function() {
          var keys = [];
          var values = [];
          var start = this.inputIndex;
          this.expectCharacter(chars.$LBRACE);
          if (!this.optionalCharacter(chars.$RBRACE)) {
            this.rbracesExpected++;
            do {
              var key = this.expectIdentifierOrKeywordOrString();
              keys.push(key);
              this.expectCharacter(chars.$COLON);
              values.push(this.parsePipe());
            } while (this.optionalCharacter(chars.$COMMA));
            this.rbracesExpected--;
            this.expectCharacter(chars.$RBRACE);
          }
          return new LiteralMap(this.span(start), keys, values);
        };
        _ParseAST.prototype.parseAccessMemberOrMethodCall = function(receiver, isSafe) {
          if (isSafe === void 0) {
            isSafe = false;
          }
          var start = receiver.span.start;
          var id = this.expectIdentifierOrKeyword();
          if (this.optionalCharacter(chars.$LPAREN)) {
            this.rparensExpected++;
            var args = this.parseCallArguments();
            this.expectCharacter(chars.$RPAREN);
            this.rparensExpected--;
            var span = this.span(start);
            return isSafe ? new SafeMethodCall(span, receiver, id, args) : new MethodCall(span, receiver, id, args);
          } else {
            if (isSafe) {
              if (this.optionalOperator('=')) {
                this.error('The \'?.\' operator cannot be used in the assignment');
                return new EmptyExpr(this.span(start));
              } else {
                return new SafePropertyRead(this.span(start), receiver, id);
              }
            } else {
              if (this.optionalOperator('=')) {
                if (!this.parseAction) {
                  this.error('Bindings cannot contain assignments');
                  return new EmptyExpr(this.span(start));
                }
                var value = this.parseConditional();
                return new PropertyWrite(this.span(start), receiver, id, value);
              } else {
                return new PropertyRead(this.span(start), receiver, id);
              }
            }
          }
        };
        _ParseAST.prototype.parseCallArguments = function() {
          if (this.next.isCharacter(chars.$RPAREN))
            return [];
          var positionals = [];
          do {
            positionals.push(this.parsePipe());
          } while (this.optionalCharacter(chars.$COMMA));
          return positionals;
        };
        _ParseAST.prototype.expectTemplateBindingKey = function() {
          var result = '';
          var operatorFound = false;
          do {
            result += this.expectIdentifierOrKeywordOrString();
            operatorFound = this.optionalOperator('-');
            if (operatorFound) {
              result += '-';
            }
          } while (operatorFound);
          return result.toString();
        };
        _ParseAST.prototype.parseTemplateBindings = function() {
          var bindings = [];
          var prefix = null;
          var warnings = [];
          while (this.index < this.tokens.length) {
            var keyIsVar = this.peekKeywordLet();
            if (keyIsVar) {
              this.advance();
            }
            var key = this.expectTemplateBindingKey();
            if (!keyIsVar) {
              if (prefix == null) {
                prefix = key;
              } else {
                key = prefix + key[0].toUpperCase() + key.substring(1);
              }
            }
            this.optionalCharacter(chars.$COLON);
            var name = null;
            var expression = null;
            if (keyIsVar) {
              if (this.optionalOperator('=')) {
                name = this.expectTemplateBindingKey();
              } else {
                name = '\$implicit';
              }
            } else if (this.next !== EOF && !this.peekKeywordLet()) {
              var start = this.inputIndex;
              var ast = this.parsePipe();
              var source = this.input.substring(start, this.inputIndex);
              expression = new ASTWithSource(ast, source, this.location, this.errors);
            }
            bindings.push(new TemplateBinding(key, keyIsVar, name, expression));
            if (!this.optionalCharacter(chars.$SEMICOLON)) {
              this.optionalCharacter(chars.$COMMA);
            }
          }
          return new TemplateBindingParseResult(bindings, warnings, this.errors);
        };
        _ParseAST.prototype.error = function(message, index) {
          if (index === void 0) {
            index = null;
          }
          this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
          this.skip();
        };
        _ParseAST.prototype.locationText = function(index) {
          if (index === void 0) {
            index = null;
          }
          if (isBlank(index))
            index = this.index;
          return (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" : "at the end of the expression";
        };
        _ParseAST.prototype.skip = function() {
          var n = this.next;
          while (this.index < this.tokens.length && !n.isCharacter(chars.$SEMICOLON) && (this.rparensExpected <= 0 || !n.isCharacter(chars.$RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter(chars.$RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter(chars.$RBRACKET))) {
            if (this.next.isError()) {
              this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
            }
            this.advance();
            n = this.next;
          }
        };
        return _ParseAST;
      }());
      $__export("_ParseAST", _ParseAST);
      SimpleExpressionChecker = (function() {
        function SimpleExpressionChecker() {
          this.errors = [];
        }
        SimpleExpressionChecker.check = function(ast) {
          var s = new SimpleExpressionChecker();
          ast.visit(s);
          return s.errors;
        };
        SimpleExpressionChecker.prototype.visitImplicitReceiver = function(ast, context) {};
        SimpleExpressionChecker.prototype.visitInterpolation = function(ast, context) {};
        SimpleExpressionChecker.prototype.visitLiteralPrimitive = function(ast, context) {};
        SimpleExpressionChecker.prototype.visitPropertyRead = function(ast, context) {};
        SimpleExpressionChecker.prototype.visitPropertyWrite = function(ast, context) {};
        SimpleExpressionChecker.prototype.visitSafePropertyRead = function(ast, context) {};
        SimpleExpressionChecker.prototype.visitMethodCall = function(ast, context) {};
        SimpleExpressionChecker.prototype.visitSafeMethodCall = function(ast, context) {};
        SimpleExpressionChecker.prototype.visitFunctionCall = function(ast, context) {};
        SimpleExpressionChecker.prototype.visitLiteralArray = function(ast, context) {
          this.visitAll(ast.expressions);
        };
        SimpleExpressionChecker.prototype.visitLiteralMap = function(ast, context) {
          this.visitAll(ast.values);
        };
        SimpleExpressionChecker.prototype.visitBinary = function(ast, context) {};
        SimpleExpressionChecker.prototype.visitPrefixNot = function(ast, context) {};
        SimpleExpressionChecker.prototype.visitConditional = function(ast, context) {};
        SimpleExpressionChecker.prototype.visitPipe = function(ast, context) {
          this.errors.push('pipes');
        };
        SimpleExpressionChecker.prototype.visitKeyedRead = function(ast, context) {};
        SimpleExpressionChecker.prototype.visitKeyedWrite = function(ast, context) {};
        SimpleExpressionChecker.prototype.visitAll = function(asts) {
          var _this = this;
          return asts.map(function(node) {
            return node.visit(_this);
          });
        };
        SimpleExpressionChecker.prototype.visitChain = function(ast, context) {};
        SimpleExpressionChecker.prototype.visitQuote = function(ast, context) {};
        return SimpleExpressionChecker;
      }());
    }
  };
});

$__System.register("52", ["c", "16"], function($__export) {
  "use strict";
  var isDevMode,
      isBlank,
      isPresent,
      INTERPOLATION_BLACKLIST_REGEXPS;
  function assertArrayOfStrings(identifier, value) {
    if (!isDevMode() || isBlank(value)) {
      return;
    }
    if (!Array.isArray(value)) {
      throw new Error("Expected '" + identifier + "' to be an array of strings.");
    }
    for (var i = 0; i < value.length; i += 1) {
      if (typeof value[i] !== 'string') {
        throw new Error("Expected '" + identifier + "' to be an array of strings.");
      }
    }
  }
  function assertInterpolationSymbols(identifier, value) {
    if (isPresent(value) && !(Array.isArray(value) && value.length == 2)) {
      throw new Error("Expected '" + identifier + "' to be an array, [start, end].");
    } else if (isDevMode() && !isBlank(value)) {
      var start_1 = value[0];
      var end_1 = value[1];
      INTERPOLATION_BLACKLIST_REGEXPS.forEach(function(regexp) {
        if (regexp.test(start_1) || regexp.test(end_1)) {
          throw new Error("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
        }
      });
    }
  }
  $__export("assertArrayOfStrings", assertArrayOfStrings);
  $__export("assertInterpolationSymbols", assertInterpolationSymbols);
  return {
    setters: [function($__m) {
      isDevMode = $__m.isDevMode;
    }, function($__m) {
      isBlank = $__m.isBlank;
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      INTERPOLATION_BLACKLIST_REGEXPS = [/^\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\/\//];
    }
  };
});

$__System.register("2e", ["52"], function($__export) {
  "use strict";
  var assertInterpolationSymbols,
      InterpolationConfig,
      DEFAULT_INTERPOLATION_CONFIG;
  return {
    setters: [function($__m) {
      assertInterpolationSymbols = $__m.assertInterpolationSymbols;
    }],
    execute: function() {
      InterpolationConfig = (function() {
        function InterpolationConfig(start, end) {
          this.start = start;
          this.end = end;
        }
        InterpolationConfig.fromArray = function(markers) {
          if (!markers) {
            return DEFAULT_INTERPOLATION_CONFIG;
          }
          assertInterpolationSymbols('interpolation', markers);
          return new InterpolationConfig(markers[0], markers[1]);
        };
        ;
        return InterpolationConfig;
      }());
      $__export("InterpolationConfig", InterpolationConfig);
      DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');
      $__export("DEFAULT_INTERPOLATION_CONFIG", DEFAULT_INTERPOLATION_CONFIG);
    }
  };
});

$__System.register("56", ["14"], function($__export) {
  "use strict";
  var o;
  function createClassStmt(config) {
    var parentArgs = config.parentArgs || [];
    var superCtorStmts = config.parent ? [o.SUPER_EXPR.callFn(parentArgs).toStmt()] : [];
    var builder = concatClassBuilderParts(Array.isArray(config.builders) ? config.builders : [config.builders]);
    var ctor = new o.ClassMethod(null, config.ctorParams || [], superCtorStmts.concat(builder.ctorStmts));
    return new o.ClassStmt(config.name, config.parent, builder.fields, builder.getters, ctor, builder.methods, config.modifiers || []);
  }
  function concatClassBuilderParts(builders) {
    return {
      fields: (_a = []).concat.apply(_a, builders.map(function(builder) {
        return builder.fields || [];
      })),
      methods: (_b = []).concat.apply(_b, builders.map(function(builder) {
        return builder.methods || [];
      })),
      getters: (_c = []).concat.apply(_c, builders.map(function(builder) {
        return builder.getters || [];
      })),
      ctorStmts: (_d = []).concat.apply(_d, builders.map(function(builder) {
        return builder.ctorStmts || [];
      }))
    };
    var _a,
        _b,
        _c,
        _d;
  }
  $__export("createClassStmt", createClassStmt);
  return {
    setters: [function($__m) {
      o = $__m;
    }],
    execute: function() {}
  };
});

$__System.register("31", [], function($__export) {
  "use strict";
  var ElementSchemaRegistry;
  return {
    setters: [],
    execute: function() {
      ElementSchemaRegistry = (function() {
        function ElementSchemaRegistry() {}
        return ElementSchemaRegistry;
      }());
      $__export("ElementSchemaRegistry", ElementSchemaRegistry);
    }
  };
});

$__System.register("1a", ["16"], function($__export) {
  "use strict";
  var isPresent,
      ParseLocation,
      ParseSourceFile,
      ParseSourceSpan,
      ParseErrorLevel,
      ParseError;
  return {
    setters: [function($__m) {
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      ParseLocation = (function() {
        function ParseLocation(file, offset, line, col) {
          this.file = file;
          this.offset = offset;
          this.line = line;
          this.col = col;
        }
        ParseLocation.prototype.toString = function() {
          return isPresent(this.offset) ? this.file.url + "@" + this.line + ":" + this.col : this.file.url;
        };
        return ParseLocation;
      }());
      $__export("ParseLocation", ParseLocation);
      ParseSourceFile = (function() {
        function ParseSourceFile(content, url) {
          this.content = content;
          this.url = url;
        }
        return ParseSourceFile;
      }());
      $__export("ParseSourceFile", ParseSourceFile);
      ParseSourceSpan = (function() {
        function ParseSourceSpan(start, end, details) {
          if (details === void 0) {
            details = null;
          }
          this.start = start;
          this.end = end;
          this.details = details;
        }
        ParseSourceSpan.prototype.toString = function() {
          return this.start.file.content.substring(this.start.offset, this.end.offset);
        };
        return ParseSourceSpan;
      }());
      $__export("ParseSourceSpan", ParseSourceSpan);
      $__export("ParseErrorLevel", ParseErrorLevel);
      (function(ParseErrorLevel) {
        ParseErrorLevel[ParseErrorLevel["WARNING"] = 0] = "WARNING";
        ParseErrorLevel[ParseErrorLevel["FATAL"] = 1] = "FATAL";
      })(ParseErrorLevel || ($__export("ParseErrorLevel", ParseErrorLevel = {})));
      ParseError = (function() {
        function ParseError(span, msg, level) {
          if (level === void 0) {
            level = ParseErrorLevel.FATAL;
          }
          this.span = span;
          this.msg = msg;
          this.level = level;
        }
        ParseError.prototype.toString = function() {
          var source = this.span.start.file.content;
          var ctxStart = this.span.start.offset;
          var contextStr = '';
          var details = '';
          if (isPresent(ctxStart)) {
            if (ctxStart > source.length - 1) {
              ctxStart = source.length - 1;
            }
            var ctxEnd = ctxStart;
            var ctxLen = 0;
            var ctxLines = 0;
            while (ctxLen < 100 && ctxStart > 0) {
              ctxStart--;
              ctxLen++;
              if (source[ctxStart] == '\n') {
                if (++ctxLines == 3) {
                  break;
                }
              }
            }
            ctxLen = 0;
            ctxLines = 0;
            while (ctxLen < 100 && ctxEnd < source.length - 1) {
              ctxEnd++;
              ctxLen++;
              if (source[ctxEnd] == '\n') {
                if (++ctxLines == 3) {
                  break;
                }
              }
            }
            var context = source.substring(ctxStart, this.span.start.offset) + '[ERROR ->]' + source.substring(this.span.start.offset, ctxEnd + 1);
            contextStr = " (\"" + context + "\")";
          }
          if (this.span.details) {
            details = ", " + this.span.details;
          }
          return "" + this.msg + contextStr + ": " + this.span.start + details;
        };
        return ParseError;
      }());
      $__export("ParseError", ParseError);
    }
  };
});

$__System.register("34", ["c", "64", "16", "2f", "1a", "17", "32", "20", "35"], function($__export) {
  "use strict";
  var __extends,
      SecurityContext,
      EmptyExpr,
      RecursiveAstVisitor,
      isPresent,
      mergeNsAndName,
      ParseError,
      ParseErrorLevel,
      view_utils,
      CssSelector,
      splitAtColon,
      splitAtPeriod,
      BoundElementPropertyAst,
      BoundEventAst,
      PropertyBindingType,
      VariableAst,
      PROPERTY_PARTS_SEPARATOR,
      ATTRIBUTE_PREFIX,
      CLASS_PREFIX,
      STYLE_PREFIX,
      ANIMATE_PROP_PREFIX,
      BoundPropertyType,
      BoundProperty,
      BindingParser,
      PipeCollector;
  function _isAnimationLabel(name) {
    return name[0] == '@';
  }
  function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
    var ctxs = [];
    CssSelector.parse(selector).forEach(function(selector) {
      var elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();
      var notElementNames = new Set(selector.notSelectors.filter(function(selector) {
        return selector.isElementSelector();
      }).map(function(selector) {
        return selector.element;
      }));
      var possibleElementNames = elementNames.filter(function(elementName) {
        return !notElementNames.has(elementName);
      });
      ctxs.push.apply(ctxs, possibleElementNames.map(function(elementName) {
        return registry.securityContext(elementName, propName, isAttribute);
      }));
    });
    return ctxs.length === 0 ? [SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();
  }
  $__export("calcPossibleSecurityContexts", calcPossibleSecurityContexts);
  return {
    setters: [function($__m) {
      SecurityContext = $__m.SecurityContext;
    }, function($__m) {
      EmptyExpr = $__m.EmptyExpr;
      RecursiveAstVisitor = $__m.RecursiveAstVisitor;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      mergeNsAndName = $__m.mergeNsAndName;
    }, function($__m) {
      ParseError = $__m.ParseError;
      ParseErrorLevel = $__m.ParseErrorLevel;
    }, function($__m) {
      view_utils = $__m.view_utils;
    }, function($__m) {
      CssSelector = $__m.CssSelector;
    }, function($__m) {
      splitAtColon = $__m.splitAtColon;
      splitAtPeriod = $__m.splitAtPeriod;
    }, function($__m) {
      BoundElementPropertyAst = $__m.BoundElementPropertyAst;
      BoundEventAst = $__m.BoundEventAst;
      PropertyBindingType = $__m.PropertyBindingType;
      VariableAst = $__m.VariableAst;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      PROPERTY_PARTS_SEPARATOR = '.';
      ATTRIBUTE_PREFIX = 'attr';
      CLASS_PREFIX = 'class';
      STYLE_PREFIX = 'style';
      ANIMATE_PROP_PREFIX = 'animate-';
      $__export("BoundPropertyType", BoundPropertyType);
      (function(BoundPropertyType) {
        BoundPropertyType[BoundPropertyType["DEFAULT"] = 0] = "DEFAULT";
        BoundPropertyType[BoundPropertyType["LITERAL_ATTR"] = 1] = "LITERAL_ATTR";
        BoundPropertyType[BoundPropertyType["ANIMATION"] = 2] = "ANIMATION";
      })(BoundPropertyType || ($__export("BoundPropertyType", BoundPropertyType = {})));
      BoundProperty = (function() {
        function BoundProperty(name, expression, type, sourceSpan) {
          this.name = name;
          this.expression = expression;
          this.type = type;
          this.sourceSpan = sourceSpan;
        }
        Object.defineProperty(BoundProperty.prototype, "isLiteral", {
          get: function() {
            return this.type === BoundPropertyType.LITERAL_ATTR;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(BoundProperty.prototype, "isAnimation", {
          get: function() {
            return this.type === BoundPropertyType.ANIMATION;
          },
          enumerable: true,
          configurable: true
        });
        return BoundProperty;
      }());
      $__export("BoundProperty", BoundProperty);
      BindingParser = (function() {
        function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) {
          var _this = this;
          this._exprParser = _exprParser;
          this._interpolationConfig = _interpolationConfig;
          this._schemaRegistry = _schemaRegistry;
          this._targetErrors = _targetErrors;
          this.pipesByName = new Map();
          pipes.forEach(function(pipe) {
            return _this.pipesByName.set(pipe.name, pipe);
          });
        }
        BindingParser.prototype.createDirectiveHostPropertyAsts = function(dirMeta, sourceSpan) {
          var _this = this;
          if (dirMeta.hostProperties) {
            var boundProps_1 = [];
            Object.keys(dirMeta.hostProperties).forEach(function(propName) {
              var expression = dirMeta.hostProperties[propName];
              if (typeof expression === 'string') {
                _this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps_1);
              } else {
                _this._reportError("Value of the host property binding \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + (typeof expression === 'undefined' ? 'undefined' : $traceurRuntime.typeof(expression)) + ")", sourceSpan);
              }
            });
            return boundProps_1.map(function(prop) {
              return _this.createElementPropertyAst(dirMeta.selector, prop);
            });
          }
        };
        BindingParser.prototype.createDirectiveHostEventAsts = function(dirMeta, sourceSpan) {
          var _this = this;
          if (dirMeta.hostListeners) {
            var targetEventAsts_1 = [];
            Object.keys(dirMeta.hostListeners).forEach(function(propName) {
              var expression = dirMeta.hostListeners[propName];
              if (typeof expression === 'string') {
                _this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts_1);
              } else {
                _this._reportError("Value of the host listener \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + (typeof expression === 'undefined' ? 'undefined' : $traceurRuntime.typeof(expression)) + ")", sourceSpan);
              }
            });
            return targetEventAsts_1;
          }
        };
        BindingParser.prototype.parseInterpolation = function(value, sourceSpan) {
          var sourceInfo = sourceSpan.start.toString();
          try {
            var ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);
            if (ast)
              this._reportExpressionParserErrors(ast.errors, sourceSpan);
            this._checkPipes(ast, sourceSpan);
            if (ast && ast.ast.expressions.length > view_utils.MAX_INTERPOLATION_VALUES) {
              throw new Error("Only support at most " + view_utils.MAX_INTERPOLATION_VALUES + " interpolation values!");
            }
            return ast;
          } catch (e) {
            this._reportError("" + e, sourceSpan);
            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
          }
        };
        BindingParser.prototype.parseInlineTemplateBinding = function(name, value, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {
          var bindings = this._parseTemplateBindings(value, sourceSpan);
          for (var i = 0; i < bindings.length; i++) {
            var binding = bindings[i];
            if (binding.keyIsVar) {
              targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));
            } else if (isPresent(binding.expression)) {
              this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);
            } else {
              targetMatchableAttrs.push([binding.key, '']);
              this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);
            }
          }
        };
        BindingParser.prototype._parseTemplateBindings = function(value, sourceSpan) {
          var _this = this;
          var sourceInfo = sourceSpan.start.toString();
          try {
            var bindingsResult = this._exprParser.parseTemplateBindings(value, sourceInfo);
            this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);
            bindingsResult.templateBindings.forEach(function(binding) {
              if (isPresent(binding.expression)) {
                _this._checkPipes(binding.expression, sourceSpan);
              }
            });
            bindingsResult.warnings.forEach(function(warning) {
              _this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING);
            });
            return bindingsResult.templateBindings;
          } catch (e) {
            this._reportError("" + e, sourceSpan);
            return [];
          }
        };
        BindingParser.prototype.parseLiteralAttr = function(name, value, sourceSpan, targetMatchableAttrs, targetProps) {
          if (_isAnimationLabel(name)) {
            name = name.substring(1);
            if (value) {
              this._reportError("Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid." + " Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.", sourceSpan, ParseErrorLevel.FATAL);
            }
            this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);
          } else {
            targetProps.push(new BoundProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), BoundPropertyType.LITERAL_ATTR, sourceSpan));
          }
        };
        BindingParser.prototype.parsePropertyBinding = function(name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {
          var isAnimationProp = false;
          if (name.startsWith(ANIMATE_PROP_PREFIX)) {
            isAnimationProp = true;
            name = name.substring(ANIMATE_PROP_PREFIX.length);
          } else if (_isAnimationLabel(name)) {
            isAnimationProp = true;
            name = name.substring(1);
          }
          if (isAnimationProp) {
            this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);
          } else {
            this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
          }
        };
        BindingParser.prototype.parsePropertyInterpolation = function(name, value, sourceSpan, targetMatchableAttrs, targetProps) {
          var expr = this.parseInterpolation(value, sourceSpan);
          if (isPresent(expr)) {
            this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
            return true;
          }
          return false;
        };
        BindingParser.prototype._parsePropertyAst = function(name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
          targetMatchableAttrs.push([name, ast.source]);
          targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));
        };
        BindingParser.prototype._parseAnimation = function(name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
          var ast = this._parseBinding(expression || 'null', false, sourceSpan);
          targetMatchableAttrs.push([name, ast.source]);
          targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));
        };
        BindingParser.prototype._parseBinding = function(value, isHostBinding, sourceSpan) {
          var sourceInfo = sourceSpan.start.toString();
          try {
            var ast = isHostBinding ? this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) : this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
            if (ast)
              this._reportExpressionParserErrors(ast.errors, sourceSpan);
            this._checkPipes(ast, sourceSpan);
            return ast;
          } catch (e) {
            this._reportError("" + e, sourceSpan);
            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
          }
        };
        BindingParser.prototype.createElementPropertyAst = function(elementSelector, boundProp) {
          if (boundProp.isAnimation) {
            return new BoundElementPropertyAst(boundProp.name, PropertyBindingType.Animation, SecurityContext.NONE, false, boundProp.expression, null, boundProp.sourceSpan);
          }
          var unit = null;
          var bindingType;
          var boundPropertyName;
          var parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
          var securityContexts;
          if (parts.length === 1) {
            var partValue = parts[0];
            boundPropertyName = this._schemaRegistry.getMappedPropName(partValue);
            securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, false);
            bindingType = PropertyBindingType.Property;
            this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);
          } else {
            if (parts[0] == ATTRIBUTE_PREFIX) {
              boundPropertyName = parts[1];
              this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
              securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
              var nsSeparatorIdx = boundPropertyName.indexOf(':');
              if (nsSeparatorIdx > -1) {
                var ns = boundPropertyName.substring(0, nsSeparatorIdx);
                var name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);
                boundPropertyName = mergeNsAndName(ns, name_1);
              }
              bindingType = PropertyBindingType.Attribute;
            } else if (parts[0] == CLASS_PREFIX) {
              boundPropertyName = parts[1];
              bindingType = PropertyBindingType.Class;
              securityContexts = [SecurityContext.NONE];
            } else if (parts[0] == STYLE_PREFIX) {
              unit = parts.length > 2 ? parts[2] : null;
              boundPropertyName = parts[1];
              bindingType = PropertyBindingType.Style;
              securityContexts = [SecurityContext.STYLE];
            } else {
              this._reportError("Invalid property name '" + boundProp.name + "'", boundProp.sourceSpan);
              bindingType = null;
              securityContexts = [];
            }
          }
          return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContexts.length === 1 ? securityContexts[0] : null, securityContexts.length > 1, boundProp.expression, unit, boundProp.sourceSpan);
        };
        BindingParser.prototype.parseEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
          if (_isAnimationLabel(name)) {
            name = name.substr(1);
            this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);
          } else {
            this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);
          }
        };
        BindingParser.prototype._parseAnimationEvent = function(name, expression, sourceSpan, targetEvents) {
          var matches = splitAtPeriod(name, [name, '']);
          var eventName = matches[0];
          var phase = matches[1].toLowerCase();
          if (phase) {
            switch (phase) {
              case 'start':
              case 'done':
                var ast = this._parseAction(expression, sourceSpan);
                targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));
                break;
              default:
                this._reportError("The provided animation output phase value \"" + phase + "\" for \"@" + eventName + "\" is not supported (use start or done)", sourceSpan);
                break;
            }
          } else {
            this._reportError("The animation trigger output event (@" + eventName + ") is missing its phase value name (start or done are currently supported)", sourceSpan);
          }
        };
        BindingParser.prototype._parseEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
          var _a = splitAtColon(name, [null, name]),
              target = _a[0],
              eventName = _a[1];
          var ast = this._parseAction(expression, sourceSpan);
          targetMatchableAttrs.push([name, ast.source]);
          targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));
        };
        BindingParser.prototype._parseAction = function(value, sourceSpan) {
          var sourceInfo = sourceSpan.start.toString();
          try {
            var ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
            if (ast) {
              this._reportExpressionParserErrors(ast.errors, sourceSpan);
            }
            if (!ast || ast.ast instanceof EmptyExpr) {
              this._reportError("Empty expressions are not allowed", sourceSpan);
              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
            }
            this._checkPipes(ast, sourceSpan);
            return ast;
          } catch (e) {
            this._reportError("" + e, sourceSpan);
            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
          }
        };
        BindingParser.prototype._reportError = function(message, sourceSpan, level) {
          if (level === void 0) {
            level = ParseErrorLevel.FATAL;
          }
          this._targetErrors.push(new ParseError(sourceSpan, message, level));
        };
        BindingParser.prototype._reportExpressionParserErrors = function(errors, sourceSpan) {
          for (var _i = 0,
              errors_1 = errors; _i < errors_1.length; _i++) {
            var error = errors_1[_i];
            this._reportError(error.message, sourceSpan);
          }
        };
        BindingParser.prototype._checkPipes = function(ast, sourceSpan) {
          var _this = this;
          if (isPresent(ast)) {
            var collector = new PipeCollector();
            ast.visit(collector);
            collector.pipes.forEach(function(pipeName) {
              if (!_this.pipesByName.has(pipeName)) {
                _this._reportError("The pipe '" + pipeName + "' could not be found", sourceSpan);
              }
            });
          }
        };
        BindingParser.prototype._validatePropertyOrAttributeName = function(propName, sourceSpan, isAttr) {
          var report = isAttr ? this._schemaRegistry.validateAttribute(propName) : this._schemaRegistry.validateProperty(propName);
          if (report.error) {
            this._reportError(report.msg, sourceSpan, ParseErrorLevel.FATAL);
          }
        };
        return BindingParser;
      }());
      $__export("BindingParser", BindingParser);
      PipeCollector = (function(_super) {
        __extends(PipeCollector, _super);
        function PipeCollector() {
          _super.apply(this, arguments);
          this.pipes = new Set();
        }
        PipeCollector.prototype.visitPipe = function(ast, context) {
          this.pipes.add(ast.name);
          ast.exp.visit(this);
          this.visitAll(ast.args, context);
          return null;
        };
        return PipeCollector;
      }(RecursiveAstVisitor));
      $__export("PipeCollector", PipeCollector);
    }
  };
});

$__System.register("24", ["c", "61", "5c", "62", "22", "2b", "13", "2e", "56", "14", "1a", "17", "31", "34"], function($__export) {
  "use strict";
  var Injectable,
      createCheckBindingField,
      createCheckBindingStmt,
      convertPropertyBinding,
      writeToRenderer,
      CompilerConfig,
      Parser,
      Identifiers,
      resolveIdentifier,
      DEFAULT_INTERPOLATION_CONFIG,
      createClassStmt,
      o,
      ParseErrorLevel,
      ParseLocation,
      ParseSourceFile,
      ParseSourceSpan,
      Console,
      LifecycleHooks,
      ElementSchemaRegistry,
      BindingParser,
      DirectiveWrapperCompileResult,
      CONTEXT_FIELD_NAME,
      CHANGES_FIELD_NAME,
      CHANGED_FIELD_NAME,
      CURR_VALUE_VAR,
      THROW_ON_CHANGE_VAR,
      FORCE_UPDATE_VAR,
      VIEW_VAR,
      RENDER_EL_VAR,
      RESET_CHANGES_STMT,
      DirectiveWrapperCompiler,
      DirectiveWrapperBuilder,
      ParseResult;
  function addDetectChangesInInputPropsMethod(builder) {
    var changedVar = o.variable('changed');
    var stmts = [changedVar.set(o.THIS_EXPR.prop(CHANGED_FIELD_NAME)).toDeclStmt(), o.THIS_EXPR.prop(CHANGED_FIELD_NAME).set(o.literal(false)).toStmt()];
    var lifecycleStmts = [];
    if (builder.genChanges) {
      var onChangesStmts = [];
      if (builder.ngOnChanges) {
        onChangesStmts.push(o.THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnChanges', [o.THIS_EXPR.prop(CHANGES_FIELD_NAME)]).toStmt());
      }
      if (builder.compilerConfig.logBindingUpdate) {
        onChangesStmts.push(o.importExpr(resolveIdentifier(Identifiers.setBindingDebugInfoForChanges)).callFn([VIEW_VAR.prop('renderer'), RENDER_EL_VAR, o.THIS_EXPR.prop(CHANGES_FIELD_NAME)]).toStmt());
      }
      onChangesStmts.push(RESET_CHANGES_STMT);
      lifecycleStmts.push(new o.IfStmt(changedVar, onChangesStmts));
    }
    if (builder.ngOnInit) {
      lifecycleStmts.push(new o.IfStmt(VIEW_VAR.prop('numberOfChecks').identical(new o.LiteralExpr(0)), [o.THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnInit', []).toStmt()]));
    }
    if (builder.ngDoCheck) {
      lifecycleStmts.push(o.THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngDoCheck', []).toStmt());
    }
    if (lifecycleStmts.length > 0) {
      stmts.push(new o.IfStmt(o.not(THROW_ON_CHANGE_VAR), lifecycleStmts));
    }
    stmts.push(new o.ReturnStatement(changedVar));
    builder.methods.push(new o.ClassMethod('detectChangesInInputProps', [new o.FnParam(VIEW_VAR.name, o.importType(resolveIdentifier(Identifiers.AppView), [o.DYNAMIC_TYPE])), new o.FnParam(RENDER_EL_VAR.name, o.DYNAMIC_TYPE), new o.FnParam(THROW_ON_CHANGE_VAR.name, o.BOOL_TYPE)], stmts, o.BOOL_TYPE));
  }
  function addCheckInputMethod(input, builder) {
    var field = createCheckBindingField(builder);
    var onChangeStatements = [o.THIS_EXPR.prop(CHANGED_FIELD_NAME).set(o.literal(true)).toStmt(), o.THIS_EXPR.prop(CONTEXT_FIELD_NAME).prop(input).set(CURR_VALUE_VAR).toStmt()];
    if (builder.genChanges) {
      onChangeStatements.push(o.THIS_EXPR.prop(CHANGES_FIELD_NAME).key(o.literal(input)).set(o.importExpr(resolveIdentifier(Identifiers.SimpleChange)).instantiate([field.expression, CURR_VALUE_VAR])).toStmt());
    }
    var methodBody = createCheckBindingStmt({
      currValExpr: CURR_VALUE_VAR,
      forceUpdate: FORCE_UPDATE_VAR,
      stmts: []
    }, field.expression, THROW_ON_CHANGE_VAR, onChangeStatements);
    builder.methods.push(new o.ClassMethod("check_" + input, [new o.FnParam(CURR_VALUE_VAR.name, o.DYNAMIC_TYPE), new o.FnParam(THROW_ON_CHANGE_VAR.name, o.BOOL_TYPE), new o.FnParam(FORCE_UPDATE_VAR.name, o.BOOL_TYPE)], methodBody));
  }
  function addDetectChangesInHostPropsMethod(hostProps, builder) {
    var stmts = [];
    var methodParams = [new o.FnParam(VIEW_VAR.name, o.importType(resolveIdentifier(Identifiers.AppView), [o.DYNAMIC_TYPE])), new o.FnParam(RENDER_EL_VAR.name, o.DYNAMIC_TYPE), new o.FnParam(THROW_ON_CHANGE_VAR.name, o.BOOL_TYPE)];
    hostProps.forEach(function(hostProp) {
      var field = createCheckBindingField(builder);
      var evalResult = convertPropertyBinding(builder, null, o.THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostProp.value, field.bindingId);
      if (!evalResult) {
        return;
      }
      var securityContextExpr;
      if (hostProp.needsRuntimeSecurityContext) {
        securityContextExpr = o.variable("secCtx_" + methodParams.length);
        methodParams.push(new o.FnParam(securityContextExpr.name, o.importType(resolveIdentifier(Identifiers.SecurityContext))));
      }
      stmts.push.apply(stmts, createCheckBindingStmt(evalResult, field.expression, THROW_ON_CHANGE_VAR, writeToRenderer(VIEW_VAR, hostProp, RENDER_EL_VAR, evalResult.currValExpr, builder.compilerConfig.logBindingUpdate, securityContextExpr)));
    });
    builder.methods.push(new o.ClassMethod('detectChangesInHostProps', methodParams, stmts));
  }
  function parseHostBindings(dirMeta, exprParser, schemaRegistry) {
    var errors = [];
    var parser = new BindingParser(exprParser, DEFAULT_INTERPOLATION_CONFIG, schemaRegistry, [], errors);
    var sourceFileName = dirMeta.type.moduleUrl ? "in Directive " + dirMeta.type.name + " in " + dirMeta.type.moduleUrl : "in Directive " + dirMeta.type.name;
    var sourceFile = new ParseSourceFile('', sourceFileName);
    var sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
    var parsedHostProps = parser.createDirectiveHostPropertyAsts(dirMeta, sourceSpan);
    var parsedHostListeners = parser.createDirectiveHostEventAsts(dirMeta, sourceSpan);
    return new ParseResult(parsedHostProps, parsedHostListeners, errors);
  }
  function reportParseErrors(parseErrors, console) {
    var warnings = parseErrors.filter(function(error) {
      return error.level === ParseErrorLevel.WARNING;
    });
    var errors = parseErrors.filter(function(error) {
      return error.level === ParseErrorLevel.FATAL;
    });
    if (warnings.length > 0) {
      this._console.warn("Directive parse warnings:\n" + warnings.join('\n'));
    }
    if (errors.length > 0) {
      throw new Error("Directive parse errors:\n" + errors.join('\n'));
    }
  }
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
    }, function($__m) {
      createCheckBindingField = $__m.createCheckBindingField;
      createCheckBindingStmt = $__m.createCheckBindingStmt;
    }, function($__m) {
      convertPropertyBinding = $__m.convertPropertyBinding;
    }, function($__m) {
      writeToRenderer = $__m.writeToRenderer;
    }, function($__m) {
      CompilerConfig = $__m.CompilerConfig;
    }, function($__m) {
      Parser = $__m.Parser;
    }, function($__m) {
      Identifiers = $__m.Identifiers;
      resolveIdentifier = $__m.resolveIdentifier;
    }, function($__m) {
      DEFAULT_INTERPOLATION_CONFIG = $__m.DEFAULT_INTERPOLATION_CONFIG;
    }, function($__m) {
      createClassStmt = $__m.createClassStmt;
    }, function($__m) {
      o = $__m;
    }, function($__m) {
      ParseErrorLevel = $__m.ParseErrorLevel;
      ParseLocation = $__m.ParseLocation;
      ParseSourceFile = $__m.ParseSourceFile;
      ParseSourceSpan = $__m.ParseSourceSpan;
    }, function($__m) {
      Console = $__m.Console;
      LifecycleHooks = $__m.LifecycleHooks;
    }, function($__m) {
      ElementSchemaRegistry = $__m.ElementSchemaRegistry;
    }, function($__m) {
      BindingParser = $__m.BindingParser;
    }],
    execute: function() {
      DirectiveWrapperCompileResult = (function() {
        function DirectiveWrapperCompileResult(statements, dirWrapperClassVar) {
          this.statements = statements;
          this.dirWrapperClassVar = dirWrapperClassVar;
        }
        return DirectiveWrapperCompileResult;
      }());
      $__export("DirectiveWrapperCompileResult", DirectiveWrapperCompileResult);
      CONTEXT_FIELD_NAME = 'context';
      CHANGES_FIELD_NAME = 'changes';
      CHANGED_FIELD_NAME = 'changed';
      CURR_VALUE_VAR = o.variable('currValue');
      THROW_ON_CHANGE_VAR = o.variable('throwOnChange');
      FORCE_UPDATE_VAR = o.variable('forceUpdate');
      VIEW_VAR = o.variable('view');
      RENDER_EL_VAR = o.variable('el');
      RESET_CHANGES_STMT = o.THIS_EXPR.prop(CHANGES_FIELD_NAME).set(o.literalMap([])).toStmt();
      DirectiveWrapperCompiler = (function() {
        function DirectiveWrapperCompiler(compilerConfig, _exprParser, _schemaRegistry, _console) {
          this.compilerConfig = compilerConfig;
          this._exprParser = _exprParser;
          this._schemaRegistry = _schemaRegistry;
          this._console = _console;
        }
        DirectiveWrapperCompiler.dirWrapperClassName = function(id) {
          return "Wrapper_" + id.name;
        };
        DirectiveWrapperCompiler.prototype.compile = function(dirMeta) {
          var builder = new DirectiveWrapperBuilder(this.compilerConfig, dirMeta);
          Object.keys(dirMeta.inputs).forEach(function(inputFieldName) {
            addCheckInputMethod(inputFieldName, builder);
          });
          addDetectChangesInInputPropsMethod(builder);
          var hostParseResult = parseHostBindings(dirMeta, this._exprParser, this._schemaRegistry);
          reportParseErrors(hostParseResult.errors, this._console);
          addDetectChangesInHostPropsMethod(hostParseResult.hostProps.filter(function(hostProp) {
            return !hostProp.isAnimation;
          }), builder);
          var classStmt = builder.build();
          return new DirectiveWrapperCompileResult([classStmt], classStmt.name);
        };
        DirectiveWrapperCompiler.decorators = [{type: Injectable}];
        DirectiveWrapperCompiler.ctorParameters = [{type: CompilerConfig}, {type: Parser}, {type: ElementSchemaRegistry}, {type: Console}];
        return DirectiveWrapperCompiler;
      }());
      $__export("DirectiveWrapperCompiler", DirectiveWrapperCompiler);
      DirectiveWrapperBuilder = (function() {
        function DirectiveWrapperBuilder(compilerConfig, dirMeta) {
          this.compilerConfig = compilerConfig;
          this.dirMeta = dirMeta;
          this.fields = [];
          this.getters = [];
          this.methods = [];
          this.ctorStmts = [];
          var dirLifecycleHooks = dirMeta.type.lifecycleHooks;
          this.genChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1 || this.compilerConfig.logBindingUpdate;
          this.ngOnChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1;
          this.ngOnInit = dirLifecycleHooks.indexOf(LifecycleHooks.OnInit) !== -1;
          this.ngDoCheck = dirLifecycleHooks.indexOf(LifecycleHooks.DoCheck) !== -1;
        }
        DirectiveWrapperBuilder.prototype.build = function() {
          var dirDepParamNames = [];
          for (var i = 0; i < this.dirMeta.type.diDeps.length; i++) {
            dirDepParamNames.push("p" + i);
          }
          var fields = [new o.ClassField(CONTEXT_FIELD_NAME, o.importType(this.dirMeta.type)), new o.ClassField(CHANGED_FIELD_NAME, o.BOOL_TYPE)];
          var ctorStmts = [o.THIS_EXPR.prop(CHANGED_FIELD_NAME).set(o.literal(false)).toStmt()];
          if (this.genChanges) {
            fields.push(new o.ClassField(CHANGES_FIELD_NAME, new o.MapType(o.DYNAMIC_TYPE)));
            ctorStmts.push(RESET_CHANGES_STMT);
          }
          ctorStmts.push(o.THIS_EXPR.prop(CONTEXT_FIELD_NAME).set(o.importExpr(this.dirMeta.type).instantiate(dirDepParamNames.map(function(paramName) {
            return o.variable(paramName);
          }))).toStmt());
          return createClassStmt({
            name: DirectiveWrapperCompiler.dirWrapperClassName(this.dirMeta.type),
            ctorParams: dirDepParamNames.map(function(paramName) {
              return new o.FnParam(paramName, o.DYNAMIC_TYPE);
            }),
            builders: [{
              fields: fields,
              ctorStmts: ctorStmts
            }, this]
          });
        };
        return DirectiveWrapperBuilder;
      }());
      ParseResult = (function() {
        function ParseResult(hostProps, hostListeners, errors) {
          this.hostProps = hostProps;
          this.hostListeners = hostListeners;
          this.errors = errors;
        }
        return ParseResult;
      }());
    }
  };
});

$__System.register("57", ["11", "20", "14"], function($__export) {
  "use strict";
  var CompileIdentifierMetadata,
      visitValue,
      o,
      _ValueOutputAstTransformer;
  function convertValueToOutputAst(value, type) {
    if (type === void 0) {
      type = null;
    }
    return visitValue(value, new _ValueOutputAstTransformer(), type);
  }
  $__export("convertValueToOutputAst", convertValueToOutputAst);
  return {
    setters: [function($__m) {
      CompileIdentifierMetadata = $__m.CompileIdentifierMetadata;
    }, function($__m) {
      visitValue = $__m.visitValue;
    }, function($__m) {
      o = $__m;
    }],
    execute: function() {
      _ValueOutputAstTransformer = (function() {
        function _ValueOutputAstTransformer() {}
        _ValueOutputAstTransformer.prototype.visitArray = function(arr, type) {
          var _this = this;
          return o.literalArr(arr.map(function(value) {
            return visitValue(value, _this, null);
          }), type);
        };
        _ValueOutputAstTransformer.prototype.visitStringMap = function(map, type) {
          var _this = this;
          var entries = [];
          Object.keys(map).forEach(function(key) {
            entries.push([key, visitValue(map[key], _this, null)]);
          });
          return o.literalMap(entries, type);
        };
        _ValueOutputAstTransformer.prototype.visitPrimitive = function(value, type) {
          return o.literal(value, type);
        };
        _ValueOutputAstTransformer.prototype.visitOther = function(value, type) {
          if (value instanceof CompileIdentifierMetadata) {
            return o.importExpr(value);
          } else if (value instanceof o.Expression) {
            return value;
          } else {
            throw new Error("Illegal state: Don't now how to compile value " + value);
          }
        };
        return _ValueOutputAstTransformer;
      }());
    }
  };
});

$__System.register("35", [], function($__export) {
  "use strict";
  var TextAst,
      BoundTextAst,
      AttrAst,
      BoundElementPropertyAst,
      BoundEventAst,
      ReferenceAst,
      VariableAst,
      ElementAst,
      EmbeddedTemplateAst,
      BoundDirectivePropertyAst,
      DirectiveAst,
      ProviderAst,
      ProviderAstType,
      NgContentAst,
      PropertyBindingType;
  function templateVisitAll(visitor, asts, context) {
    if (context === void 0) {
      context = null;
    }
    var result = [];
    var visit = visitor.visit ? function(ast) {
      return visitor.visit(ast, context) || ast.visit(visitor, context);
    } : function(ast) {
      return ast.visit(visitor, context);
    };
    asts.forEach(function(ast) {
      var astResult = visit(ast);
      if (astResult) {
        result.push(astResult);
      }
    });
    return result;
  }
  $__export("templateVisitAll", templateVisitAll);
  return {
    setters: [],
    execute: function() {
      TextAst = (function() {
        function TextAst(value, ngContentIndex, sourceSpan) {
          this.value = value;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
        }
        TextAst.prototype.visit = function(visitor, context) {
          return visitor.visitText(this, context);
        };
        return TextAst;
      }());
      $__export("TextAst", TextAst);
      BoundTextAst = (function() {
        function BoundTextAst(value, ngContentIndex, sourceSpan) {
          this.value = value;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
        }
        BoundTextAst.prototype.visit = function(visitor, context) {
          return visitor.visitBoundText(this, context);
        };
        return BoundTextAst;
      }());
      $__export("BoundTextAst", BoundTextAst);
      AttrAst = (function() {
        function AttrAst(name, value, sourceSpan) {
          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
        }
        AttrAst.prototype.visit = function(visitor, context) {
          return visitor.visitAttr(this, context);
        };
        return AttrAst;
      }());
      $__export("AttrAst", AttrAst);
      BoundElementPropertyAst = (function() {
        function BoundElementPropertyAst(name, type, securityContext, needsRuntimeSecurityContext, value, unit, sourceSpan) {
          this.name = name;
          this.type = type;
          this.securityContext = securityContext;
          this.needsRuntimeSecurityContext = needsRuntimeSecurityContext;
          this.value = value;
          this.unit = unit;
          this.sourceSpan = sourceSpan;
        }
        BoundElementPropertyAst.prototype.visit = function(visitor, context) {
          return visitor.visitElementProperty(this, context);
        };
        Object.defineProperty(BoundElementPropertyAst.prototype, "isAnimation", {
          get: function() {
            return this.type === PropertyBindingType.Animation;
          },
          enumerable: true,
          configurable: true
        });
        return BoundElementPropertyAst;
      }());
      $__export("BoundElementPropertyAst", BoundElementPropertyAst);
      BoundEventAst = (function() {
        function BoundEventAst(name, target, phase, handler, sourceSpan) {
          this.name = name;
          this.target = target;
          this.phase = phase;
          this.handler = handler;
          this.sourceSpan = sourceSpan;
        }
        BoundEventAst.prototype.visit = function(visitor, context) {
          return visitor.visitEvent(this, context);
        };
        Object.defineProperty(BoundEventAst.prototype, "fullName", {
          get: function() {
            if (this.target) {
              return this.target + ":" + this.name;
            } else {
              return this.name;
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(BoundEventAst.prototype, "isAnimation", {
          get: function() {
            return !!this.phase;
          },
          enumerable: true,
          configurable: true
        });
        return BoundEventAst;
      }());
      $__export("BoundEventAst", BoundEventAst);
      ReferenceAst = (function() {
        function ReferenceAst(name, value, sourceSpan) {
          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
        }
        ReferenceAst.prototype.visit = function(visitor, context) {
          return visitor.visitReference(this, context);
        };
        return ReferenceAst;
      }());
      $__export("ReferenceAst", ReferenceAst);
      VariableAst = (function() {
        function VariableAst(name, value, sourceSpan) {
          this.name = name;
          this.value = value;
          this.sourceSpan = sourceSpan;
        }
        VariableAst.prototype.visit = function(visitor, context) {
          return visitor.visitVariable(this, context);
        };
        return VariableAst;
      }());
      $__export("VariableAst", VariableAst);
      ElementAst = (function() {
        function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan, endSourceSpan) {
          this.name = name;
          this.attrs = attrs;
          this.inputs = inputs;
          this.outputs = outputs;
          this.references = references;
          this.directives = directives;
          this.providers = providers;
          this.hasViewContainer = hasViewContainer;
          this.children = children;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
          this.endSourceSpan = endSourceSpan;
        }
        ElementAst.prototype.visit = function(visitor, context) {
          return visitor.visitElement(this, context);
        };
        return ElementAst;
      }());
      $__export("ElementAst", ElementAst);
      EmbeddedTemplateAst = (function() {
        function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
          this.attrs = attrs;
          this.outputs = outputs;
          this.references = references;
          this.variables = variables;
          this.directives = directives;
          this.providers = providers;
          this.hasViewContainer = hasViewContainer;
          this.children = children;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
        }
        EmbeddedTemplateAst.prototype.visit = function(visitor, context) {
          return visitor.visitEmbeddedTemplate(this, context);
        };
        return EmbeddedTemplateAst;
      }());
      $__export("EmbeddedTemplateAst", EmbeddedTemplateAst);
      BoundDirectivePropertyAst = (function() {
        function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
          this.directiveName = directiveName;
          this.templateName = templateName;
          this.value = value;
          this.sourceSpan = sourceSpan;
        }
        BoundDirectivePropertyAst.prototype.visit = function(visitor, context) {
          return visitor.visitDirectiveProperty(this, context);
        };
        return BoundDirectivePropertyAst;
      }());
      $__export("BoundDirectivePropertyAst", BoundDirectivePropertyAst);
      DirectiveAst = (function() {
        function DirectiveAst(directive, inputs, hostProperties, hostEvents, sourceSpan) {
          this.directive = directive;
          this.inputs = inputs;
          this.hostProperties = hostProperties;
          this.hostEvents = hostEvents;
          this.sourceSpan = sourceSpan;
        }
        DirectiveAst.prototype.visit = function(visitor, context) {
          return visitor.visitDirective(this, context);
        };
        return DirectiveAst;
      }());
      $__export("DirectiveAst", DirectiveAst);
      ProviderAst = (function() {
        function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {
          this.token = token;
          this.multiProvider = multiProvider;
          this.eager = eager;
          this.providers = providers;
          this.providerType = providerType;
          this.lifecycleHooks = lifecycleHooks;
          this.sourceSpan = sourceSpan;
        }
        ProviderAst.prototype.visit = function(visitor, context) {
          return null;
        };
        return ProviderAst;
      }());
      $__export("ProviderAst", ProviderAst);
      $__export("ProviderAstType", ProviderAstType);
      (function(ProviderAstType) {
        ProviderAstType[ProviderAstType["PublicService"] = 0] = "PublicService";
        ProviderAstType[ProviderAstType["PrivateService"] = 1] = "PrivateService";
        ProviderAstType[ProviderAstType["Component"] = 2] = "Component";
        ProviderAstType[ProviderAstType["Directive"] = 3] = "Directive";
        ProviderAstType[ProviderAstType["Builtin"] = 4] = "Builtin";
      })(ProviderAstType || ($__export("ProviderAstType", ProviderAstType = {})));
      NgContentAst = (function() {
        function NgContentAst(index, ngContentIndex, sourceSpan) {
          this.index = index;
          this.ngContentIndex = ngContentIndex;
          this.sourceSpan = sourceSpan;
        }
        NgContentAst.prototype.visit = function(visitor, context) {
          return visitor.visitNgContent(this, context);
        };
        return NgContentAst;
      }());
      $__export("NgContentAst", NgContentAst);
      $__export("PropertyBindingType", PropertyBindingType);
      (function(PropertyBindingType) {
        PropertyBindingType[PropertyBindingType["Property"] = 0] = "Property";
        PropertyBindingType[PropertyBindingType["Attribute"] = 1] = "Attribute";
        PropertyBindingType[PropertyBindingType["Class"] = 2] = "Class";
        PropertyBindingType[PropertyBindingType["Style"] = 3] = "Style";
        PropertyBindingType[PropertyBindingType["Animation"] = 4] = "Animation";
      })(PropertyBindingType || ($__export("PropertyBindingType", PropertyBindingType = {})));
    }
  };
});

$__System.register("65", ["11", "55", "24", "12", "16", "13", "14", "57", "35", "5d", "66", "5e", "67", "68"], function($__export) {
  "use strict";
  var __extends,
      CompileDiDependencyMetadata,
      CompileIdentifierMetadata,
      CompileProviderMetadata,
      CompileTokenMetadata,
      createDiTokenExpression,
      DirectiveWrapperCompiler,
      MapWrapper,
      isPresent,
      Identifiers,
      identifierToken,
      resolveIdentifier,
      resolveIdentifierToken,
      o,
      convertValueToOutputAst,
      ProviderAst,
      ProviderAstType,
      CompileMethod,
      CompileQuery,
      addQueryToTokenMap,
      createQueryList,
      InjectMethodVars,
      ComponentFactoryDependency,
      DirectiveWrapperDependency,
      getPropertyInView,
      injectFromViewParentInjector,
      CompileNode,
      CompileElement,
      _QueryWithRead;
  function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) {
    var indexCondition;
    if (childNodeCount > 0) {
      indexCondition = o.literal(nodeIndex).lowerEquals(InjectMethodVars.requestNodeIndex).and(InjectMethodVars.requestNodeIndex.lowerEquals(o.literal(nodeIndex + childNodeCount)));
    } else {
      indexCondition = o.literal(nodeIndex).identical(InjectMethodVars.requestNodeIndex);
    }
    return new o.IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(provider.token)).and(indexCondition), [new o.ReturnStatement(providerExpr)]);
  }
  function createProviderProperty(propName, provider, providerValueExpressions, isMulti, isEager, compileElement) {
    var view = compileElement.view;
    var resolvedProviderValueExpr;
    var type;
    if (isMulti) {
      resolvedProviderValueExpr = o.literalArr(providerValueExpressions);
      type = new o.ArrayType(o.DYNAMIC_TYPE);
    } else {
      resolvedProviderValueExpr = providerValueExpressions[0];
      type = providerValueExpressions[0].type;
    }
    if (!type) {
      type = o.DYNAMIC_TYPE;
    }
    if (isEager) {
      view.fields.push(new o.ClassField(propName, type));
      view.createMethod.addStmt(o.THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
    } else {
      var internalField = "_" + propName;
      view.fields.push(new o.ClassField(internalField, type));
      var getter = new CompileMethod(view);
      getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
      getter.addStmt(new o.IfStmt(o.THIS_EXPR.prop(internalField).isBlank(), [o.THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));
      getter.addStmt(new o.ReturnStatement(o.THIS_EXPR.prop(internalField)));
      view.getters.push(new o.ClassGetter(propName, getter.finish(), type));
    }
    return o.THIS_EXPR.prop(propName);
  }
  return {
    setters: [function($__m) {
      CompileDiDependencyMetadata = $__m.CompileDiDependencyMetadata;
      CompileIdentifierMetadata = $__m.CompileIdentifierMetadata;
      CompileProviderMetadata = $__m.CompileProviderMetadata;
      CompileTokenMetadata = $__m.CompileTokenMetadata;
    }, function($__m) {
      createDiTokenExpression = $__m.createDiTokenExpression;
    }, function($__m) {
      DirectiveWrapperCompiler = $__m.DirectiveWrapperCompiler;
    }, function($__m) {
      MapWrapper = $__m.MapWrapper;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      Identifiers = $__m.Identifiers;
      identifierToken = $__m.identifierToken;
      resolveIdentifier = $__m.resolveIdentifier;
      resolveIdentifierToken = $__m.resolveIdentifierToken;
    }, function($__m) {
      o = $__m;
    }, function($__m) {
      convertValueToOutputAst = $__m.convertValueToOutputAst;
    }, function($__m) {
      ProviderAst = $__m.ProviderAst;
      ProviderAstType = $__m.ProviderAstType;
    }, function($__m) {
      CompileMethod = $__m.CompileMethod;
    }, function($__m) {
      CompileQuery = $__m.CompileQuery;
      addQueryToTokenMap = $__m.addQueryToTokenMap;
      createQueryList = $__m.createQueryList;
    }, function($__m) {
      InjectMethodVars = $__m.InjectMethodVars;
    }, function($__m) {
      ComponentFactoryDependency = $__m.ComponentFactoryDependency;
      DirectiveWrapperDependency = $__m.DirectiveWrapperDependency;
    }, function($__m) {
      getPropertyInView = $__m.getPropertyInView;
      injectFromViewParentInjector = $__m.injectFromViewParentInjector;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      CompileNode = (function() {
        function CompileNode(parent, view, nodeIndex, renderNode, sourceAst) {
          this.parent = parent;
          this.view = view;
          this.nodeIndex = nodeIndex;
          this.renderNode = renderNode;
          this.sourceAst = sourceAst;
        }
        CompileNode.prototype.isNull = function() {
          return !this.renderNode;
        };
        CompileNode.prototype.isRootElement = function() {
          return this.view != this.parent.view;
        };
        return CompileNode;
      }());
      $__export("CompileNode", CompileNode);
      CompileElement = (function(_super) {
        __extends(CompileElement, _super);
        function CompileElement(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references, _targetDependencies) {
          var _this = this;
          _super.call(this, parent, view, nodeIndex, renderNode, sourceAst);
          this.component = component;
          this._directives = _directives;
          this._resolvedProvidersArray = _resolvedProvidersArray;
          this.hasViewContainer = hasViewContainer;
          this.hasEmbeddedView = hasEmbeddedView;
          this._targetDependencies = _targetDependencies;
          this._compViewExpr = null;
          this.instances = new Map();
          this.directiveWrapperInstance = new Map();
          this._queryCount = 0;
          this._queries = new Map();
          this._componentConstructorViewQueryLists = [];
          this.contentNodesByNgContentIndex = null;
          this.referenceTokens = {};
          references.forEach(function(ref) {
            return _this.referenceTokens[ref.name] = ref.value;
          });
          this.elementRef = o.importExpr(resolveIdentifier(Identifiers.ElementRef)).instantiate([this.renderNode]);
          this.instances.set(resolveIdentifierToken(Identifiers.ElementRef).reference, this.elementRef);
          this.injector = o.THIS_EXPR.callMethod('injector', [o.literal(this.nodeIndex)]);
          this.instances.set(resolveIdentifierToken(Identifiers.Injector).reference, this.injector);
          this.instances.set(resolveIdentifierToken(Identifiers.Renderer).reference, o.THIS_EXPR.prop('renderer'));
          if (this.hasViewContainer || this.hasEmbeddedView || isPresent(this.component)) {
            this._createAppElement();
          }
          if (this.component) {
            this._createComponentFactoryResolver();
          }
        }
        CompileElement.createNull = function() {
          return new CompileElement(null, null, null, null, null, null, [], [], false, false, [], []);
        };
        CompileElement.prototype._createAppElement = function() {
          var fieldName = "_appEl_" + this.nodeIndex;
          var parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;
          this.view.fields.push(new o.ClassField(fieldName, o.importType(resolveIdentifier(Identifiers.AppElement)), [o.StmtModifier.Private]));
          var statement = o.THIS_EXPR.prop(fieldName).set(o.importExpr(resolveIdentifier(Identifiers.AppElement)).instantiate([o.literal(this.nodeIndex), o.literal(parentNodeIndex), o.THIS_EXPR, this.renderNode])).toStmt();
          this.view.createMethod.addStmt(statement);
          this.appElement = o.THIS_EXPR.prop(fieldName);
          this.instances.set(resolveIdentifierToken(Identifiers.AppElement).reference, this.appElement);
        };
        CompileElement.prototype._createComponentFactoryResolver = function() {
          var _this = this;
          var entryComponents = this.component.entryComponents.map(function(entryComponent) {
            var id = new CompileIdentifierMetadata({name: entryComponent.name});
            _this._targetDependencies.push(new ComponentFactoryDependency(entryComponent, id));
            return id;
          });
          if (!entryComponents || entryComponents.length === 0) {
            return;
          }
          var createComponentFactoryResolverExpr = o.importExpr(resolveIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([o.literalArr(entryComponents.map(function(entryComponent) {
            return o.importExpr(entryComponent);
          })), injectFromViewParentInjector(resolveIdentifierToken(Identifiers.ComponentFactoryResolver), false)]);
          var provider = new CompileProviderMetadata({
            token: resolveIdentifierToken(Identifiers.ComponentFactoryResolver),
            useValue: createComponentFactoryResolverExpr
          });
          this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], ProviderAstType.PrivateService, [], this.sourceAst.sourceSpan));
        };
        CompileElement.prototype.setComponentView = function(compViewExpr) {
          this._compViewExpr = compViewExpr;
          this.contentNodesByNgContentIndex = new Array(this.component.template.ngContentSelectors.length);
          for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++) {
            this.contentNodesByNgContentIndex[i] = [];
          }
        };
        CompileElement.prototype.setEmbeddedView = function(embeddedView) {
          this.embeddedView = embeddedView;
          if (isPresent(embeddedView)) {
            var createTemplateRefExpr = o.importExpr(resolveIdentifier(Identifiers.TemplateRef_)).instantiate([this.appElement, this.embeddedView.viewFactory]);
            var provider = new CompileProviderMetadata({
              token: resolveIdentifierToken(Identifiers.TemplateRef),
              useValue: createTemplateRefExpr
            });
            this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], ProviderAstType.Builtin, [], this.sourceAst.sourceSpan));
          }
        };
        CompileElement.prototype.beforeChildren = function() {
          var _this = this;
          if (this.hasViewContainer) {
            this.instances.set(resolveIdentifierToken(Identifiers.ViewContainerRef).reference, this.appElement.prop('vcRef'));
          }
          this._resolvedProviders = new Map();
          this._resolvedProvidersArray.forEach(function(provider) {
            return _this._resolvedProviders.set(provider.token.reference, provider);
          });
          MapWrapper.values(this._resolvedProviders).forEach(function(resolvedProvider) {
            var isDirectiveWrapper = resolvedProvider.providerType === ProviderAstType.Component || resolvedProvider.providerType === ProviderAstType.Directive;
            var providerValueExpressions = resolvedProvider.providers.map(function(provider) {
              if (isPresent(provider.useExisting)) {
                return _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({token: provider.useExisting}));
              } else if (isPresent(provider.useFactory)) {
                var deps = provider.deps || provider.useFactory.diDeps;
                var depsExpr = deps.map(function(dep) {
                  return _this._getDependency(resolvedProvider.providerType, dep);
                });
                return o.importExpr(provider.useFactory).callFn(depsExpr);
              } else if (isPresent(provider.useClass)) {
                var deps = provider.deps || provider.useClass.diDeps;
                var depsExpr = deps.map(function(dep) {
                  return _this._getDependency(resolvedProvider.providerType, dep);
                });
                if (isDirectiveWrapper) {
                  var directiveWrapperIdentifier = new CompileIdentifierMetadata({name: DirectiveWrapperCompiler.dirWrapperClassName(provider.useClass)});
                  _this._targetDependencies.push(new DirectiveWrapperDependency(provider.useClass, directiveWrapperIdentifier));
                  return o.importExpr(directiveWrapperIdentifier).instantiate(depsExpr, o.importType(directiveWrapperIdentifier));
                } else {
                  return o.importExpr(provider.useClass).instantiate(depsExpr, o.importType(provider.useClass));
                }
              } else {
                return convertValueToOutputAst(provider.useValue);
              }
            });
            var propName = "_" + resolvedProvider.token.name + "_" + _this.nodeIndex + "_" + _this.instances.size;
            var instance = createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, _this);
            if (isDirectiveWrapper) {
              _this.directiveWrapperInstance.set(resolvedProvider.token.reference, instance);
              _this.instances.set(resolvedProvider.token.reference, instance.prop('context'));
            } else {
              _this.instances.set(resolvedProvider.token.reference, instance);
            }
          });
          for (var i = 0; i < this._directives.length; i++) {
            var directive = this._directives[i];
            var directiveInstance = this.instances.get(identifierToken(directive.type).reference);
            directive.queries.forEach(function(queryMeta) {
              _this._addQuery(queryMeta, directiveInstance);
            });
          }
          var queriesWithReads = [];
          MapWrapper.values(this._resolvedProviders).forEach(function(resolvedProvider) {
            var queriesForProvider = _this._getQueriesFor(resolvedProvider.token);
            queriesWithReads.push.apply(queriesWithReads, queriesForProvider.map(function(query) {
              return new _QueryWithRead(query, resolvedProvider.token);
            }));
          });
          Object.keys(this.referenceTokens).forEach(function(varName) {
            var token = _this.referenceTokens[varName];
            var varValue;
            if (isPresent(token)) {
              varValue = _this.instances.get(token.reference);
            } else {
              varValue = _this.renderNode;
            }
            _this.view.locals.set(varName, varValue);
            var varToken = new CompileTokenMetadata({value: varName});
            queriesWithReads.push.apply(queriesWithReads, _this._getQueriesFor(varToken).map(function(query) {
              return new _QueryWithRead(query, varToken);
            }));
          });
          queriesWithReads.forEach(function(queryWithRead) {
            var value;
            if (isPresent(queryWithRead.read.identifier)) {
              value = _this.instances.get(queryWithRead.read.reference);
            } else {
              var token = _this.referenceTokens[queryWithRead.read.value];
              if (isPresent(token)) {
                value = _this.instances.get(token.reference);
              } else {
                value = _this.elementRef;
              }
            }
            if (isPresent(value)) {
              queryWithRead.query.addValue(value, _this.view);
            }
          });
          if (isPresent(this.component)) {
            var componentConstructorViewQueryList = isPresent(this.component) ? o.literalArr(this._componentConstructorViewQueryLists) : o.NULL_EXPR;
            var compExpr = isPresent(this.getComponent()) ? this.getComponent() : o.NULL_EXPR;
            this.view.createMethod.addStmt(this.appElement.callMethod('initComponent', [compExpr, componentConstructorViewQueryList, this._compViewExpr]).toStmt());
          }
        };
        CompileElement.prototype.afterChildren = function(childNodeCount) {
          var _this = this;
          MapWrapper.values(this._resolvedProviders).forEach(function(resolvedProvider) {
            var providerExpr = _this.instances.get(resolvedProvider.token.reference);
            var providerChildNodeCount = resolvedProvider.providerType === ProviderAstType.PrivateService ? 0 : childNodeCount;
            _this.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));
          });
          MapWrapper.values(this._queries).forEach(function(queries) {
            return queries.forEach(function(query) {
              return query.afterChildren(_this.view.createMethod, _this.view.updateContentQueriesMethod);
            });
          });
        };
        CompileElement.prototype.addContentNode = function(ngContentIndex, nodeExpr) {
          this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
        };
        CompileElement.prototype.getComponent = function() {
          return isPresent(this.component) ? this.instances.get(identifierToken(this.component.type).reference) : null;
        };
        CompileElement.prototype.getProviderTokens = function() {
          return MapWrapper.values(this._resolvedProviders).map(function(resolvedProvider) {
            return createDiTokenExpression(resolvedProvider.token);
          });
        };
        CompileElement.prototype._getQueriesFor = function(token) {
          var result = [];
          var currentEl = this;
          var distance = 0;
          var queries;
          while (!currentEl.isNull()) {
            queries = currentEl._queries.get(token.reference);
            if (isPresent(queries)) {
              result.push.apply(result, queries.filter(function(query) {
                return query.meta.descendants || distance <= 1;
              }));
            }
            if (currentEl._directives.length > 0) {
              distance++;
            }
            currentEl = currentEl.parent;
          }
          queries = this.view.componentView.viewQueries.get(token.reference);
          if (isPresent(queries)) {
            result.push.apply(result, queries);
          }
          return result;
        };
        CompileElement.prototype._addQuery = function(queryMeta, directiveInstance) {
          var propName = "_query_" + queryMeta.selectors[0].name + "_" + this.nodeIndex + "_" + this._queryCount++;
          var queryList = createQueryList(queryMeta, directiveInstance, propName, this.view);
          var query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);
          addQueryToTokenMap(this._queries, query);
          return query;
        };
        CompileElement.prototype._getLocalDependency = function(requestingProviderType, dep) {
          var result = null;
          if (!result && isPresent(dep.query)) {
            result = this._addQuery(dep.query, null).queryList;
          }
          if (!result && isPresent(dep.viewQuery)) {
            result = createQueryList(dep.viewQuery, null, "_viewQuery_" + dep.viewQuery.selectors[0].name + "_" + this.nodeIndex + "_" + this._componentConstructorViewQueryLists.length, this.view);
            this._componentConstructorViewQueryLists.push(result);
          }
          if (isPresent(dep.token)) {
            if (!result) {
              if (dep.token.reference === resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference) {
                if (requestingProviderType === ProviderAstType.Component) {
                  return this._compViewExpr.prop('ref');
                } else {
                  return getPropertyInView(o.THIS_EXPR.prop('ref'), this.view, this.view.componentView);
                }
              }
            }
            if (!result) {
              var resolvedProvider = this._resolvedProviders.get(dep.token.reference);
              if (resolvedProvider && (requestingProviderType === ProviderAstType.Directive || requestingProviderType === ProviderAstType.PublicService) && resolvedProvider.providerType === ProviderAstType.PrivateService) {
                return null;
              }
              result = this.instances.get(dep.token.reference);
            }
          }
          return result;
        };
        CompileElement.prototype._getDependency = function(requestingProviderType, dep) {
          var currElement = this;
          var result = null;
          if (dep.isValue) {
            result = o.literal(dep.value);
          }
          if (!result && !dep.isSkipSelf) {
            result = this._getLocalDependency(requestingProviderType, dep);
          }
          while (!result && !currElement.parent.isNull()) {
            currElement = currElement.parent;
            result = currElement._getLocalDependency(ProviderAstType.PublicService, new CompileDiDependencyMetadata({token: dep.token}));
          }
          if (!result) {
            result = injectFromViewParentInjector(dep.token, dep.isOptional);
          }
          if (!result) {
            result = o.NULL_EXPR;
          }
          return getPropertyInView(result, this.view, currElement.view);
        };
        return CompileElement;
      }(CompileNode));
      $__export("CompileElement", CompileElement);
      _QueryWithRead = (function() {
        function _QueryWithRead(query, match) {
          this.query = query;
          this.read = query.meta.read || match;
        }
        return _QueryWithRead;
      }());
    }
  };
});

$__System.register("64", ["16"], function($__export) {
  "use strict";
  var __extends,
      isBlank,
      ParserError,
      ParseSpan,
      AST,
      Quote,
      EmptyExpr,
      ImplicitReceiver,
      Chain,
      Conditional,
      PropertyRead,
      PropertyWrite,
      SafePropertyRead,
      KeyedRead,
      KeyedWrite,
      BindingPipe,
      LiteralPrimitive,
      LiteralArray,
      LiteralMap,
      Interpolation,
      Binary,
      PrefixNot,
      MethodCall,
      SafeMethodCall,
      FunctionCall,
      ASTWithSource,
      TemplateBinding,
      RecursiveAstVisitor,
      AstTransformer;
  return {
    setters: [function($__m) {
      isBlank = $__m.isBlank;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      ParserError = (function() {
        function ParserError(message, input, errLocation, ctxLocation) {
          this.input = input;
          this.errLocation = errLocation;
          this.ctxLocation = ctxLocation;
          this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation;
        }
        return ParserError;
      }());
      $__export("ParserError", ParserError);
      ParseSpan = (function() {
        function ParseSpan(start, end) {
          this.start = start;
          this.end = end;
        }
        return ParseSpan;
      }());
      $__export("ParseSpan", ParseSpan);
      AST = (function() {
        function AST(span) {
          this.span = span;
        }
        AST.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return null;
        };
        AST.prototype.toString = function() {
          return 'AST';
        };
        return AST;
      }());
      $__export("AST", AST);
      Quote = (function(_super) {
        __extends(Quote, _super);
        function Quote(span, prefix, uninterpretedExpression, location) {
          _super.call(this, span);
          this.prefix = prefix;
          this.uninterpretedExpression = uninterpretedExpression;
          this.location = location;
        }
        Quote.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitQuote(this, context);
        };
        Quote.prototype.toString = function() {
          return 'Quote';
        };
        return Quote;
      }(AST));
      $__export("Quote", Quote);
      EmptyExpr = (function(_super) {
        __extends(EmptyExpr, _super);
        function EmptyExpr() {
          _super.apply(this, arguments);
        }
        EmptyExpr.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
        };
        return EmptyExpr;
      }(AST));
      $__export("EmptyExpr", EmptyExpr);
      ImplicitReceiver = (function(_super) {
        __extends(ImplicitReceiver, _super);
        function ImplicitReceiver() {
          _super.apply(this, arguments);
        }
        ImplicitReceiver.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitImplicitReceiver(this, context);
        };
        return ImplicitReceiver;
      }(AST));
      $__export("ImplicitReceiver", ImplicitReceiver);
      Chain = (function(_super) {
        __extends(Chain, _super);
        function Chain(span, expressions) {
          _super.call(this, span);
          this.expressions = expressions;
        }
        Chain.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitChain(this, context);
        };
        return Chain;
      }(AST));
      $__export("Chain", Chain);
      Conditional = (function(_super) {
        __extends(Conditional, _super);
        function Conditional(span, condition, trueExp, falseExp) {
          _super.call(this, span);
          this.condition = condition;
          this.trueExp = trueExp;
          this.falseExp = falseExp;
        }
        Conditional.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitConditional(this, context);
        };
        return Conditional;
      }(AST));
      $__export("Conditional", Conditional);
      PropertyRead = (function(_super) {
        __extends(PropertyRead, _super);
        function PropertyRead(span, receiver, name) {
          _super.call(this, span);
          this.receiver = receiver;
          this.name = name;
        }
        PropertyRead.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitPropertyRead(this, context);
        };
        return PropertyRead;
      }(AST));
      $__export("PropertyRead", PropertyRead);
      PropertyWrite = (function(_super) {
        __extends(PropertyWrite, _super);
        function PropertyWrite(span, receiver, name, value) {
          _super.call(this, span);
          this.receiver = receiver;
          this.name = name;
          this.value = value;
        }
        PropertyWrite.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitPropertyWrite(this, context);
        };
        return PropertyWrite;
      }(AST));
      $__export("PropertyWrite", PropertyWrite);
      SafePropertyRead = (function(_super) {
        __extends(SafePropertyRead, _super);
        function SafePropertyRead(span, receiver, name) {
          _super.call(this, span);
          this.receiver = receiver;
          this.name = name;
        }
        SafePropertyRead.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitSafePropertyRead(this, context);
        };
        return SafePropertyRead;
      }(AST));
      $__export("SafePropertyRead", SafePropertyRead);
      KeyedRead = (function(_super) {
        __extends(KeyedRead, _super);
        function KeyedRead(span, obj, key) {
          _super.call(this, span);
          this.obj = obj;
          this.key = key;
        }
        KeyedRead.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitKeyedRead(this, context);
        };
        return KeyedRead;
      }(AST));
      $__export("KeyedRead", KeyedRead);
      KeyedWrite = (function(_super) {
        __extends(KeyedWrite, _super);
        function KeyedWrite(span, obj, key, value) {
          _super.call(this, span);
          this.obj = obj;
          this.key = key;
          this.value = value;
        }
        KeyedWrite.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitKeyedWrite(this, context);
        };
        return KeyedWrite;
      }(AST));
      $__export("KeyedWrite", KeyedWrite);
      BindingPipe = (function(_super) {
        __extends(BindingPipe, _super);
        function BindingPipe(span, exp, name, args) {
          _super.call(this, span);
          this.exp = exp;
          this.name = name;
          this.args = args;
        }
        BindingPipe.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitPipe(this, context);
        };
        return BindingPipe;
      }(AST));
      $__export("BindingPipe", BindingPipe);
      LiteralPrimitive = (function(_super) {
        __extends(LiteralPrimitive, _super);
        function LiteralPrimitive(span, value) {
          _super.call(this, span);
          this.value = value;
        }
        LiteralPrimitive.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitLiteralPrimitive(this, context);
        };
        return LiteralPrimitive;
      }(AST));
      $__export("LiteralPrimitive", LiteralPrimitive);
      LiteralArray = (function(_super) {
        __extends(LiteralArray, _super);
        function LiteralArray(span, expressions) {
          _super.call(this, span);
          this.expressions = expressions;
        }
        LiteralArray.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitLiteralArray(this, context);
        };
        return LiteralArray;
      }(AST));
      $__export("LiteralArray", LiteralArray);
      LiteralMap = (function(_super) {
        __extends(LiteralMap, _super);
        function LiteralMap(span, keys, values) {
          _super.call(this, span);
          this.keys = keys;
          this.values = values;
        }
        LiteralMap.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitLiteralMap(this, context);
        };
        return LiteralMap;
      }(AST));
      $__export("LiteralMap", LiteralMap);
      Interpolation = (function(_super) {
        __extends(Interpolation, _super);
        function Interpolation(span, strings, expressions) {
          _super.call(this, span);
          this.strings = strings;
          this.expressions = expressions;
        }
        Interpolation.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitInterpolation(this, context);
        };
        return Interpolation;
      }(AST));
      $__export("Interpolation", Interpolation);
      Binary = (function(_super) {
        __extends(Binary, _super);
        function Binary(span, operation, left, right) {
          _super.call(this, span);
          this.operation = operation;
          this.left = left;
          this.right = right;
        }
        Binary.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitBinary(this, context);
        };
        return Binary;
      }(AST));
      $__export("Binary", Binary);
      PrefixNot = (function(_super) {
        __extends(PrefixNot, _super);
        function PrefixNot(span, expression) {
          _super.call(this, span);
          this.expression = expression;
        }
        PrefixNot.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitPrefixNot(this, context);
        };
        return PrefixNot;
      }(AST));
      $__export("PrefixNot", PrefixNot);
      MethodCall = (function(_super) {
        __extends(MethodCall, _super);
        function MethodCall(span, receiver, name, args) {
          _super.call(this, span);
          this.receiver = receiver;
          this.name = name;
          this.args = args;
        }
        MethodCall.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitMethodCall(this, context);
        };
        return MethodCall;
      }(AST));
      $__export("MethodCall", MethodCall);
      SafeMethodCall = (function(_super) {
        __extends(SafeMethodCall, _super);
        function SafeMethodCall(span, receiver, name, args) {
          _super.call(this, span);
          this.receiver = receiver;
          this.name = name;
          this.args = args;
        }
        SafeMethodCall.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitSafeMethodCall(this, context);
        };
        return SafeMethodCall;
      }(AST));
      $__export("SafeMethodCall", SafeMethodCall);
      FunctionCall = (function(_super) {
        __extends(FunctionCall, _super);
        function FunctionCall(span, target, args) {
          _super.call(this, span);
          this.target = target;
          this.args = args;
        }
        FunctionCall.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return visitor.visitFunctionCall(this, context);
        };
        return FunctionCall;
      }(AST));
      $__export("FunctionCall", FunctionCall);
      ASTWithSource = (function(_super) {
        __extends(ASTWithSource, _super);
        function ASTWithSource(ast, source, location, errors) {
          _super.call(this, new ParseSpan(0, isBlank(source) ? 0 : source.length));
          this.ast = ast;
          this.source = source;
          this.location = location;
          this.errors = errors;
        }
        ASTWithSource.prototype.visit = function(visitor, context) {
          if (context === void 0) {
            context = null;
          }
          return this.ast.visit(visitor, context);
        };
        ASTWithSource.prototype.toString = function() {
          return this.source + " in " + this.location;
        };
        return ASTWithSource;
      }(AST));
      $__export("ASTWithSource", ASTWithSource);
      TemplateBinding = (function() {
        function TemplateBinding(key, keyIsVar, name, expression) {
          this.key = key;
          this.keyIsVar = keyIsVar;
          this.name = name;
          this.expression = expression;
        }
        return TemplateBinding;
      }());
      $__export("TemplateBinding", TemplateBinding);
      RecursiveAstVisitor = (function() {
        function RecursiveAstVisitor() {}
        RecursiveAstVisitor.prototype.visitBinary = function(ast, context) {
          ast.left.visit(this);
          ast.right.visit(this);
          return null;
        };
        RecursiveAstVisitor.prototype.visitChain = function(ast, context) {
          return this.visitAll(ast.expressions, context);
        };
        RecursiveAstVisitor.prototype.visitConditional = function(ast, context) {
          ast.condition.visit(this);
          ast.trueExp.visit(this);
          ast.falseExp.visit(this);
          return null;
        };
        RecursiveAstVisitor.prototype.visitPipe = function(ast, context) {
          ast.exp.visit(this);
          this.visitAll(ast.args, context);
          return null;
        };
        RecursiveAstVisitor.prototype.visitFunctionCall = function(ast, context) {
          ast.target.visit(this);
          this.visitAll(ast.args, context);
          return null;
        };
        RecursiveAstVisitor.prototype.visitImplicitReceiver = function(ast, context) {
          return null;
        };
        RecursiveAstVisitor.prototype.visitInterpolation = function(ast, context) {
          return this.visitAll(ast.expressions, context);
        };
        RecursiveAstVisitor.prototype.visitKeyedRead = function(ast, context) {
          ast.obj.visit(this);
          ast.key.visit(this);
          return null;
        };
        RecursiveAstVisitor.prototype.visitKeyedWrite = function(ast, context) {
          ast.obj.visit(this);
          ast.key.visit(this);
          ast.value.visit(this);
          return null;
        };
        RecursiveAstVisitor.prototype.visitLiteralArray = function(ast, context) {
          return this.visitAll(ast.expressions, context);
        };
        RecursiveAstVisitor.prototype.visitLiteralMap = function(ast, context) {
          return this.visitAll(ast.values, context);
        };
        RecursiveAstVisitor.prototype.visitLiteralPrimitive = function(ast, context) {
          return null;
        };
        RecursiveAstVisitor.prototype.visitMethodCall = function(ast, context) {
          ast.receiver.visit(this);
          return this.visitAll(ast.args, context);
        };
        RecursiveAstVisitor.prototype.visitPrefixNot = function(ast, context) {
          ast.expression.visit(this);
          return null;
        };
        RecursiveAstVisitor.prototype.visitPropertyRead = function(ast, context) {
          ast.receiver.visit(this);
          return null;
        };
        RecursiveAstVisitor.prototype.visitPropertyWrite = function(ast, context) {
          ast.receiver.visit(this);
          ast.value.visit(this);
          return null;
        };
        RecursiveAstVisitor.prototype.visitSafePropertyRead = function(ast, context) {
          ast.receiver.visit(this);
          return null;
        };
        RecursiveAstVisitor.prototype.visitSafeMethodCall = function(ast, context) {
          ast.receiver.visit(this);
          return this.visitAll(ast.args, context);
        };
        RecursiveAstVisitor.prototype.visitAll = function(asts, context) {
          var _this = this;
          asts.forEach(function(ast) {
            return ast.visit(_this, context);
          });
          return null;
        };
        RecursiveAstVisitor.prototype.visitQuote = function(ast, context) {
          return null;
        };
        return RecursiveAstVisitor;
      }());
      $__export("RecursiveAstVisitor", RecursiveAstVisitor);
      AstTransformer = (function() {
        function AstTransformer() {}
        AstTransformer.prototype.visitImplicitReceiver = function(ast, context) {
          return ast;
        };
        AstTransformer.prototype.visitInterpolation = function(ast, context) {
          return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));
        };
        AstTransformer.prototype.visitLiteralPrimitive = function(ast, context) {
          return new LiteralPrimitive(ast.span, ast.value);
        };
        AstTransformer.prototype.visitPropertyRead = function(ast, context) {
          return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);
        };
        AstTransformer.prototype.visitPropertyWrite = function(ast, context) {
          return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value);
        };
        AstTransformer.prototype.visitSafePropertyRead = function(ast, context) {
          return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);
        };
        AstTransformer.prototype.visitMethodCall = function(ast, context) {
          return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
        };
        AstTransformer.prototype.visitSafeMethodCall = function(ast, context) {
          return new SafeMethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
        };
        AstTransformer.prototype.visitFunctionCall = function(ast, context) {
          return new FunctionCall(ast.span, ast.target.visit(this), this.visitAll(ast.args));
        };
        AstTransformer.prototype.visitLiteralArray = function(ast, context) {
          return new LiteralArray(ast.span, this.visitAll(ast.expressions));
        };
        AstTransformer.prototype.visitLiteralMap = function(ast, context) {
          return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));
        };
        AstTransformer.prototype.visitBinary = function(ast, context) {
          return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));
        };
        AstTransformer.prototype.visitPrefixNot = function(ast, context) {
          return new PrefixNot(ast.span, ast.expression.visit(this));
        };
        AstTransformer.prototype.visitConditional = function(ast, context) {
          return new Conditional(ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
        };
        AstTransformer.prototype.visitPipe = function(ast, context) {
          return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));
        };
        AstTransformer.prototype.visitKeyedRead = function(ast, context) {
          return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));
        };
        AstTransformer.prototype.visitKeyedWrite = function(ast, context) {
          return new KeyedWrite(ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));
        };
        AstTransformer.prototype.visitAll = function(asts) {
          var res = new Array(asts.length);
          for (var i = 0; i < asts.length; ++i) {
            res[i] = asts[i].visit(this);
          }
          return res;
        };
        AstTransformer.prototype.visitChain = function(ast, context) {
          return new Chain(ast.span, this.visitAll(ast.expressions));
        };
        AstTransformer.prototype.visitQuote = function(ast, context) {
          return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);
        };
        return AstTransformer;
      }());
      $__export("AstTransformer", AstTransformer);
    }
  };
});

$__System.register("5c", ["64", "16", "13", "14", "55"], function($__export) {
  "use strict";
  var cdAst,
      isBlank,
      isPresent,
      Identifiers,
      resolveIdentifier,
      o,
      createPureProxy,
      VAL_UNWRAPPER_VAR,
      EventHandlerVars,
      ConvertPropertyBindingResult,
      ConvertActionBindingResult,
      _Mode,
      _AstToIrVisitor,
      DefaultNameResolver;
  function convertPropertyBinding(builder, nameResolver, implicitReceiver, expression, bindingId) {
    var currValExpr = createCurrValueExpr(bindingId);
    var stmts = [];
    if (!nameResolver) {
      nameResolver = new DefaultNameResolver();
    }
    var visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, VAL_UNWRAPPER_VAR, bindingId, false);
    var outputExpr = expression.visit(visitor, _Mode.Expression);
    if (!outputExpr) {
      return null;
    }
    if (visitor.temporaryCount) {
      for (var i = 0; i < visitor.temporaryCount; i++) {
        stmts.push(temporaryDeclaration(bindingId, i));
      }
    }
    if (visitor.needsValueUnwrapper) {
      var initValueUnwrapperStmt = VAL_UNWRAPPER_VAR.callMethod('reset', []).toStmt();
      stmts.push(initValueUnwrapperStmt);
    }
    stmts.push(currValExpr.set(outputExpr).toDeclStmt(null, [o.StmtModifier.Final]));
    if (visitor.needsValueUnwrapper) {
      return new ConvertPropertyBindingResult(stmts, currValExpr, VAL_UNWRAPPER_VAR.prop('hasWrappedValue'));
    } else {
      return new ConvertPropertyBindingResult(stmts, currValExpr, null);
    }
  }
  function convertActionBinding(builder, nameResolver, implicitReceiver, action, bindingId) {
    if (!nameResolver) {
      nameResolver = new DefaultNameResolver();
    }
    var visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, null, bindingId, true);
    var actionStmts = [];
    flattenStatements(action.visit(visitor, _Mode.Statement), actionStmts);
    prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);
    var lastIndex = actionStmts.length - 1;
    var preventDefaultVar = null;
    if (lastIndex >= 0) {
      var lastStatement = actionStmts[lastIndex];
      var returnExpr = convertStmtIntoExpression(lastStatement);
      if (returnExpr) {
        preventDefaultVar = createPreventDefaultVar(bindingId);
        actionStmts[lastIndex] = preventDefaultVar.set(returnExpr.cast(o.DYNAMIC_TYPE).notIdentical(o.literal(false))).toDeclStmt(null, [o.StmtModifier.Final]);
      }
    }
    return new ConvertActionBindingResult(actionStmts, preventDefaultVar);
  }
  function createSharedBindingVariablesIfNeeded(stmts) {
    var unwrapperStmts = [];
    var readVars = o.findReadVarNames(stmts);
    if (readVars.has(VAL_UNWRAPPER_VAR.name)) {
      unwrapperStmts.push(VAL_UNWRAPPER_VAR.set(o.importExpr(resolveIdentifier(Identifiers.ValueUnwrapper)).instantiate([])).toDeclStmt(null, [o.StmtModifier.Final]));
    }
    return unwrapperStmts;
  }
  function temporaryName(bindingId, temporaryNumber) {
    return "tmp_" + bindingId + "_" + temporaryNumber;
  }
  function temporaryDeclaration(bindingId, temporaryNumber) {
    return new o.DeclareVarStmt(temporaryName(bindingId, temporaryNumber), o.NULL_EXPR);
  }
  function prependTemporaryDecls(temporaryCount, bindingId, statements) {
    for (var i = temporaryCount - 1; i >= 0; i--) {
      statements.unshift(temporaryDeclaration(bindingId, i));
    }
  }
  function ensureStatementMode(mode, ast) {
    if (mode !== _Mode.Statement) {
      throw new Error("Expected a statement, but saw " + ast);
    }
  }
  function ensureExpressionMode(mode, ast) {
    if (mode !== _Mode.Expression) {
      throw new Error("Expected an expression, but saw " + ast);
    }
  }
  function convertToStatementIfNeeded(mode, expr) {
    if (mode === _Mode.Statement) {
      return expr.toStmt();
    } else {
      return expr;
    }
  }
  function flattenStatements(arg, output) {
    if (Array.isArray(arg)) {
      arg.forEach(function(entry) {
        return flattenStatements(entry, output);
      });
    } else {
      output.push(arg);
    }
  }
  function createCachedLiteralArray(builder, values) {
    if (values.length === 0) {
      return o.importExpr(resolveIdentifier(Identifiers.EMPTY_ARRAY));
    }
    var proxyExpr = o.THIS_EXPR.prop("_arr_" + builder.fields.length);
    var proxyParams = [];
    var proxyReturnEntries = [];
    for (var i = 0; i < values.length; i++) {
      var paramName = "p" + i;
      proxyParams.push(new o.FnParam(paramName));
      proxyReturnEntries.push(o.variable(paramName));
    }
    createPureProxy(o.fn(proxyParams, [new o.ReturnStatement(o.literalArr(proxyReturnEntries))], new o.ArrayType(o.DYNAMIC_TYPE)), values.length, proxyExpr, builder);
    return proxyExpr.callFn(values);
  }
  function createCachedLiteralMap(builder, entries) {
    if (entries.length === 0) {
      return o.importExpr(resolveIdentifier(Identifiers.EMPTY_MAP));
    }
    var proxyExpr = o.THIS_EXPR.prop("_map_" + builder.fields.length);
    var proxyParams = [];
    var proxyReturnEntries = [];
    var values = [];
    for (var i = 0; i < entries.length; i++) {
      var paramName = "p" + i;
      proxyParams.push(new o.FnParam(paramName));
      proxyReturnEntries.push([entries[i][0], o.variable(paramName)]);
      values.push(entries[i][1]);
    }
    createPureProxy(o.fn(proxyParams, [new o.ReturnStatement(o.literalMap(proxyReturnEntries))], new o.MapType(o.DYNAMIC_TYPE)), entries.length, proxyExpr, builder);
    return proxyExpr.callFn(values);
  }
  function createCurrValueExpr(bindingId) {
    return o.variable("currVal_" + bindingId);
  }
  function createPreventDefaultVar(bindingId) {
    return o.variable("pd_" + bindingId);
  }
  function convertStmtIntoExpression(stmt) {
    if (stmt instanceof o.ExpressionStatement) {
      return stmt.expr;
    } else if (stmt instanceof o.ReturnStatement) {
      return stmt.value;
    }
    return null;
  }
  $__export("convertPropertyBinding", convertPropertyBinding);
  $__export("convertActionBinding", convertActionBinding);
  $__export("createSharedBindingVariablesIfNeeded", createSharedBindingVariablesIfNeeded);
  $__export("temporaryDeclaration", temporaryDeclaration);
  return {
    setters: [function($__m) {
      cdAst = $__m;
    }, function($__m) {
      isBlank = $__m.isBlank;
      isPresent = $__m.isPresent;
    }, function($__m) {
      Identifiers = $__m.Identifiers;
      resolveIdentifier = $__m.resolveIdentifier;
    }, function($__m) {
      o = $__m;
    }, function($__m) {
      createPureProxy = $__m.createPureProxy;
    }],
    execute: function() {
      VAL_UNWRAPPER_VAR = o.variable("valUnwrapper");
      EventHandlerVars = (function() {
        function EventHandlerVars() {}
        EventHandlerVars.event = o.variable('$event');
        return EventHandlerVars;
      }());
      $__export("EventHandlerVars", EventHandlerVars);
      ConvertPropertyBindingResult = (function() {
        function ConvertPropertyBindingResult(stmts, currValExpr, forceUpdate) {
          this.stmts = stmts;
          this.currValExpr = currValExpr;
          this.forceUpdate = forceUpdate;
        }
        return ConvertPropertyBindingResult;
      }());
      $__export("ConvertPropertyBindingResult", ConvertPropertyBindingResult);
      ConvertActionBindingResult = (function() {
        function ConvertActionBindingResult(stmts, preventDefault) {
          this.stmts = stmts;
          this.preventDefault = preventDefault;
        }
        return ConvertActionBindingResult;
      }());
      $__export("ConvertActionBindingResult", ConvertActionBindingResult);
      (function(_Mode) {
        _Mode[_Mode["Statement"] = 0] = "Statement";
        _Mode[_Mode["Expression"] = 1] = "Expression";
      })(_Mode || (_Mode = {}));
      _AstToIrVisitor = (function() {
        function _AstToIrVisitor(_builder, _nameResolver, _implicitReceiver, _valueUnwrapper, bindingId, isAction) {
          this._builder = _builder;
          this._nameResolver = _nameResolver;
          this._implicitReceiver = _implicitReceiver;
          this._valueUnwrapper = _valueUnwrapper;
          this.bindingId = bindingId;
          this.isAction = isAction;
          this._nodeMap = new Map();
          this._resultMap = new Map();
          this._currentTemporary = 0;
          this.needsValueUnwrapper = false;
          this.temporaryCount = 0;
        }
        _AstToIrVisitor.prototype.visitBinary = function(ast, mode) {
          var op;
          switch (ast.operation) {
            case '+':
              op = o.BinaryOperator.Plus;
              break;
            case '-':
              op = o.BinaryOperator.Minus;
              break;
            case '*':
              op = o.BinaryOperator.Multiply;
              break;
            case '/':
              op = o.BinaryOperator.Divide;
              break;
            case '%':
              op = o.BinaryOperator.Modulo;
              break;
            case '&&':
              op = o.BinaryOperator.And;
              break;
            case '||':
              op = o.BinaryOperator.Or;
              break;
            case '==':
              op = o.BinaryOperator.Equals;
              break;
            case '!=':
              op = o.BinaryOperator.NotEquals;
              break;
            case '===':
              op = o.BinaryOperator.Identical;
              break;
            case '!==':
              op = o.BinaryOperator.NotIdentical;
              break;
            case '<':
              op = o.BinaryOperator.Lower;
              break;
            case '>':
              op = o.BinaryOperator.Bigger;
              break;
            case '<=':
              op = o.BinaryOperator.LowerEquals;
              break;
            case '>=':
              op = o.BinaryOperator.BiggerEquals;
              break;
            default:
              throw new Error("Unsupported operation " + ast.operation);
          }
          return convertToStatementIfNeeded(mode, new o.BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));
        };
        _AstToIrVisitor.prototype.visitChain = function(ast, mode) {
          ensureStatementMode(mode, ast);
          return this.visitAll(ast.expressions, mode);
        };
        _AstToIrVisitor.prototype.visitConditional = function(ast, mode) {
          var value = this.visit(ast.condition, _Mode.Expression);
          return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));
        };
        _AstToIrVisitor.prototype.visitPipe = function(ast, mode) {
          var input = this.visit(ast.exp, _Mode.Expression);
          var args = this.visitAll(ast.args, _Mode.Expression);
          var value = this._nameResolver.callPipe(ast.name, input, args);
          if (!value) {
            throw new Error("Illegal state: Pipe " + ast.name + " is not allowed here!");
          }
          this.needsValueUnwrapper = true;
          return convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod('unwrap', [value]));
        };
        _AstToIrVisitor.prototype.visitFunctionCall = function(ast, mode) {
          return convertToStatementIfNeeded(mode, this.visit(ast.target, _Mode.Expression).callFn(this.visitAll(ast.args, _Mode.Expression)));
        };
        _AstToIrVisitor.prototype.visitImplicitReceiver = function(ast, mode) {
          ensureExpressionMode(mode, ast);
          return this._implicitReceiver;
        };
        _AstToIrVisitor.prototype.visitInterpolation = function(ast, mode) {
          ensureExpressionMode(mode, ast);
          var args = [o.literal(ast.expressions.length)];
          for (var i = 0; i < ast.strings.length - 1; i++) {
            args.push(o.literal(ast.strings[i]));
            args.push(this.visit(ast.expressions[i], _Mode.Expression));
          }
          args.push(o.literal(ast.strings[ast.strings.length - 1]));
          return o.importExpr(resolveIdentifier(Identifiers.interpolate)).callFn(args);
        };
        _AstToIrVisitor.prototype.visitKeyedRead = function(ast, mode) {
          return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));
        };
        _AstToIrVisitor.prototype.visitKeyedWrite = function(ast, mode) {
          var obj = this.visit(ast.obj, _Mode.Expression);
          var key = this.visit(ast.key, _Mode.Expression);
          var value = this.visit(ast.value, _Mode.Expression);
          return convertToStatementIfNeeded(mode, obj.key(key).set(value));
        };
        _AstToIrVisitor.prototype.visitLiteralArray = function(ast, mode) {
          var parts = this.visitAll(ast.expressions, mode);
          var literalArr = this.isAction ? o.literalArr(parts) : createCachedLiteralArray(this._builder, parts);
          return convertToStatementIfNeeded(mode, literalArr);
        };
        _AstToIrVisitor.prototype.visitLiteralMap = function(ast, mode) {
          var parts = [];
          for (var i = 0; i < ast.keys.length; i++) {
            parts.push([ast.keys[i], this.visit(ast.values[i], _Mode.Expression)]);
          }
          var literalMap = this.isAction ? o.literalMap(parts) : createCachedLiteralMap(this._builder, parts);
          return convertToStatementIfNeeded(mode, literalMap);
        };
        _AstToIrVisitor.prototype.visitLiteralPrimitive = function(ast, mode) {
          return convertToStatementIfNeeded(mode, o.literal(ast.value));
        };
        _AstToIrVisitor.prototype._getLocal = function(name) {
          if (this.isAction && name == EventHandlerVars.event.name) {
            return EventHandlerVars.event;
          }
          return this._nameResolver.getLocal(name);
        };
        _AstToIrVisitor.prototype.visitMethodCall = function(ast, mode) {
          var leftMostSafe = this.leftMostSafeNode(ast);
          if (leftMostSafe) {
            return this.convertSafeAccess(ast, leftMostSafe, mode);
          } else {
            var args = this.visitAll(ast.args, _Mode.Expression);
            var result = null;
            var receiver = this.visit(ast.receiver, _Mode.Expression);
            if (receiver === this._implicitReceiver) {
              var varExpr = this._getLocal(ast.name);
              if (isPresent(varExpr)) {
                result = varExpr.callFn(args);
              }
            }
            if (isBlank(result)) {
              result = receiver.callMethod(ast.name, args);
            }
            return convertToStatementIfNeeded(mode, result);
          }
        };
        _AstToIrVisitor.prototype.visitPrefixNot = function(ast, mode) {
          return convertToStatementIfNeeded(mode, o.not(this.visit(ast.expression, _Mode.Expression)));
        };
        _AstToIrVisitor.prototype.visitPropertyRead = function(ast, mode) {
          var leftMostSafe = this.leftMostSafeNode(ast);
          if (leftMostSafe) {
            return this.convertSafeAccess(ast, leftMostSafe, mode);
          } else {
            var result = null;
            var receiver = this.visit(ast.receiver, _Mode.Expression);
            if (receiver === this._implicitReceiver) {
              result = this._getLocal(ast.name);
            }
            if (isBlank(result)) {
              result = receiver.prop(ast.name);
            }
            return convertToStatementIfNeeded(mode, result);
          }
        };
        _AstToIrVisitor.prototype.visitPropertyWrite = function(ast, mode) {
          var receiver = this.visit(ast.receiver, _Mode.Expression);
          if (receiver === this._implicitReceiver) {
            var varExpr = this._getLocal(ast.name);
            if (isPresent(varExpr)) {
              throw new Error('Cannot assign to a reference or variable!');
            }
          }
          return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));
        };
        _AstToIrVisitor.prototype.visitSafePropertyRead = function(ast, mode) {
          return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
        };
        _AstToIrVisitor.prototype.visitSafeMethodCall = function(ast, mode) {
          return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
        };
        _AstToIrVisitor.prototype.visitAll = function(asts, mode) {
          var _this = this;
          return asts.map(function(ast) {
            return _this.visit(ast, mode);
          });
        };
        _AstToIrVisitor.prototype.visitQuote = function(ast, mode) {
          throw new Error('Quotes are not supported for evaluation!');
        };
        _AstToIrVisitor.prototype.visit = function(ast, mode) {
          var result = this._resultMap.get(ast);
          if (result)
            return result;
          return (this._nodeMap.get(ast) || ast).visit(this, mode);
        };
        _AstToIrVisitor.prototype.convertSafeAccess = function(ast, leftMostSafe, mode) {
          var guardedExpression = this.visit(leftMostSafe.receiver, _Mode.Expression);
          var temporary;
          if (this.needsTemporary(leftMostSafe.receiver)) {
            temporary = this.allocateTemporary();
            guardedExpression = temporary.set(guardedExpression);
            this._resultMap.set(leftMostSafe.receiver, temporary);
          }
          var condition = guardedExpression.isBlank();
          if (leftMostSafe instanceof cdAst.SafeMethodCall) {
            this._nodeMap.set(leftMostSafe, new cdAst.MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));
          } else {
            this._nodeMap.set(leftMostSafe, new cdAst.PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));
          }
          var access = this.visit(ast, _Mode.Expression);
          this._nodeMap.delete(leftMostSafe);
          if (temporary) {
            this.releaseTemporary(temporary);
          }
          return convertToStatementIfNeeded(mode, condition.conditional(o.literal(null), access));
        };
        _AstToIrVisitor.prototype.leftMostSafeNode = function(ast) {
          var _this = this;
          var visit = function(visitor, ast) {
            return (_this._nodeMap.get(ast) || ast).visit(visitor);
          };
          return ast.visit({
            visitBinary: function(ast) {
              return null;
            },
            visitChain: function(ast) {
              return null;
            },
            visitConditional: function(ast) {
              return null;
            },
            visitFunctionCall: function(ast) {
              return null;
            },
            visitImplicitReceiver: function(ast) {
              return null;
            },
            visitInterpolation: function(ast) {
              return null;
            },
            visitKeyedRead: function(ast) {
              return visit(this, ast.obj);
            },
            visitKeyedWrite: function(ast) {
              return null;
            },
            visitLiteralArray: function(ast) {
              return null;
            },
            visitLiteralMap: function(ast) {
              return null;
            },
            visitLiteralPrimitive: function(ast) {
              return null;
            },
            visitMethodCall: function(ast) {
              return visit(this, ast.receiver);
            },
            visitPipe: function(ast) {
              return null;
            },
            visitPrefixNot: function(ast) {
              return null;
            },
            visitPropertyRead: function(ast) {
              return visit(this, ast.receiver);
            },
            visitPropertyWrite: function(ast) {
              return null;
            },
            visitQuote: function(ast) {
              return null;
            },
            visitSafeMethodCall: function(ast) {
              return visit(this, ast.receiver) || ast;
            },
            visitSafePropertyRead: function(ast) {
              return visit(this, ast.receiver) || ast;
            }
          });
        };
        _AstToIrVisitor.prototype.needsTemporary = function(ast) {
          var _this = this;
          var visit = function(visitor, ast) {
            return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);
          };
          var visitSome = function(visitor, ast) {
            return ast.some(function(ast) {
              return visit(visitor, ast);
            });
          };
          return ast.visit({
            visitBinary: function(ast) {
              return visit(this, ast.left) || visit(this, ast.right);
            },
            visitChain: function(ast) {
              return false;
            },
            visitConditional: function(ast) {
              return visit(this, ast.condition) || visit(this, ast.trueExp) || visit(this, ast.falseExp);
            },
            visitFunctionCall: function(ast) {
              return true;
            },
            visitImplicitReceiver: function(ast) {
              return false;
            },
            visitInterpolation: function(ast) {
              return visitSome(this, ast.expressions);
            },
            visitKeyedRead: function(ast) {
              return false;
            },
            visitKeyedWrite: function(ast) {
              return false;
            },
            visitLiteralArray: function(ast) {
              return true;
            },
            visitLiteralMap: function(ast) {
              return true;
            },
            visitLiteralPrimitive: function(ast) {
              return false;
            },
            visitMethodCall: function(ast) {
              return true;
            },
            visitPipe: function(ast) {
              return true;
            },
            visitPrefixNot: function(ast) {
              return visit(this, ast.expression);
            },
            visitPropertyRead: function(ast) {
              return false;
            },
            visitPropertyWrite: function(ast) {
              return false;
            },
            visitQuote: function(ast) {
              return false;
            },
            visitSafeMethodCall: function(ast) {
              return true;
            },
            visitSafePropertyRead: function(ast) {
              return false;
            }
          });
        };
        _AstToIrVisitor.prototype.allocateTemporary = function() {
          var tempNumber = this._currentTemporary++;
          this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
          return new o.ReadVarExpr(temporaryName(this.bindingId, tempNumber));
        };
        _AstToIrVisitor.prototype.releaseTemporary = function(temporary) {
          this._currentTemporary--;
          if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {
            throw new Error("Temporary " + temporary.name + " released out of order");
          }
        };
        return _AstToIrVisitor;
      }());
      DefaultNameResolver = (function() {
        function DefaultNameResolver() {}
        DefaultNameResolver.prototype.callPipe = function(name, input, args) {
          return null;
        };
        DefaultNameResolver.prototype.getLocal = function(name) {
          return null;
        };
        return DefaultNameResolver;
      }());
    }
  };
});

$__System.register("5d", ["16", "14"], function($__export) {
  "use strict";
  var isPresent,
      o,
      _DebugState,
      NULL_DEBUG_STATE,
      CompileMethod;
  return {
    setters: [function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      o = $__m;
    }],
    execute: function() {
      _DebugState = (function() {
        function _DebugState(nodeIndex, sourceAst) {
          this.nodeIndex = nodeIndex;
          this.sourceAst = sourceAst;
        }
        return _DebugState;
      }());
      NULL_DEBUG_STATE = new _DebugState(null, null);
      CompileMethod = (function() {
        function CompileMethod(_view) {
          this._view = _view;
          this._newState = NULL_DEBUG_STATE;
          this._currState = NULL_DEBUG_STATE;
          this._bodyStatements = [];
          this._debugEnabled = this._view.genConfig.genDebugInfo;
        }
        CompileMethod.prototype._updateDebugContextIfNeeded = function() {
          if (this._newState.nodeIndex !== this._currState.nodeIndex || this._newState.sourceAst !== this._currState.sourceAst) {
            var expr = this._updateDebugContext(this._newState);
            if (isPresent(expr)) {
              this._bodyStatements.push(expr.toStmt());
            }
          }
        };
        CompileMethod.prototype._updateDebugContext = function(newState) {
          this._currState = this._newState = newState;
          if (this._debugEnabled) {
            var sourceLocation = isPresent(newState.sourceAst) ? newState.sourceAst.sourceSpan.start : null;
            return o.THIS_EXPR.callMethod('debug', [o.literal(newState.nodeIndex), isPresent(sourceLocation) ? o.literal(sourceLocation.line) : o.NULL_EXPR, isPresent(sourceLocation) ? o.literal(sourceLocation.col) : o.NULL_EXPR]);
          } else {
            return null;
          }
        };
        CompileMethod.prototype.resetDebugInfoExpr = function(nodeIndex, templateAst) {
          var res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));
          return res || o.NULL_EXPR;
        };
        CompileMethod.prototype.resetDebugInfo = function(nodeIndex, templateAst) {
          this._newState = new _DebugState(nodeIndex, templateAst);
        };
        CompileMethod.prototype.push = function() {
          var stmts = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            stmts[_i - 0] = arguments[_i];
          }
          this.addStmts(stmts);
        };
        CompileMethod.prototype.addStmt = function(stmt) {
          this._updateDebugContextIfNeeded();
          this._bodyStatements.push(stmt);
        };
        CompileMethod.prototype.addStmts = function(stmts) {
          this._updateDebugContextIfNeeded();
          (_a = this._bodyStatements).push.apply(_a, stmts);
          var _a;
        };
        CompileMethod.prototype.finish = function() {
          return this._bodyStatements;
        };
        CompileMethod.prototype.isEmpty = function() {
          return this._bodyStatements.length === 0;
        };
        return CompileMethod;
      }());
      $__export("CompileMethod", CompileMethod);
    }
  };
});

$__System.register("69", ["55", "13", "14", "68"], function($__export) {
  "use strict";
  var createPureProxy,
      Identifiers,
      resolveIdentifier,
      resolveIdentifierToken,
      o,
      getPropertyInView,
      injectFromViewParentInjector,
      CompilePipe;
  function _findPipeMeta(view, name) {
    var pipeMeta = null;
    for (var i = view.pipeMetas.length - 1; i >= 0; i--) {
      var localPipeMeta = view.pipeMetas[i];
      if (localPipeMeta.name == name) {
        pipeMeta = localPipeMeta;
        break;
      }
    }
    if (!pipeMeta) {
      throw new Error("Illegal state: Could not find pipe " + name + " although the parser should have detected this error!");
    }
    return pipeMeta;
  }
  return {
    setters: [function($__m) {
      createPureProxy = $__m.createPureProxy;
    }, function($__m) {
      Identifiers = $__m.Identifiers;
      resolveIdentifier = $__m.resolveIdentifier;
      resolveIdentifierToken = $__m.resolveIdentifierToken;
    }, function($__m) {
      o = $__m;
    }, function($__m) {
      getPropertyInView = $__m.getPropertyInView;
      injectFromViewParentInjector = $__m.injectFromViewParentInjector;
    }],
    execute: function() {
      CompilePipe = (function() {
        function CompilePipe(view, meta) {
          var _this = this;
          this.view = view;
          this.meta = meta;
          this._purePipeProxyCount = 0;
          this.instance = o.THIS_EXPR.prop("_pipe_" + meta.name + "_" + view.pipeCount++);
          var deps = this.meta.type.diDeps.map(function(diDep) {
            if (diDep.token.reference === resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference) {
              return getPropertyInView(o.THIS_EXPR.prop('ref'), _this.view, _this.view.componentView);
            }
            return injectFromViewParentInjector(diDep.token, false);
          });
          this.view.fields.push(new o.ClassField(this.instance.name, o.importType(this.meta.type)));
          this.view.createMethod.resetDebugInfo(null, null);
          this.view.createMethod.addStmt(o.THIS_EXPR.prop(this.instance.name).set(o.importExpr(this.meta.type).instantiate(deps)).toStmt());
        }
        CompilePipe.call = function(view, name, args) {
          var compView = view.componentView;
          var meta = _findPipeMeta(compView, name);
          var pipe;
          if (meta.pure) {
            pipe = compView.purePipes.get(name);
            if (!pipe) {
              pipe = new CompilePipe(compView, meta);
              compView.purePipes.set(name, pipe);
              compView.pipes.push(pipe);
            }
          } else {
            pipe = new CompilePipe(view, meta);
            view.pipes.push(pipe);
          }
          return pipe._call(view, args);
        };
        Object.defineProperty(CompilePipe.prototype, "pure", {
          get: function() {
            return this.meta.pure;
          },
          enumerable: true,
          configurable: true
        });
        CompilePipe.prototype._call = function(callingView, args) {
          if (this.meta.pure) {
            var purePipeProxyInstance = o.THIS_EXPR.prop(this.instance.name + "_" + this._purePipeProxyCount++);
            var pipeInstanceSeenFromPureProxy = getPropertyInView(this.instance, callingView, this.view);
            createPureProxy(pipeInstanceSeenFromPureProxy.prop('transform').callMethod(o.BuiltinMethod.Bind, [pipeInstanceSeenFromPureProxy]), args.length, purePipeProxyInstance, {
              fields: callingView.fields,
              ctorStmts: callingView.createMethod
            });
            return o.importExpr(resolveIdentifier(Identifiers.castByValue)).callFn([purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop('transform')]).callFn(args);
          } else {
            return getPropertyInView(this.instance, callingView, this.view).callMethod('transform', args);
          }
        };
        return CompilePipe;
      }());
      $__export("CompilePipe", CompilePipe);
    }
  };
});

$__System.register("66", ["12", "16", "13", "14", "68"], function($__export) {
  "use strict";
  var ListWrapper,
      isPresent,
      Identifiers,
      resolveIdentifier,
      o,
      getPropertyInView,
      ViewQueryValues,
      CompileQuery;
  function createQueryValues(viewValues) {
    return ListWrapper.flatten(viewValues.values.map(function(entry) {
      if (entry instanceof ViewQueryValues) {
        return mapNestedViews(entry.view.declarationElement.appElement, entry.view, createQueryValues(entry));
      } else {
        return entry;
      }
    }));
  }
  function mapNestedViews(declarationAppElement, view, expressions) {
    var adjustedExpressions = expressions.map(function(expr) {
      return o.replaceVarInExpression(o.THIS_EXPR.name, o.variable('nestedView'), expr);
    });
    return declarationAppElement.callMethod('mapNestedViews', [o.variable(view.className), o.fn([new o.FnParam('nestedView', view.classType)], [new o.ReturnStatement(o.literalArr(adjustedExpressions))], o.DYNAMIC_TYPE)]);
  }
  function createQueryList(query, directiveInstance, propertyName, compileView) {
    compileView.fields.push(new o.ClassField(propertyName, o.importType(resolveIdentifier(Identifiers.QueryList), [o.DYNAMIC_TYPE])));
    var expr = o.THIS_EXPR.prop(propertyName);
    compileView.createMethod.addStmt(o.THIS_EXPR.prop(propertyName).set(o.importExpr(resolveIdentifier(Identifiers.QueryList), [o.DYNAMIC_TYPE]).instantiate([])).toStmt());
    return expr;
  }
  function addQueryToTokenMap(map, query) {
    query.meta.selectors.forEach(function(selector) {
      var entry = map.get(selector.reference);
      if (!entry) {
        entry = [];
        map.set(selector.reference, entry);
      }
      entry.push(query);
    });
  }
  $__export("createQueryList", createQueryList);
  $__export("addQueryToTokenMap", addQueryToTokenMap);
  return {
    setters: [function($__m) {
      ListWrapper = $__m.ListWrapper;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      Identifiers = $__m.Identifiers;
      resolveIdentifier = $__m.resolveIdentifier;
    }, function($__m) {
      o = $__m;
    }, function($__m) {
      getPropertyInView = $__m.getPropertyInView;
    }],
    execute: function() {
      ViewQueryValues = (function() {
        function ViewQueryValues(view, values) {
          this.view = view;
          this.values = values;
        }
        return ViewQueryValues;
      }());
      CompileQuery = (function() {
        function CompileQuery(meta, queryList, ownerDirectiveExpression, view) {
          this.meta = meta;
          this.queryList = queryList;
          this.ownerDirectiveExpression = ownerDirectiveExpression;
          this.view = view;
          this._values = new ViewQueryValues(view, []);
        }
        CompileQuery.prototype.addValue = function(value, view) {
          var currentView = view;
          var elPath = [];
          while (isPresent(currentView) && currentView !== this.view) {
            var parentEl = currentView.declarationElement;
            elPath.unshift(parentEl);
            currentView = parentEl.view;
          }
          var queryListForDirtyExpr = getPropertyInView(this.queryList, view, this.view);
          var viewValues = this._values;
          elPath.forEach(function(el) {
            var last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null;
            if (last instanceof ViewQueryValues && last.view === el.embeddedView) {
              viewValues = last;
            } else {
              var newViewValues = new ViewQueryValues(el.embeddedView, []);
              viewValues.values.push(newViewValues);
              viewValues = newViewValues;
            }
          });
          viewValues.values.push(value);
          if (elPath.length > 0) {
            view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod('setDirty', []).toStmt());
          }
        };
        CompileQuery.prototype._isStatic = function() {
          return !this._values.values.some(function(value) {
            return value instanceof ViewQueryValues;
          });
        };
        CompileQuery.prototype.afterChildren = function(targetStaticMethod, targetDynamicMethod) {
          var values = createQueryValues(this._values);
          var updateStmts = [this.queryList.callMethod('reset', [o.literalArr(values)]).toStmt()];
          if (isPresent(this.ownerDirectiveExpression)) {
            var valueExpr = this.meta.first ? this.queryList.prop('first') : this.queryList;
            updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());
          }
          if (!this.meta.first) {
            updateStmts.push(this.queryList.callMethod('notifyOnChanges', []).toStmt());
          }
          if (this.meta.first && this._isStatic()) {
            targetStaticMethod.addStmts(updateStmts);
          } else {
            targetDynamicMethod.addStmt(new o.IfStmt(this.queryList.prop('dirty'), updateStmts));
          }
        };
        return CompileQuery;
      }());
      $__export("CompileQuery", CompileQuery);
    }
  };
});

$__System.register("6a", ["11", "5c", "12", "16", "14", "17", "5d", "69", "66", "68"], function($__export) {
  "use strict";
  var CompileIdentifierMetadata,
      EventHandlerVars,
      MapWrapper,
      isPresent,
      o,
      ViewType,
      CompileMethod,
      CompilePipe,
      CompileQuery,
      addQueryToTokenMap,
      createQueryList,
      getPropertyInView,
      getViewFactoryName,
      CompileView;
  function getViewType(component, embeddedTemplateIndex) {
    if (embeddedTemplateIndex > 0) {
      return ViewType.EMBEDDED;
    } else if (component.type.isHost) {
      return ViewType.HOST;
    } else {
      return ViewType.COMPONENT;
    }
  }
  return {
    setters: [function($__m) {
      CompileIdentifierMetadata = $__m.CompileIdentifierMetadata;
    }, function($__m) {
      EventHandlerVars = $__m.EventHandlerVars;
    }, function($__m) {
      MapWrapper = $__m.MapWrapper;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      o = $__m;
    }, function($__m) {
      ViewType = $__m.ViewType;
    }, function($__m) {
      CompileMethod = $__m.CompileMethod;
    }, function($__m) {
      CompilePipe = $__m.CompilePipe;
    }, function($__m) {
      CompileQuery = $__m.CompileQuery;
      addQueryToTokenMap = $__m.addQueryToTokenMap;
      createQueryList = $__m.createQueryList;
    }, function($__m) {
      getPropertyInView = $__m.getPropertyInView;
      getViewFactoryName = $__m.getViewFactoryName;
    }],
    execute: function() {
      CompileView = (function() {
        function CompileView(component, genConfig, pipeMetas, styles, animations, viewIndex, declarationElement, templateVariableBindings) {
          var _this = this;
          this.component = component;
          this.genConfig = genConfig;
          this.pipeMetas = pipeMetas;
          this.styles = styles;
          this.animations = animations;
          this.viewIndex = viewIndex;
          this.declarationElement = declarationElement;
          this.templateVariableBindings = templateVariableBindings;
          this.nodes = [];
          this.rootNodesOrAppElements = [];
          this.methods = [];
          this.ctorStmts = [];
          this.fields = [];
          this.getters = [];
          this.disposables = [];
          this.subscriptions = [];
          this.purePipes = new Map();
          this.pipes = [];
          this.locals = new Map();
          this.literalArrayCount = 0;
          this.literalMapCount = 0;
          this.pipeCount = 0;
          this.createMethod = new CompileMethod(this);
          this.animationBindingsMethod = new CompileMethod(this);
          this.injectorGetMethod = new CompileMethod(this);
          this.updateContentQueriesMethod = new CompileMethod(this);
          this.dirtyParentQueriesMethod = new CompileMethod(this);
          this.updateViewQueriesMethod = new CompileMethod(this);
          this.detectChangesInInputsMethod = new CompileMethod(this);
          this.detectChangesRenderPropertiesMethod = new CompileMethod(this);
          this.afterContentLifecycleCallbacksMethod = new CompileMethod(this);
          this.afterViewLifecycleCallbacksMethod = new CompileMethod(this);
          this.destroyMethod = new CompileMethod(this);
          this.detachMethod = new CompileMethod(this);
          this.viewType = getViewType(component, viewIndex);
          this.className = "_View_" + component.type.name + viewIndex;
          this.classType = o.importType(new CompileIdentifierMetadata({name: this.className}));
          this.viewFactory = o.variable(getViewFactoryName(component, viewIndex));
          if (this.viewType === ViewType.COMPONENT || this.viewType === ViewType.HOST) {
            this.componentView = this;
          } else {
            this.componentView = this.declarationElement.view.componentView;
          }
          this.componentContext = getPropertyInView(o.THIS_EXPR.prop('context'), this, this.componentView);
          var viewQueries = new Map();
          if (this.viewType === ViewType.COMPONENT) {
            var directiveInstance = o.THIS_EXPR.prop('context');
            this.component.viewQueries.forEach(function(queryMeta, queryIndex) {
              var propName = "_viewQuery_" + queryMeta.selectors[0].name + "_" + queryIndex;
              var queryList = createQueryList(queryMeta, directiveInstance, propName, _this);
              var query = new CompileQuery(queryMeta, queryList, directiveInstance, _this);
              addQueryToTokenMap(viewQueries, query);
            });
            var constructorViewQueryCount = 0;
            this.component.type.diDeps.forEach(function(dep) {
              if (isPresent(dep.viewQuery)) {
                var queryList = o.THIS_EXPR.prop('declarationAppElement').prop('componentConstructorViewQueries').key(o.literal(constructorViewQueryCount++));
                var query = new CompileQuery(dep.viewQuery, queryList, null, _this);
                addQueryToTokenMap(viewQueries, query);
              }
            });
          }
          this.viewQueries = viewQueries;
          templateVariableBindings.forEach(function(entry) {
            _this.locals.set(entry[1], o.THIS_EXPR.prop('context').prop(entry[0]));
          });
          if (!this.declarationElement.isNull()) {
            this.declarationElement.setEmbeddedView(this);
          }
        }
        CompileView.prototype.callPipe = function(name, input, args) {
          return CompilePipe.call(this, name, [input].concat(args));
        };
        CompileView.prototype.getLocal = function(name) {
          if (name == EventHandlerVars.event.name) {
            return EventHandlerVars.event;
          }
          var currView = this;
          var result = currView.locals.get(name);
          while (!result && isPresent(currView.declarationElement.view)) {
            currView = currView.declarationElement.view;
            result = currView.locals.get(name);
          }
          if (isPresent(result)) {
            return getPropertyInView(result, this, currView);
          } else {
            return null;
          }
        };
        CompileView.prototype.afterNodes = function() {
          var _this = this;
          MapWrapper.values(this.viewQueries).forEach(function(queries) {
            return queries.forEach(function(query) {
              return query.afterChildren(_this.createMethod, _this.updateViewQueriesMethod);
            });
          });
        };
        return CompileView;
      }());
      $__export("CompileView", CompileView);
    }
  };
});

$__System.register("5e", ["55", "13", "14"], function($__export) {
  "use strict";
  var createEnumExpression,
      Identifiers,
      resolveEnumIdentifier,
      o,
      ViewTypeEnum,
      ViewEncapsulationEnum,
      ChangeDetectionStrategyEnum,
      ChangeDetectorStatusEnum,
      ViewConstructorVars,
      ViewProperties,
      InjectMethodVars,
      DetectChangesVars;
  function _enumExpression(classIdentifier, name) {
    return o.importExpr(resolveEnumIdentifier(classIdentifier, name));
  }
  return {
    setters: [function($__m) {
      createEnumExpression = $__m.createEnumExpression;
    }, function($__m) {
      Identifiers = $__m.Identifiers;
      resolveEnumIdentifier = $__m.resolveEnumIdentifier;
    }, function($__m) {
      o = $__m;
    }],
    execute: function() {
      ViewTypeEnum = (function() {
        function ViewTypeEnum() {}
        ViewTypeEnum.fromValue = function(value) {
          return createEnumExpression(Identifiers.ViewType, value);
        };
        return ViewTypeEnum;
      }());
      $__export("ViewTypeEnum", ViewTypeEnum);
      ViewEncapsulationEnum = (function() {
        function ViewEncapsulationEnum() {}
        ViewEncapsulationEnum.fromValue = function(value) {
          return createEnumExpression(Identifiers.ViewEncapsulation, value);
        };
        return ViewEncapsulationEnum;
      }());
      $__export("ViewEncapsulationEnum", ViewEncapsulationEnum);
      ChangeDetectionStrategyEnum = (function() {
        function ChangeDetectionStrategyEnum() {}
        ChangeDetectionStrategyEnum.fromValue = function(value) {
          return createEnumExpression(Identifiers.ChangeDetectionStrategy, value);
        };
        return ChangeDetectionStrategyEnum;
      }());
      $__export("ChangeDetectionStrategyEnum", ChangeDetectionStrategyEnum);
      ChangeDetectorStatusEnum = (function() {
        function ChangeDetectorStatusEnum() {}
        ChangeDetectorStatusEnum.fromValue = function(value) {
          return createEnumExpression(Identifiers.ChangeDetectorStatus, value);
        };
        return ChangeDetectorStatusEnum;
      }());
      $__export("ChangeDetectorStatusEnum", ChangeDetectorStatusEnum);
      ViewConstructorVars = (function() {
        function ViewConstructorVars() {}
        ViewConstructorVars.viewUtils = o.variable('viewUtils');
        ViewConstructorVars.parentInjector = o.variable('parentInjector');
        ViewConstructorVars.declarationEl = o.variable('declarationEl');
        return ViewConstructorVars;
      }());
      $__export("ViewConstructorVars", ViewConstructorVars);
      ViewProperties = (function() {
        function ViewProperties() {}
        ViewProperties.renderer = o.THIS_EXPR.prop('renderer');
        ViewProperties.projectableNodes = o.THIS_EXPR.prop('projectableNodes');
        ViewProperties.viewUtils = o.THIS_EXPR.prop('viewUtils');
        return ViewProperties;
      }());
      $__export("ViewProperties", ViewProperties);
      InjectMethodVars = (function() {
        function InjectMethodVars() {}
        InjectMethodVars.token = o.variable('token');
        InjectMethodVars.requestNodeIndex = o.variable('requestNodeIndex');
        InjectMethodVars.notFoundResult = o.variable('notFoundResult');
        return InjectMethodVars;
      }());
      $__export("InjectMethodVars", InjectMethodVars);
      DetectChangesVars = (function() {
        function DetectChangesVars() {}
        DetectChangesVars.throwOnChange = o.variable("throwOnChange");
        DetectChangesVars.changes = o.variable("changes");
        DetectChangesVars.changed = o.variable("changed");
        return DetectChangesVars;
      }());
      $__export("DetectChangesVars", DetectChangesVars);
    }
  };
});

$__System.register("12", ["16"], function($__export) {
  "use strict";
  var getSymbolIterator,
      isJsObject,
      isPresent,
      _arrayFromMap,
      MapWrapper,
      StringMapWrapper,
      ListWrapper;
  function _flattenArray(source, target) {
    if (isPresent(source)) {
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        if (Array.isArray(item)) {
          _flattenArray(item, target);
        } else {
          target.push(item);
        }
      }
    }
    return target;
  }
  function isListLikeIterable(obj) {
    if (!isJsObject(obj))
      return false;
    return Array.isArray(obj) || (!(obj instanceof Map) && getSymbolIterator() in obj);
  }
  function areIterablesEqual(a, b, comparator) {
    var iterator1 = a[getSymbolIterator()]();
    var iterator2 = b[getSymbolIterator()]();
    while (true) {
      var item1 = iterator1.next();
      var item2 = iterator2.next();
      if (item1.done && item2.done)
        return true;
      if (item1.done || item2.done)
        return false;
      if (!comparator(item1.value, item2.value))
        return false;
    }
  }
  function iterateListLike(obj, fn) {
    if (Array.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        fn(obj[i]);
      }
    } else {
      var iterator = obj[getSymbolIterator()]();
      var item = void 0;
      while (!((item = iterator.next()).done)) {
        fn(item.value);
      }
    }
  }
  $__export("isListLikeIterable", isListLikeIterable);
  $__export("areIterablesEqual", areIterablesEqual);
  $__export("iterateListLike", iterateListLike);
  return {
    setters: [function($__m) {
      getSymbolIterator = $__m.getSymbolIterator;
      isJsObject = $__m.isJsObject;
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      _arrayFromMap = (function() {
        try {
          if ((new Map()).values().next) {
            return function createArrayFromMap(m, getValues) {
              return getValues ? Array.from(m.values()) : Array.from(m.keys());
            };
          }
        } catch (e) {}
        return function createArrayFromMapWithForeach(m, getValues) {
          var res = new Array(m.size),
              i = 0;
          m.forEach(function(v, k) {
            res[i] = getValues ? v : k;
            i++;
          });
          return res;
        };
      })();
      MapWrapper = (function() {
        function MapWrapper() {}
        MapWrapper.createFromStringMap = function(stringMap) {
          var result = new Map();
          for (var prop in stringMap) {
            result.set(prop, stringMap[prop]);
          }
          return result;
        };
        MapWrapper.keys = function(m) {
          return _arrayFromMap(m, false);
        };
        MapWrapper.values = function(m) {
          return _arrayFromMap(m, true);
        };
        return MapWrapper;
      }());
      $__export("MapWrapper", MapWrapper);
      StringMapWrapper = (function() {
        function StringMapWrapper() {}
        StringMapWrapper.merge = function(m1, m2) {
          var m = {};
          for (var _i = 0,
              _a = Object.keys(m1); _i < _a.length; _i++) {
            var k = _a[_i];
            m[k] = m1[k];
          }
          for (var _b = 0,
              _c = Object.keys(m2); _b < _c.length; _b++) {
            var k = _c[_b];
            m[k] = m2[k];
          }
          return m;
        };
        StringMapWrapper.equals = function(m1, m2) {
          var k1 = Object.keys(m1);
          var k2 = Object.keys(m2);
          if (k1.length != k2.length) {
            return false;
          }
          for (var i = 0; i < k1.length; i++) {
            var key = k1[i];
            if (m1[key] !== m2[key]) {
              return false;
            }
          }
          return true;
        };
        return StringMapWrapper;
      }());
      $__export("StringMapWrapper", StringMapWrapper);
      ListWrapper = (function() {
        function ListWrapper() {}
        ListWrapper.removeAll = function(list, items) {
          for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            list.splice(index, 1);
          }
        };
        ListWrapper.remove = function(list, el) {
          var index = list.indexOf(el);
          if (index > -1) {
            list.splice(index, 1);
            return true;
          }
          return false;
        };
        ListWrapper.equals = function(a, b) {
          if (a.length != b.length)
            return false;
          for (var i = 0; i < a.length; ++i) {
            if (a[i] !== b[i])
              return false;
          }
          return true;
        };
        ListWrapper.maximum = function(list, predicate) {
          if (list.length == 0) {
            return null;
          }
          var solution = null;
          var maxValue = -Infinity;
          for (var index = 0; index < list.length; index++) {
            var candidate = list[index];
            if (candidate == null) {
              continue;
            }
            var candidateValue = predicate(candidate);
            if (candidateValue > maxValue) {
              solution = candidate;
              maxValue = candidateValue;
            }
          }
          return solution;
        };
        ListWrapper.flatten = function(list) {
          var target = [];
          _flattenArray(list, target);
          return target;
        };
        return ListWrapper;
      }());
      $__export("ListWrapper", ListWrapper);
    }
  };
});

$__System.register("2f", [], function($__export) {
  "use strict";
  var TagContentType,
      NAMED_ENTITIES;
  function splitNsName(elementName) {
    if (elementName[0] != ':') {
      return [null, elementName];
    }
    var colonIndex = elementName.indexOf(':', 1);
    if (colonIndex == -1) {
      throw new Error("Unsupported format \"" + elementName + "\" expecting \":namespace:name\"");
    }
    return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
  }
  function getNsPrefix(fullName) {
    return fullName === null ? null : splitNsName(fullName)[0];
  }
  function mergeNsAndName(prefix, localName) {
    return prefix ? ":" + prefix + ":" + localName : localName;
  }
  $__export("splitNsName", splitNsName);
  $__export("getNsPrefix", getNsPrefix);
  $__export("mergeNsAndName", mergeNsAndName);
  return {
    setters: [],
    execute: function() {
      $__export("TagContentType", TagContentType);
      (function(TagContentType) {
        TagContentType[TagContentType["RAW_TEXT"] = 0] = "RAW_TEXT";
        TagContentType[TagContentType["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
        TagContentType[TagContentType["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
      })(TagContentType || ($__export("TagContentType", TagContentType = {})));
      NAMED_ENTITIES = {
        'Aacute': '\u00C1',
        'aacute': '\u00E1',
        'Acirc': '\u00C2',
        'acirc': '\u00E2',
        'acute': '\u00B4',
        'AElig': '\u00C6',
        'aelig': '\u00E6',
        'Agrave': '\u00C0',
        'agrave': '\u00E0',
        'alefsym': '\u2135',
        'Alpha': '\u0391',
        'alpha': '\u03B1',
        'amp': '&',
        'and': '\u2227',
        'ang': '\u2220',
        'apos': '\u0027',
        'Aring': '\u00C5',
        'aring': '\u00E5',
        'asymp': '\u2248',
        'Atilde': '\u00C3',
        'atilde': '\u00E3',
        'Auml': '\u00C4',
        'auml': '\u00E4',
        'bdquo': '\u201E',
        'Beta': '\u0392',
        'beta': '\u03B2',
        'brvbar': '\u00A6',
        'bull': '\u2022',
        'cap': '\u2229',
        'Ccedil': '\u00C7',
        'ccedil': '\u00E7',
        'cedil': '\u00B8',
        'cent': '\u00A2',
        'Chi': '\u03A7',
        'chi': '\u03C7',
        'circ': '\u02C6',
        'clubs': '\u2663',
        'cong': '\u2245',
        'copy': '\u00A9',
        'crarr': '\u21B5',
        'cup': '\u222A',
        'curren': '\u00A4',
        'dagger': '\u2020',
        'Dagger': '\u2021',
        'darr': '\u2193',
        'dArr': '\u21D3',
        'deg': '\u00B0',
        'Delta': '\u0394',
        'delta': '\u03B4',
        'diams': '\u2666',
        'divide': '\u00F7',
        'Eacute': '\u00C9',
        'eacute': '\u00E9',
        'Ecirc': '\u00CA',
        'ecirc': '\u00EA',
        'Egrave': '\u00C8',
        'egrave': '\u00E8',
        'empty': '\u2205',
        'emsp': '\u2003',
        'ensp': '\u2002',
        'Epsilon': '\u0395',
        'epsilon': '\u03B5',
        'equiv': '\u2261',
        'Eta': '\u0397',
        'eta': '\u03B7',
        'ETH': '\u00D0',
        'eth': '\u00F0',
        'Euml': '\u00CB',
        'euml': '\u00EB',
        'euro': '\u20AC',
        'exist': '\u2203',
        'fnof': '\u0192',
        'forall': '\u2200',
        'frac12': '\u00BD',
        'frac14': '\u00BC',
        'frac34': '\u00BE',
        'frasl': '\u2044',
        'Gamma': '\u0393',
        'gamma': '\u03B3',
        'ge': '\u2265',
        'gt': '>',
        'harr': '\u2194',
        'hArr': '\u21D4',
        'hearts': '\u2665',
        'hellip': '\u2026',
        'Iacute': '\u00CD',
        'iacute': '\u00ED',
        'Icirc': '\u00CE',
        'icirc': '\u00EE',
        'iexcl': '\u00A1',
        'Igrave': '\u00CC',
        'igrave': '\u00EC',
        'image': '\u2111',
        'infin': '\u221E',
        'int': '\u222B',
        'Iota': '\u0399',
        'iota': '\u03B9',
        'iquest': '\u00BF',
        'isin': '\u2208',
        'Iuml': '\u00CF',
        'iuml': '\u00EF',
        'Kappa': '\u039A',
        'kappa': '\u03BA',
        'Lambda': '\u039B',
        'lambda': '\u03BB',
        'lang': '\u27E8',
        'laquo': '\u00AB',
        'larr': '\u2190',
        'lArr': '\u21D0',
        'lceil': '\u2308',
        'ldquo': '\u201C',
        'le': '\u2264',
        'lfloor': '\u230A',
        'lowast': '\u2217',
        'loz': '\u25CA',
        'lrm': '\u200E',
        'lsaquo': '\u2039',
        'lsquo': '\u2018',
        'lt': '<',
        'macr': '\u00AF',
        'mdash': '\u2014',
        'micro': '\u00B5',
        'middot': '\u00B7',
        'minus': '\u2212',
        'Mu': '\u039C',
        'mu': '\u03BC',
        'nabla': '\u2207',
        'nbsp': '\u00A0',
        'ndash': '\u2013',
        'ne': '\u2260',
        'ni': '\u220B',
        'not': '\u00AC',
        'notin': '\u2209',
        'nsub': '\u2284',
        'Ntilde': '\u00D1',
        'ntilde': '\u00F1',
        'Nu': '\u039D',
        'nu': '\u03BD',
        'Oacute': '\u00D3',
        'oacute': '\u00F3',
        'Ocirc': '\u00D4',
        'ocirc': '\u00F4',
        'OElig': '\u0152',
        'oelig': '\u0153',
        'Ograve': '\u00D2',
        'ograve': '\u00F2',
        'oline': '\u203E',
        'Omega': '\u03A9',
        'omega': '\u03C9',
        'Omicron': '\u039F',
        'omicron': '\u03BF',
        'oplus': '\u2295',
        'or': '\u2228',
        'ordf': '\u00AA',
        'ordm': '\u00BA',
        'Oslash': '\u00D8',
        'oslash': '\u00F8',
        'Otilde': '\u00D5',
        'otilde': '\u00F5',
        'otimes': '\u2297',
        'Ouml': '\u00D6',
        'ouml': '\u00F6',
        'para': '\u00B6',
        'permil': '\u2030',
        'perp': '\u22A5',
        'Phi': '\u03A6',
        'phi': '\u03C6',
        'Pi': '\u03A0',
        'pi': '\u03C0',
        'piv': '\u03D6',
        'plusmn': '\u00B1',
        'pound': '\u00A3',
        'prime': '\u2032',
        'Prime': '\u2033',
        'prod': '\u220F',
        'prop': '\u221D',
        'Psi': '\u03A8',
        'psi': '\u03C8',
        'quot': '\u0022',
        'radic': '\u221A',
        'rang': '\u27E9',
        'raquo': '\u00BB',
        'rarr': '\u2192',
        'rArr': '\u21D2',
        'rceil': '\u2309',
        'rdquo': '\u201D',
        'real': '\u211C',
        'reg': '\u00AE',
        'rfloor': '\u230B',
        'Rho': '\u03A1',
        'rho': '\u03C1',
        'rlm': '\u200F',
        'rsaquo': '\u203A',
        'rsquo': '\u2019',
        'sbquo': '\u201A',
        'Scaron': '\u0160',
        'scaron': '\u0161',
        'sdot': '\u22C5',
        'sect': '\u00A7',
        'shy': '\u00AD',
        'Sigma': '\u03A3',
        'sigma': '\u03C3',
        'sigmaf': '\u03C2',
        'sim': '\u223C',
        'spades': '\u2660',
        'sub': '\u2282',
        'sube': '\u2286',
        'sum': '\u2211',
        'sup': '\u2283',
        'sup1': '\u00B9',
        'sup2': '\u00B2',
        'sup3': '\u00B3',
        'supe': '\u2287',
        'szlig': '\u00DF',
        'Tau': '\u03A4',
        'tau': '\u03C4',
        'there4': '\u2234',
        'Theta': '\u0398',
        'theta': '\u03B8',
        'thetasym': '\u03D1',
        'thinsp': '\u2009',
        'THORN': '\u00DE',
        'thorn': '\u00FE',
        'tilde': '\u02DC',
        'times': '\u00D7',
        'trade': '\u2122',
        'Uacute': '\u00DA',
        'uacute': '\u00FA',
        'uarr': '\u2191',
        'uArr': '\u21D1',
        'Ucirc': '\u00DB',
        'ucirc': '\u00FB',
        'Ugrave': '\u00D9',
        'ugrave': '\u00F9',
        'uml': '\u00A8',
        'upsih': '\u03D2',
        'Upsilon': '\u03A5',
        'upsilon': '\u03C5',
        'Uuml': '\u00DC',
        'uuml': '\u00FC',
        'weierp': '\u2118',
        'Xi': '\u039E',
        'xi': '\u03BE',
        'Yacute': '\u00DD',
        'yacute': '\u00FD',
        'yen': '\u00A5',
        'yuml': '\u00FF',
        'Yuml': '\u0178',
        'Zeta': '\u0396',
        'zeta': '\u03B6',
        'zwj': '\u200D',
        'zwnj': '\u200C'
      };
      $__export("NAMED_ENTITIES", NAMED_ENTITIES);
    }
  };
});

$__System.register("4b", ["2f"], function($__export) {
  "use strict";
  var TagContentType,
      HtmlTagDefinition,
      TAG_DEFINITIONS,
      _DEFAULT_TAG_DEFINITION;
  function getHtmlTagDefinition(tagName) {
    return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
  }
  $__export("getHtmlTagDefinition", getHtmlTagDefinition);
  return {
    setters: [function($__m) {
      TagContentType = $__m.TagContentType;
    }],
    execute: function() {
      HtmlTagDefinition = (function() {
        function HtmlTagDefinition(_a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a,
              closedByChildren = _b.closedByChildren,
              requiredParents = _b.requiredParents,
              implicitNamespacePrefix = _b.implicitNamespacePrefix,
              _c = _b.contentType,
              contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c,
              _d = _b.closedByParent,
              closedByParent = _d === void 0 ? false : _d,
              _e = _b.isVoid,
              isVoid = _e === void 0 ? false : _e,
              _f = _b.ignoreFirstLf,
              ignoreFirstLf = _f === void 0 ? false : _f;
          this.closedByChildren = {};
          this.closedByParent = false;
          this.canSelfClose = false;
          if (closedByChildren && closedByChildren.length > 0) {
            closedByChildren.forEach(function(tagName) {
              return _this.closedByChildren[tagName] = true;
            });
          }
          this.isVoid = isVoid;
          this.closedByParent = closedByParent || isVoid;
          if (requiredParents && requiredParents.length > 0) {
            this.requiredParents = {};
            this.parentToAdd = requiredParents[0];
            requiredParents.forEach(function(tagName) {
              return _this.requiredParents[tagName] = true;
            });
          }
          this.implicitNamespacePrefix = implicitNamespacePrefix;
          this.contentType = contentType;
          this.ignoreFirstLf = ignoreFirstLf;
        }
        HtmlTagDefinition.prototype.requireExtraParent = function(currentParent) {
          if (!this.requiredParents) {
            return false;
          }
          if (!currentParent) {
            return true;
          }
          var lcParent = currentParent.toLowerCase();
          return this.requiredParents[lcParent] != true && lcParent != 'template';
        };
        HtmlTagDefinition.prototype.isClosedByChild = function(name) {
          return this.isVoid || name.toLowerCase() in this.closedByChildren;
        };
        return HtmlTagDefinition;
      }());
      $__export("HtmlTagDefinition", HtmlTagDefinition);
      TAG_DEFINITIONS = {
        'base': new HtmlTagDefinition({isVoid: true}),
        'meta': new HtmlTagDefinition({isVoid: true}),
        'area': new HtmlTagDefinition({isVoid: true}),
        'embed': new HtmlTagDefinition({isVoid: true}),
        'link': new HtmlTagDefinition({isVoid: true}),
        'img': new HtmlTagDefinition({isVoid: true}),
        'input': new HtmlTagDefinition({isVoid: true}),
        'param': new HtmlTagDefinition({isVoid: true}),
        'hr': new HtmlTagDefinition({isVoid: true}),
        'br': new HtmlTagDefinition({isVoid: true}),
        'source': new HtmlTagDefinition({isVoid: true}),
        'track': new HtmlTagDefinition({isVoid: true}),
        'wbr': new HtmlTagDefinition({isVoid: true}),
        'p': new HtmlTagDefinition({
          closedByChildren: ['address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'],
          closedByParent: true
        }),
        'thead': new HtmlTagDefinition({closedByChildren: ['tbody', 'tfoot']}),
        'tbody': new HtmlTagDefinition({
          closedByChildren: ['tbody', 'tfoot'],
          closedByParent: true
        }),
        'tfoot': new HtmlTagDefinition({
          closedByChildren: ['tbody'],
          closedByParent: true
        }),
        'tr': new HtmlTagDefinition({
          closedByChildren: ['tr'],
          requiredParents: ['tbody', 'tfoot', 'thead'],
          closedByParent: true
        }),
        'td': new HtmlTagDefinition({
          closedByChildren: ['td', 'th'],
          closedByParent: true
        }),
        'th': new HtmlTagDefinition({
          closedByChildren: ['td', 'th'],
          closedByParent: true
        }),
        'col': new HtmlTagDefinition({
          requiredParents: ['colgroup'],
          isVoid: true
        }),
        'svg': new HtmlTagDefinition({implicitNamespacePrefix: 'svg'}),
        'math': new HtmlTagDefinition({implicitNamespacePrefix: 'math'}),
        'li': new HtmlTagDefinition({
          closedByChildren: ['li'],
          closedByParent: true
        }),
        'dt': new HtmlTagDefinition({closedByChildren: ['dt', 'dd']}),
        'dd': new HtmlTagDefinition({
          closedByChildren: ['dt', 'dd'],
          closedByParent: true
        }),
        'rb': new HtmlTagDefinition({
          closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
          closedByParent: true
        }),
        'rt': new HtmlTagDefinition({
          closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
          closedByParent: true
        }),
        'rtc': new HtmlTagDefinition({
          closedByChildren: ['rb', 'rtc', 'rp'],
          closedByParent: true
        }),
        'rp': new HtmlTagDefinition({
          closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
          closedByParent: true
        }),
        'optgroup': new HtmlTagDefinition({
          closedByChildren: ['optgroup'],
          closedByParent: true
        }),
        'option': new HtmlTagDefinition({
          closedByChildren: ['option', 'optgroup'],
          closedByParent: true
        }),
        'pre': new HtmlTagDefinition({ignoreFirstLf: true}),
        'listing': new HtmlTagDefinition({ignoreFirstLf: true}),
        'style': new HtmlTagDefinition({contentType: TagContentType.RAW_TEXT}),
        'script': new HtmlTagDefinition({contentType: TagContentType.RAW_TEXT}),
        'title': new HtmlTagDefinition({contentType: TagContentType.ESCAPABLE_RAW_TEXT}),
        'textarea': new HtmlTagDefinition({
          contentType: TagContentType.ESCAPABLE_RAW_TEXT,
          ignoreFirstLf: true
        })
      };
      _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
    }
  };
});

$__System.register("32", ["4b"], function($__export) {
  "use strict";
  var getHtmlTagDefinition,
      _SELECTOR_REGEXP,
      CssSelector,
      SelectorMatcher,
      SelectorListContext,
      SelectorContext;
  return {
    setters: [function($__m) {
      getHtmlTagDefinition = $__m.getHtmlTagDefinition;
    }],
    execute: function() {
      _SELECTOR_REGEXP = new RegExp('(\\:not\\()|' + '([-\\w]+)|' + '(?:\\.([-\\w]+))|' + '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' + '(\\))|' + '(\\s*,\\s*)', 'g');
      CssSelector = (function() {
        function CssSelector() {
          this.element = null;
          this.classNames = [];
          this.attrs = [];
          this.notSelectors = [];
        }
        CssSelector.parse = function(selector) {
          var results = [];
          var _addResult = function(res, cssSel) {
            if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 && cssSel.attrs.length == 0) {
              cssSel.element = '*';
            }
            res.push(cssSel);
          };
          var cssSelector = new CssSelector();
          var match;
          var current = cssSelector;
          var inNot = false;
          _SELECTOR_REGEXP.lastIndex = 0;
          while (match = _SELECTOR_REGEXP.exec(selector)) {
            if (match[1]) {
              if (inNot) {
                throw new Error('Nesting :not is not allowed in a selector');
              }
              inNot = true;
              current = new CssSelector();
              cssSelector.notSelectors.push(current);
            }
            if (match[2]) {
              current.setElement(match[2]);
            }
            if (match[3]) {
              current.addClassName(match[3]);
            }
            if (match[4]) {
              current.addAttribute(match[4], match[5]);
            }
            if (match[6]) {
              inNot = false;
              current = cssSelector;
            }
            if (match[7]) {
              if (inNot) {
                throw new Error('Multiple selectors in :not are not supported');
              }
              _addResult(results, cssSelector);
              cssSelector = current = new CssSelector();
            }
          }
          _addResult(results, cssSelector);
          return results;
        };
        CssSelector.prototype.isElementSelector = function() {
          return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 && this.notSelectors.length === 0;
        };
        CssSelector.prototype.hasElementSelector = function() {
          return !!this.element;
        };
        CssSelector.prototype.setElement = function(element) {
          if (element === void 0) {
            element = null;
          }
          this.element = element;
        };
        CssSelector.prototype.getMatchingElementTemplate = function() {
          var tagName = this.element || 'div';
          var classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
          var attrs = '';
          for (var i = 0; i < this.attrs.length; i += 2) {
            var attrName = this.attrs[i];
            var attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
            attrs += " " + attrName + attrValue;
          }
          return getHtmlTagDefinition(tagName).isVoid ? "<" + tagName + classAttr + attrs + "/>" : "<" + tagName + classAttr + attrs + "></" + tagName + ">";
        };
        CssSelector.prototype.addAttribute = function(name, value) {
          if (value === void 0) {
            value = '';
          }
          this.attrs.push(name, value && value.toLowerCase() || '');
        };
        CssSelector.prototype.addClassName = function(name) {
          this.classNames.push(name.toLowerCase());
        };
        CssSelector.prototype.toString = function() {
          var res = this.element || '';
          if (this.classNames) {
            this.classNames.forEach(function(klass) {
              return res += "." + klass;
            });
          }
          if (this.attrs) {
            for (var i = 0; i < this.attrs.length; i += 2) {
              var name_1 = this.attrs[i];
              var value = this.attrs[i + 1];
              res += "[" + name_1 + (value ? '=' + value : '') + "]";
            }
          }
          this.notSelectors.forEach(function(notSelector) {
            return res += ":not(" + notSelector + ")";
          });
          return res;
        };
        return CssSelector;
      }());
      $__export("CssSelector", CssSelector);
      SelectorMatcher = (function() {
        function SelectorMatcher() {
          this._elementMap = new Map();
          this._elementPartialMap = new Map();
          this._classMap = new Map();
          this._classPartialMap = new Map();
          this._attrValueMap = new Map();
          this._attrValuePartialMap = new Map();
          this._listContexts = [];
        }
        SelectorMatcher.createNotMatcher = function(notSelectors) {
          var notMatcher = new SelectorMatcher();
          notMatcher.addSelectables(notSelectors, null);
          return notMatcher;
        };
        SelectorMatcher.prototype.addSelectables = function(cssSelectors, callbackCtxt) {
          var listContext = null;
          if (cssSelectors.length > 1) {
            listContext = new SelectorListContext(cssSelectors);
            this._listContexts.push(listContext);
          }
          for (var i = 0; i < cssSelectors.length; i++) {
            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
          }
        };
        SelectorMatcher.prototype._addSelectable = function(cssSelector, callbackCtxt, listContext) {
          var matcher = this;
          var element = cssSelector.element;
          var classNames = cssSelector.classNames;
          var attrs = cssSelector.attrs;
          var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
          if (element) {
            var isTerminal = attrs.length === 0 && classNames.length === 0;
            if (isTerminal) {
              this._addTerminal(matcher._elementMap, element, selectable);
            } else {
              matcher = this._addPartial(matcher._elementPartialMap, element);
            }
          }
          if (classNames) {
            for (var i = 0; i < classNames.length; i++) {
              var isTerminal = attrs.length === 0 && i === classNames.length - 1;
              var className = classNames[i];
              if (isTerminal) {
                this._addTerminal(matcher._classMap, className, selectable);
              } else {
                matcher = this._addPartial(matcher._classPartialMap, className);
              }
            }
          }
          if (attrs) {
            for (var i = 0; i < attrs.length; i += 2) {
              var isTerminal = i === attrs.length - 2;
              var name_2 = attrs[i];
              var value = attrs[i + 1];
              if (isTerminal) {
                var terminalMap = matcher._attrValueMap;
                var terminalValuesMap = terminalMap.get(name_2);
                if (!terminalValuesMap) {
                  terminalValuesMap = new Map();
                  terminalMap.set(name_2, terminalValuesMap);
                }
                this._addTerminal(terminalValuesMap, value, selectable);
              } else {
                var partialMap = matcher._attrValuePartialMap;
                var partialValuesMap = partialMap.get(name_2);
                if (!partialValuesMap) {
                  partialValuesMap = new Map();
                  partialMap.set(name_2, partialValuesMap);
                }
                matcher = this._addPartial(partialValuesMap, value);
              }
            }
          }
        };
        SelectorMatcher.prototype._addTerminal = function(map, name, selectable) {
          var terminalList = map.get(name);
          if (!terminalList) {
            terminalList = [];
            map.set(name, terminalList);
          }
          terminalList.push(selectable);
        };
        SelectorMatcher.prototype._addPartial = function(map, name) {
          var matcher = map.get(name);
          if (!matcher) {
            matcher = new SelectorMatcher();
            map.set(name, matcher);
          }
          return matcher;
        };
        SelectorMatcher.prototype.match = function(cssSelector, matchedCallback) {
          var result = false;
          var element = cssSelector.element;
          var classNames = cssSelector.classNames;
          var attrs = cssSelector.attrs;
          for (var i = 0; i < this._listContexts.length; i++) {
            this._listContexts[i].alreadyMatched = false;
          }
          result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
          result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;
          if (classNames) {
            for (var i = 0; i < classNames.length; i++) {
              var className = classNames[i];
              result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
              result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
            }
          }
          if (attrs) {
            for (var i = 0; i < attrs.length; i += 2) {
              var name_3 = attrs[i];
              var value = attrs[i + 1];
              var terminalValuesMap = this._attrValueMap.get(name_3);
              if (value) {
                result = this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;
              }
              result = this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
              var partialValuesMap = this._attrValuePartialMap.get(name_3);
              if (value) {
                result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;
              }
              result = this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
            }
          }
          return result;
        };
        SelectorMatcher.prototype._matchTerminal = function(map, name, cssSelector, matchedCallback) {
          if (!map || typeof name !== 'string') {
            return false;
          }
          var selectables = map.get(name);
          var starSelectables = map.get('*');
          if (starSelectables) {
            selectables = selectables.concat(starSelectables);
          }
          if (!selectables) {
            return false;
          }
          var selectable;
          var result = false;
          for (var i = 0; i < selectables.length; i++) {
            selectable = selectables[i];
            result = selectable.finalize(cssSelector, matchedCallback) || result;
          }
          return result;
        };
        SelectorMatcher.prototype._matchPartial = function(map, name, cssSelector, matchedCallback) {
          if (!map || typeof name !== 'string') {
            return false;
          }
          var nestedSelector = map.get(name);
          if (!nestedSelector) {
            return false;
          }
          return nestedSelector.match(cssSelector, matchedCallback);
        };
        return SelectorMatcher;
      }());
      $__export("SelectorMatcher", SelectorMatcher);
      SelectorListContext = (function() {
        function SelectorListContext(selectors) {
          this.selectors = selectors;
          this.alreadyMatched = false;
        }
        return SelectorListContext;
      }());
      $__export("SelectorListContext", SelectorListContext);
      SelectorContext = (function() {
        function SelectorContext(selector, cbContext, listContext) {
          this.selector = selector;
          this.cbContext = cbContext;
          this.listContext = listContext;
          this.notSelectors = selector.notSelectors;
        }
        SelectorContext.prototype.finalize = function(cssSelector, callback) {
          var result = true;
          if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
            var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
            result = !notMatcher.match(cssSelector, null);
          }
          if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
            if (this.listContext) {
              this.listContext.alreadyMatched = true;
            }
            callback(this.selector, this.cbContext);
          }
          return result;
        };
        return SelectorContext;
      }());
      $__export("SelectorContext", SelectorContext);
    }
  };
});

$__System.register("20", ["16"], function($__export) {
  "use strict";
  var isBlank,
      isPrimitive,
      isStrictStringMap,
      MODULE_SUFFIX,
      CAMEL_CASE_REGEXP,
      ValueTransformer,
      SyncAsyncResult;
  function camelCaseToDashCase(input) {
    return input.replace(CAMEL_CASE_REGEXP, function() {
      var m = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        m[_i - 0] = arguments[_i];
      }
      return '-' + m[1].toLowerCase();
    });
  }
  function splitAtColon(input, defaultValues) {
    return _splitAt(input, ':', defaultValues);
  }
  function splitAtPeriod(input, defaultValues) {
    return _splitAt(input, '.', defaultValues);
  }
  function _splitAt(input, character, defaultValues) {
    var characterIndex = input.indexOf(character);
    if (characterIndex == -1)
      return defaultValues;
    return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];
  }
  function sanitizeIdentifier(name) {
    return name.replace(/\W/g, '_');
  }
  function visitValue(value, visitor, context) {
    if (Array.isArray(value)) {
      return visitor.visitArray(value, context);
    }
    if (isStrictStringMap(value)) {
      return visitor.visitStringMap(value, context);
    }
    if (isBlank(value) || isPrimitive(value)) {
      return visitor.visitPrimitive(value, context);
    }
    return visitor.visitOther(value, context);
  }
  $__export("camelCaseToDashCase", camelCaseToDashCase);
  $__export("splitAtColon", splitAtColon);
  $__export("splitAtPeriod", splitAtPeriod);
  $__export("sanitizeIdentifier", sanitizeIdentifier);
  $__export("visitValue", visitValue);
  return {
    setters: [function($__m) {
      isBlank = $__m.isBlank;
      isPrimitive = $__m.isPrimitive;
      isStrictStringMap = $__m.isStrictStringMap;
    }],
    execute: function() {
      MODULE_SUFFIX = '';
      $__export("MODULE_SUFFIX", MODULE_SUFFIX);
      CAMEL_CASE_REGEXP = /([A-Z])/g;
      ValueTransformer = (function() {
        function ValueTransformer() {}
        ValueTransformer.prototype.visitArray = function(arr, context) {
          var _this = this;
          return arr.map(function(value) {
            return visitValue(value, _this, context);
          });
        };
        ValueTransformer.prototype.visitStringMap = function(map, context) {
          var _this = this;
          var result = {};
          Object.keys(map).forEach(function(key) {
            result[key] = visitValue(map[key], _this, context);
          });
          return result;
        };
        ValueTransformer.prototype.visitPrimitive = function(value, context) {
          return value;
        };
        ValueTransformer.prototype.visitOther = function(value, context) {
          return value;
        };
        return ValueTransformer;
      }());
      $__export("ValueTransformer", ValueTransformer);
      SyncAsyncResult = (function() {
        function SyncAsyncResult(syncResult, asyncResult) {
          if (asyncResult === void 0) {
            asyncResult = null;
          }
          this.syncResult = syncResult;
          this.asyncResult = asyncResult;
          if (!asyncResult) {
            this.asyncResult = Promise.resolve(syncResult);
          }
        }
        return SyncAsyncResult;
      }());
      $__export("SyncAsyncResult", SyncAsyncResult);
    }
  };
});

$__System.register("11", ["c", "12", "16", "32", "20"], function($__export) {
  "use strict";
  var __extends,
      ChangeDetectionStrategy,
      ViewEncapsulation,
      ListWrapper,
      MapWrapper,
      isPresent,
      CssSelector,
      sanitizeIdentifier,
      splitAtColon,
      HOST_REG_EXP,
      CompileMetadataWithIdentifier,
      CompileAnimationEntryMetadata,
      CompileAnimationStateMetadata,
      CompileAnimationStateDeclarationMetadata,
      CompileAnimationStateTransitionMetadata,
      CompileAnimationMetadata,
      CompileAnimationKeyframesSequenceMetadata,
      CompileAnimationStyleMetadata,
      CompileAnimationAnimateMetadata,
      CompileAnimationWithStepsMetadata,
      CompileAnimationSequenceMetadata,
      CompileAnimationGroupMetadata,
      CompileIdentifierMetadata,
      CompileDiDependencyMetadata,
      CompileProviderMetadata,
      CompileFactoryMetadata,
      CompileTokenMetadata,
      CompileTypeMetadata,
      CompileQueryMetadata,
      CompileStylesheetMetadata,
      CompileTemplateMetadata,
      CompileDirectiveMetadata,
      CompilePipeMetadata,
      CompileNgModuleMetadata,
      TransitiveCompileNgModuleMetadata,
      ProviderMeta;
  function unimplemented() {
    throw new Error('unimplemented');
  }
  function createHostComponentMeta(compMeta) {
    var template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();
    return CompileDirectiveMetadata.create({
      type: new CompileTypeMetadata({
        reference: Object,
        name: compMeta.type.name + "_Host",
        moduleUrl: compMeta.type.moduleUrl,
        isHost: true
      }),
      template: new CompileTemplateMetadata({
        encapsulation: ViewEncapsulation.None,
        template: template,
        templateUrl: '',
        styles: [],
        styleUrls: [],
        ngContentSelectors: [],
        animations: []
      }),
      changeDetection: ChangeDetectionStrategy.Default,
      inputs: [],
      outputs: [],
      host: {},
      isComponent: true,
      selector: '*',
      providers: [],
      viewProviders: [],
      queries: [],
      viewQueries: []
    });
  }
  function removeIdentifierDuplicates(items) {
    var map = new Map();
    items.forEach(function(item) {
      if (!map.get(item.identifier.reference)) {
        map.set(item.identifier.reference, item);
      }
    });
    return MapWrapper.values(map);
  }
  function _normalizeArray(obj) {
    return obj || [];
  }
  function isStaticSymbol(value) {
    return (typeof value === 'undefined' ? 'undefined' : $traceurRuntime.typeof(value)) === 'object' && value !== null && value['name'] && value['filePath'];
  }
  $__export("createHostComponentMeta", createHostComponentMeta);
  $__export("removeIdentifierDuplicates", removeIdentifierDuplicates);
  $__export("isStaticSymbol", isStaticSymbol);
  return {
    setters: [function($__m) {
      ChangeDetectionStrategy = $__m.ChangeDetectionStrategy;
      ViewEncapsulation = $__m.ViewEncapsulation;
    }, function($__m) {
      ListWrapper = $__m.ListWrapper;
      MapWrapper = $__m.MapWrapper;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      CssSelector = $__m.CssSelector;
    }, function($__m) {
      sanitizeIdentifier = $__m.sanitizeIdentifier;
      splitAtColon = $__m.splitAtColon;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;
      CompileMetadataWithIdentifier = (function() {
        function CompileMetadataWithIdentifier() {}
        Object.defineProperty(CompileMetadataWithIdentifier.prototype, "identifier", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        return CompileMetadataWithIdentifier;
      }());
      $__export("CompileMetadataWithIdentifier", CompileMetadataWithIdentifier);
      CompileAnimationEntryMetadata = (function() {
        function CompileAnimationEntryMetadata(name, definitions) {
          if (name === void 0) {
            name = null;
          }
          if (definitions === void 0) {
            definitions = null;
          }
          this.name = name;
          this.definitions = definitions;
        }
        return CompileAnimationEntryMetadata;
      }());
      $__export("CompileAnimationEntryMetadata", CompileAnimationEntryMetadata);
      CompileAnimationStateMetadata = (function() {
        function CompileAnimationStateMetadata() {}
        return CompileAnimationStateMetadata;
      }());
      $__export("CompileAnimationStateMetadata", CompileAnimationStateMetadata);
      CompileAnimationStateDeclarationMetadata = (function(_super) {
        __extends(CompileAnimationStateDeclarationMetadata, _super);
        function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
          _super.call(this);
          this.stateNameExpr = stateNameExpr;
          this.styles = styles;
        }
        return CompileAnimationStateDeclarationMetadata;
      }(CompileAnimationStateMetadata));
      $__export("CompileAnimationStateDeclarationMetadata", CompileAnimationStateDeclarationMetadata);
      CompileAnimationStateTransitionMetadata = (function(_super) {
        __extends(CompileAnimationStateTransitionMetadata, _super);
        function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
          _super.call(this);
          this.stateChangeExpr = stateChangeExpr;
          this.steps = steps;
        }
        return CompileAnimationStateTransitionMetadata;
      }(CompileAnimationStateMetadata));
      $__export("CompileAnimationStateTransitionMetadata", CompileAnimationStateTransitionMetadata);
      CompileAnimationMetadata = (function() {
        function CompileAnimationMetadata() {}
        return CompileAnimationMetadata;
      }());
      $__export("CompileAnimationMetadata", CompileAnimationMetadata);
      CompileAnimationKeyframesSequenceMetadata = (function(_super) {
        __extends(CompileAnimationKeyframesSequenceMetadata, _super);
        function CompileAnimationKeyframesSequenceMetadata(steps) {
          if (steps === void 0) {
            steps = [];
          }
          _super.call(this);
          this.steps = steps;
        }
        return CompileAnimationKeyframesSequenceMetadata;
      }(CompileAnimationMetadata));
      $__export("CompileAnimationKeyframesSequenceMetadata", CompileAnimationKeyframesSequenceMetadata);
      CompileAnimationStyleMetadata = (function(_super) {
        __extends(CompileAnimationStyleMetadata, _super);
        function CompileAnimationStyleMetadata(offset, styles) {
          if (styles === void 0) {
            styles = null;
          }
          _super.call(this);
          this.offset = offset;
          this.styles = styles;
        }
        return CompileAnimationStyleMetadata;
      }(CompileAnimationMetadata));
      $__export("CompileAnimationStyleMetadata", CompileAnimationStyleMetadata);
      CompileAnimationAnimateMetadata = (function(_super) {
        __extends(CompileAnimationAnimateMetadata, _super);
        function CompileAnimationAnimateMetadata(timings, styles) {
          if (timings === void 0) {
            timings = 0;
          }
          if (styles === void 0) {
            styles = null;
          }
          _super.call(this);
          this.timings = timings;
          this.styles = styles;
        }
        return CompileAnimationAnimateMetadata;
      }(CompileAnimationMetadata));
      $__export("CompileAnimationAnimateMetadata", CompileAnimationAnimateMetadata);
      CompileAnimationWithStepsMetadata = (function(_super) {
        __extends(CompileAnimationWithStepsMetadata, _super);
        function CompileAnimationWithStepsMetadata(steps) {
          if (steps === void 0) {
            steps = null;
          }
          _super.call(this);
          this.steps = steps;
        }
        return CompileAnimationWithStepsMetadata;
      }(CompileAnimationMetadata));
      $__export("CompileAnimationWithStepsMetadata", CompileAnimationWithStepsMetadata);
      CompileAnimationSequenceMetadata = (function(_super) {
        __extends(CompileAnimationSequenceMetadata, _super);
        function CompileAnimationSequenceMetadata(steps) {
          if (steps === void 0) {
            steps = null;
          }
          _super.call(this, steps);
        }
        return CompileAnimationSequenceMetadata;
      }(CompileAnimationWithStepsMetadata));
      $__export("CompileAnimationSequenceMetadata", CompileAnimationSequenceMetadata);
      CompileAnimationGroupMetadata = (function(_super) {
        __extends(CompileAnimationGroupMetadata, _super);
        function CompileAnimationGroupMetadata(steps) {
          if (steps === void 0) {
            steps = null;
          }
          _super.call(this, steps);
        }
        return CompileAnimationGroupMetadata;
      }(CompileAnimationWithStepsMetadata));
      $__export("CompileAnimationGroupMetadata", CompileAnimationGroupMetadata);
      CompileIdentifierMetadata = (function() {
        function CompileIdentifierMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              reference = _b.reference,
              name = _b.name,
              moduleUrl = _b.moduleUrl,
              prefix = _b.prefix,
              value = _b.value;
          this.reference = reference;
          this.name = name;
          this.prefix = prefix;
          this.moduleUrl = moduleUrl;
          this.value = value;
        }
        Object.defineProperty(CompileIdentifierMetadata.prototype, "identifier", {
          get: function() {
            return this;
          },
          enumerable: true,
          configurable: true
        });
        return CompileIdentifierMetadata;
      }());
      $__export("CompileIdentifierMetadata", CompileIdentifierMetadata);
      CompileDiDependencyMetadata = (function() {
        function CompileDiDependencyMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              isAttribute = _b.isAttribute,
              isSelf = _b.isSelf,
              isHost = _b.isHost,
              isSkipSelf = _b.isSkipSelf,
              isOptional = _b.isOptional,
              isValue = _b.isValue,
              query = _b.query,
              viewQuery = _b.viewQuery,
              token = _b.token,
              value = _b.value;
          this.isAttribute = !!isAttribute;
          this.isSelf = !!isSelf;
          this.isHost = !!isHost;
          this.isSkipSelf = !!isSkipSelf;
          this.isOptional = !!isOptional;
          this.isValue = !!isValue;
          this.query = query;
          this.viewQuery = viewQuery;
          this.token = token;
          this.value = value;
        }
        return CompileDiDependencyMetadata;
      }());
      $__export("CompileDiDependencyMetadata", CompileDiDependencyMetadata);
      CompileProviderMetadata = (function() {
        function CompileProviderMetadata(_a) {
          var token = _a.token,
              useClass = _a.useClass,
              useValue = _a.useValue,
              useExisting = _a.useExisting,
              useFactory = _a.useFactory,
              deps = _a.deps,
              multi = _a.multi;
          this.token = token;
          this.useClass = useClass;
          this.useValue = useValue;
          this.useExisting = useExisting;
          this.useFactory = useFactory;
          this.deps = deps || null;
          this.multi = !!multi;
        }
        return CompileProviderMetadata;
      }());
      $__export("CompileProviderMetadata", CompileProviderMetadata);
      CompileFactoryMetadata = (function(_super) {
        __extends(CompileFactoryMetadata, _super);
        function CompileFactoryMetadata(_a) {
          var reference = _a.reference,
              name = _a.name,
              moduleUrl = _a.moduleUrl,
              prefix = _a.prefix,
              diDeps = _a.diDeps,
              value = _a.value;
          _super.call(this, {
            reference: reference,
            name: name,
            prefix: prefix,
            moduleUrl: moduleUrl,
            value: value
          });
          this.diDeps = _normalizeArray(diDeps);
        }
        return CompileFactoryMetadata;
      }(CompileIdentifierMetadata));
      $__export("CompileFactoryMetadata", CompileFactoryMetadata);
      CompileTokenMetadata = (function() {
        function CompileTokenMetadata(_a) {
          var value = _a.value,
              identifier = _a.identifier,
              identifierIsInstance = _a.identifierIsInstance;
          this.value = value;
          this.identifier = identifier;
          this.identifierIsInstance = !!identifierIsInstance;
        }
        Object.defineProperty(CompileTokenMetadata.prototype, "reference", {
          get: function() {
            if (isPresent(this.identifier)) {
              return this.identifier.reference;
            } else {
              return this.value;
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(CompileTokenMetadata.prototype, "name", {
          get: function() {
            return isPresent(this.value) ? sanitizeIdentifier(this.value) : this.identifier.name;
          },
          enumerable: true,
          configurable: true
        });
        return CompileTokenMetadata;
      }());
      $__export("CompileTokenMetadata", CompileTokenMetadata);
      CompileTypeMetadata = (function(_super) {
        __extends(CompileTypeMetadata, _super);
        function CompileTypeMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              reference = _b.reference,
              name = _b.name,
              moduleUrl = _b.moduleUrl,
              prefix = _b.prefix,
              isHost = _b.isHost,
              value = _b.value,
              diDeps = _b.diDeps,
              lifecycleHooks = _b.lifecycleHooks;
          _super.call(this, {
            reference: reference,
            name: name,
            moduleUrl: moduleUrl,
            prefix: prefix,
            value: value
          });
          this.isHost = !!isHost;
          this.diDeps = _normalizeArray(diDeps);
          this.lifecycleHooks = _normalizeArray(lifecycleHooks);
        }
        return CompileTypeMetadata;
      }(CompileIdentifierMetadata));
      $__export("CompileTypeMetadata", CompileTypeMetadata);
      CompileQueryMetadata = (function() {
        function CompileQueryMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              selectors = _b.selectors,
              descendants = _b.descendants,
              first = _b.first,
              propertyName = _b.propertyName,
              read = _b.read;
          this.selectors = selectors;
          this.descendants = !!descendants;
          this.first = !!first;
          this.propertyName = propertyName;
          this.read = read;
        }
        return CompileQueryMetadata;
      }());
      $__export("CompileQueryMetadata", CompileQueryMetadata);
      CompileStylesheetMetadata = (function() {
        function CompileStylesheetMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              moduleUrl = _b.moduleUrl,
              styles = _b.styles,
              styleUrls = _b.styleUrls;
          this.moduleUrl = moduleUrl;
          this.styles = _normalizeArray(styles);
          this.styleUrls = _normalizeArray(styleUrls);
        }
        return CompileStylesheetMetadata;
      }());
      $__export("CompileStylesheetMetadata", CompileStylesheetMetadata);
      CompileTemplateMetadata = (function() {
        function CompileTemplateMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              encapsulation = _b.encapsulation,
              template = _b.template,
              templateUrl = _b.templateUrl,
              styles = _b.styles,
              styleUrls = _b.styleUrls,
              externalStylesheets = _b.externalStylesheets,
              animations = _b.animations,
              ngContentSelectors = _b.ngContentSelectors,
              interpolation = _b.interpolation;
          this.encapsulation = encapsulation;
          this.template = template;
          this.templateUrl = templateUrl;
          this.styles = _normalizeArray(styles);
          this.styleUrls = _normalizeArray(styleUrls);
          this.externalStylesheets = _normalizeArray(externalStylesheets);
          this.animations = animations ? ListWrapper.flatten(animations) : [];
          this.ngContentSelectors = ngContentSelectors || [];
          if (interpolation && interpolation.length != 2) {
            throw new Error("'interpolation' should have a start and an end symbol.");
          }
          this.interpolation = interpolation;
        }
        return CompileTemplateMetadata;
      }());
      $__export("CompileTemplateMetadata", CompileTemplateMetadata);
      CompileDirectiveMetadata = (function() {
        function CompileDirectiveMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              type = _b.type,
              isComponent = _b.isComponent,
              selector = _b.selector,
              exportAs = _b.exportAs,
              changeDetection = _b.changeDetection,
              inputs = _b.inputs,
              outputs = _b.outputs,
              hostListeners = _b.hostListeners,
              hostProperties = _b.hostProperties,
              hostAttributes = _b.hostAttributes,
              providers = _b.providers,
              viewProviders = _b.viewProviders,
              queries = _b.queries,
              viewQueries = _b.viewQueries,
              entryComponents = _b.entryComponents,
              template = _b.template;
          this.type = type;
          this.isComponent = isComponent;
          this.selector = selector;
          this.exportAs = exportAs;
          this.changeDetection = changeDetection;
          this.inputs = inputs;
          this.outputs = outputs;
          this.hostListeners = hostListeners;
          this.hostProperties = hostProperties;
          this.hostAttributes = hostAttributes;
          this.providers = _normalizeArray(providers);
          this.viewProviders = _normalizeArray(viewProviders);
          this.queries = _normalizeArray(queries);
          this.viewQueries = _normalizeArray(viewQueries);
          this.entryComponents = _normalizeArray(entryComponents);
          this.template = template;
        }
        CompileDirectiveMetadata.create = function(_a) {
          var _b = _a === void 0 ? {} : _a,
              type = _b.type,
              isComponent = _b.isComponent,
              selector = _b.selector,
              exportAs = _b.exportAs,
              changeDetection = _b.changeDetection,
              inputs = _b.inputs,
              outputs = _b.outputs,
              host = _b.host,
              providers = _b.providers,
              viewProviders = _b.viewProviders,
              queries = _b.queries,
              viewQueries = _b.viewQueries,
              entryComponents = _b.entryComponents,
              template = _b.template;
          var hostListeners = {};
          var hostProperties = {};
          var hostAttributes = {};
          if (isPresent(host)) {
            Object.keys(host).forEach(function(key) {
              var value = host[key];
              var matches = key.match(HOST_REG_EXP);
              if (matches === null) {
                hostAttributes[key] = value;
              } else if (isPresent(matches[1])) {
                hostProperties[matches[1]] = value;
              } else if (isPresent(matches[2])) {
                hostListeners[matches[2]] = value;
              }
            });
          }
          var inputsMap = {};
          if (isPresent(inputs)) {
            inputs.forEach(function(bindConfig) {
              var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
              inputsMap[parts[0]] = parts[1];
            });
          }
          var outputsMap = {};
          if (isPresent(outputs)) {
            outputs.forEach(function(bindConfig) {
              var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
              outputsMap[parts[0]] = parts[1];
            });
          }
          return new CompileDirectiveMetadata({
            type: type,
            isComponent: !!isComponent,
            selector: selector,
            exportAs: exportAs,
            changeDetection: changeDetection,
            inputs: inputsMap,
            outputs: outputsMap,
            hostListeners: hostListeners,
            hostProperties: hostProperties,
            hostAttributes: hostAttributes,
            providers: providers,
            viewProviders: viewProviders,
            queries: queries,
            viewQueries: viewQueries,
            entryComponents: entryComponents,
            template: template
          });
        };
        Object.defineProperty(CompileDirectiveMetadata.prototype, "identifier", {
          get: function() {
            return this.type;
          },
          enumerable: true,
          configurable: true
        });
        return CompileDirectiveMetadata;
      }());
      $__export("CompileDirectiveMetadata", CompileDirectiveMetadata);
      CompilePipeMetadata = (function() {
        function CompilePipeMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              type = _b.type,
              name = _b.name,
              pure = _b.pure;
          this.type = type;
          this.name = name;
          this.pure = !!pure;
        }
        Object.defineProperty(CompilePipeMetadata.prototype, "identifier", {
          get: function() {
            return this.type;
          },
          enumerable: true,
          configurable: true
        });
        return CompilePipeMetadata;
      }());
      $__export("CompilePipeMetadata", CompilePipeMetadata);
      CompileNgModuleMetadata = (function() {
        function CompileNgModuleMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              type = _b.type,
              providers = _b.providers,
              declaredDirectives = _b.declaredDirectives,
              exportedDirectives = _b.exportedDirectives,
              declaredPipes = _b.declaredPipes,
              exportedPipes = _b.exportedPipes,
              entryComponents = _b.entryComponents,
              bootstrapComponents = _b.bootstrapComponents,
              importedModules = _b.importedModules,
              exportedModules = _b.exportedModules,
              schemas = _b.schemas,
              transitiveModule = _b.transitiveModule,
              id = _b.id;
          this.type = type;
          this.declaredDirectives = _normalizeArray(declaredDirectives);
          this.exportedDirectives = _normalizeArray(exportedDirectives);
          this.declaredPipes = _normalizeArray(declaredPipes);
          this.exportedPipes = _normalizeArray(exportedPipes);
          this.providers = _normalizeArray(providers);
          this.entryComponents = _normalizeArray(entryComponents);
          this.bootstrapComponents = _normalizeArray(bootstrapComponents);
          this.importedModules = _normalizeArray(importedModules);
          this.exportedModules = _normalizeArray(exportedModules);
          this.schemas = _normalizeArray(schemas);
          this.id = id;
          this.transitiveModule = transitiveModule;
        }
        Object.defineProperty(CompileNgModuleMetadata.prototype, "identifier", {
          get: function() {
            return this.type;
          },
          enumerable: true,
          configurable: true
        });
        return CompileNgModuleMetadata;
      }());
      $__export("CompileNgModuleMetadata", CompileNgModuleMetadata);
      TransitiveCompileNgModuleMetadata = (function() {
        function TransitiveCompileNgModuleMetadata(modules, providers, entryComponents, directives, pipes) {
          var _this = this;
          this.modules = modules;
          this.providers = providers;
          this.entryComponents = entryComponents;
          this.directives = directives;
          this.pipes = pipes;
          this.directivesSet = new Set();
          this.pipesSet = new Set();
          directives.forEach(function(dir) {
            return _this.directivesSet.add(dir.type.reference);
          });
          pipes.forEach(function(pipe) {
            return _this.pipesSet.add(pipe.type.reference);
          });
        }
        return TransitiveCompileNgModuleMetadata;
      }());
      $__export("TransitiveCompileNgModuleMetadata", TransitiveCompileNgModuleMetadata);
      ProviderMeta = (function() {
        function ProviderMeta(token, _a) {
          var useClass = _a.useClass,
              useValue = _a.useValue,
              useExisting = _a.useExisting,
              useFactory = _a.useFactory,
              deps = _a.deps,
              multi = _a.multi;
          this.token = token;
          this.useClass = useClass;
          this.useValue = useValue;
          this.useExisting = useExisting;
          this.useFactory = useFactory;
          this.dependencies = deps;
          this.multi = !!multi;
        }
        return ProviderMeta;
      }());
      $__export("ProviderMeta", ProviderMeta);
    }
  };
});

$__System.register("17", ["c"], function($__export) {
  "use strict";
  var r,
      isDefaultChangeDetectionStrategy,
      ChangeDetectorStatus,
      LifecycleHooks,
      LIFECYCLE_HOOKS_VALUES,
      ReflectorReader,
      AppElement,
      CodegenComponentFactoryResolver,
      AppView,
      DebugAppView,
      NgModuleInjector,
      registerModuleFactory,
      ViewType,
      view_utils,
      DebugContext,
      StaticNodeDebugInfo,
      devModeEqual,
      UNINITIALIZED,
      ValueUnwrapper,
      TemplateRef_,
      RenderDebugInfo,
      Console,
      reflector,
      Reflector,
      ReflectionCapabilities,
      NoOpAnimationPlayer,
      AnimationPlayer,
      AnimationSequencePlayer,
      AnimationGroupPlayer,
      AnimationKeyframe,
      AnimationStyles,
      ANY_STATE,
      DEFAULT_STATE,
      EMPTY_STATE,
      FILL_STYLE_FLAG,
      prepareFinalAnimationStyles,
      balanceAnimationKeyframes,
      clearStyles,
      collectAndResolveStyles,
      renderStyles,
      ViewMetadata,
      ComponentStillLoadingError,
      AnimationTransition;
  return {
    setters: [function($__m) {
      r = $__m.__core_private__;
    }],
    execute: function() {
      isDefaultChangeDetectionStrategy = r.isDefaultChangeDetectionStrategy;
      $__export("isDefaultChangeDetectionStrategy", isDefaultChangeDetectionStrategy);
      ChangeDetectorStatus = r.ChangeDetectorStatus;
      $__export("ChangeDetectorStatus", ChangeDetectorStatus);
      LifecycleHooks = r.LifecycleHooks;
      $__export("LifecycleHooks", LifecycleHooks);
      LIFECYCLE_HOOKS_VALUES = r.LIFECYCLE_HOOKS_VALUES;
      $__export("LIFECYCLE_HOOKS_VALUES", LIFECYCLE_HOOKS_VALUES);
      ReflectorReader = r.ReflectorReader;
      $__export("ReflectorReader", ReflectorReader);
      AppElement = r.AppElement;
      $__export("AppElement", AppElement);
      CodegenComponentFactoryResolver = r.CodegenComponentFactoryResolver;
      $__export("CodegenComponentFactoryResolver", CodegenComponentFactoryResolver);
      AppView = r.AppView;
      $__export("AppView", AppView);
      DebugAppView = r.DebugAppView;
      $__export("DebugAppView", DebugAppView);
      NgModuleInjector = r.NgModuleInjector;
      $__export("NgModuleInjector", NgModuleInjector);
      registerModuleFactory = r.registerModuleFactory;
      $__export("registerModuleFactory", registerModuleFactory);
      ViewType = r.ViewType;
      $__export("ViewType", ViewType);
      view_utils = r.view_utils;
      $__export("view_utils", view_utils);
      DebugContext = r.DebugContext;
      $__export("DebugContext", DebugContext);
      StaticNodeDebugInfo = r.StaticNodeDebugInfo;
      $__export("StaticNodeDebugInfo", StaticNodeDebugInfo);
      devModeEqual = r.devModeEqual;
      $__export("devModeEqual", devModeEqual);
      UNINITIALIZED = r.UNINITIALIZED;
      $__export("UNINITIALIZED", UNINITIALIZED);
      ValueUnwrapper = r.ValueUnwrapper;
      $__export("ValueUnwrapper", ValueUnwrapper);
      TemplateRef_ = r.TemplateRef_;
      $__export("TemplateRef_", TemplateRef_);
      RenderDebugInfo = r.RenderDebugInfo;
      $__export("RenderDebugInfo", RenderDebugInfo);
      Console = r.Console;
      $__export("Console", Console);
      reflector = r.reflector;
      $__export("reflector", reflector);
      Reflector = r.Reflector;
      $__export("Reflector", Reflector);
      ReflectionCapabilities = r.ReflectionCapabilities;
      $__export("ReflectionCapabilities", ReflectionCapabilities);
      NoOpAnimationPlayer = r.NoOpAnimationPlayer;
      $__export("NoOpAnimationPlayer", NoOpAnimationPlayer);
      AnimationPlayer = r.AnimationPlayer;
      $__export("AnimationPlayer", AnimationPlayer);
      AnimationSequencePlayer = r.AnimationSequencePlayer;
      $__export("AnimationSequencePlayer", AnimationSequencePlayer);
      AnimationGroupPlayer = r.AnimationGroupPlayer;
      $__export("AnimationGroupPlayer", AnimationGroupPlayer);
      AnimationKeyframe = r.AnimationKeyframe;
      $__export("AnimationKeyframe", AnimationKeyframe);
      AnimationStyles = r.AnimationStyles;
      $__export("AnimationStyles", AnimationStyles);
      ANY_STATE = r.ANY_STATE;
      $__export("ANY_STATE", ANY_STATE);
      DEFAULT_STATE = r.DEFAULT_STATE;
      $__export("DEFAULT_STATE", DEFAULT_STATE);
      EMPTY_STATE = r.EMPTY_STATE;
      $__export("EMPTY_STATE", EMPTY_STATE);
      FILL_STYLE_FLAG = r.FILL_STYLE_FLAG;
      $__export("FILL_STYLE_FLAG", FILL_STYLE_FLAG);
      prepareFinalAnimationStyles = r.prepareFinalAnimationStyles;
      $__export("prepareFinalAnimationStyles", prepareFinalAnimationStyles);
      balanceAnimationKeyframes = r.balanceAnimationKeyframes;
      $__export("balanceAnimationKeyframes", balanceAnimationKeyframes);
      clearStyles = r.clearStyles;
      $__export("clearStyles", clearStyles);
      collectAndResolveStyles = r.collectAndResolveStyles;
      $__export("collectAndResolveStyles", collectAndResolveStyles);
      renderStyles = r.renderStyles;
      $__export("renderStyles", renderStyles);
      ViewMetadata = r.ViewMetadata;
      $__export("ViewMetadata", ViewMetadata);
      ComponentStillLoadingError = r.ComponentStillLoadingError;
      $__export("ComponentStillLoadingError", ComponentStillLoadingError);
      AnimationTransition = r.AnimationTransition;
      $__export("AnimationTransition", AnimationTransition);
    }
  };
});

$__System.register("13", ["c", "11", "17"], function($__export) {
  "use strict";
  var ANALYZE_FOR_ENTRY_COMPONENTS,
      ChangeDetectionStrategy,
      ChangeDetectorRef,
      ComponentFactory,
      ComponentFactoryResolver,
      ElementRef,
      Injector,
      LOCALE_ID,
      NgModuleFactory,
      QueryList,
      RenderComponentType,
      Renderer,
      SecurityContext,
      SimpleChange,
      TRANSLATIONS_FORMAT,
      TemplateRef,
      ViewContainerRef,
      ViewEncapsulation,
      CompileIdentifierMetadata,
      CompileTokenMetadata,
      AnimationGroupPlayer,
      AnimationKeyframe,
      AnimationSequencePlayer,
      AnimationStyles,
      AnimationTransition,
      AppElement,
      AppView,
      ChangeDetectorStatus,
      CodegenComponentFactoryResolver,
      DebugAppView,
      DebugContext,
      NgModuleInjector,
      NoOpAnimationPlayer,
      StaticNodeDebugInfo,
      TemplateRef_,
      UNINITIALIZED,
      ValueUnwrapper,
      ViewType,
      balanceAnimationKeyframes,
      clearStyles,
      collectAndResolveStyles,
      devModeEqual,
      prepareFinalAnimationStyles,
      reflector,
      registerModuleFactory,
      renderStyles,
      view_utils,
      APP_VIEW_MODULE_URL,
      VIEW_UTILS_MODULE_URL,
      CD_MODULE_URL,
      ANIMATION_STYLE_UTIL_ASSET_URL,
      Identifiers;
  function assetUrl(pkg, path, type) {
    if (path === void 0) {
      path = null;
    }
    if (type === void 0) {
      type = 'src';
    }
    if (path == null) {
      return "asset:@angular/lib/" + pkg + "/index";
    } else {
      return "asset:@angular/lib/" + pkg + "/src/" + path;
    }
  }
  function resolveIdentifier(identifier) {
    return new CompileIdentifierMetadata({
      name: identifier.name,
      moduleUrl: identifier.moduleUrl,
      reference: reflector.resolveIdentifier(identifier.name, identifier.moduleUrl, identifier.runtime)
    });
  }
  function identifierToken(identifier) {
    return new CompileTokenMetadata({identifier: identifier});
  }
  function resolveIdentifierToken(identifier) {
    return identifierToken(resolveIdentifier(identifier));
  }
  function resolveEnumIdentifier(enumType, name) {
    var resolvedEnum = reflector.resolveEnum(enumType.reference, name);
    return new CompileIdentifierMetadata({
      name: enumType.name + "." + name,
      moduleUrl: enumType.moduleUrl,
      reference: resolvedEnum
    });
  }
  $__export("assetUrl", assetUrl);
  $__export("resolveIdentifier", resolveIdentifier);
  $__export("identifierToken", identifierToken);
  $__export("resolveIdentifierToken", resolveIdentifierToken);
  $__export("resolveEnumIdentifier", resolveEnumIdentifier);
  return {
    setters: [function($__m) {
      ANALYZE_FOR_ENTRY_COMPONENTS = $__m.ANALYZE_FOR_ENTRY_COMPONENTS;
      ChangeDetectionStrategy = $__m.ChangeDetectionStrategy;
      ChangeDetectorRef = $__m.ChangeDetectorRef;
      ComponentFactory = $__m.ComponentFactory;
      ComponentFactoryResolver = $__m.ComponentFactoryResolver;
      ElementRef = $__m.ElementRef;
      Injector = $__m.Injector;
      LOCALE_ID = $__m.LOCALE_ID;
      NgModuleFactory = $__m.NgModuleFactory;
      QueryList = $__m.QueryList;
      RenderComponentType = $__m.RenderComponentType;
      Renderer = $__m.Renderer;
      SecurityContext = $__m.SecurityContext;
      SimpleChange = $__m.SimpleChange;
      TRANSLATIONS_FORMAT = $__m.TRANSLATIONS_FORMAT;
      TemplateRef = $__m.TemplateRef;
      ViewContainerRef = $__m.ViewContainerRef;
      ViewEncapsulation = $__m.ViewEncapsulation;
    }, function($__m) {
      CompileIdentifierMetadata = $__m.CompileIdentifierMetadata;
      CompileTokenMetadata = $__m.CompileTokenMetadata;
    }, function($__m) {
      AnimationGroupPlayer = $__m.AnimationGroupPlayer;
      AnimationKeyframe = $__m.AnimationKeyframe;
      AnimationSequencePlayer = $__m.AnimationSequencePlayer;
      AnimationStyles = $__m.AnimationStyles;
      AnimationTransition = $__m.AnimationTransition;
      AppElement = $__m.AppElement;
      AppView = $__m.AppView;
      ChangeDetectorStatus = $__m.ChangeDetectorStatus;
      CodegenComponentFactoryResolver = $__m.CodegenComponentFactoryResolver;
      DebugAppView = $__m.DebugAppView;
      DebugContext = $__m.DebugContext;
      NgModuleInjector = $__m.NgModuleInjector;
      NoOpAnimationPlayer = $__m.NoOpAnimationPlayer;
      StaticNodeDebugInfo = $__m.StaticNodeDebugInfo;
      TemplateRef_ = $__m.TemplateRef_;
      UNINITIALIZED = $__m.UNINITIALIZED;
      ValueUnwrapper = $__m.ValueUnwrapper;
      ViewType = $__m.ViewType;
      balanceAnimationKeyframes = $__m.balanceAnimationKeyframes;
      clearStyles = $__m.clearStyles;
      collectAndResolveStyles = $__m.collectAndResolveStyles;
      devModeEqual = $__m.devModeEqual;
      prepareFinalAnimationStyles = $__m.prepareFinalAnimationStyles;
      reflector = $__m.reflector;
      registerModuleFactory = $__m.registerModuleFactory;
      renderStyles = $__m.renderStyles;
      view_utils = $__m.view_utils;
    }],
    execute: function() {
      APP_VIEW_MODULE_URL = assetUrl('core', 'linker/view');
      VIEW_UTILS_MODULE_URL = assetUrl('core', 'linker/view_utils');
      CD_MODULE_URL = assetUrl('core', 'change_detection/change_detection');
      ANIMATION_STYLE_UTIL_ASSET_URL = assetUrl('core', 'animation/animation_style_util');
      Identifiers = (function() {
        function Identifiers() {}
        Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {
          name: 'ANALYZE_FOR_ENTRY_COMPONENTS',
          moduleUrl: assetUrl('core', 'metadata/di'),
          runtime: ANALYZE_FOR_ENTRY_COMPONENTS
        };
        Identifiers.ViewUtils = {
          name: 'ViewUtils',
          moduleUrl: assetUrl('core', 'linker/view_utils'),
          runtime: view_utils.ViewUtils
        };
        Identifiers.AppView = {
          name: 'AppView',
          moduleUrl: APP_VIEW_MODULE_URL,
          runtime: AppView
        };
        Identifiers.DebugAppView = {
          name: 'DebugAppView',
          moduleUrl: APP_VIEW_MODULE_URL,
          runtime: DebugAppView
        };
        Identifiers.AppElement = {
          name: 'AppElement',
          moduleUrl: assetUrl('core', 'linker/element'),
          runtime: AppElement
        };
        Identifiers.ElementRef = {
          name: 'ElementRef',
          moduleUrl: assetUrl('core', 'linker/element_ref'),
          runtime: ElementRef
        };
        Identifiers.ViewContainerRef = {
          name: 'ViewContainerRef',
          moduleUrl: assetUrl('core', 'linker/view_container_ref'),
          runtime: ViewContainerRef
        };
        Identifiers.ChangeDetectorRef = {
          name: 'ChangeDetectorRef',
          moduleUrl: assetUrl('core', 'change_detection/change_detector_ref'),
          runtime: ChangeDetectorRef
        };
        Identifiers.RenderComponentType = {
          name: 'RenderComponentType',
          moduleUrl: assetUrl('core', 'render/api'),
          runtime: RenderComponentType
        };
        Identifiers.QueryList = {
          name: 'QueryList',
          moduleUrl: assetUrl('core', 'linker/query_list'),
          runtime: QueryList
        };
        Identifiers.TemplateRef = {
          name: 'TemplateRef',
          moduleUrl: assetUrl('core', 'linker/template_ref'),
          runtime: TemplateRef
        };
        Identifiers.TemplateRef_ = {
          name: 'TemplateRef_',
          moduleUrl: assetUrl('core', 'linker/template_ref'),
          runtime: TemplateRef_
        };
        Identifiers.CodegenComponentFactoryResolver = {
          name: 'CodegenComponentFactoryResolver',
          moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
          runtime: CodegenComponentFactoryResolver
        };
        Identifiers.ComponentFactoryResolver = {
          name: 'ComponentFactoryResolver',
          moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
          runtime: ComponentFactoryResolver
        };
        Identifiers.ComponentFactory = {
          name: 'ComponentFactory',
          runtime: ComponentFactory,
          moduleUrl: assetUrl('core', 'linker/component_factory')
        };
        Identifiers.NgModuleFactory = {
          name: 'NgModuleFactory',
          runtime: NgModuleFactory,
          moduleUrl: assetUrl('core', 'linker/ng_module_factory')
        };
        Identifiers.NgModuleInjector = {
          name: 'NgModuleInjector',
          runtime: NgModuleInjector,
          moduleUrl: assetUrl('core', 'linker/ng_module_factory')
        };
        Identifiers.RegisterModuleFactoryFn = {
          name: 'registerModuleFactory',
          runtime: registerModuleFactory,
          moduleUrl: assetUrl('core', 'linker/ng_module_factory_loader')
        };
        Identifiers.ValueUnwrapper = {
          name: 'ValueUnwrapper',
          moduleUrl: CD_MODULE_URL,
          runtime: ValueUnwrapper
        };
        Identifiers.Injector = {
          name: 'Injector',
          moduleUrl: assetUrl('core', 'di/injector'),
          runtime: Injector
        };
        Identifiers.ViewEncapsulation = {
          name: 'ViewEncapsulation',
          moduleUrl: assetUrl('core', 'metadata/view'),
          runtime: ViewEncapsulation
        };
        Identifiers.ViewType = {
          name: 'ViewType',
          moduleUrl: assetUrl('core', 'linker/view_type'),
          runtime: ViewType
        };
        Identifiers.ChangeDetectionStrategy = {
          name: 'ChangeDetectionStrategy',
          moduleUrl: CD_MODULE_URL,
          runtime: ChangeDetectionStrategy
        };
        Identifiers.StaticNodeDebugInfo = {
          name: 'StaticNodeDebugInfo',
          moduleUrl: assetUrl('core', 'linker/debug_context'),
          runtime: StaticNodeDebugInfo
        };
        Identifiers.DebugContext = {
          name: 'DebugContext',
          moduleUrl: assetUrl('core', 'linker/debug_context'),
          runtime: DebugContext
        };
        Identifiers.Renderer = {
          name: 'Renderer',
          moduleUrl: assetUrl('core', 'render/api'),
          runtime: Renderer
        };
        Identifiers.SimpleChange = {
          name: 'SimpleChange',
          moduleUrl: CD_MODULE_URL,
          runtime: SimpleChange
        };
        Identifiers.UNINITIALIZED = {
          name: 'UNINITIALIZED',
          moduleUrl: CD_MODULE_URL,
          runtime: UNINITIALIZED
        };
        Identifiers.ChangeDetectorStatus = {
          name: 'ChangeDetectorStatus',
          moduleUrl: CD_MODULE_URL,
          runtime: ChangeDetectorStatus
        };
        Identifiers.checkBinding = {
          name: 'checkBinding',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.checkBinding
        };
        Identifiers.flattenNestedViewRenderNodes = {
          name: 'flattenNestedViewRenderNodes',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.flattenNestedViewRenderNodes
        };
        Identifiers.devModeEqual = {
          name: 'devModeEqual',
          moduleUrl: CD_MODULE_URL,
          runtime: devModeEqual
        };
        Identifiers.interpolate = {
          name: 'interpolate',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.interpolate
        };
        Identifiers.castByValue = {
          name: 'castByValue',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.castByValue
        };
        Identifiers.EMPTY_ARRAY = {
          name: 'EMPTY_ARRAY',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.EMPTY_ARRAY
        };
        Identifiers.EMPTY_MAP = {
          name: 'EMPTY_MAP',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.EMPTY_MAP
        };
        Identifiers.createRenderElement = {
          name: 'createRenderElement',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.createRenderElement
        };
        Identifiers.selectOrCreateRenderHostElement = {
          name: 'selectOrCreateRenderHostElement',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.selectOrCreateRenderHostElement
        };
        Identifiers.pureProxies = [null, {
          name: 'pureProxy1',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy1
        }, {
          name: 'pureProxy2',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy2
        }, {
          name: 'pureProxy3',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy3
        }, {
          name: 'pureProxy4',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy4
        }, {
          name: 'pureProxy5',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy5
        }, {
          name: 'pureProxy6',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy6
        }, {
          name: 'pureProxy7',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy7
        }, {
          name: 'pureProxy8',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy8
        }, {
          name: 'pureProxy9',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy9
        }, {
          name: 'pureProxy10',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.pureProxy10
        }];
        Identifiers.SecurityContext = {
          name: 'SecurityContext',
          moduleUrl: assetUrl('core', 'security'),
          runtime: SecurityContext
        };
        Identifiers.AnimationKeyframe = {
          name: 'AnimationKeyframe',
          moduleUrl: assetUrl('core', 'animation/animation_keyframe'),
          runtime: AnimationKeyframe
        };
        Identifiers.AnimationStyles = {
          name: 'AnimationStyles',
          moduleUrl: assetUrl('core', 'animation/animation_styles'),
          runtime: AnimationStyles
        };
        Identifiers.NoOpAnimationPlayer = {
          name: 'NoOpAnimationPlayer',
          moduleUrl: assetUrl('core', 'animation/animation_player'),
          runtime: NoOpAnimationPlayer
        };
        Identifiers.AnimationGroupPlayer = {
          name: 'AnimationGroupPlayer',
          moduleUrl: assetUrl('core', 'animation/animation_group_player'),
          runtime: AnimationGroupPlayer
        };
        Identifiers.AnimationSequencePlayer = {
          name: 'AnimationSequencePlayer',
          moduleUrl: assetUrl('core', 'animation/animation_sequence_player'),
          runtime: AnimationSequencePlayer
        };
        Identifiers.prepareFinalAnimationStyles = {
          name: 'prepareFinalAnimationStyles',
          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
          runtime: prepareFinalAnimationStyles
        };
        Identifiers.balanceAnimationKeyframes = {
          name: 'balanceAnimationKeyframes',
          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
          runtime: balanceAnimationKeyframes
        };
        Identifiers.clearStyles = {
          name: 'clearStyles',
          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
          runtime: clearStyles
        };
        Identifiers.renderStyles = {
          name: 'renderStyles',
          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
          runtime: renderStyles
        };
        Identifiers.collectAndResolveStyles = {
          name: 'collectAndResolveStyles',
          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
          runtime: collectAndResolveStyles
        };
        Identifiers.LOCALE_ID = {
          name: 'LOCALE_ID',
          moduleUrl: assetUrl('core', 'i18n/tokens'),
          runtime: LOCALE_ID
        };
        Identifiers.TRANSLATIONS_FORMAT = {
          name: 'TRANSLATIONS_FORMAT',
          moduleUrl: assetUrl('core', 'i18n/tokens'),
          runtime: TRANSLATIONS_FORMAT
        };
        Identifiers.setBindingDebugInfo = {
          name: 'setBindingDebugInfo',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.setBindingDebugInfo
        };
        Identifiers.setBindingDebugInfoForChanges = {
          name: 'setBindingDebugInfoForChanges',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.setBindingDebugInfoForChanges
        };
        Identifiers.AnimationTransition = {
          name: 'AnimationTransition',
          moduleUrl: assetUrl('core', 'animation/animation_transition'),
          runtime: AnimationTransition
        };
        Identifiers.InlineArray = {
          name: 'InlineArray',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: null
        };
        Identifiers.inlineArrays = [{
          name: 'InlineArray2',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.InlineArray2
        }, {
          name: 'InlineArray2',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.InlineArray2
        }, {
          name: 'InlineArray4',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.InlineArray4
        }, {
          name: 'InlineArray8',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.InlineArray8
        }, {
          name: 'InlineArray16',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.InlineArray16
        }];
        Identifiers.EMPTY_INLINE_ARRAY = {
          name: 'EMPTY_INLINE_ARRAY',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.EMPTY_INLINE_ARRAY
        };
        Identifiers.InlineArrayDynamic = {
          name: 'InlineArrayDynamic',
          moduleUrl: VIEW_UTILS_MODULE_URL,
          runtime: view_utils.InlineArrayDynamic
        };
        return Identifiers;
      }());
      $__export("Identifiers", Identifiers);
    }
  };
});

$__System.register("55", ["16", "13", "14"], function($__export) {
  "use strict";
  var isPresent,
      Identifiers,
      resolveEnumIdentifier,
      resolveIdentifier,
      o;
  function createDiTokenExpression(token) {
    if (isPresent(token.value)) {
      return o.literal(token.value);
    } else if (token.identifierIsInstance) {
      return o.importExpr(token.identifier).instantiate([], o.importType(token.identifier, [], [o.TypeModifier.Const]));
    } else {
      return o.importExpr(token.identifier);
    }
  }
  function createInlineArray(values) {
    if (values.length === 0) {
      return o.importExpr(resolveIdentifier(Identifiers.EMPTY_INLINE_ARRAY));
    }
    var log2 = Math.log(values.length) / Math.log(2);
    var index = Math.ceil(log2);
    var identifierSpec = index < Identifiers.inlineArrays.length ? Identifiers.inlineArrays[index] : Identifiers.InlineArrayDynamic;
    var identifier = resolveIdentifier(identifierSpec);
    return o.importExpr(identifier).instantiate([o.literal(values.length)].concat(values));
  }
  function createPureProxy(fn, argCount, pureProxyProp, builder) {
    builder.fields.push(new o.ClassField(pureProxyProp.name, null));
    var pureProxyId = argCount < Identifiers.pureProxies.length ? Identifiers.pureProxies[argCount] : null;
    if (!pureProxyId) {
      throw new Error("Unsupported number of argument for pure functions: " + argCount);
    }
    builder.ctorStmts.push(o.THIS_EXPR.prop(pureProxyProp.name).set(o.importExpr(resolveIdentifier(pureProxyId)).callFn([fn])).toStmt());
  }
  function createEnumExpression(enumType, enumValue) {
    var enumName = Object.keys(enumType.runtime).find(function(propName) {
      return enumType.runtime[propName] === enumValue;
    });
    if (!enumName) {
      throw new Error("Unknown enum value " + enumValue + " in " + enumType.name);
    }
    return o.importExpr(resolveEnumIdentifier(resolveIdentifier(enumType), enumName));
  }
  $__export("createDiTokenExpression", createDiTokenExpression);
  $__export("createInlineArray", createInlineArray);
  $__export("createPureProxy", createPureProxy);
  $__export("createEnumExpression", createEnumExpression);
  return {
    setters: [function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      Identifiers = $__m.Identifiers;
      resolveEnumIdentifier = $__m.resolveEnumIdentifier;
      resolveIdentifier = $__m.resolveIdentifier;
    }, function($__m) {
      o = $__m;
    }],
    execute: function() {}
  };
});

$__System.register("16", [], function($__export) {
  "use strict";
  var globalScope,
      _global,
      STRING_MAP_PROTO,
      NumberWrapper,
      _symbolIterator;
  function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
  }
  function getTypeNameForDebugging(type) {
    return type['name'] || (typeof type === 'undefined' ? 'undefined' : $traceurRuntime.typeof(type));
  }
  function isPresent(obj) {
    return obj != null;
  }
  function isBlank(obj) {
    return obj == null;
  }
  function isStrictStringMap(obj) {
    return (typeof obj === 'undefined' ? 'undefined' : $traceurRuntime.typeof(obj)) === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
  }
  function isDate(obj) {
    return obj instanceof Date && !isNaN(obj.valueOf());
  }
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token === undefined || token === null) {
      return '' + token;
    }
    if (token.overriddenName) {
      return token.overriddenName;
    }
    if (token.name) {
      return token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
  }
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || (typeof o === 'undefined' ? 'undefined' : $traceurRuntime.typeof(o)) === 'object');
  }
  function print(obj) {
    console.log(obj);
  }
  function warn(obj) {
    console.warn(obj);
  }
  function setValueOnPath(global, path, value) {
    var parts = path.split('.');
    var obj = global;
    while (parts.length > 1) {
      var name = parts.shift();
      if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
        obj = obj[name];
      } else {
        obj = obj[name] = {};
      }
    }
    if (obj === undefined || obj === null) {
      obj = {};
    }
    obj[parts.shift()] = value;
  }
  function getSymbolIterator() {
    if (!_symbolIterator) {
      if (globalScope.Symbol && Symbol.iterator) {
        _symbolIterator = Symbol.iterator;
      } else {
        var keys = Object.getOwnPropertyNames(Map.prototype);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
            _symbolIterator = key;
          }
        }
      }
    }
    return _symbolIterator;
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  function escapeRegExp(s) {
    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }
  $__export("scheduleMicroTask", scheduleMicroTask);
  $__export("getTypeNameForDebugging", getTypeNameForDebugging);
  $__export("isPresent", isPresent);
  $__export("isBlank", isBlank);
  $__export("isStrictStringMap", isStrictStringMap);
  $__export("isDate", isDate);
  $__export("stringify", stringify);
  $__export("looseIdentical", looseIdentical);
  $__export("isJsObject", isJsObject);
  $__export("print", print);
  $__export("warn", warn);
  $__export("setValueOnPath", setValueOnPath);
  $__export("getSymbolIterator", getSymbolIterator);
  $__export("isPrimitive", isPrimitive);
  $__export("escapeRegExp", escapeRegExp);
  return {
    setters: [],
    execute: function() {
      if (typeof window === 'undefined') {
        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
          globalScope = self;
        } else {
          globalScope = global;
        }
      } else {
        globalScope = window;
      }
      _global = globalScope;
      $__export("global", _global);
      _global.assert = function assert(condition) {};
      STRING_MAP_PROTO = Object.getPrototypeOf({});
      NumberWrapper = (function() {
        function NumberWrapper() {}
        NumberWrapper.parseIntAutoRadix = function(text) {
          var result = parseInt(text);
          if (isNaN(result)) {
            throw new Error('Invalid integer literal when parsing ' + text);
          }
          return result;
        };
        NumberWrapper.parseInt = function(text, radix) {
          if (radix == 10) {
            if (/^(\-|\+)?[0-9]+$/.test(text)) {
              return parseInt(text, radix);
            }
          } else if (radix == 16) {
            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
              return parseInt(text, radix);
            }
          } else {
            var result = parseInt(text, radix);
            if (!isNaN(result)) {
              return result;
            }
          }
          throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
        };
        NumberWrapper.isNumeric = function(value) {
          return !isNaN(value - parseFloat(value));
        };
        return NumberWrapper;
      }());
      $__export("NumberWrapper", NumberWrapper);
      _symbolIterator = null;
    }
  };
});

$__System.register("14", ["16"], function($__export) {
  "use strict";
  var __extends,
      isPresent,
      TypeModifier,
      Type,
      BuiltinTypeName,
      BuiltinType,
      ExternalType,
      ArrayType,
      MapType,
      DYNAMIC_TYPE,
      BOOL_TYPE,
      INT_TYPE,
      NUMBER_TYPE,
      STRING_TYPE,
      FUNCTION_TYPE,
      BinaryOperator,
      Expression,
      BuiltinVar,
      ReadVarExpr,
      WriteVarExpr,
      WriteKeyExpr,
      WritePropExpr,
      BuiltinMethod,
      InvokeMethodExpr,
      InvokeFunctionExpr,
      InstantiateExpr,
      LiteralExpr,
      ExternalExpr,
      ConditionalExpr,
      NotExpr,
      CastExpr,
      FnParam,
      FunctionExpr,
      BinaryOperatorExpr,
      ReadPropExpr,
      ReadKeyExpr,
      LiteralArrayExpr,
      LiteralMapExpr,
      THIS_EXPR,
      SUPER_EXPR,
      CATCH_ERROR_VAR,
      CATCH_STACK_VAR,
      NULL_EXPR,
      StmtModifier,
      Statement,
      DeclareVarStmt,
      DeclareFunctionStmt,
      ExpressionStatement,
      ReturnStatement,
      AbstractClassPart,
      ClassField,
      ClassMethod,
      ClassGetter,
      ClassStmt,
      IfStmt,
      CommentStmt,
      TryCatchStmt,
      ThrowStmt,
      ExpressionTransformer,
      RecursiveExpressionVisitor,
      _ReplaceVariableTransformer,
      _VariableFinder;
  function replaceVarInExpression(varName, newValue, expression) {
    var transformer = new _ReplaceVariableTransformer(varName, newValue);
    return expression.visitExpression(transformer, null);
  }
  function findReadVarNames(stmts) {
    var finder = new _VariableFinder();
    finder.visitAllStatements(stmts, null);
    return finder.varNames;
  }
  function variable(name, type) {
    if (type === void 0) {
      type = null;
    }
    return new ReadVarExpr(name, type);
  }
  function importExpr(id, typeParams) {
    if (typeParams === void 0) {
      typeParams = null;
    }
    return new ExternalExpr(id, null, typeParams);
  }
  function importType(id, typeParams, typeModifiers) {
    if (typeParams === void 0) {
      typeParams = null;
    }
    if (typeModifiers === void 0) {
      typeModifiers = null;
    }
    return isPresent(id) ? new ExternalType(id, typeParams, typeModifiers) : null;
  }
  function literalArr(values, type) {
    if (type === void 0) {
      type = null;
    }
    return new LiteralArrayExpr(values, type);
  }
  function literalMap(values, type) {
    if (type === void 0) {
      type = null;
    }
    return new LiteralMapExpr(values, type);
  }
  function not(expr) {
    return new NotExpr(expr);
  }
  function fn(params, body, type) {
    if (type === void 0) {
      type = null;
    }
    return new FunctionExpr(params, body, type);
  }
  function literal(value, type) {
    if (type === void 0) {
      type = null;
    }
    return new LiteralExpr(value, type);
  }
  $__export("replaceVarInExpression", replaceVarInExpression);
  $__export("findReadVarNames", findReadVarNames);
  $__export("variable", variable);
  $__export("importExpr", importExpr);
  $__export("importType", importType);
  $__export("literalArr", literalArr);
  $__export("literalMap", literalMap);
  $__export("not", not);
  $__export("fn", fn);
  $__export("literal", literal);
  return {
    setters: [function($__m) {
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      $__export("TypeModifier", TypeModifier);
      (function(TypeModifier) {
        TypeModifier[TypeModifier["Const"] = 0] = "Const";
      })(TypeModifier || ($__export("TypeModifier", TypeModifier = {})));
      Type = (function() {
        function Type(modifiers) {
          if (modifiers === void 0) {
            modifiers = null;
          }
          this.modifiers = modifiers;
          if (!modifiers) {
            this.modifiers = [];
          }
        }
        Type.prototype.hasModifier = function(modifier) {
          return this.modifiers.indexOf(modifier) !== -1;
        };
        return Type;
      }());
      $__export("Type", Type);
      $__export("BuiltinTypeName", BuiltinTypeName);
      (function(BuiltinTypeName) {
        BuiltinTypeName[BuiltinTypeName["Dynamic"] = 0] = "Dynamic";
        BuiltinTypeName[BuiltinTypeName["Bool"] = 1] = "Bool";
        BuiltinTypeName[BuiltinTypeName["String"] = 2] = "String";
        BuiltinTypeName[BuiltinTypeName["Int"] = 3] = "Int";
        BuiltinTypeName[BuiltinTypeName["Number"] = 4] = "Number";
        BuiltinTypeName[BuiltinTypeName["Function"] = 5] = "Function";
      })(BuiltinTypeName || ($__export("BuiltinTypeName", BuiltinTypeName = {})));
      BuiltinType = (function(_super) {
        __extends(BuiltinType, _super);
        function BuiltinType(name, modifiers) {
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, modifiers);
          this.name = name;
        }
        BuiltinType.prototype.visitType = function(visitor, context) {
          return visitor.visitBuiltintType(this, context);
        };
        return BuiltinType;
      }(Type));
      $__export("BuiltinType", BuiltinType);
      ExternalType = (function(_super) {
        __extends(ExternalType, _super);
        function ExternalType(value, typeParams, modifiers) {
          if (typeParams === void 0) {
            typeParams = null;
          }
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, modifiers);
          this.value = value;
          this.typeParams = typeParams;
        }
        ExternalType.prototype.visitType = function(visitor, context) {
          return visitor.visitExternalType(this, context);
        };
        return ExternalType;
      }(Type));
      $__export("ExternalType", ExternalType);
      ArrayType = (function(_super) {
        __extends(ArrayType, _super);
        function ArrayType(of, modifiers) {
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, modifiers);
          this.of = of;
        }
        ArrayType.prototype.visitType = function(visitor, context) {
          return visitor.visitArrayType(this, context);
        };
        return ArrayType;
      }(Type));
      $__export("ArrayType", ArrayType);
      MapType = (function(_super) {
        __extends(MapType, _super);
        function MapType(valueType, modifiers) {
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, modifiers);
          this.valueType = valueType;
        }
        MapType.prototype.visitType = function(visitor, context) {
          return visitor.visitMapType(this, context);
        };
        return MapType;
      }(Type));
      $__export("MapType", MapType);
      DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
      $__export("DYNAMIC_TYPE", DYNAMIC_TYPE);
      BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
      $__export("BOOL_TYPE", BOOL_TYPE);
      INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
      $__export("INT_TYPE", INT_TYPE);
      NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
      $__export("NUMBER_TYPE", NUMBER_TYPE);
      STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
      $__export("STRING_TYPE", STRING_TYPE);
      FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
      $__export("FUNCTION_TYPE", FUNCTION_TYPE);
      $__export("BinaryOperator", BinaryOperator);
      (function(BinaryOperator) {
        BinaryOperator[BinaryOperator["Equals"] = 0] = "Equals";
        BinaryOperator[BinaryOperator["NotEquals"] = 1] = "NotEquals";
        BinaryOperator[BinaryOperator["Identical"] = 2] = "Identical";
        BinaryOperator[BinaryOperator["NotIdentical"] = 3] = "NotIdentical";
        BinaryOperator[BinaryOperator["Minus"] = 4] = "Minus";
        BinaryOperator[BinaryOperator["Plus"] = 5] = "Plus";
        BinaryOperator[BinaryOperator["Divide"] = 6] = "Divide";
        BinaryOperator[BinaryOperator["Multiply"] = 7] = "Multiply";
        BinaryOperator[BinaryOperator["Modulo"] = 8] = "Modulo";
        BinaryOperator[BinaryOperator["And"] = 9] = "And";
        BinaryOperator[BinaryOperator["Or"] = 10] = "Or";
        BinaryOperator[BinaryOperator["Lower"] = 11] = "Lower";
        BinaryOperator[BinaryOperator["LowerEquals"] = 12] = "LowerEquals";
        BinaryOperator[BinaryOperator["Bigger"] = 13] = "Bigger";
        BinaryOperator[BinaryOperator["BiggerEquals"] = 14] = "BiggerEquals";
      })(BinaryOperator || ($__export("BinaryOperator", BinaryOperator = {})));
      Expression = (function() {
        function Expression(type) {
          this.type = type;
        }
        Expression.prototype.prop = function(name) {
          return new ReadPropExpr(this, name);
        };
        Expression.prototype.key = function(index, type) {
          if (type === void 0) {
            type = null;
          }
          return new ReadKeyExpr(this, index, type);
        };
        Expression.prototype.callMethod = function(name, params) {
          return new InvokeMethodExpr(this, name, params);
        };
        Expression.prototype.callFn = function(params) {
          return new InvokeFunctionExpr(this, params);
        };
        Expression.prototype.instantiate = function(params, type) {
          if (type === void 0) {
            type = null;
          }
          return new InstantiateExpr(this, params, type);
        };
        Expression.prototype.conditional = function(trueCase, falseCase) {
          if (falseCase === void 0) {
            falseCase = null;
          }
          return new ConditionalExpr(this, trueCase, falseCase);
        };
        Expression.prototype.equals = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);
        };
        Expression.prototype.notEquals = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);
        };
        Expression.prototype.identical = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);
        };
        Expression.prototype.notIdentical = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);
        };
        Expression.prototype.minus = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);
        };
        Expression.prototype.plus = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);
        };
        Expression.prototype.divide = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);
        };
        Expression.prototype.multiply = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);
        };
        Expression.prototype.modulo = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);
        };
        Expression.prototype.and = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);
        };
        Expression.prototype.or = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);
        };
        Expression.prototype.lower = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);
        };
        Expression.prototype.lowerEquals = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);
        };
        Expression.prototype.bigger = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);
        };
        Expression.prototype.biggerEquals = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);
        };
        Expression.prototype.isBlank = function() {
          return this.equals(NULL_EXPR);
        };
        Expression.prototype.cast = function(type) {
          return new CastExpr(this, type);
        };
        Expression.prototype.toStmt = function() {
          return new ExpressionStatement(this);
        };
        return Expression;
      }());
      $__export("Expression", Expression);
      $__export("BuiltinVar", BuiltinVar);
      (function(BuiltinVar) {
        BuiltinVar[BuiltinVar["This"] = 0] = "This";
        BuiltinVar[BuiltinVar["Super"] = 1] = "Super";
        BuiltinVar[BuiltinVar["CatchError"] = 2] = "CatchError";
        BuiltinVar[BuiltinVar["CatchStack"] = 3] = "CatchStack";
      })(BuiltinVar || ($__export("BuiltinVar", BuiltinVar = {})));
      ReadVarExpr = (function(_super) {
        __extends(ReadVarExpr, _super);
        function ReadVarExpr(name, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type);
          if (typeof name === 'string') {
            this.name = name;
            this.builtin = null;
          } else {
            this.name = null;
            this.builtin = name;
          }
        }
        ReadVarExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitReadVarExpr(this, context);
        };
        ReadVarExpr.prototype.set = function(value) {
          return new WriteVarExpr(this.name, value);
        };
        return ReadVarExpr;
      }(Expression));
      $__export("ReadVarExpr", ReadVarExpr);
      WriteVarExpr = (function(_super) {
        __extends(WriteVarExpr, _super);
        function WriteVarExpr(name, value, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type || value.type);
          this.name = name;
          this.value = value;
        }
        WriteVarExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitWriteVarExpr(this, context);
        };
        WriteVarExpr.prototype.toDeclStmt = function(type, modifiers) {
          if (type === void 0) {
            type = null;
          }
          if (modifiers === void 0) {
            modifiers = null;
          }
          return new DeclareVarStmt(this.name, this.value, type, modifiers);
        };
        return WriteVarExpr;
      }(Expression));
      $__export("WriteVarExpr", WriteVarExpr);
      WriteKeyExpr = (function(_super) {
        __extends(WriteKeyExpr, _super);
        function WriteKeyExpr(receiver, index, value, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type || value.type);
          this.receiver = receiver;
          this.index = index;
          this.value = value;
        }
        WriteKeyExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitWriteKeyExpr(this, context);
        };
        return WriteKeyExpr;
      }(Expression));
      $__export("WriteKeyExpr", WriteKeyExpr);
      WritePropExpr = (function(_super) {
        __extends(WritePropExpr, _super);
        function WritePropExpr(receiver, name, value, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type || value.type);
          this.receiver = receiver;
          this.name = name;
          this.value = value;
        }
        WritePropExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitWritePropExpr(this, context);
        };
        return WritePropExpr;
      }(Expression));
      $__export("WritePropExpr", WritePropExpr);
      $__export("BuiltinMethod", BuiltinMethod);
      (function(BuiltinMethod) {
        BuiltinMethod[BuiltinMethod["ConcatArray"] = 0] = "ConcatArray";
        BuiltinMethod[BuiltinMethod["SubscribeObservable"] = 1] = "SubscribeObservable";
        BuiltinMethod[BuiltinMethod["Bind"] = 2] = "Bind";
      })(BuiltinMethod || ($__export("BuiltinMethod", BuiltinMethod = {})));
      InvokeMethodExpr = (function(_super) {
        __extends(InvokeMethodExpr, _super);
        function InvokeMethodExpr(receiver, method, args, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type);
          this.receiver = receiver;
          this.args = args;
          if (typeof method === 'string') {
            this.name = method;
            this.builtin = null;
          } else {
            this.name = null;
            this.builtin = method;
          }
        }
        InvokeMethodExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitInvokeMethodExpr(this, context);
        };
        return InvokeMethodExpr;
      }(Expression));
      $__export("InvokeMethodExpr", InvokeMethodExpr);
      InvokeFunctionExpr = (function(_super) {
        __extends(InvokeFunctionExpr, _super);
        function InvokeFunctionExpr(fn, args, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type);
          this.fn = fn;
          this.args = args;
        }
        InvokeFunctionExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitInvokeFunctionExpr(this, context);
        };
        return InvokeFunctionExpr;
      }(Expression));
      $__export("InvokeFunctionExpr", InvokeFunctionExpr);
      InstantiateExpr = (function(_super) {
        __extends(InstantiateExpr, _super);
        function InstantiateExpr(classExpr, args, type) {
          _super.call(this, type);
          this.classExpr = classExpr;
          this.args = args;
        }
        InstantiateExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitInstantiateExpr(this, context);
        };
        return InstantiateExpr;
      }(Expression));
      $__export("InstantiateExpr", InstantiateExpr);
      LiteralExpr = (function(_super) {
        __extends(LiteralExpr, _super);
        function LiteralExpr(value, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type);
          this.value = value;
        }
        LiteralExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitLiteralExpr(this, context);
        };
        return LiteralExpr;
      }(Expression));
      $__export("LiteralExpr", LiteralExpr);
      ExternalExpr = (function(_super) {
        __extends(ExternalExpr, _super);
        function ExternalExpr(value, type, typeParams) {
          if (type === void 0) {
            type = null;
          }
          if (typeParams === void 0) {
            typeParams = null;
          }
          _super.call(this, type);
          this.value = value;
          this.typeParams = typeParams;
        }
        ExternalExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitExternalExpr(this, context);
        };
        return ExternalExpr;
      }(Expression));
      $__export("ExternalExpr", ExternalExpr);
      ConditionalExpr = (function(_super) {
        __extends(ConditionalExpr, _super);
        function ConditionalExpr(condition, trueCase, falseCase, type) {
          if (falseCase === void 0) {
            falseCase = null;
          }
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type || trueCase.type);
          this.condition = condition;
          this.falseCase = falseCase;
          this.trueCase = trueCase;
        }
        ConditionalExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitConditionalExpr(this, context);
        };
        return ConditionalExpr;
      }(Expression));
      $__export("ConditionalExpr", ConditionalExpr);
      NotExpr = (function(_super) {
        __extends(NotExpr, _super);
        function NotExpr(condition) {
          _super.call(this, BOOL_TYPE);
          this.condition = condition;
        }
        NotExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitNotExpr(this, context);
        };
        return NotExpr;
      }(Expression));
      $__export("NotExpr", NotExpr);
      CastExpr = (function(_super) {
        __extends(CastExpr, _super);
        function CastExpr(value, type) {
          _super.call(this, type);
          this.value = value;
        }
        CastExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitCastExpr(this, context);
        };
        return CastExpr;
      }(Expression));
      $__export("CastExpr", CastExpr);
      FnParam = (function() {
        function FnParam(name, type) {
          if (type === void 0) {
            type = null;
          }
          this.name = name;
          this.type = type;
        }
        return FnParam;
      }());
      $__export("FnParam", FnParam);
      FunctionExpr = (function(_super) {
        __extends(FunctionExpr, _super);
        function FunctionExpr(params, statements, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type);
          this.params = params;
          this.statements = statements;
        }
        FunctionExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitFunctionExpr(this, context);
        };
        FunctionExpr.prototype.toDeclStmt = function(name, modifiers) {
          if (modifiers === void 0) {
            modifiers = null;
          }
          return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);
        };
        return FunctionExpr;
      }(Expression));
      $__export("FunctionExpr", FunctionExpr);
      BinaryOperatorExpr = (function(_super) {
        __extends(BinaryOperatorExpr, _super);
        function BinaryOperatorExpr(operator, lhs, rhs, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type || lhs.type);
          this.operator = operator;
          this.rhs = rhs;
          this.lhs = lhs;
        }
        BinaryOperatorExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitBinaryOperatorExpr(this, context);
        };
        return BinaryOperatorExpr;
      }(Expression));
      $__export("BinaryOperatorExpr", BinaryOperatorExpr);
      ReadPropExpr = (function(_super) {
        __extends(ReadPropExpr, _super);
        function ReadPropExpr(receiver, name, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type);
          this.receiver = receiver;
          this.name = name;
        }
        ReadPropExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitReadPropExpr(this, context);
        };
        ReadPropExpr.prototype.set = function(value) {
          return new WritePropExpr(this.receiver, this.name, value);
        };
        return ReadPropExpr;
      }(Expression));
      $__export("ReadPropExpr", ReadPropExpr);
      ReadKeyExpr = (function(_super) {
        __extends(ReadKeyExpr, _super);
        function ReadKeyExpr(receiver, index, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type);
          this.receiver = receiver;
          this.index = index;
        }
        ReadKeyExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitReadKeyExpr(this, context);
        };
        ReadKeyExpr.prototype.set = function(value) {
          return new WriteKeyExpr(this.receiver, this.index, value);
        };
        return ReadKeyExpr;
      }(Expression));
      $__export("ReadKeyExpr", ReadKeyExpr);
      LiteralArrayExpr = (function(_super) {
        __extends(LiteralArrayExpr, _super);
        function LiteralArrayExpr(entries, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type);
          this.entries = entries;
        }
        LiteralArrayExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitLiteralArrayExpr(this, context);
        };
        return LiteralArrayExpr;
      }(Expression));
      $__export("LiteralArrayExpr", LiteralArrayExpr);
      LiteralMapExpr = (function(_super) {
        __extends(LiteralMapExpr, _super);
        function LiteralMapExpr(entries, type) {
          if (type === void 0) {
            type = null;
          }
          _super.call(this, type);
          this.entries = entries;
          this.valueType = null;
          if (isPresent(type)) {
            this.valueType = type.valueType;
          }
        }
        LiteralMapExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitLiteralMapExpr(this, context);
        };
        return LiteralMapExpr;
      }(Expression));
      $__export("LiteralMapExpr", LiteralMapExpr);
      THIS_EXPR = new ReadVarExpr(BuiltinVar.This);
      $__export("THIS_EXPR", THIS_EXPR);
      SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);
      $__export("SUPER_EXPR", SUPER_EXPR);
      CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);
      $__export("CATCH_ERROR_VAR", CATCH_ERROR_VAR);
      CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);
      $__export("CATCH_STACK_VAR", CATCH_STACK_VAR);
      NULL_EXPR = new LiteralExpr(null, null);
      $__export("NULL_EXPR", NULL_EXPR);
      $__export("StmtModifier", StmtModifier);
      (function(StmtModifier) {
        StmtModifier[StmtModifier["Final"] = 0] = "Final";
        StmtModifier[StmtModifier["Private"] = 1] = "Private";
      })(StmtModifier || ($__export("StmtModifier", StmtModifier = {})));
      Statement = (function() {
        function Statement(modifiers) {
          if (modifiers === void 0) {
            modifiers = null;
          }
          this.modifiers = modifiers;
          if (!modifiers) {
            this.modifiers = [];
          }
        }
        Statement.prototype.hasModifier = function(modifier) {
          return this.modifiers.indexOf(modifier) !== -1;
        };
        return Statement;
      }());
      $__export("Statement", Statement);
      DeclareVarStmt = (function(_super) {
        __extends(DeclareVarStmt, _super);
        function DeclareVarStmt(name, value, type, modifiers) {
          if (type === void 0) {
            type = null;
          }
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, modifiers);
          this.name = name;
          this.value = value;
          this.type = type || value.type;
        }
        DeclareVarStmt.prototype.visitStatement = function(visitor, context) {
          return visitor.visitDeclareVarStmt(this, context);
        };
        return DeclareVarStmt;
      }(Statement));
      $__export("DeclareVarStmt", DeclareVarStmt);
      DeclareFunctionStmt = (function(_super) {
        __extends(DeclareFunctionStmt, _super);
        function DeclareFunctionStmt(name, params, statements, type, modifiers) {
          if (type === void 0) {
            type = null;
          }
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, modifiers);
          this.name = name;
          this.params = params;
          this.statements = statements;
          this.type = type;
        }
        DeclareFunctionStmt.prototype.visitStatement = function(visitor, context) {
          return visitor.visitDeclareFunctionStmt(this, context);
        };
        return DeclareFunctionStmt;
      }(Statement));
      $__export("DeclareFunctionStmt", DeclareFunctionStmt);
      ExpressionStatement = (function(_super) {
        __extends(ExpressionStatement, _super);
        function ExpressionStatement(expr) {
          _super.call(this);
          this.expr = expr;
        }
        ExpressionStatement.prototype.visitStatement = function(visitor, context) {
          return visitor.visitExpressionStmt(this, context);
        };
        return ExpressionStatement;
      }(Statement));
      $__export("ExpressionStatement", ExpressionStatement);
      ReturnStatement = (function(_super) {
        __extends(ReturnStatement, _super);
        function ReturnStatement(value) {
          _super.call(this);
          this.value = value;
        }
        ReturnStatement.prototype.visitStatement = function(visitor, context) {
          return visitor.visitReturnStmt(this, context);
        };
        return ReturnStatement;
      }(Statement));
      $__export("ReturnStatement", ReturnStatement);
      AbstractClassPart = (function() {
        function AbstractClassPart(type, modifiers) {
          if (type === void 0) {
            type = null;
          }
          this.type = type;
          this.modifiers = modifiers;
          if (!modifiers) {
            this.modifiers = [];
          }
        }
        AbstractClassPart.prototype.hasModifier = function(modifier) {
          return this.modifiers.indexOf(modifier) !== -1;
        };
        return AbstractClassPart;
      }());
      $__export("AbstractClassPart", AbstractClassPart);
      ClassField = (function(_super) {
        __extends(ClassField, _super);
        function ClassField(name, type, modifiers) {
          if (type === void 0) {
            type = null;
          }
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, type, modifiers);
          this.name = name;
        }
        return ClassField;
      }(AbstractClassPart));
      $__export("ClassField", ClassField);
      ClassMethod = (function(_super) {
        __extends(ClassMethod, _super);
        function ClassMethod(name, params, body, type, modifiers) {
          if (type === void 0) {
            type = null;
          }
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, type, modifiers);
          this.name = name;
          this.params = params;
          this.body = body;
        }
        return ClassMethod;
      }(AbstractClassPart));
      $__export("ClassMethod", ClassMethod);
      ClassGetter = (function(_super) {
        __extends(ClassGetter, _super);
        function ClassGetter(name, body, type, modifiers) {
          if (type === void 0) {
            type = null;
          }
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, type, modifiers);
          this.name = name;
          this.body = body;
        }
        return ClassGetter;
      }(AbstractClassPart));
      $__export("ClassGetter", ClassGetter);
      ClassStmt = (function(_super) {
        __extends(ClassStmt, _super);
        function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers) {
          if (modifiers === void 0) {
            modifiers = null;
          }
          _super.call(this, modifiers);
          this.name = name;
          this.parent = parent;
          this.fields = fields;
          this.getters = getters;
          this.constructorMethod = constructorMethod;
          this.methods = methods;
        }
        ClassStmt.prototype.visitStatement = function(visitor, context) {
          return visitor.visitDeclareClassStmt(this, context);
        };
        return ClassStmt;
      }(Statement));
      $__export("ClassStmt", ClassStmt);
      IfStmt = (function(_super) {
        __extends(IfStmt, _super);
        function IfStmt(condition, trueCase, falseCase) {
          if (falseCase === void 0) {
            falseCase = [];
          }
          _super.call(this);
          this.condition = condition;
          this.trueCase = trueCase;
          this.falseCase = falseCase;
        }
        IfStmt.prototype.visitStatement = function(visitor, context) {
          return visitor.visitIfStmt(this, context);
        };
        return IfStmt;
      }(Statement));
      $__export("IfStmt", IfStmt);
      CommentStmt = (function(_super) {
        __extends(CommentStmt, _super);
        function CommentStmt(comment) {
          _super.call(this);
          this.comment = comment;
        }
        CommentStmt.prototype.visitStatement = function(visitor, context) {
          return visitor.visitCommentStmt(this, context);
        };
        return CommentStmt;
      }(Statement));
      $__export("CommentStmt", CommentStmt);
      TryCatchStmt = (function(_super) {
        __extends(TryCatchStmt, _super);
        function TryCatchStmt(bodyStmts, catchStmts) {
          _super.call(this);
          this.bodyStmts = bodyStmts;
          this.catchStmts = catchStmts;
        }
        TryCatchStmt.prototype.visitStatement = function(visitor, context) {
          return visitor.visitTryCatchStmt(this, context);
        };
        return TryCatchStmt;
      }(Statement));
      $__export("TryCatchStmt", TryCatchStmt);
      ThrowStmt = (function(_super) {
        __extends(ThrowStmt, _super);
        function ThrowStmt(error) {
          _super.call(this);
          this.error = error;
        }
        ThrowStmt.prototype.visitStatement = function(visitor, context) {
          return visitor.visitThrowStmt(this, context);
        };
        return ThrowStmt;
      }(Statement));
      $__export("ThrowStmt", ThrowStmt);
      ExpressionTransformer = (function() {
        function ExpressionTransformer() {}
        ExpressionTransformer.prototype.visitReadVarExpr = function(ast, context) {
          return ast;
        };
        ExpressionTransformer.prototype.visitWriteVarExpr = function(expr, context) {
          return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitWriteKeyExpr = function(expr, context) {
          return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitWritePropExpr = function(expr, context) {
          return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitInvokeMethodExpr = function(ast, context) {
          var method = ast.builtin || ast.name;
          return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type);
        };
        ExpressionTransformer.prototype.visitInvokeFunctionExpr = function(ast, context) {
          return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
        };
        ExpressionTransformer.prototype.visitInstantiateExpr = function(ast, context) {
          return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
        };
        ExpressionTransformer.prototype.visitLiteralExpr = function(ast, context) {
          return ast;
        };
        ExpressionTransformer.prototype.visitExternalExpr = function(ast, context) {
          return ast;
        };
        ExpressionTransformer.prototype.visitConditionalExpr = function(ast, context) {
          return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitNotExpr = function(ast, context) {
          return new NotExpr(ast.condition.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitCastExpr = function(ast, context) {
          return new CastExpr(ast.value.visitExpression(this, context), context);
        };
        ExpressionTransformer.prototype.visitFunctionExpr = function(ast, context) {
          return ast;
        };
        ExpressionTransformer.prototype.visitBinaryOperatorExpr = function(ast, context) {
          return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type);
        };
        ExpressionTransformer.prototype.visitReadPropExpr = function(ast, context) {
          return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);
        };
        ExpressionTransformer.prototype.visitReadKeyExpr = function(ast, context) {
          return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type);
        };
        ExpressionTransformer.prototype.visitLiteralArrayExpr = function(ast, context) {
          return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));
        };
        ExpressionTransformer.prototype.visitLiteralMapExpr = function(ast, context) {
          var _this = this;
          var entries = ast.entries.map(function(entry) {
            return [entry[0], entry[1].visitExpression(_this, context)];
          });
          return new LiteralMapExpr(entries);
        };
        ExpressionTransformer.prototype.visitAllExpressions = function(exprs, context) {
          var _this = this;
          return exprs.map(function(expr) {
            return expr.visitExpression(_this, context);
          });
        };
        ExpressionTransformer.prototype.visitDeclareVarStmt = function(stmt, context) {
          return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers);
        };
        ExpressionTransformer.prototype.visitDeclareFunctionStmt = function(stmt, context) {
          return stmt;
        };
        ExpressionTransformer.prototype.visitExpressionStmt = function(stmt, context) {
          return new ExpressionStatement(stmt.expr.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitReturnStmt = function(stmt, context) {
          return new ReturnStatement(stmt.value.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitDeclareClassStmt = function(stmt, context) {
          return stmt;
        };
        ExpressionTransformer.prototype.visitIfStmt = function(stmt, context) {
          return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context));
        };
        ExpressionTransformer.prototype.visitTryCatchStmt = function(stmt, context) {
          return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context));
        };
        ExpressionTransformer.prototype.visitThrowStmt = function(stmt, context) {
          return new ThrowStmt(stmt.error.visitExpression(this, context));
        };
        ExpressionTransformer.prototype.visitCommentStmt = function(stmt, context) {
          return stmt;
        };
        ExpressionTransformer.prototype.visitAllStatements = function(stmts, context) {
          var _this = this;
          return stmts.map(function(stmt) {
            return stmt.visitStatement(_this, context);
          });
        };
        return ExpressionTransformer;
      }());
      $__export("ExpressionTransformer", ExpressionTransformer);
      RecursiveExpressionVisitor = (function() {
        function RecursiveExpressionVisitor() {}
        RecursiveExpressionVisitor.prototype.visitReadVarExpr = function(ast, context) {
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitWriteVarExpr = function(expr, context) {
          expr.value.visitExpression(this, context);
          return expr;
        };
        RecursiveExpressionVisitor.prototype.visitWriteKeyExpr = function(expr, context) {
          expr.receiver.visitExpression(this, context);
          expr.index.visitExpression(this, context);
          expr.value.visitExpression(this, context);
          return expr;
        };
        RecursiveExpressionVisitor.prototype.visitWritePropExpr = function(expr, context) {
          expr.receiver.visitExpression(this, context);
          expr.value.visitExpression(this, context);
          return expr;
        };
        RecursiveExpressionVisitor.prototype.visitInvokeMethodExpr = function(ast, context) {
          ast.receiver.visitExpression(this, context);
          this.visitAllExpressions(ast.args, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitInvokeFunctionExpr = function(ast, context) {
          ast.fn.visitExpression(this, context);
          this.visitAllExpressions(ast.args, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitInstantiateExpr = function(ast, context) {
          ast.classExpr.visitExpression(this, context);
          this.visitAllExpressions(ast.args, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitLiteralExpr = function(ast, context) {
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitExternalExpr = function(ast, context) {
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitConditionalExpr = function(ast, context) {
          ast.condition.visitExpression(this, context);
          ast.trueCase.visitExpression(this, context);
          ast.falseCase.visitExpression(this, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitNotExpr = function(ast, context) {
          ast.condition.visitExpression(this, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitCastExpr = function(ast, context) {
          ast.value.visitExpression(this, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitFunctionExpr = function(ast, context) {
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitBinaryOperatorExpr = function(ast, context) {
          ast.lhs.visitExpression(this, context);
          ast.rhs.visitExpression(this, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitReadPropExpr = function(ast, context) {
          ast.receiver.visitExpression(this, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitReadKeyExpr = function(ast, context) {
          ast.receiver.visitExpression(this, context);
          ast.index.visitExpression(this, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitLiteralArrayExpr = function(ast, context) {
          this.visitAllExpressions(ast.entries, context);
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitLiteralMapExpr = function(ast, context) {
          var _this = this;
          ast.entries.forEach(function(entry) {
            return entry[1].visitExpression(_this, context);
          });
          return ast;
        };
        RecursiveExpressionVisitor.prototype.visitAllExpressions = function(exprs, context) {
          var _this = this;
          exprs.forEach(function(expr) {
            return expr.visitExpression(_this, context);
          });
        };
        RecursiveExpressionVisitor.prototype.visitDeclareVarStmt = function(stmt, context) {
          stmt.value.visitExpression(this, context);
          return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitDeclareFunctionStmt = function(stmt, context) {
          return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitExpressionStmt = function(stmt, context) {
          stmt.expr.visitExpression(this, context);
          return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitReturnStmt = function(stmt, context) {
          stmt.value.visitExpression(this, context);
          return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitDeclareClassStmt = function(stmt, context) {
          return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitIfStmt = function(stmt, context) {
          stmt.condition.visitExpression(this, context);
          this.visitAllStatements(stmt.trueCase, context);
          this.visitAllStatements(stmt.falseCase, context);
          return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitTryCatchStmt = function(stmt, context) {
          this.visitAllStatements(stmt.bodyStmts, context);
          this.visitAllStatements(stmt.catchStmts, context);
          return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitThrowStmt = function(stmt, context) {
          stmt.error.visitExpression(this, context);
          return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitCommentStmt = function(stmt, context) {
          return stmt;
        };
        RecursiveExpressionVisitor.prototype.visitAllStatements = function(stmts, context) {
          var _this = this;
          stmts.forEach(function(stmt) {
            return stmt.visitStatement(_this, context);
          });
        };
        return RecursiveExpressionVisitor;
      }());
      $__export("RecursiveExpressionVisitor", RecursiveExpressionVisitor);
      _ReplaceVariableTransformer = (function(_super) {
        __extends(_ReplaceVariableTransformer, _super);
        function _ReplaceVariableTransformer(_varName, _newValue) {
          _super.call(this);
          this._varName = _varName;
          this._newValue = _newValue;
        }
        _ReplaceVariableTransformer.prototype.visitReadVarExpr = function(ast, context) {
          return ast.name == this._varName ? this._newValue : ast;
        };
        return _ReplaceVariableTransformer;
      }(ExpressionTransformer));
      _VariableFinder = (function(_super) {
        __extends(_VariableFinder, _super);
        function _VariableFinder() {
          _super.apply(this, arguments);
          this.varNames = new Set();
        }
        _VariableFinder.prototype.visitReadVarExpr = function(ast, context) {
          this.varNames.add(ast.name);
          return null;
        };
        return _VariableFinder;
      }(RecursiveExpressionVisitor));
    }
  };
});

$__System.register("68", ["55", "16", "14"], function($__export) {
  "use strict";
  var __extends,
      createDiTokenExpression,
      isPresent,
      o,
      _ReplaceViewTransformer;
  function getPropertyInView(property, callingView, definedView) {
    if (callingView === definedView) {
      return property;
    } else {
      var viewProp = o.THIS_EXPR;
      var currView = callingView;
      while (currView !== definedView && isPresent(currView.declarationElement.view)) {
        currView = currView.declarationElement.view;
        viewProp = viewProp.prop('parent');
      }
      if (currView !== definedView) {
        throw new Error("Internal error: Could not calculate a property in a parent view: " + property);
      }
      return property.visitExpression(new _ReplaceViewTransformer(viewProp, definedView), null);
    }
  }
  function injectFromViewParentInjector(token, optional) {
    var args = [createDiTokenExpression(token)];
    if (optional) {
      args.push(o.NULL_EXPR);
    }
    return o.THIS_EXPR.prop('parentInjector').callMethod('get', args);
  }
  function getViewFactoryName(component, embeddedTemplateIndex) {
    return "viewFactory_" + component.type.name + embeddedTemplateIndex;
  }
  function createFlatArray(expressions) {
    var lastNonArrayExpressions = [];
    var result = o.literalArr([]);
    for (var i = 0; i < expressions.length; i++) {
      var expr = expressions[i];
      if (expr.type instanceof o.ArrayType) {
        if (lastNonArrayExpressions.length > 0) {
          result = result.callMethod(o.BuiltinMethod.ConcatArray, [o.literalArr(lastNonArrayExpressions)]);
          lastNonArrayExpressions = [];
        }
        result = result.callMethod(o.BuiltinMethod.ConcatArray, [expr]);
      } else {
        lastNonArrayExpressions.push(expr);
      }
    }
    if (lastNonArrayExpressions.length > 0) {
      result = result.callMethod(o.BuiltinMethod.ConcatArray, [o.literalArr(lastNonArrayExpressions)]);
    }
    return result;
  }
  $__export("getPropertyInView", getPropertyInView);
  $__export("injectFromViewParentInjector", injectFromViewParentInjector);
  $__export("getViewFactoryName", getViewFactoryName);
  $__export("createFlatArray", createFlatArray);
  return {
    setters: [function($__m) {
      createDiTokenExpression = $__m.createDiTokenExpression;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      o = $__m;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      _ReplaceViewTransformer = (function(_super) {
        __extends(_ReplaceViewTransformer, _super);
        function _ReplaceViewTransformer(_viewExpr, _view) {
          _super.call(this);
          this._viewExpr = _viewExpr;
          this._view = _view;
        }
        _ReplaceViewTransformer.prototype._isThis = function(expr) {
          return expr instanceof o.ReadVarExpr && expr.builtin === o.BuiltinVar.This;
        };
        _ReplaceViewTransformer.prototype.visitReadVarExpr = function(ast, context) {
          return this._isThis(ast) ? this._viewExpr : ast;
        };
        _ReplaceViewTransformer.prototype.visitReadPropExpr = function(ast, context) {
          if (this._isThis(ast.receiver)) {
            if (this._view.fields.some(function(field) {
              return field.name == ast.name;
            }) || this._view.getters.some(function(field) {
              return field.name == ast.name;
            })) {
              return this._viewExpr.cast(this._view.classType).prop(ast.name);
            }
          }
          return _super.prototype.visitReadPropExpr.call(this, ast, context);
        };
        return _ReplaceViewTransformer;
      }(o.ExpressionTransformer));
    }
  };
});

$__System.register("6b", ["c", "11", "5c", "55", "16", "13", "56", "14", "17", "35", "65", "6a", "5e", "67", "68"], function($__export) {
  "use strict";
  var ViewEncapsulation,
      CompileIdentifierMetadata,
      createSharedBindingVariablesIfNeeded,
      createDiTokenExpression,
      createInlineArray,
      isPresent,
      Identifiers,
      identifierToken,
      resolveIdentifier,
      createClassStmt,
      o,
      ChangeDetectorStatus,
      ViewType,
      isDefaultChangeDetectionStrategy,
      templateVisitAll,
      CompileElement,
      CompileNode,
      CompileView,
      ChangeDetectorStatusEnum,
      DetectChangesVars,
      InjectMethodVars,
      ViewConstructorVars,
      ViewEncapsulationEnum,
      ViewProperties,
      ViewTypeEnum,
      ViewFactoryDependency,
      createFlatArray,
      getViewFactoryName,
      IMPLICIT_TEMPLATE_VAR,
      CLASS_ATTR,
      STYLE_ATTR,
      NG_CONTAINER_TAG,
      parentRenderNodeVar,
      rootSelectorVar,
      ViewBuilderVisitor;
  function buildView(view, template, targetDependencies) {
    var builderVisitor = new ViewBuilderVisitor(view, targetDependencies);
    templateVisitAll(builderVisitor, template, view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent);
    return builderVisitor.nestedViewCount;
  }
  function finishView(view, targetStatements) {
    view.afterNodes();
    createViewTopLevelStmts(view, targetStatements);
    view.nodes.forEach(function(node) {
      if (node instanceof CompileElement && node.hasEmbeddedView) {
        finishView(node.embeddedView, targetStatements);
      }
    });
  }
  function _getOuterContainerOrSelf(node) {
    var view = node.view;
    while (_isNgContainer(node.parent, view)) {
      node = node.parent;
    }
    return node;
  }
  function _getOuterContainerParentOrSelf(el) {
    var view = el.view;
    while (_isNgContainer(el, view)) {
      el = el.parent;
    }
    return el;
  }
  function _isNgContainer(node, view) {
    return !node.isNull() && node.sourceAst.name === NG_CONTAINER_TAG && node.view === view;
  }
  function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) {
    var mapResult = {};
    Object.keys(declaredHtmlAttrs).forEach(function(key) {
      mapResult[key] = declaredHtmlAttrs[key];
    });
    directives.forEach(function(directiveMeta) {
      Object.keys(directiveMeta.hostAttributes).forEach(function(name) {
        var value = directiveMeta.hostAttributes[name];
        var prevValue = mapResult[name];
        mapResult[name] = isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
      });
    });
    var arrResult = [];
    Object.keys(mapResult).sort().forEach(function(attrName) {
      arrResult.push(attrName, mapResult[attrName]);
    });
    return arrResult;
  }
  function _readHtmlAttrs(attrs) {
    var htmlAttrs = {};
    attrs.forEach(function(ast) {
      htmlAttrs[ast.name] = ast.value;
    });
    return htmlAttrs;
  }
  function mergeAttributeValue(attrName, attrValue1, attrValue2) {
    if (attrName == CLASS_ATTR || attrName == STYLE_ATTR) {
      return attrValue1 + " " + attrValue2;
    } else {
      return attrValue2;
    }
  }
  function createViewTopLevelStmts(view, targetStatements) {
    var nodeDebugInfosVar = o.NULL_EXPR;
    if (view.genConfig.genDebugInfo) {
      nodeDebugInfosVar = o.variable("nodeDebugInfos_" + view.component.type.name + view.viewIndex);
      targetStatements.push(nodeDebugInfosVar.set(o.literalArr(view.nodes.map(createStaticNodeDebugInfo), new o.ArrayType(new o.ExternalType(resolveIdentifier(Identifiers.StaticNodeDebugInfo)), [o.TypeModifier.Const]))).toDeclStmt(null, [o.StmtModifier.Final]));
    }
    var renderCompTypeVar = o.variable("renderType_" + view.component.type.name);
    if (view.viewIndex === 0) {
      targetStatements.push(renderCompTypeVar.set(o.NULL_EXPR).toDeclStmt(o.importType(resolveIdentifier(Identifiers.RenderComponentType))));
    }
    var viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar);
    targetStatements.push(viewClass);
    targetStatements.push(createViewFactory(view, viewClass, renderCompTypeVar));
  }
  function createStaticNodeDebugInfo(node) {
    var compileElement = node instanceof CompileElement ? node : null;
    var providerTokens = [];
    var componentToken = o.NULL_EXPR;
    var varTokenEntries = [];
    if (isPresent(compileElement)) {
      providerTokens = compileElement.getProviderTokens();
      if (isPresent(compileElement.component)) {
        componentToken = createDiTokenExpression(identifierToken(compileElement.component.type));
      }
      Object.keys(compileElement.referenceTokens).forEach(function(varName) {
        var token = compileElement.referenceTokens[varName];
        varTokenEntries.push([varName, isPresent(token) ? createDiTokenExpression(token) : o.NULL_EXPR]);
      });
    }
    return o.importExpr(resolveIdentifier(Identifiers.StaticNodeDebugInfo)).instantiate([o.literalArr(providerTokens, new o.ArrayType(o.DYNAMIC_TYPE, [o.TypeModifier.Const])), componentToken, o.literalMap(varTokenEntries, new o.MapType(o.DYNAMIC_TYPE, [o.TypeModifier.Const]))], o.importType(resolveIdentifier(Identifiers.StaticNodeDebugInfo), null, [o.TypeModifier.Const]));
  }
  function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) {
    var viewConstructorArgs = [new o.FnParam(ViewConstructorVars.viewUtils.name, o.importType(resolveIdentifier(Identifiers.ViewUtils))), new o.FnParam(ViewConstructorVars.parentInjector.name, o.importType(resolveIdentifier(Identifiers.Injector))), new o.FnParam(ViewConstructorVars.declarationEl.name, o.importType(resolveIdentifier(Identifiers.AppElement)))];
    var superConstructorArgs = [o.variable(view.className), renderCompTypeVar, ViewTypeEnum.fromValue(view.viewType), ViewConstructorVars.viewUtils, ViewConstructorVars.parentInjector, ViewConstructorVars.declarationEl, ChangeDetectorStatusEnum.fromValue(getChangeDetectionMode(view))];
    if (view.genConfig.genDebugInfo) {
      superConstructorArgs.push(nodeDebugInfosVar);
    }
    var viewMethods = [new o.ClassMethod('createInternal', [new o.FnParam(rootSelectorVar.name, o.STRING_TYPE)], generateCreateMethod(view), o.importType(resolveIdentifier(Identifiers.AppElement))), new o.ClassMethod('injectorGetInternal', [new o.FnParam(InjectMethodVars.token.name, o.DYNAMIC_TYPE), new o.FnParam(InjectMethodVars.requestNodeIndex.name, o.NUMBER_TYPE), new o.FnParam(InjectMethodVars.notFoundResult.name, o.DYNAMIC_TYPE)], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), InjectMethodVars.notFoundResult), o.DYNAMIC_TYPE), new o.ClassMethod('detectChangesInternal', [new o.FnParam(DetectChangesVars.throwOnChange.name, o.BOOL_TYPE)], generateDetectChangesMethod(view)), new o.ClassMethod('dirtyParentQueriesInternal', [], view.dirtyParentQueriesMethod.finish()), new o.ClassMethod('destroyInternal', [], view.destroyMethod.finish()), new o.ClassMethod('detachInternal', [], view.detachMethod.finish())].filter(function(method) {
      return method.body.length > 0;
    });
    var superClass = view.genConfig.genDebugInfo ? Identifiers.DebugAppView : Identifiers.AppView;
    var viewClass = createClassStmt({
      name: view.className,
      parent: o.importExpr(resolveIdentifier(superClass), [getContextType(view)]),
      parentArgs: superConstructorArgs,
      ctorParams: viewConstructorArgs,
      builders: [{methods: viewMethods}, view]
    });
    return viewClass;
  }
  function createViewFactory(view, viewClass, renderCompTypeVar) {
    var viewFactoryArgs = [new o.FnParam(ViewConstructorVars.viewUtils.name, o.importType(resolveIdentifier(Identifiers.ViewUtils))), new o.FnParam(ViewConstructorVars.parentInjector.name, o.importType(resolveIdentifier(Identifiers.Injector))), new o.FnParam(ViewConstructorVars.declarationEl.name, o.importType(resolveIdentifier(Identifiers.AppElement)))];
    var initRenderCompTypeStmts = [];
    var templateUrlInfo;
    if (view.component.template.templateUrl == view.component.type.moduleUrl) {
      templateUrlInfo = view.component.type.moduleUrl + " class " + view.component.type.name + " - inline template";
    } else {
      templateUrlInfo = view.component.template.templateUrl;
    }
    if (view.viewIndex === 0) {
      var animationsExpr = o.literalMap(view.animations.map(function(entry) {
        return [entry.name, entry.fnExp];
      }));
      initRenderCompTypeStmts = [new o.IfStmt(renderCompTypeVar.identical(o.NULL_EXPR), [renderCompTypeVar.set(ViewConstructorVars.viewUtils.callMethod('createRenderComponentType', [view.genConfig.genDebugInfo ? o.literal(templateUrlInfo) : o.literal(''), o.literal(view.component.template.ngContentSelectors.length), ViewEncapsulationEnum.fromValue(view.component.template.encapsulation), view.styles, animationsExpr])).toStmt()])];
    }
    return o.fn(viewFactoryArgs, initRenderCompTypeStmts.concat([new o.ReturnStatement(o.variable(viewClass.name).instantiate(viewClass.constructorMethod.params.map(function(param) {
      return o.variable(param.name);
    })))]), o.importType(resolveIdentifier(Identifiers.AppView), [getContextType(view)])).toDeclStmt(view.viewFactory.name, [o.StmtModifier.Final]);
  }
  function generateCreateMethod(view) {
    var parentRenderNodeExpr = o.NULL_EXPR;
    var parentRenderNodeStmts = [];
    if (view.viewType === ViewType.COMPONENT) {
      parentRenderNodeExpr = ViewProperties.renderer.callMethod('createViewRoot', [o.THIS_EXPR.prop('declarationAppElement').prop('nativeElement')]);
      parentRenderNodeStmts = [parentRenderNodeVar.set(parentRenderNodeExpr).toDeclStmt(o.importType(view.genConfig.renderTypes.renderNode), [o.StmtModifier.Final])];
    }
    var resultExpr;
    if (view.viewType === ViewType.HOST) {
      resultExpr = view.nodes[0].appElement;
    } else {
      resultExpr = o.NULL_EXPR;
    }
    return parentRenderNodeStmts.concat(view.createMethod.finish(), [o.THIS_EXPR.callMethod('init', [createFlatArray(view.rootNodesOrAppElements), o.literalArr(view.nodes.map(function(node) {
      return node.renderNode;
    })), o.literalArr(view.disposables), o.literalArr(view.subscriptions)]).toStmt(), new o.ReturnStatement(resultExpr)]);
  }
  function generateDetectChangesMethod(view) {
    var stmts = [];
    if (view.animationBindingsMethod.isEmpty() && view.detectChangesInInputsMethod.isEmpty() && view.updateContentQueriesMethod.isEmpty() && view.afterContentLifecycleCallbacksMethod.isEmpty() && view.detectChangesRenderPropertiesMethod.isEmpty() && view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty()) {
      return stmts;
    }
    stmts.push.apply(stmts, view.animationBindingsMethod.finish());
    stmts.push.apply(stmts, view.detectChangesInInputsMethod.finish());
    stmts.push(o.THIS_EXPR.callMethod('detectContentChildrenChanges', [DetectChangesVars.throwOnChange]).toStmt());
    var afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());
    if (afterContentStmts.length > 0) {
      stmts.push(new o.IfStmt(o.not(DetectChangesVars.throwOnChange), afterContentStmts));
    }
    stmts.push.apply(stmts, view.detectChangesRenderPropertiesMethod.finish());
    stmts.push(o.THIS_EXPR.callMethod('detectViewChildrenChanges', [DetectChangesVars.throwOnChange]).toStmt());
    var afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());
    if (afterViewStmts.length > 0) {
      stmts.push(new o.IfStmt(o.not(DetectChangesVars.throwOnChange), afterViewStmts));
    }
    var varStmts = [];
    var readVars = o.findReadVarNames(stmts);
    if (readVars.has(DetectChangesVars.changed.name)) {
      varStmts.push(DetectChangesVars.changed.set(o.literal(true)).toDeclStmt(o.BOOL_TYPE));
    }
    if (readVars.has(DetectChangesVars.changes.name)) {
      varStmts.push(DetectChangesVars.changes.set(o.NULL_EXPR).toDeclStmt(new o.MapType(o.importType(resolveIdentifier(Identifiers.SimpleChange)))));
    }
    varStmts.push.apply(varStmts, createSharedBindingVariablesIfNeeded(stmts));
    return varStmts.concat(stmts);
  }
  function addReturnValuefNotEmpty(statements, value) {
    if (statements.length > 0) {
      return statements.concat([new o.ReturnStatement(value)]);
    } else {
      return statements;
    }
  }
  function getContextType(view) {
    if (view.viewType === ViewType.COMPONENT) {
      return o.importType(view.component.type);
    }
    return o.DYNAMIC_TYPE;
  }
  function getChangeDetectionMode(view) {
    var mode;
    if (view.viewType === ViewType.COMPONENT) {
      mode = isDefaultChangeDetectionStrategy(view.component.changeDetection) ? ChangeDetectorStatus.CheckAlways : ChangeDetectorStatus.CheckOnce;
    } else {
      mode = ChangeDetectorStatus.CheckAlways;
    }
    return mode;
  }
  $__export("buildView", buildView);
  $__export("finishView", finishView);
  return {
    setters: [function($__m) {
      ViewEncapsulation = $__m.ViewEncapsulation;
    }, function($__m) {
      CompileIdentifierMetadata = $__m.CompileIdentifierMetadata;
    }, function($__m) {
      createSharedBindingVariablesIfNeeded = $__m.createSharedBindingVariablesIfNeeded;
    }, function($__m) {
      createDiTokenExpression = $__m.createDiTokenExpression;
      createInlineArray = $__m.createInlineArray;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      Identifiers = $__m.Identifiers;
      identifierToken = $__m.identifierToken;
      resolveIdentifier = $__m.resolveIdentifier;
    }, function($__m) {
      createClassStmt = $__m.createClassStmt;
    }, function($__m) {
      o = $__m;
    }, function($__m) {
      ChangeDetectorStatus = $__m.ChangeDetectorStatus;
      ViewType = $__m.ViewType;
      isDefaultChangeDetectionStrategy = $__m.isDefaultChangeDetectionStrategy;
    }, function($__m) {
      templateVisitAll = $__m.templateVisitAll;
    }, function($__m) {
      CompileElement = $__m.CompileElement;
      CompileNode = $__m.CompileNode;
    }, function($__m) {
      CompileView = $__m.CompileView;
    }, function($__m) {
      ChangeDetectorStatusEnum = $__m.ChangeDetectorStatusEnum;
      DetectChangesVars = $__m.DetectChangesVars;
      InjectMethodVars = $__m.InjectMethodVars;
      ViewConstructorVars = $__m.ViewConstructorVars;
      ViewEncapsulationEnum = $__m.ViewEncapsulationEnum;
      ViewProperties = $__m.ViewProperties;
      ViewTypeEnum = $__m.ViewTypeEnum;
    }, function($__m) {
      ViewFactoryDependency = $__m.ViewFactoryDependency;
    }, function($__m) {
      createFlatArray = $__m.createFlatArray;
      getViewFactoryName = $__m.getViewFactoryName;
    }],
    execute: function() {
      IMPLICIT_TEMPLATE_VAR = '\$implicit';
      CLASS_ATTR = 'class';
      STYLE_ATTR = 'style';
      NG_CONTAINER_TAG = 'ng-container';
      parentRenderNodeVar = o.variable('parentRenderNode');
      rootSelectorVar = o.variable('rootSelector');
      ViewBuilderVisitor = (function() {
        function ViewBuilderVisitor(view, targetDependencies) {
          this.view = view;
          this.targetDependencies = targetDependencies;
          this.nestedViewCount = 0;
        }
        ViewBuilderVisitor.prototype._isRootNode = function(parent) {
          return parent.view !== this.view;
        };
        ViewBuilderVisitor.prototype._addRootNodeAndProject = function(node) {
          var projectedNode = _getOuterContainerOrSelf(node);
          var parent = projectedNode.parent;
          var ngContentIndex = projectedNode.sourceAst.ngContentIndex;
          var vcAppEl = (node instanceof CompileElement && node.hasViewContainer) ? node.appElement : null;
          if (this._isRootNode(parent)) {
            if (this.view.viewType !== ViewType.COMPONENT) {
              this.view.rootNodesOrAppElements.push(vcAppEl || node.renderNode);
            }
          } else if (isPresent(parent.component) && isPresent(ngContentIndex)) {
            parent.addContentNode(ngContentIndex, vcAppEl || node.renderNode);
          }
        };
        ViewBuilderVisitor.prototype._getParentRenderNode = function(parent) {
          parent = _getOuterContainerParentOrSelf(parent);
          if (this._isRootNode(parent)) {
            if (this.view.viewType === ViewType.COMPONENT) {
              return parentRenderNodeVar;
            } else {
              return o.NULL_EXPR;
            }
          } else {
            return isPresent(parent.component) && parent.component.template.encapsulation !== ViewEncapsulation.Native ? o.NULL_EXPR : parent.renderNode;
          }
        };
        ViewBuilderVisitor.prototype.visitBoundText = function(ast, parent) {
          return this._visitText(ast, '', parent);
        };
        ViewBuilderVisitor.prototype.visitText = function(ast, parent) {
          return this._visitText(ast, ast.value, parent);
        };
        ViewBuilderVisitor.prototype._visitText = function(ast, value, parent) {
          var fieldName = "_text_" + this.view.nodes.length;
          this.view.fields.push(new o.ClassField(fieldName, o.importType(this.view.genConfig.renderTypes.renderText)));
          var renderNode = o.THIS_EXPR.prop(fieldName);
          var compileNode = new CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast);
          var createRenderNode = o.THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod('createText', [this._getParentRenderNode(parent), o.literal(value), this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast)])).toStmt();
          this.view.nodes.push(compileNode);
          this.view.createMethod.addStmt(createRenderNode);
          this._addRootNodeAndProject(compileNode);
          return renderNode;
        };
        ViewBuilderVisitor.prototype.visitNgContent = function(ast, parent) {
          this.view.createMethod.resetDebugInfo(null, ast);
          var parentRenderNode = this._getParentRenderNode(parent);
          var nodesExpression = ViewProperties.projectableNodes.key(o.literal(ast.index), new o.ArrayType(o.importType(this.view.genConfig.renderTypes.renderNode)));
          if (parentRenderNode !== o.NULL_EXPR) {
            this.view.createMethod.addStmt(ViewProperties.renderer.callMethod('projectNodes', [parentRenderNode, o.importExpr(resolveIdentifier(Identifiers.flattenNestedViewRenderNodes)).callFn([nodesExpression])]).toStmt());
          } else if (this._isRootNode(parent)) {
            if (this.view.viewType !== ViewType.COMPONENT) {
              this.view.rootNodesOrAppElements.push(nodesExpression);
            }
          } else {
            if (isPresent(parent.component) && isPresent(ast.ngContentIndex)) {
              parent.addContentNode(ast.ngContentIndex, nodesExpression);
            }
          }
          return null;
        };
        ViewBuilderVisitor.prototype.visitElement = function(ast, parent) {
          var nodeIndex = this.view.nodes.length;
          var createRenderNodeExpr;
          var debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast);
          var directives = ast.directives.map(function(directiveAst) {
            return directiveAst.directive;
          });
          var component = directives.find(function(directive) {
            return directive.isComponent;
          });
          if (ast.name === NG_CONTAINER_TAG) {
            createRenderNodeExpr = ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), debugContextExpr]);
          } else {
            var htmlAttrs = _readHtmlAttrs(ast.attrs);
            var attrNameAndValues = createInlineArray(_mergeHtmlAndDirectiveAttrs(htmlAttrs, directives).map(function(v) {
              return o.literal(v);
            }));
            if (nodeIndex === 0 && this.view.viewType === ViewType.HOST) {
              createRenderNodeExpr = o.importExpr(resolveIdentifier(Identifiers.selectOrCreateRenderHostElement)).callFn([ViewProperties.renderer, o.literal(ast.name), attrNameAndValues, rootSelectorVar, debugContextExpr]);
            } else {
              createRenderNodeExpr = o.importExpr(resolveIdentifier(Identifiers.createRenderElement)).callFn([ViewProperties.renderer, this._getParentRenderNode(parent), o.literal(ast.name), attrNameAndValues, debugContextExpr]);
            }
          }
          var fieldName = "_el_" + nodeIndex;
          this.view.fields.push(new o.ClassField(fieldName, o.importType(this.view.genConfig.renderTypes.renderElement)));
          this.view.createMethod.addStmt(o.THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());
          var renderNode = o.THIS_EXPR.prop(fieldName);
          var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, false, ast.references, this.targetDependencies);
          this.view.nodes.push(compileElement);
          var compViewExpr = null;
          if (isPresent(component)) {
            var nestedComponentIdentifier = new CompileIdentifierMetadata({name: getViewFactoryName(component, 0)});
            this.targetDependencies.push(new ViewFactoryDependency(component.type, nestedComponentIdentifier));
            compViewExpr = o.variable("compView_" + nodeIndex);
            compileElement.setComponentView(compViewExpr);
            this.view.createMethod.addStmt(compViewExpr.set(o.importExpr(nestedComponentIdentifier).callFn([ViewProperties.viewUtils, compileElement.injector, compileElement.appElement])).toDeclStmt());
          }
          compileElement.beforeChildren();
          this._addRootNodeAndProject(compileElement);
          templateVisitAll(this, ast.children, compileElement);
          compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1);
          if (isPresent(compViewExpr)) {
            var codeGenContentNodes;
            if (this.view.component.type.isHost) {
              codeGenContentNodes = ViewProperties.projectableNodes;
            } else {
              codeGenContentNodes = o.literalArr(compileElement.contentNodesByNgContentIndex.map(function(nodes) {
                return createFlatArray(nodes);
              }));
            }
            this.view.createMethod.addStmt(compViewExpr.callMethod('create', [compileElement.getComponent(), codeGenContentNodes, o.NULL_EXPR]).toStmt());
          }
          return null;
        };
        ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function(ast, parent) {
          var nodeIndex = this.view.nodes.length;
          var fieldName = "_anchor_" + nodeIndex;
          this.view.fields.push(new o.ClassField(fieldName, o.importType(this.view.genConfig.renderTypes.renderComment)));
          this.view.createMethod.addStmt(o.THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast)])).toStmt());
          var renderNode = o.THIS_EXPR.prop(fieldName);
          var templateVariableBindings = ast.variables.map(function(varAst) {
            return [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name];
          });
          var directives = ast.directives.map(function(directiveAst) {
            return directiveAst.directive;
          });
          var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, true, ast.references, this.targetDependencies);
          this.view.nodes.push(compileElement);
          this.nestedViewCount++;
          var embeddedView = new CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, o.NULL_EXPR, this.view.animations, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings);
          this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies);
          compileElement.beforeChildren();
          this._addRootNodeAndProject(compileElement);
          compileElement.afterChildren(0);
          return null;
        };
        ViewBuilderVisitor.prototype.visitAttr = function(ast, ctx) {
          return null;
        };
        ViewBuilderVisitor.prototype.visitDirective = function(ast, ctx) {
          return null;
        };
        ViewBuilderVisitor.prototype.visitEvent = function(ast, eventTargetAndNames) {
          return null;
        };
        ViewBuilderVisitor.prototype.visitReference = function(ast, ctx) {
          return null;
        };
        ViewBuilderVisitor.prototype.visitVariable = function(ast, ctx) {
          return null;
        };
        ViewBuilderVisitor.prototype.visitDirectiveProperty = function(ast, context) {
          return null;
        };
        ViewBuilderVisitor.prototype.visitElementProperty = function(ast, context) {
          return null;
        };
        return ViewBuilderVisitor;
      }());
    }
  };
});

$__System.register("67", [], function($__export) {
  "use strict";
  var ViewFactoryDependency,
      ComponentFactoryDependency,
      DirectiveWrapperDependency;
  return {
    setters: [],
    execute: function() {
      ViewFactoryDependency = (function() {
        function ViewFactoryDependency(comp, placeholder) {
          this.comp = comp;
          this.placeholder = placeholder;
        }
        return ViewFactoryDependency;
      }());
      $__export("ViewFactoryDependency", ViewFactoryDependency);
      ComponentFactoryDependency = (function() {
        function ComponentFactoryDependency(comp, placeholder) {
          this.comp = comp;
          this.placeholder = placeholder;
        }
        return ComponentFactoryDependency;
      }());
      $__export("ComponentFactoryDependency", ComponentFactoryDependency);
      DirectiveWrapperDependency = (function() {
        function DirectiveWrapperDependency(dir, placeholder) {
          this.dir = dir;
          this.placeholder = placeholder;
        }
        return DirectiveWrapperDependency;
      }());
      $__export("DirectiveWrapperDependency", DirectiveWrapperDependency);
    }
  };
});

$__System.register("15", ["c", "22", "31", "65", "6a", "63", "6b", "67"], function($__export) {
  "use strict";
  var Injectable,
      CompilerConfig,
      ElementSchemaRegistry,
      CompileElement,
      CompileView,
      bindView,
      buildView,
      finishView,
      ViewCompileResult,
      ViewCompiler;
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
    }, function($__m) {
      CompilerConfig = $__m.CompilerConfig;
    }, function($__m) {
      ElementSchemaRegistry = $__m.ElementSchemaRegistry;
    }, function($__m) {
      CompileElement = $__m.CompileElement;
    }, function($__m) {
      CompileView = $__m.CompileView;
    }, function($__m) {
      bindView = $__m.bindView;
    }, function($__m) {
      buildView = $__m.buildView;
      finishView = $__m.finishView;
    }, function($__m) {
      $__export({
        ComponentFactoryDependency: $__m.ComponentFactoryDependency,
        DirectiveWrapperDependency: $__m.DirectiveWrapperDependency,
        ViewFactoryDependency: $__m.ViewFactoryDependency
      });
    }],
    execute: function() {
      ViewCompileResult = (function() {
        function ViewCompileResult(statements, viewFactoryVar, dependencies) {
          this.statements = statements;
          this.viewFactoryVar = viewFactoryVar;
          this.dependencies = dependencies;
        }
        return ViewCompileResult;
      }());
      $__export("ViewCompileResult", ViewCompileResult);
      ViewCompiler = (function() {
        function ViewCompiler(_genConfig, _schemaRegistry) {
          this._genConfig = _genConfig;
          this._schemaRegistry = _schemaRegistry;
        }
        ViewCompiler.prototype.compileComponent = function(component, template, styles, pipes, compiledAnimations) {
          var dependencies = [];
          var view = new CompileView(component, this._genConfig, pipes, styles, compiledAnimations, 0, CompileElement.createNull(), []);
          var statements = [];
          buildView(view, template, dependencies);
          bindView(view, template, this._schemaRegistry);
          finishView(view, statements);
          return new ViewCompileResult(statements, view.viewFactory.name, dependencies);
        };
        ViewCompiler.decorators = [{type: Injectable}];
        ViewCompiler.ctorParameters = [{type: CompilerConfig}, {type: ElementSchemaRegistry}];
        return ViewCompiler;
      }());
      $__export("ViewCompiler", ViewCompiler);
    }
  };
});

$__System.register("8", ["35", "28", "22", "11", "e", "21", "3f", "3d", "37", "38", "3c", "3b", "2e", "31", "3a", "23", "39", "2b", "25", "2d", "26", "24", "58", "1c", "1a", "3e", "32", "27", "15"], function($__export) {
  "use strict";
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  return {
    setters: [function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      $__export({TEMPLATE_TRANSFORMS: $__m.TEMPLATE_TRANSFORMS});
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      $__export({
        CompilerConfig: $__m.CompilerConfig,
        RenderTypes: $__m.RenderTypes
      });
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      $__export({RuntimeCompiler: $__m.RuntimeCompiler});
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      $__export({DirectiveResolver: $__m.DirectiveResolver});
    }, function($__m) {
      $__export({PipeResolver: $__m.PipeResolver});
    }, function($__m) {
      $__export({NgModuleResolver: $__m.NgModuleResolver});
    }, function($__m) {
      $__export({
        DEFAULT_INTERPOLATION_CONFIG: $__m.DEFAULT_INTERPOLATION_CONFIG,
        InterpolationConfig: $__m.InterpolationConfig
      });
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      $__export({NgModuleCompiler: $__m.NgModuleCompiler});
    }, function($__m) {
      $__export({DirectiveWrapperCompiler: $__m.DirectiveWrapperCompiler});
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      $__export({ViewCompiler: $__m.ViewCompiler});
    }],
    execute: function() {}
  };
});

$__System.register("d", ["8", "c"], function($__export) {
  "use strict";
  var __extends,
      ResourceLoader,
      Injectable,
      ResourceLoaderImpl;
  return {
    setters: [function($__m) {
      ResourceLoader = $__m.ResourceLoader;
    }, function($__m) {
      Injectable = $__m.Injectable;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      ResourceLoaderImpl = (function(_super) {
        __extends(ResourceLoaderImpl, _super);
        function ResourceLoaderImpl() {
          _super.apply(this, arguments);
        }
        ResourceLoaderImpl.prototype.get = function(url) {
          var resolve;
          var reject;
          var promise = new Promise(function(res, rej) {
            resolve = res;
            reject = rej;
          });
          var xhr = new XMLHttpRequest();
          xhr.open('GET', url, true);
          xhr.responseType = 'text';
          xhr.onload = function() {
            var response = xhr.response || xhr.responseText;
            var status = xhr.status === 1223 ? 204 : xhr.status;
            if (status === 0) {
              status = response ? 200 : 0;
            }
            if (200 <= status && status <= 300) {
              resolve(response);
            } else {
              reject("Failed to load " + url);
            }
          };
          xhr.onerror = function() {
            reject("Failed to load " + url);
          };
          xhr.send();
          return promise;
        };
        ResourceLoaderImpl.decorators = [{type: Injectable}];
        ResourceLoaderImpl.ctorParameters = [];
        return ResourceLoaderImpl;
      }(ResourceLoader));
      $__export("ResourceLoaderImpl", ResourceLoaderImpl);
    }
  };
});

$__System.register("6c", ["b", "d"], function($__export) {
  "use strict";
  var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,
      resource_loader,
      __platform_browser_dynamic_private__;
  return {
    setters: [function($__m) {
      INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = $__m.INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS;
    }, function($__m) {
      resource_loader = $__m;
    }],
    execute: function() {
      __platform_browser_dynamic_private__ = {
        INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,
        ResourceLoaderImpl: resource_loader.ResourceLoaderImpl
      };
      $__export("__platform_browser_dynamic_private__", __platform_browser_dynamic_private__);
    }
  };
});

$__System.register("6d", ["8", "c", "b", "7", "6c"], function($__export) {
  "use strict";
  var ResourceLoader,
      platformCoreDynamic,
      createPlatformFactory,
      INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,
      CachedResourceLoader,
      RESOURCE_CACHE_PROVIDER,
      platformBrowserDynamic;
  var $__exportNames = {
    RESOURCE_CACHE_PROVIDER: true,
    platformBrowserDynamic: true
  };
  return {
    setters: [function($__m) {
      ResourceLoader = $__m.ResourceLoader;
      platformCoreDynamic = $__m.platformCoreDynamic;
    }, function($__m) {
      createPlatformFactory = $__m.createPlatformFactory;
    }, function($__m) {
      INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = $__m.INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS;
    }, function($__m) {
      CachedResourceLoader = $__m.CachedResourceLoader;
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }],
    execute: function() {
      RESOURCE_CACHE_PROVIDER = [{
        provide: ResourceLoader,
        useClass: CachedResourceLoader
      }];
      $__export("RESOURCE_CACHE_PROVIDER", RESOURCE_CACHE_PROVIDER);
      platformBrowserDynamic = createPlatformFactory(platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);
      $__export("platformBrowserDynamic", platformBrowserDynamic);
    }
  };
});

$__System.register("6e", ["6d"], function($__export) {
  "use strict";
  var $__exportNames = {};
  return {
    setters: [function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }],
    execute: function() {}
  };
});

$__System.register("6f", ["c", "70", "71", "72"], function($__export) {
  "use strict";
  var __extends,
      Directive,
      Self,
      isPresent,
      ControlContainer,
      NgControl,
      AbstractControlStatus,
      ngControlStatusHost,
      NgControlStatus,
      NgControlStatusGroup;
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      Self = $__m.Self;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      ControlContainer = $__m.ControlContainer;
    }, function($__m) {
      NgControl = $__m.NgControl;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      AbstractControlStatus = (function() {
        function AbstractControlStatus(cd) {
          this._cd = cd;
        }
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassUntouched", {
          get: function() {
            return isPresent(this._cd.control) ? this._cd.control.untouched : false;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassTouched", {
          get: function() {
            return isPresent(this._cd.control) ? this._cd.control.touched : false;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassPristine", {
          get: function() {
            return isPresent(this._cd.control) ? this._cd.control.pristine : false;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassDirty", {
          get: function() {
            return isPresent(this._cd.control) ? this._cd.control.dirty : false;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassValid", {
          get: function() {
            return isPresent(this._cd.control) ? this._cd.control.valid : false;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassInvalid", {
          get: function() {
            return isPresent(this._cd.control) ? this._cd.control.invalid : false;
          },
          enumerable: true,
          configurable: true
        });
        return AbstractControlStatus;
      }());
      $__export("AbstractControlStatus", AbstractControlStatus);
      ngControlStatusHost = {
        '[class.ng-untouched]': 'ngClassUntouched',
        '[class.ng-touched]': 'ngClassTouched',
        '[class.ng-pristine]': 'ngClassPristine',
        '[class.ng-dirty]': 'ngClassDirty',
        '[class.ng-valid]': 'ngClassValid',
        '[class.ng-invalid]': 'ngClassInvalid'
      };
      $__export("ngControlStatusHost", ngControlStatusHost);
      NgControlStatus = (function(_super) {
        __extends(NgControlStatus, _super);
        function NgControlStatus(cd) {
          _super.call(this, cd);
        }
        NgControlStatus.decorators = [{
          type: Directive,
          args: [{
            selector: '[formControlName],[ngModel],[formControl]',
            host: ngControlStatusHost
          }]
        }];
        NgControlStatus.ctorParameters = [{
          type: NgControl,
          decorators: [{type: Self}]
        }];
        return NgControlStatus;
      }(AbstractControlStatus));
      $__export("NgControlStatus", NgControlStatus);
      NgControlStatusGroup = (function(_super) {
        __extends(NgControlStatusGroup, _super);
        function NgControlStatusGroup(cd) {
          _super.call(this, cd);
        }
        NgControlStatusGroup.decorators = [{
          type: Directive,
          args: [{
            selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
            host: ngControlStatusHost
          }]
        }];
        NgControlStatusGroup.ctorParameters = [{
          type: ControlContainer,
          decorators: [{type: Self}]
        }];
        return NgControlStatusGroup;
      }(AbstractControlStatus));
      $__export("NgControlStatusGroup", NgControlStatusGroup);
    }
  };
});

$__System.register("73", ["c", "74", "75", "76", "77", "71", "78", "72", "79", "7a", "7b", "7c"], function($__export) {
  "use strict";
  var __extends,
      Directive,
      Host,
      Inject,
      Input,
      Optional,
      Output,
      Self,
      forwardRef,
      EventEmitter,
      FormControl,
      NG_ASYNC_VALIDATORS,
      NG_VALIDATORS,
      AbstractFormGroupDirective,
      ControlContainer,
      NG_VALUE_ACCESSOR,
      NgControl,
      NgForm,
      NgModelGroup,
      composeAsyncValidators,
      composeValidators,
      controlPath,
      isPropertyUpdated,
      selectValueAccessor,
      setUpControl,
      TemplateDrivenErrors,
      formControlBinding,
      resolvedPromise,
      NgModel;
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      Host = $__m.Host;
      Inject = $__m.Inject;
      Input = $__m.Input;
      Optional = $__m.Optional;
      Output = $__m.Output;
      Self = $__m.Self;
      forwardRef = $__m.forwardRef;
    }, function($__m) {
      EventEmitter = $__m.EventEmitter;
    }, function($__m) {
      FormControl = $__m.FormControl;
    }, function($__m) {
      NG_ASYNC_VALIDATORS = $__m.NG_ASYNC_VALIDATORS;
      NG_VALIDATORS = $__m.NG_VALIDATORS;
    }, function($__m) {
      AbstractFormGroupDirective = $__m.AbstractFormGroupDirective;
    }, function($__m) {
      ControlContainer = $__m.ControlContainer;
    }, function($__m) {
      NG_VALUE_ACCESSOR = $__m.NG_VALUE_ACCESSOR;
    }, function($__m) {
      NgControl = $__m.NgControl;
    }, function($__m) {
      NgForm = $__m.NgForm;
    }, function($__m) {
      NgModelGroup = $__m.NgModelGroup;
    }, function($__m) {
      composeAsyncValidators = $__m.composeAsyncValidators;
      composeValidators = $__m.composeValidators;
      controlPath = $__m.controlPath;
      isPropertyUpdated = $__m.isPropertyUpdated;
      selectValueAccessor = $__m.selectValueAccessor;
      setUpControl = $__m.setUpControl;
    }, function($__m) {
      TemplateDrivenErrors = $__m.TemplateDrivenErrors;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      formControlBinding = {
        provide: NgControl,
        useExisting: forwardRef(function() {
          return NgModel;
        })
      };
      $__export("formControlBinding", formControlBinding);
      resolvedPromise = Promise.resolve(null);
      NgModel = (function(_super) {
        __extends(NgModel, _super);
        function NgModel(parent, validators, asyncValidators, valueAccessors) {
          _super.call(this);
          this._control = new FormControl();
          this._registered = false;
          this.update = new EventEmitter();
          this._parent = parent;
          this._rawValidators = validators || [];
          this._rawAsyncValidators = asyncValidators || [];
          this.valueAccessor = selectValueAccessor(this, valueAccessors);
        }
        NgModel.prototype.ngOnChanges = function(changes) {
          this._checkForErrors();
          if (!this._registered)
            this._setUpControl();
          if ('isDisabled' in changes) {
            this._updateDisabled(changes);
          }
          if (isPropertyUpdated(changes, this.viewModel)) {
            this._updateValue(this.model);
            this.viewModel = this.model;
          }
        };
        NgModel.prototype.ngOnDestroy = function() {
          this.formDirective && this.formDirective.removeControl(this);
        };
        Object.defineProperty(NgModel.prototype, "control", {
          get: function() {
            return this._control;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgModel.prototype, "path", {
          get: function() {
            return this._parent ? controlPath(this.name, this._parent) : [this.name];
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgModel.prototype, "formDirective", {
          get: function() {
            return this._parent ? this._parent.formDirective : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgModel.prototype, "validator", {
          get: function() {
            return composeValidators(this._rawValidators);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgModel.prototype, "asyncValidator", {
          get: function() {
            return composeAsyncValidators(this._rawAsyncValidators);
          },
          enumerable: true,
          configurable: true
        });
        NgModel.prototype.viewToModelUpdate = function(newValue) {
          this.viewModel = newValue;
          this.update.emit(newValue);
        };
        NgModel.prototype._setUpControl = function() {
          this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);
          this._registered = true;
        };
        NgModel.prototype._isStandalone = function() {
          return !this._parent || (this.options && this.options.standalone);
        };
        NgModel.prototype._setUpStandalone = function() {
          setUpControl(this._control, this);
          this._control.updateValueAndValidity({emitEvent: false});
        };
        NgModel.prototype._checkForErrors = function() {
          if (!this._isStandalone()) {
            this._checkParentType();
          }
          this._checkName();
        };
        NgModel.prototype._checkParentType = function() {
          if (!(this._parent instanceof NgModelGroup) && this._parent instanceof AbstractFormGroupDirective) {
            TemplateDrivenErrors.formGroupNameException();
          } else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
            TemplateDrivenErrors.modelParentException();
          }
        };
        NgModel.prototype._checkName = function() {
          if (this.options && this.options.name)
            this.name = this.options.name;
          if (!this._isStandalone() && !this.name) {
            TemplateDrivenErrors.missingNameException();
          }
        };
        NgModel.prototype._updateValue = function(value) {
          var _this = this;
          resolvedPromise.then(function() {
            _this.control.setValue(value, {emitViewToModelChange: false});
          });
        };
        NgModel.prototype._updateDisabled = function(changes) {
          var _this = this;
          var disabledValue = changes['isDisabled'].currentValue;
          var isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');
          resolvedPromise.then(function() {
            if (isDisabled && !_this.control.disabled) {
              _this.control.disable();
            } else if (!isDisabled && _this.control.disabled) {
              _this.control.enable();
            }
          });
        };
        NgModel.decorators = [{
          type: Directive,
          args: [{
            selector: '[ngModel]:not([formControlName]):not([formControl])',
            providers: [formControlBinding],
            exportAs: 'ngModel'
          }]
        }];
        NgModel.ctorParameters = [{
          type: ControlContainer,
          decorators: [{type: Optional}, {type: Host}]
        }, {
          type: Array,
          decorators: [{type: Optional}, {type: Self}, {
            type: Inject,
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{type: Optional}, {type: Self}, {
            type: Inject,
            args: [NG_ASYNC_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{type: Optional}, {type: Self}, {
            type: Inject,
            args: [NG_VALUE_ACCESSOR]
          }]
        }];
        NgModel.propDecorators = {
          'name': [{type: Input}],
          'isDisabled': [{
            type: Input,
            args: ['disabled']
          }],
          'model': [{
            type: Input,
            args: ['ngModel']
          }],
          'options': [{
            type: Input,
            args: ['ngModelOptions']
          }],
          'update': [{
            type: Output,
            args: ['ngModelChange']
          }]
        };
        return NgModel;
      }(NgControl));
      $__export("NgModel", NgModel);
    }
  };
});

$__System.register("79", ["c", "74", "70", "75", "76", "71", "7b"], function($__export) {
  "use strict";
  var __extends,
      Directive,
      Inject,
      Optional,
      Self,
      forwardRef,
      EventEmitter,
      isPresent,
      FormGroup,
      NG_ASYNC_VALIDATORS,
      NG_VALIDATORS,
      ControlContainer,
      composeAsyncValidators,
      composeValidators,
      setUpControl,
      setUpFormContainer,
      formDirectiveProvider,
      resolvedPromise,
      NgForm;
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      Inject = $__m.Inject;
      Optional = $__m.Optional;
      Self = $__m.Self;
      forwardRef = $__m.forwardRef;
    }, function($__m) {
      EventEmitter = $__m.EventEmitter;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      FormGroup = $__m.FormGroup;
    }, function($__m) {
      NG_ASYNC_VALIDATORS = $__m.NG_ASYNC_VALIDATORS;
      NG_VALIDATORS = $__m.NG_VALIDATORS;
    }, function($__m) {
      ControlContainer = $__m.ControlContainer;
    }, function($__m) {
      composeAsyncValidators = $__m.composeAsyncValidators;
      composeValidators = $__m.composeValidators;
      setUpControl = $__m.setUpControl;
      setUpFormContainer = $__m.setUpFormContainer;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      formDirectiveProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(function() {
          return NgForm;
        })
      };
      $__export("formDirectiveProvider", formDirectiveProvider);
      resolvedPromise = Promise.resolve(null);
      NgForm = (function(_super) {
        __extends(NgForm, _super);
        function NgForm(validators, asyncValidators) {
          _super.call(this);
          this._submitted = false;
          this.ngSubmit = new EventEmitter();
          this.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
        }
        Object.defineProperty(NgForm.prototype, "submitted", {
          get: function() {
            return this._submitted;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgForm.prototype, "formDirective", {
          get: function() {
            return this;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgForm.prototype, "control", {
          get: function() {
            return this.form;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgForm.prototype, "path", {
          get: function() {
            return [];
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgForm.prototype, "controls", {
          get: function() {
            return this.form.controls;
          },
          enumerable: true,
          configurable: true
        });
        NgForm.prototype.addControl = function(dir) {
          var _this = this;
          resolvedPromise.then(function() {
            var container = _this._findContainer(dir.path);
            dir._control = container.registerControl(dir.name, dir.control);
            setUpControl(dir.control, dir);
            dir.control.updateValueAndValidity({emitEvent: false});
          });
        };
        NgForm.prototype.getControl = function(dir) {
          return this.form.get(dir.path);
        };
        NgForm.prototype.removeControl = function(dir) {
          var _this = this;
          resolvedPromise.then(function() {
            var container = _this._findContainer(dir.path);
            if (isPresent(container)) {
              container.removeControl(dir.name);
            }
          });
        };
        NgForm.prototype.addFormGroup = function(dir) {
          var _this = this;
          resolvedPromise.then(function() {
            var container = _this._findContainer(dir.path);
            var group = new FormGroup({});
            setUpFormContainer(group, dir);
            container.registerControl(dir.name, group);
            group.updateValueAndValidity({emitEvent: false});
          });
        };
        NgForm.prototype.removeFormGroup = function(dir) {
          var _this = this;
          resolvedPromise.then(function() {
            var container = _this._findContainer(dir.path);
            if (isPresent(container)) {
              container.removeControl(dir.name);
            }
          });
        };
        NgForm.prototype.getFormGroup = function(dir) {
          return this.form.get(dir.path);
        };
        NgForm.prototype.updateModel = function(dir, value) {
          var _this = this;
          resolvedPromise.then(function() {
            var ctrl = _this.form.get(dir.path);
            ctrl.setValue(value);
          });
        };
        NgForm.prototype.setValue = function(value) {
          this.control.setValue(value);
        };
        NgForm.prototype.onSubmit = function($event) {
          this._submitted = true;
          this.ngSubmit.emit($event);
          return false;
        };
        NgForm.prototype.onReset = function() {
          this.resetForm();
        };
        NgForm.prototype.resetForm = function(value) {
          if (value === void 0) {
            value = undefined;
          }
          this.form.reset(value);
          this._submitted = false;
        };
        NgForm.prototype._findContainer = function(path) {
          path.pop();
          return path.length ? this.form.get(path) : this.form;
        };
        NgForm.decorators = [{
          type: Directive,
          args: [{
            selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',
            providers: [formDirectiveProvider],
            host: {
              '(submit)': 'onSubmit($event)',
              '(reset)': 'onReset()'
            },
            outputs: ['ngSubmit'],
            exportAs: 'ngForm'
          }]
        }];
        NgForm.ctorParameters = [{
          type: Array,
          decorators: [{type: Optional}, {type: Self}, {
            type: Inject,
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{type: Optional}, {type: Self}, {
            type: Inject,
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
        return NgForm;
      }(ControlContainer));
      $__export("NgForm", NgForm);
    }
  };
});

$__System.register("7c", ["7d"], function($__export) {
  "use strict";
  var Examples,
      TemplateDrivenErrors;
  return {
    setters: [function($__m) {
      Examples = $__m.FormErrorExamples;
    }],
    execute: function() {
      TemplateDrivenErrors = (function() {
        function TemplateDrivenErrors() {}
        TemplateDrivenErrors.modelParentException = function() {
          throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      " + Examples.formControlName + "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      " + Examples.ngModelWithFormGroup);
        };
        TemplateDrivenErrors.formGroupNameException = function() {
          throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      " + Examples.ngModelGroup);
        };
        TemplateDrivenErrors.missingNameException = function() {
          throw new Error("If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">");
        };
        TemplateDrivenErrors.modelGroupParentException = function() {
          throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      " + Examples.ngModelGroup);
        };
        return TemplateDrivenErrors;
      }());
      $__export("TemplateDrivenErrors", TemplateDrivenErrors);
    }
  };
});

$__System.register("7a", ["c", "76", "77", "71", "79", "7c"], function($__export) {
  "use strict";
  var __extends,
      Directive,
      Host,
      Inject,
      Input,
      Optional,
      Self,
      SkipSelf,
      forwardRef,
      NG_ASYNC_VALIDATORS,
      NG_VALIDATORS,
      AbstractFormGroupDirective,
      ControlContainer,
      NgForm,
      TemplateDrivenErrors,
      modelGroupProvider,
      NgModelGroup;
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      Host = $__m.Host;
      Inject = $__m.Inject;
      Input = $__m.Input;
      Optional = $__m.Optional;
      Self = $__m.Self;
      SkipSelf = $__m.SkipSelf;
      forwardRef = $__m.forwardRef;
    }, function($__m) {
      NG_ASYNC_VALIDATORS = $__m.NG_ASYNC_VALIDATORS;
      NG_VALIDATORS = $__m.NG_VALIDATORS;
    }, function($__m) {
      AbstractFormGroupDirective = $__m.AbstractFormGroupDirective;
    }, function($__m) {
      ControlContainer = $__m.ControlContainer;
    }, function($__m) {
      NgForm = $__m.NgForm;
    }, function($__m) {
      TemplateDrivenErrors = $__m.TemplateDrivenErrors;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      modelGroupProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(function() {
          return NgModelGroup;
        })
      };
      $__export("modelGroupProvider", modelGroupProvider);
      NgModelGroup = (function(_super) {
        __extends(NgModelGroup, _super);
        function NgModelGroup(parent, validators, asyncValidators) {
          _super.call(this);
          this._parent = parent;
          this._validators = validators;
          this._asyncValidators = asyncValidators;
        }
        NgModelGroup.prototype._checkParentType = function() {
          if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
            TemplateDrivenErrors.modelGroupParentException();
          }
        };
        NgModelGroup.decorators = [{
          type: Directive,
          args: [{
            selector: '[ngModelGroup]',
            providers: [modelGroupProvider],
            exportAs: 'ngModelGroup'
          }]
        }];
        NgModelGroup.ctorParameters = [{
          type: ControlContainer,
          decorators: [{type: Host}, {type: SkipSelf}]
        }, {
          type: Array,
          decorators: [{type: Optional}, {type: Self}, {
            type: Inject,
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{type: Optional}, {type: Self}, {
            type: Inject,
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
        NgModelGroup.propDecorators = {'name': [{
            type: Input,
            args: ['ngModelGroup']
          }]};
        return NgModelGroup;
      }(AbstractFormGroupDirective));
      $__export("NgModelGroup", NgModelGroup);
    }
  };
});

$__System.register("7e", ["c", "74", "76", "78", "72", "7f", "7b"], function($__export) {
  "use strict";
  var __extends,
      Directive,
      Inject,
      Input,
      Optional,
      Output,
      Self,
      forwardRef,
      EventEmitter,
      NG_ASYNC_VALIDATORS,
      NG_VALIDATORS,
      NG_VALUE_ACCESSOR,
      NgControl,
      ReactiveErrors,
      composeAsyncValidators,
      composeValidators,
      isPropertyUpdated,
      selectValueAccessor,
      setUpControl,
      formControlBinding,
      FormControlDirective;
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      Inject = $__m.Inject;
      Input = $__m.Input;
      Optional = $__m.Optional;
      Output = $__m.Output;
      Self = $__m.Self;
      forwardRef = $__m.forwardRef;
    }, function($__m) {
      EventEmitter = $__m.EventEmitter;
    }, function($__m) {
      NG_ASYNC_VALIDATORS = $__m.NG_ASYNC_VALIDATORS;
      NG_VALIDATORS = $__m.NG_VALIDATORS;
    }, function($__m) {
      NG_VALUE_ACCESSOR = $__m.NG_VALUE_ACCESSOR;
    }, function($__m) {
      NgControl = $__m.NgControl;
    }, function($__m) {
      ReactiveErrors = $__m.ReactiveErrors;
    }, function($__m) {
      composeAsyncValidators = $__m.composeAsyncValidators;
      composeValidators = $__m.composeValidators;
      isPropertyUpdated = $__m.isPropertyUpdated;
      selectValueAccessor = $__m.selectValueAccessor;
      setUpControl = $__m.setUpControl;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      formControlBinding = {
        provide: NgControl,
        useExisting: forwardRef(function() {
          return FormControlDirective;
        })
      };
      $__export("formControlBinding", formControlBinding);
      FormControlDirective = (function(_super) {
        __extends(FormControlDirective, _super);
        function FormControlDirective(validators, asyncValidators, valueAccessors) {
          _super.call(this);
          this.update = new EventEmitter();
          this._rawValidators = validators || [];
          this._rawAsyncValidators = asyncValidators || [];
          this.valueAccessor = selectValueAccessor(this, valueAccessors);
        }
        Object.defineProperty(FormControlDirective.prototype, "isDisabled", {
          set: function(isDisabled) {
            ReactiveErrors.disabledAttrWarning();
          },
          enumerable: true,
          configurable: true
        });
        FormControlDirective.prototype.ngOnChanges = function(changes) {
          if (this._isControlChanged(changes)) {
            setUpControl(this.form, this);
            if (this.control.disabled && this.valueAccessor.setDisabledState) {
              this.valueAccessor.setDisabledState(true);
            }
            this.form.updateValueAndValidity({emitEvent: false});
          }
          if (isPropertyUpdated(changes, this.viewModel)) {
            this.form.setValue(this.model);
            this.viewModel = this.model;
          }
        };
        Object.defineProperty(FormControlDirective.prototype, "path", {
          get: function() {
            return [];
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormControlDirective.prototype, "validator", {
          get: function() {
            return composeValidators(this._rawValidators);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormControlDirective.prototype, "asyncValidator", {
          get: function() {
            return composeAsyncValidators(this._rawAsyncValidators);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormControlDirective.prototype, "control", {
          get: function() {
            return this.form;
          },
          enumerable: true,
          configurable: true
        });
        FormControlDirective.prototype.viewToModelUpdate = function(newValue) {
          this.viewModel = newValue;
          this.update.emit(newValue);
        };
        FormControlDirective.prototype._isControlChanged = function(changes) {
          return changes.hasOwnProperty('form');
        };
        FormControlDirective.decorators = [{
          type: Directive,
          args: [{
            selector: '[formControl]',
            providers: [formControlBinding],
            exportAs: 'ngForm'
          }]
        }];
        FormControlDirective.ctorParameters = [{
          type: Array,
          decorators: [{type: Optional}, {type: Self}, {
            type: Inject,
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{type: Optional}, {type: Self}, {
            type: Inject,
            args: [NG_ASYNC_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{type: Optional}, {type: Self}, {
            type: Inject,
            args: [NG_VALUE_ACCESSOR]
          }]
        }];
        FormControlDirective.propDecorators = {
          'form': [{
            type: Input,
            args: ['formControl']
          }],
          'model': [{
            type: Input,
            args: ['ngModel']
          }],
          'update': [{
            type: Output,
            args: ['ngModelChange']
          }],
          'isDisabled': [{
            type: Input,
            args: ['disabled']
          }]
        };
        return FormControlDirective;
      }(NgControl));
      $__export("FormControlDirective", FormControlDirective);
    }
  };
});

$__System.register("80", ["c", "74", "76", "77", "71", "78", "72", "7f", "7b", "81", "82"], function($__export) {
  "use strict";
  var __extends,
      Directive,
      Host,
      Inject,
      Input,
      Optional,
      Output,
      Self,
      SkipSelf,
      forwardRef,
      EventEmitter,
      NG_ASYNC_VALIDATORS,
      NG_VALIDATORS,
      AbstractFormGroupDirective,
      ControlContainer,
      NG_VALUE_ACCESSOR,
      NgControl,
      ReactiveErrors,
      composeAsyncValidators,
      composeValidators,
      controlPath,
      isPropertyUpdated,
      selectValueAccessor,
      FormGroupDirective,
      FormArrayName,
      FormGroupName,
      controlNameBinding,
      FormControlName;
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      Host = $__m.Host;
      Inject = $__m.Inject;
      Input = $__m.Input;
      Optional = $__m.Optional;
      Output = $__m.Output;
      Self = $__m.Self;
      SkipSelf = $__m.SkipSelf;
      forwardRef = $__m.forwardRef;
    }, function($__m) {
      EventEmitter = $__m.EventEmitter;
    }, function($__m) {
      NG_ASYNC_VALIDATORS = $__m.NG_ASYNC_VALIDATORS;
      NG_VALIDATORS = $__m.NG_VALIDATORS;
    }, function($__m) {
      AbstractFormGroupDirective = $__m.AbstractFormGroupDirective;
    }, function($__m) {
      ControlContainer = $__m.ControlContainer;
    }, function($__m) {
      NG_VALUE_ACCESSOR = $__m.NG_VALUE_ACCESSOR;
    }, function($__m) {
      NgControl = $__m.NgControl;
    }, function($__m) {
      ReactiveErrors = $__m.ReactiveErrors;
    }, function($__m) {
      composeAsyncValidators = $__m.composeAsyncValidators;
      composeValidators = $__m.composeValidators;
      controlPath = $__m.controlPath;
      isPropertyUpdated = $__m.isPropertyUpdated;
      selectValueAccessor = $__m.selectValueAccessor;
    }, function($__m) {
      FormGroupDirective = $__m.FormGroupDirective;
    }, function($__m) {
      FormArrayName = $__m.FormArrayName;
      FormGroupName = $__m.FormGroupName;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      controlNameBinding = {
        provide: NgControl,
        useExisting: forwardRef(function() {
          return FormControlName;
        })
      };
      $__export("controlNameBinding", controlNameBinding);
      FormControlName = (function(_super) {
        __extends(FormControlName, _super);
        function FormControlName(parent, validators, asyncValidators, valueAccessors) {
          _super.call(this);
          this._added = false;
          this.update = new EventEmitter();
          this._parent = parent;
          this._rawValidators = validators || [];
          this._rawAsyncValidators = asyncValidators || [];
          this.valueAccessor = selectValueAccessor(this, valueAccessors);
        }
        Object.defineProperty(FormControlName.prototype, "isDisabled", {
          set: function(isDisabled) {
            ReactiveErrors.disabledAttrWarning();
          },
          enumerable: true,
          configurable: true
        });
        FormControlName.prototype.ngOnChanges = function(changes) {
          if (!this._added)
            this._setUpControl();
          if (isPropertyUpdated(changes, this.viewModel)) {
            this.viewModel = this.model;
            this.formDirective.updateModel(this, this.model);
          }
        };
        FormControlName.prototype.ngOnDestroy = function() {
          if (this.formDirective) {
            this.formDirective.removeControl(this);
          }
        };
        FormControlName.prototype.viewToModelUpdate = function(newValue) {
          this.viewModel = newValue;
          this.update.emit(newValue);
        };
        Object.defineProperty(FormControlName.prototype, "path", {
          get: function() {
            return controlPath(this.name, this._parent);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormControlName.prototype, "formDirective", {
          get: function() {
            return this._parent ? this._parent.formDirective : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormControlName.prototype, "validator", {
          get: function() {
            return composeValidators(this._rawValidators);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormControlName.prototype, "asyncValidator", {
          get: function() {
            return composeAsyncValidators(this._rawAsyncValidators);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormControlName.prototype, "control", {
          get: function() {
            return this._control;
          },
          enumerable: true,
          configurable: true
        });
        FormControlName.prototype._checkParentType = function() {
          if (!(this._parent instanceof FormGroupName) && this._parent instanceof AbstractFormGroupDirective) {
            ReactiveErrors.ngModelGroupException();
          } else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) && !(this._parent instanceof FormArrayName)) {
            ReactiveErrors.controlParentException();
          }
        };
        FormControlName.prototype._setUpControl = function() {
          this._checkParentType();
          this._control = this.formDirective.addControl(this);
          if (this.control.disabled && this.valueAccessor.setDisabledState) {
            this.valueAccessor.setDisabledState(true);
          }
          this._added = true;
        };
        FormControlName.decorators = [{
          type: Directive,
          args: [{
            selector: '[formControlName]',
            providers: [controlNameBinding]
          }]
        }];
        FormControlName.ctorParameters = [{
          type: ControlContainer,
          decorators: [{type: Optional}, {type: Host}, {type: SkipSelf}]
        }, {
          type: Array,
          decorators: [{type: Optional}, {type: Self}, {
            type: Inject,
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{type: Optional}, {type: Self}, {
            type: Inject,
            args: [NG_ASYNC_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{type: Optional}, {type: Self}, {
            type: Inject,
            args: [NG_VALUE_ACCESSOR]
          }]
        }];
        FormControlName.propDecorators = {
          'name': [{
            type: Input,
            args: ['formControlName']
          }],
          'model': [{
            type: Input,
            args: ['ngModel']
          }],
          'update': [{
            type: Output,
            args: ['ngModelChange']
          }],
          'isDisabled': [{
            type: Input,
            args: ['disabled']
          }]
        };
        return FormControlName;
      }(NgControl));
      $__export("FormControlName", FormControlName);
    }
  };
});

$__System.register("77", ["71", "7b"], function($__export) {
  "use strict";
  var __extends,
      ControlContainer,
      composeAsyncValidators,
      composeValidators,
      controlPath,
      AbstractFormGroupDirective;
  return {
    setters: [function($__m) {
      ControlContainer = $__m.ControlContainer;
    }, function($__m) {
      composeAsyncValidators = $__m.composeAsyncValidators;
      composeValidators = $__m.composeValidators;
      controlPath = $__m.controlPath;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      AbstractFormGroupDirective = (function(_super) {
        __extends(AbstractFormGroupDirective, _super);
        function AbstractFormGroupDirective() {
          _super.apply(this, arguments);
        }
        AbstractFormGroupDirective.prototype.ngOnInit = function() {
          this._checkParentType();
          this.formDirective.addFormGroup(this);
        };
        AbstractFormGroupDirective.prototype.ngOnDestroy = function() {
          if (this.formDirective) {
            this.formDirective.removeFormGroup(this);
          }
        };
        Object.defineProperty(AbstractFormGroupDirective.prototype, "control", {
          get: function() {
            return this.formDirective.getFormGroup(this);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractFormGroupDirective.prototype, "path", {
          get: function() {
            return controlPath(this.name, this._parent);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractFormGroupDirective.prototype, "formDirective", {
          get: function() {
            return this._parent ? this._parent.formDirective : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractFormGroupDirective.prototype, "validator", {
          get: function() {
            return composeValidators(this._validators);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractFormGroupDirective.prototype, "asyncValidator", {
          get: function() {
            return composeAsyncValidators(this._asyncValidators);
          },
          enumerable: true,
          configurable: true
        });
        AbstractFormGroupDirective.prototype._checkParentType = function() {};
        return AbstractFormGroupDirective;
      }(ControlContainer));
      $__export("AbstractFormGroupDirective", AbstractFormGroupDirective);
    }
  };
});

$__System.register("71", ["83"], function($__export) {
  "use strict";
  var __extends,
      AbstractControlDirective,
      ControlContainer;
  return {
    setters: [function($__m) {
      AbstractControlDirective = $__m.AbstractControlDirective;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      ControlContainer = (function(_super) {
        __extends(ControlContainer, _super);
        function ControlContainer() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(ControlContainer.prototype, "formDirective", {
          get: function() {
            return null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ControlContainer.prototype, "path", {
          get: function() {
            return null;
          },
          enumerable: true,
          configurable: true
        });
        return ControlContainer;
      }(AbstractControlDirective));
      $__export("ControlContainer", ControlContainer);
    }
  };
});

$__System.register("7d", [], function($__export) {
  "use strict";
  var FormErrorExamples;
  return {
    setters: [],
    execute: function() {
      FormErrorExamples = {
        formControlName: "\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });",
        formGroupName: "\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });",
        formArrayName: "\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; let i=index\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });",
        ngModelGroup: "\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>",
        ngModelWithFormGroup: "\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  "
      };
      $__export("FormErrorExamples", FormErrorExamples);
    }
  };
});

$__System.register("7f", ["7d"], function($__export) {
  "use strict";
  var Examples,
      ReactiveErrors;
  return {
    setters: [function($__m) {
      Examples = $__m.FormErrorExamples;
    }],
    execute: function() {
      ReactiveErrors = (function() {
        function ReactiveErrors() {}
        ReactiveErrors.controlParentException = function() {
          throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formControlName);
        };
        ReactiveErrors.ngModelGroupException = function() {
          throw new Error("formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        " + Examples.formGroupName + "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        " + Examples.ngModelGroup);
        };
        ReactiveErrors.missingFormException = function() {
          throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       " + Examples.formControlName);
        };
        ReactiveErrors.groupParentException = function() {
          throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formGroupName);
        };
        ReactiveErrors.arrayParentException = function() {
          throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        " + Examples.formArrayName);
        };
        ReactiveErrors.disabledAttrWarning = function() {
          console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ");
        };
        return ReactiveErrors;
      }());
      $__export("ReactiveErrors", ReactiveErrors);
    }
  };
});

$__System.register("81", ["c", "74", "84", "76", "71", "7f", "7b"], function($__export) {
  "use strict";
  var __extends,
      Directive,
      Inject,
      Input,
      Optional,
      Output,
      Self,
      forwardRef,
      EventEmitter,
      ListWrapper,
      NG_ASYNC_VALIDATORS,
      NG_VALIDATORS,
      Validators,
      ControlContainer,
      ReactiveErrors,
      cleanUpControl,
      composeAsyncValidators,
      composeValidators,
      setUpControl,
      setUpFormContainer,
      formDirectiveProvider,
      FormGroupDirective;
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      Inject = $__m.Inject;
      Input = $__m.Input;
      Optional = $__m.Optional;
      Output = $__m.Output;
      Self = $__m.Self;
      forwardRef = $__m.forwardRef;
    }, function($__m) {
      EventEmitter = $__m.EventEmitter;
    }, function($__m) {
      ListWrapper = $__m.ListWrapper;
    }, function($__m) {
      NG_ASYNC_VALIDATORS = $__m.NG_ASYNC_VALIDATORS;
      NG_VALIDATORS = $__m.NG_VALIDATORS;
      Validators = $__m.Validators;
    }, function($__m) {
      ControlContainer = $__m.ControlContainer;
    }, function($__m) {
      ReactiveErrors = $__m.ReactiveErrors;
    }, function($__m) {
      cleanUpControl = $__m.cleanUpControl;
      composeAsyncValidators = $__m.composeAsyncValidators;
      composeValidators = $__m.composeValidators;
      setUpControl = $__m.setUpControl;
      setUpFormContainer = $__m.setUpFormContainer;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      formDirectiveProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(function() {
          return FormGroupDirective;
        })
      };
      $__export("formDirectiveProvider", formDirectiveProvider);
      FormGroupDirective = (function(_super) {
        __extends(FormGroupDirective, _super);
        function FormGroupDirective(_validators, _asyncValidators) {
          _super.call(this);
          this._validators = _validators;
          this._asyncValidators = _asyncValidators;
          this._submitted = false;
          this.directives = [];
          this.form = null;
          this.ngSubmit = new EventEmitter();
        }
        FormGroupDirective.prototype.ngOnChanges = function(changes) {
          this._checkFormPresent();
          if (changes.hasOwnProperty('form')) {
            this._updateValidators();
            this._updateDomValue();
            this._updateRegistrations();
          }
        };
        Object.defineProperty(FormGroupDirective.prototype, "submitted", {
          get: function() {
            return this._submitted;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormGroupDirective.prototype, "formDirective", {
          get: function() {
            return this;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormGroupDirective.prototype, "control", {
          get: function() {
            return this.form;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormGroupDirective.prototype, "path", {
          get: function() {
            return [];
          },
          enumerable: true,
          configurable: true
        });
        FormGroupDirective.prototype.addControl = function(dir) {
          var ctrl = this.form.get(dir.path);
          setUpControl(ctrl, dir);
          ctrl.updateValueAndValidity({emitEvent: false});
          this.directives.push(dir);
          return ctrl;
        };
        FormGroupDirective.prototype.getControl = function(dir) {
          return this.form.get(dir.path);
        };
        FormGroupDirective.prototype.removeControl = function(dir) {
          ListWrapper.remove(this.directives, dir);
        };
        FormGroupDirective.prototype.addFormGroup = function(dir) {
          var ctrl = this.form.get(dir.path);
          setUpFormContainer(ctrl, dir);
          ctrl.updateValueAndValidity({emitEvent: false});
        };
        FormGroupDirective.prototype.removeFormGroup = function(dir) {};
        FormGroupDirective.prototype.getFormGroup = function(dir) {
          return this.form.get(dir.path);
        };
        FormGroupDirective.prototype.addFormArray = function(dir) {
          var ctrl = this.form.get(dir.path);
          setUpFormContainer(ctrl, dir);
          ctrl.updateValueAndValidity({emitEvent: false});
        };
        FormGroupDirective.prototype.removeFormArray = function(dir) {};
        FormGroupDirective.prototype.getFormArray = function(dir) {
          return this.form.get(dir.path);
        };
        FormGroupDirective.prototype.updateModel = function(dir, value) {
          var ctrl = this.form.get(dir.path);
          ctrl.setValue(value);
        };
        FormGroupDirective.prototype.onSubmit = function($event) {
          this._submitted = true;
          this.ngSubmit.emit($event);
          return false;
        };
        FormGroupDirective.prototype.onReset = function() {
          this.resetForm();
        };
        FormGroupDirective.prototype.resetForm = function(value) {
          if (value === void 0) {
            value = undefined;
          }
          this.form.reset(value);
          this._submitted = false;
        };
        FormGroupDirective.prototype._updateDomValue = function() {
          var _this = this;
          this.directives.forEach(function(dir) {
            var newCtrl = _this.form.get(dir.path);
            if (dir._control !== newCtrl) {
              cleanUpControl(dir._control, dir);
              if (newCtrl)
                setUpControl(newCtrl, dir);
              dir._control = newCtrl;
            }
          });
          this.form._updateTreeValidity({emitEvent: false});
        };
        FormGroupDirective.prototype._updateRegistrations = function() {
          var _this = this;
          this.form._registerOnCollectionChange(function() {
            return _this._updateDomValue();
          });
          if (this._oldForm)
            this._oldForm._registerOnCollectionChange(function() {});
          this._oldForm = this.form;
        };
        FormGroupDirective.prototype._updateValidators = function() {
          var sync = composeValidators(this._validators);
          this.form.validator = Validators.compose([this.form.validator, sync]);
          var async = composeAsyncValidators(this._asyncValidators);
          this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);
        };
        FormGroupDirective.prototype._checkFormPresent = function() {
          if (!this.form) {
            ReactiveErrors.missingFormException();
          }
        };
        FormGroupDirective.decorators = [{
          type: Directive,
          args: [{
            selector: '[formGroup]',
            providers: [formDirectiveProvider],
            host: {
              '(submit)': 'onSubmit($event)',
              '(reset)': 'onReset()'
            },
            exportAs: 'ngForm'
          }]
        }];
        FormGroupDirective.ctorParameters = [{
          type: Array,
          decorators: [{type: Optional}, {type: Self}, {
            type: Inject,
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{type: Optional}, {type: Self}, {
            type: Inject,
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
        FormGroupDirective.propDecorators = {
          'form': [{
            type: Input,
            args: ['formGroup']
          }],
          'ngSubmit': [{type: Output}]
        };
        return FormGroupDirective;
      }(ControlContainer));
      $__export("FormGroupDirective", FormGroupDirective);
    }
  };
});

$__System.register("82", ["c", "76", "77", "71", "7f", "7b", "81"], function($__export) {
  "use strict";
  var __extends,
      Directive,
      Host,
      Inject,
      Input,
      Optional,
      Self,
      SkipSelf,
      forwardRef,
      NG_ASYNC_VALIDATORS,
      NG_VALIDATORS,
      AbstractFormGroupDirective,
      ControlContainer,
      ReactiveErrors,
      composeAsyncValidators,
      composeValidators,
      controlPath,
      FormGroupDirective,
      formGroupNameProvider,
      FormGroupName,
      formArrayNameProvider,
      FormArrayName;
  function _hasInvalidParent(parent) {
    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName);
  }
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      Host = $__m.Host;
      Inject = $__m.Inject;
      Input = $__m.Input;
      Optional = $__m.Optional;
      Self = $__m.Self;
      SkipSelf = $__m.SkipSelf;
      forwardRef = $__m.forwardRef;
    }, function($__m) {
      NG_ASYNC_VALIDATORS = $__m.NG_ASYNC_VALIDATORS;
      NG_VALIDATORS = $__m.NG_VALIDATORS;
    }, function($__m) {
      AbstractFormGroupDirective = $__m.AbstractFormGroupDirective;
    }, function($__m) {
      ControlContainer = $__m.ControlContainer;
    }, function($__m) {
      ReactiveErrors = $__m.ReactiveErrors;
    }, function($__m) {
      composeAsyncValidators = $__m.composeAsyncValidators;
      composeValidators = $__m.composeValidators;
      controlPath = $__m.controlPath;
    }, function($__m) {
      FormGroupDirective = $__m.FormGroupDirective;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      formGroupNameProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(function() {
          return FormGroupName;
        })
      };
      $__export("formGroupNameProvider", formGroupNameProvider);
      FormGroupName = (function(_super) {
        __extends(FormGroupName, _super);
        function FormGroupName(parent, validators, asyncValidators) {
          _super.call(this);
          this._parent = parent;
          this._validators = validators;
          this._asyncValidators = asyncValidators;
        }
        FormGroupName.prototype._checkParentType = function() {
          if (_hasInvalidParent(this._parent)) {
            ReactiveErrors.groupParentException();
          }
        };
        FormGroupName.decorators = [{
          type: Directive,
          args: [{
            selector: '[formGroupName]',
            providers: [formGroupNameProvider]
          }]
        }];
        FormGroupName.ctorParameters = [{
          type: ControlContainer,
          decorators: [{type: Optional}, {type: Host}, {type: SkipSelf}]
        }, {
          type: Array,
          decorators: [{type: Optional}, {type: Self}, {
            type: Inject,
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{type: Optional}, {type: Self}, {
            type: Inject,
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
        FormGroupName.propDecorators = {'name': [{
            type: Input,
            args: ['formGroupName']
          }]};
        return FormGroupName;
      }(AbstractFormGroupDirective));
      $__export("FormGroupName", FormGroupName);
      formArrayNameProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(function() {
          return FormArrayName;
        })
      };
      $__export("formArrayNameProvider", formArrayNameProvider);
      FormArrayName = (function(_super) {
        __extends(FormArrayName, _super);
        function FormArrayName(parent, validators, asyncValidators) {
          _super.call(this);
          this._parent = parent;
          this._validators = validators;
          this._asyncValidators = asyncValidators;
        }
        FormArrayName.prototype.ngOnInit = function() {
          this._checkParentType();
          this.formDirective.addFormArray(this);
        };
        FormArrayName.prototype.ngOnDestroy = function() {
          if (this.formDirective) {
            this.formDirective.removeFormArray(this);
          }
        };
        Object.defineProperty(FormArrayName.prototype, "control", {
          get: function() {
            return this.formDirective.getFormArray(this);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "formDirective", {
          get: function() {
            return this._parent ? this._parent.formDirective : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "path", {
          get: function() {
            return controlPath(this.name, this._parent);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "validator", {
          get: function() {
            return composeValidators(this._validators);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "asyncValidator", {
          get: function() {
            return composeAsyncValidators(this._asyncValidators);
          },
          enumerable: true,
          configurable: true
        });
        FormArrayName.prototype._checkParentType = function() {
          if (_hasInvalidParent(this._parent)) {
            ReactiveErrors.arrayParentException();
          }
        };
        FormArrayName.decorators = [{
          type: Directive,
          args: [{
            selector: '[formArrayName]',
            providers: [formArrayNameProvider]
          }]
        }];
        FormArrayName.ctorParameters = [{
          type: ControlContainer,
          decorators: [{type: Optional}, {type: Host}, {type: SkipSelf}]
        }, {
          type: Array,
          decorators: [{type: Optional}, {type: Self}, {
            type: Inject,
            args: [NG_VALIDATORS]
          }]
        }, {
          type: Array,
          decorators: [{type: Optional}, {type: Self}, {
            type: Inject,
            args: [NG_ASYNC_VALIDATORS]
          }]
        }];
        FormArrayName.propDecorators = {'name': [{
            type: Input,
            args: ['formArrayName']
          }]};
        return FormArrayName;
      }(ControlContainer));
      $__export("FormArrayName", FormArrayName);
    }
  };
});

$__System.register("85", ["c", "70", "76"], function($__export) {
  "use strict";
  var Directive,
      Input,
      forwardRef,
      isPresent,
      NG_VALIDATORS,
      Validators,
      REQUIRED_VALIDATOR,
      RequiredValidator,
      MIN_LENGTH_VALIDATOR,
      MinLengthValidator,
      MAX_LENGTH_VALIDATOR,
      MaxLengthValidator,
      PATTERN_VALIDATOR,
      PatternValidator;
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      Input = $__m.Input;
      forwardRef = $__m.forwardRef;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      NG_VALIDATORS = $__m.NG_VALIDATORS;
      Validators = $__m.Validators;
    }],
    execute: function() {
      REQUIRED_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function() {
          return RequiredValidator;
        }),
        multi: true
      };
      $__export("REQUIRED_VALIDATOR", REQUIRED_VALIDATOR);
      RequiredValidator = (function() {
        function RequiredValidator() {}
        Object.defineProperty(RequiredValidator.prototype, "required", {
          get: function() {
            return this._required;
          },
          set: function(value) {
            this._required = isPresent(value) && "" + value !== 'false';
            if (this._onChange)
              this._onChange();
          },
          enumerable: true,
          configurable: true
        });
        RequiredValidator.prototype.validate = function(c) {
          return this.required ? Validators.required(c) : null;
        };
        RequiredValidator.prototype.registerOnValidatorChange = function(fn) {
          this._onChange = fn;
        };
        RequiredValidator.decorators = [{
          type: Directive,
          args: [{
            selector: '[required][formControlName],[required][formControl],[required][ngModel]',
            providers: [REQUIRED_VALIDATOR],
            host: {'[attr.required]': 'required? "" : null'}
          }]
        }];
        RequiredValidator.ctorParameters = [];
        RequiredValidator.propDecorators = {'required': [{type: Input}]};
        return RequiredValidator;
      }());
      $__export("RequiredValidator", RequiredValidator);
      MIN_LENGTH_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function() {
          return MinLengthValidator;
        }),
        multi: true
      };
      $__export("MIN_LENGTH_VALIDATOR", MIN_LENGTH_VALIDATOR);
      MinLengthValidator = (function() {
        function MinLengthValidator() {}
        MinLengthValidator.prototype._createValidator = function() {
          this._validator = Validators.minLength(parseInt(this.minlength, 10));
        };
        MinLengthValidator.prototype.ngOnChanges = function(changes) {
          if (changes['minlength']) {
            this._createValidator();
            if (this._onChange)
              this._onChange();
          }
        };
        MinLengthValidator.prototype.validate = function(c) {
          return isPresent(this.minlength) ? this._validator(c) : null;
        };
        MinLengthValidator.prototype.registerOnValidatorChange = function(fn) {
          this._onChange = fn;
        };
        MinLengthValidator.decorators = [{
          type: Directive,
          args: [{
            selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
            providers: [MIN_LENGTH_VALIDATOR],
            host: {'[attr.minlength]': 'minlength? minlength : null'}
          }]
        }];
        MinLengthValidator.ctorParameters = [];
        MinLengthValidator.propDecorators = {'minlength': [{type: Input}]};
        return MinLengthValidator;
      }());
      $__export("MinLengthValidator", MinLengthValidator);
      MAX_LENGTH_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function() {
          return MaxLengthValidator;
        }),
        multi: true
      };
      $__export("MAX_LENGTH_VALIDATOR", MAX_LENGTH_VALIDATOR);
      MaxLengthValidator = (function() {
        function MaxLengthValidator() {}
        MaxLengthValidator.prototype._createValidator = function() {
          this._validator = Validators.maxLength(parseInt(this.maxlength, 10));
        };
        MaxLengthValidator.prototype.ngOnChanges = function(changes) {
          if (changes['maxlength']) {
            this._createValidator();
            if (this._onChange)
              this._onChange();
          }
        };
        MaxLengthValidator.prototype.validate = function(c) {
          return isPresent(this.maxlength) ? this._validator(c) : null;
        };
        MaxLengthValidator.prototype.registerOnValidatorChange = function(fn) {
          this._onChange = fn;
        };
        MaxLengthValidator.decorators = [{
          type: Directive,
          args: [{
            selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
            providers: [MAX_LENGTH_VALIDATOR],
            host: {'[attr.maxlength]': 'maxlength? maxlength : null'}
          }]
        }];
        MaxLengthValidator.ctorParameters = [];
        MaxLengthValidator.propDecorators = {'maxlength': [{type: Input}]};
        return MaxLengthValidator;
      }());
      $__export("MaxLengthValidator", MaxLengthValidator);
      PATTERN_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function() {
          return PatternValidator;
        }),
        multi: true
      };
      $__export("PATTERN_VALIDATOR", PATTERN_VALIDATOR);
      PatternValidator = (function() {
        function PatternValidator() {}
        PatternValidator.prototype._createValidator = function() {
          this._validator = Validators.pattern(this.pattern);
        };
        PatternValidator.prototype.ngOnChanges = function(changes) {
          if (changes['pattern']) {
            this._createValidator();
            if (this._onChange)
              this._onChange();
          }
        };
        PatternValidator.prototype.validate = function(c) {
          return isPresent(this.pattern) ? this._validator(c) : null;
        };
        PatternValidator.prototype.registerOnValidatorChange = function(fn) {
          this._onChange = fn;
        };
        PatternValidator.decorators = [{
          type: Directive,
          args: [{
            selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
            providers: [PATTERN_VALIDATOR],
            host: {'[attr.pattern]': 'pattern? pattern : null'}
          }]
        }];
        PatternValidator.ctorParameters = [];
        PatternValidator.propDecorators = {'pattern': [{type: Input}]};
        return PatternValidator;
      }());
      $__export("PatternValidator", PatternValidator);
    }
  };
});

$__System.register("86", ["c", "87", "88", "6f", "79", "73", "7a", "89", "8a", "7e", "80", "81", "82", "8b", "8c", "85", "72"], function($__export) {
  "use strict";
  var NgModule,
      CheckboxControlValueAccessor,
      DefaultValueAccessor,
      NgControlStatus,
      NgControlStatusGroup,
      NgForm,
      NgModel,
      NgModelGroup,
      NumberValueAccessor,
      RadioControlValueAccessor,
      FormControlDirective,
      FormControlName,
      FormGroupDirective,
      FormArrayName,
      FormGroupName,
      NgSelectOption,
      SelectControlValueAccessor,
      NgSelectMultipleOption,
      SelectMultipleControlValueAccessor,
      MaxLengthValidator,
      MinLengthValidator,
      PatternValidator,
      RequiredValidator,
      SHARED_FORM_DIRECTIVES,
      TEMPLATE_DRIVEN_DIRECTIVES,
      REACTIVE_DRIVEN_DIRECTIVES,
      FORM_DIRECTIVES,
      REACTIVE_FORM_DIRECTIVES,
      InternalFormsSharedModule;
  return {
    setters: [function($__m) {
      NgModule = $__m.NgModule;
    }, function($__m) {
      CheckboxControlValueAccessor = $__m.CheckboxControlValueAccessor;
      $__export({CheckboxControlValueAccessor: $__m.CheckboxControlValueAccessor});
    }, function($__m) {
      DefaultValueAccessor = $__m.DefaultValueAccessor;
      $__export({DefaultValueAccessor: $__m.DefaultValueAccessor});
    }, function($__m) {
      NgControlStatus = $__m.NgControlStatus;
      NgControlStatusGroup = $__m.NgControlStatusGroup;
      $__export({
        NgControlStatus: $__m.NgControlStatus,
        NgControlStatusGroup: $__m.NgControlStatusGroup
      });
    }, function($__m) {
      NgForm = $__m.NgForm;
      $__export({NgForm: $__m.NgForm});
    }, function($__m) {
      NgModel = $__m.NgModel;
      $__export({NgModel: $__m.NgModel});
    }, function($__m) {
      NgModelGroup = $__m.NgModelGroup;
      $__export({NgModelGroup: $__m.NgModelGroup});
    }, function($__m) {
      NumberValueAccessor = $__m.NumberValueAccessor;
      $__export({NumberValueAccessor: $__m.NumberValueAccessor});
    }, function($__m) {
      RadioControlValueAccessor = $__m.RadioControlValueAccessor;
      $__export({RadioControlValueAccessor: $__m.RadioControlValueAccessor});
    }, function($__m) {
      FormControlDirective = $__m.FormControlDirective;
      $__export({FormControlDirective: $__m.FormControlDirective});
    }, function($__m) {
      FormControlName = $__m.FormControlName;
      $__export({FormControlName: $__m.FormControlName});
    }, function($__m) {
      FormGroupDirective = $__m.FormGroupDirective;
      $__export({FormGroupDirective: $__m.FormGroupDirective});
    }, function($__m) {
      FormArrayName = $__m.FormArrayName;
      FormGroupName = $__m.FormGroupName;
      $__export({
        FormArrayName: $__m.FormArrayName,
        FormGroupName: $__m.FormGroupName
      });
    }, function($__m) {
      NgSelectOption = $__m.NgSelectOption;
      SelectControlValueAccessor = $__m.SelectControlValueAccessor;
      $__export({
        NgSelectOption: $__m.NgSelectOption,
        SelectControlValueAccessor: $__m.SelectControlValueAccessor
      });
    }, function($__m) {
      NgSelectMultipleOption = $__m.NgSelectMultipleOption;
      SelectMultipleControlValueAccessor = $__m.SelectMultipleControlValueAccessor;
      $__export({
        NgSelectMultipleOption: $__m.NgSelectMultipleOption,
        SelectMultipleControlValueAccessor: $__m.SelectMultipleControlValueAccessor
      });
    }, function($__m) {
      MaxLengthValidator = $__m.MaxLengthValidator;
      MinLengthValidator = $__m.MinLengthValidator;
      PatternValidator = $__m.PatternValidator;
      RequiredValidator = $__m.RequiredValidator;
      $__export({
        MaxLengthValidator: $__m.MaxLengthValidator,
        MinLengthValidator: $__m.MinLengthValidator,
        PatternValidator: $__m.PatternValidator,
        RequiredValidator: $__m.RequiredValidator
      });
    }, function($__m) {
      $__export({NgControl: $__m.NgControl});
    }],
    execute: function() {
      SHARED_FORM_DIRECTIVES = [NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator];
      $__export("SHARED_FORM_DIRECTIVES", SHARED_FORM_DIRECTIVES);
      TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
      $__export("TEMPLATE_DRIVEN_DIRECTIVES", TEMPLATE_DRIVEN_DIRECTIVES);
      REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
      $__export("REACTIVE_DRIVEN_DIRECTIVES", REACTIVE_DRIVEN_DIRECTIVES);
      FORM_DIRECTIVES = [TEMPLATE_DRIVEN_DIRECTIVES, SHARED_FORM_DIRECTIVES];
      $__export("FORM_DIRECTIVES", FORM_DIRECTIVES);
      REACTIVE_FORM_DIRECTIVES = [REACTIVE_DRIVEN_DIRECTIVES, SHARED_FORM_DIRECTIVES];
      $__export("REACTIVE_FORM_DIRECTIVES", REACTIVE_FORM_DIRECTIVES);
      InternalFormsSharedModule = (function() {
        function InternalFormsSharedModule() {}
        InternalFormsSharedModule.decorators = [{
          type: NgModule,
          args: [{
            declarations: SHARED_FORM_DIRECTIVES,
            exports: SHARED_FORM_DIRECTIVES
          }]
        }];
        InternalFormsSharedModule.ctorParameters = [];
        return InternalFormsSharedModule;
      }());
      $__export("InternalFormsSharedModule", InternalFormsSharedModule);
    }
  };
});

$__System.register("76", ["c", "8d", "84", "70", "8e"], function($__export) {
  "use strict";
  var OpaqueToken,
      toPromise,
      StringMapWrapper,
      isPresent,
      isPromise,
      NG_VALIDATORS,
      NG_ASYNC_VALIDATORS,
      Validators;
  function isEmptyInputValue(value) {
    return value == null || typeof value === 'string' && value.length === 0;
  }
  function _convertToPromise(obj) {
    return isPromise(obj) ? obj : toPromise.call(obj);
  }
  function _executeValidators(control, validators) {
    return validators.map(function(v) {
      return v(control);
    });
  }
  function _executeAsyncValidators(control, validators) {
    return validators.map(function(v) {
      return v(control);
    });
  }
  function _mergeErrors(arrayOfErrors) {
    var res = arrayOfErrors.reduce(function(res, errors) {
      return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;
    }, {});
    return Object.keys(res).length === 0 ? null : res;
  }
  return {
    setters: [function($__m) {
      OpaqueToken = $__m.OpaqueToken;
    }, function($__m) {
      toPromise = $__m.toPromise;
    }, function($__m) {
      StringMapWrapper = $__m.StringMapWrapper;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      isPromise = $__m.isPromise;
    }],
    execute: function() {
      NG_VALIDATORS = new OpaqueToken('NgValidators');
      $__export("NG_VALIDATORS", NG_VALIDATORS);
      NG_ASYNC_VALIDATORS = new OpaqueToken('NgAsyncValidators');
      $__export("NG_ASYNC_VALIDATORS", NG_ASYNC_VALIDATORS);
      Validators = (function() {
        function Validators() {}
        Validators.required = function(control) {
          return isEmptyInputValue(control.value) ? {'required': true} : null;
        };
        Validators.minLength = function(minLength) {
          return function(control) {
            if (isEmptyInputValue(control.value)) {
              return null;
            }
            var length = typeof control.value === 'string' ? control.value.length : 0;
            return length < minLength ? {'minlength': {
                'requiredLength': minLength,
                'actualLength': length
              }} : null;
          };
        };
        Validators.maxLength = function(maxLength) {
          return function(control) {
            var length = typeof control.value === 'string' ? control.value.length : 0;
            return length > maxLength ? {'maxlength': {
                'requiredLength': maxLength,
                'actualLength': length
              }} : null;
          };
        };
        Validators.pattern = function(pattern) {
          return function(control) {
            if (isEmptyInputValue(control.value)) {
              return null;
            }
            var regex = new RegExp("^" + pattern + "$");
            var value = control.value;
            return regex.test(value) ? null : {'pattern': {
                'requiredPattern': "^" + pattern + "$",
                'actualValue': value
              }};
          };
        };
        Validators.nullValidator = function(c) {
          return null;
        };
        Validators.compose = function(validators) {
          if (!validators)
            return null;
          var presentValidators = validators.filter(isPresent);
          if (presentValidators.length == 0)
            return null;
          return function(control) {
            return _mergeErrors(_executeValidators(control, presentValidators));
          };
        };
        Validators.composeAsync = function(validators) {
          if (!validators)
            return null;
          var presentValidators = validators.filter(isPresent);
          if (presentValidators.length == 0)
            return null;
          return function(control) {
            var promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);
            return Promise.all(promises).then(_mergeErrors);
          };
        };
        return Validators;
      }());
      $__export("Validators", Validators);
    }
  };
});

$__System.register("87", ["c", "78"], function($__export) {
  "use strict";
  var Directive,
      ElementRef,
      Renderer,
      forwardRef,
      NG_VALUE_ACCESSOR,
      CHECKBOX_VALUE_ACCESSOR,
      CheckboxControlValueAccessor;
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      ElementRef = $__m.ElementRef;
      Renderer = $__m.Renderer;
      forwardRef = $__m.forwardRef;
    }, function($__m) {
      NG_VALUE_ACCESSOR = $__m.NG_VALUE_ACCESSOR;
    }],
    execute: function() {
      CHECKBOX_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function() {
          return CheckboxControlValueAccessor;
        }),
        multi: true
      };
      $__export("CHECKBOX_VALUE_ACCESSOR", CHECKBOX_VALUE_ACCESSOR);
      CheckboxControlValueAccessor = (function() {
        function CheckboxControlValueAccessor(_renderer, _elementRef) {
          this._renderer = _renderer;
          this._elementRef = _elementRef;
          this.onChange = function(_) {};
          this.onTouched = function() {};
        }
        CheckboxControlValueAccessor.prototype.writeValue = function(value) {
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);
        };
        CheckboxControlValueAccessor.prototype.registerOnChange = function(fn) {
          this.onChange = fn;
        };
        CheckboxControlValueAccessor.prototype.registerOnTouched = function(fn) {
          this.onTouched = fn;
        };
        CheckboxControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        CheckboxControlValueAccessor.decorators = [{
          type: Directive,
          args: [{
            selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
            host: {
              '(change)': 'onChange($event.target.checked)',
              '(blur)': 'onTouched()'
            },
            providers: [CHECKBOX_VALUE_ACCESSOR]
          }]
        }];
        CheckboxControlValueAccessor.ctorParameters = [{type: Renderer}, {type: ElementRef}];
        return CheckboxControlValueAccessor;
      }());
      $__export("CheckboxControlValueAccessor", CheckboxControlValueAccessor);
    }
  };
});

$__System.register("88", ["c", "70", "78"], function($__export) {
  "use strict";
  var Directive,
      ElementRef,
      Renderer,
      forwardRef,
      isBlank,
      NG_VALUE_ACCESSOR,
      DEFAULT_VALUE_ACCESSOR,
      DefaultValueAccessor;
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      ElementRef = $__m.ElementRef;
      Renderer = $__m.Renderer;
      forwardRef = $__m.forwardRef;
    }, function($__m) {
      isBlank = $__m.isBlank;
    }, function($__m) {
      NG_VALUE_ACCESSOR = $__m.NG_VALUE_ACCESSOR;
    }],
    execute: function() {
      DEFAULT_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function() {
          return DefaultValueAccessor;
        }),
        multi: true
      };
      $__export("DEFAULT_VALUE_ACCESSOR", DEFAULT_VALUE_ACCESSOR);
      DefaultValueAccessor = (function() {
        function DefaultValueAccessor(_renderer, _elementRef) {
          this._renderer = _renderer;
          this._elementRef = _elementRef;
          this.onChange = function(_) {};
          this.onTouched = function() {};
        }
        DefaultValueAccessor.prototype.writeValue = function(value) {
          var normalizedValue = isBlank(value) ? '' : value;
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
        };
        DefaultValueAccessor.prototype.registerOnChange = function(fn) {
          this.onChange = fn;
        };
        DefaultValueAccessor.prototype.registerOnTouched = function(fn) {
          this.onTouched = fn;
        };
        DefaultValueAccessor.prototype.setDisabledState = function(isDisabled) {
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        DefaultValueAccessor.decorators = [{
          type: Directive,
          args: [{
            selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
            host: {
              '(input)': 'onChange($event.target.value)',
              '(blur)': 'onTouched()'
            },
            providers: [DEFAULT_VALUE_ACCESSOR]
          }]
        }];
        DefaultValueAccessor.ctorParameters = [{type: Renderer}, {type: ElementRef}];
        return DefaultValueAccessor;
      }());
      $__export("DefaultValueAccessor", DefaultValueAccessor);
    }
  };
});

$__System.register("8f", [], function($__export) {
  "use strict";
  function normalizeValidator(validator) {
    if (validator.validate !== undefined) {
      return function(c) {
        return validator.validate(c);
      };
    } else {
      return validator;
    }
  }
  function normalizeAsyncValidator(validator) {
    if (validator.validate !== undefined) {
      return function(c) {
        return validator.validate(c);
      };
    } else {
      return validator;
    }
  }
  $__export("normalizeValidator", normalizeValidator);
  $__export("normalizeAsyncValidator", normalizeAsyncValidator);
  return {
    setters: [],
    execute: function() {}
  };
});

$__System.register("89", ["c", "70", "78"], function($__export) {
  "use strict";
  var Directive,
      ElementRef,
      Renderer,
      forwardRef,
      isBlank,
      NG_VALUE_ACCESSOR,
      NUMBER_VALUE_ACCESSOR,
      NumberValueAccessor;
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      ElementRef = $__m.ElementRef;
      Renderer = $__m.Renderer;
      forwardRef = $__m.forwardRef;
    }, function($__m) {
      isBlank = $__m.isBlank;
    }, function($__m) {
      NG_VALUE_ACCESSOR = $__m.NG_VALUE_ACCESSOR;
    }],
    execute: function() {
      NUMBER_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function() {
          return NumberValueAccessor;
        }),
        multi: true
      };
      $__export("NUMBER_VALUE_ACCESSOR", NUMBER_VALUE_ACCESSOR);
      NumberValueAccessor = (function() {
        function NumberValueAccessor(_renderer, _elementRef) {
          this._renderer = _renderer;
          this._elementRef = _elementRef;
          this.onChange = function(_) {};
          this.onTouched = function() {};
        }
        NumberValueAccessor.prototype.writeValue = function(value) {
          var normalizedValue = isBlank(value) ? '' : value;
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
        };
        NumberValueAccessor.prototype.registerOnChange = function(fn) {
          this.onChange = function(value) {
            fn(value == '' ? null : parseFloat(value));
          };
        };
        NumberValueAccessor.prototype.registerOnTouched = function(fn) {
          this.onTouched = fn;
        };
        NumberValueAccessor.prototype.setDisabledState = function(isDisabled) {
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        NumberValueAccessor.decorators = [{
          type: Directive,
          args: [{
            selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',
            host: {
              '(change)': 'onChange($event.target.value)',
              '(input)': 'onChange($event.target.value)',
              '(blur)': 'onTouched()'
            },
            providers: [NUMBER_VALUE_ACCESSOR]
          }]
        }];
        NumberValueAccessor.ctorParameters = [{type: Renderer}, {type: ElementRef}];
        return NumberValueAccessor;
      }());
      $__export("NumberValueAccessor", NumberValueAccessor);
    }
  };
});

$__System.register("83", ["70"], function($__export) {
  "use strict";
  var isPresent,
      AbstractControlDirective;
  return {
    setters: [function($__m) {
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      AbstractControlDirective = (function() {
        function AbstractControlDirective() {}
        Object.defineProperty(AbstractControlDirective.prototype, "control", {
          get: function() {
            throw new Error('unimplemented');
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "value", {
          get: function() {
            return isPresent(this.control) ? this.control.value : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "valid", {
          get: function() {
            return isPresent(this.control) ? this.control.valid : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "invalid", {
          get: function() {
            return isPresent(this.control) ? this.control.invalid : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "pending", {
          get: function() {
            return isPresent(this.control) ? this.control.pending : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "errors", {
          get: function() {
            return isPresent(this.control) ? this.control.errors : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
          get: function() {
            return isPresent(this.control) ? this.control.pristine : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
          get: function() {
            return isPresent(this.control) ? this.control.dirty : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "touched", {
          get: function() {
            return isPresent(this.control) ? this.control.touched : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
          get: function() {
            return isPresent(this.control) ? this.control.untouched : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "disabled", {
          get: function() {
            return isPresent(this.control) ? this.control.disabled : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "enabled", {
          get: function() {
            return isPresent(this.control) ? this.control.enabled : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "statusChanges", {
          get: function() {
            return isPresent(this.control) ? this.control.statusChanges : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "valueChanges", {
          get: function() {
            return isPresent(this.control) ? this.control.valueChanges : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "path", {
          get: function() {
            return null;
          },
          enumerable: true,
          configurable: true
        });
        AbstractControlDirective.prototype.reset = function(value) {
          if (value === void 0) {
            value = undefined;
          }
          if (isPresent(this.control))
            this.control.reset(value);
        };
        return AbstractControlDirective;
      }());
      $__export("AbstractControlDirective", AbstractControlDirective);
    }
  };
});

$__System.register("72", ["83"], function($__export) {
  "use strict";
  var __extends,
      AbstractControlDirective,
      NgControl;
  function unimplemented() {
    throw new Error('unimplemented');
  }
  return {
    setters: [function($__m) {
      AbstractControlDirective = $__m.AbstractControlDirective;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      NgControl = (function(_super) {
        __extends(NgControl, _super);
        function NgControl() {
          _super.apply(this, arguments);
          this._parent = null;
          this.name = null;
          this.valueAccessor = null;
          this._rawValidators = [];
          this._rawAsyncValidators = [];
        }
        Object.defineProperty(NgControl.prototype, "validator", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgControl.prototype, "asyncValidator", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        return NgControl;
      }(AbstractControlDirective));
      $__export("NgControl", NgControl);
    }
  };
});

$__System.register("8a", ["c", "78", "72"], function($__export) {
  "use strict";
  var Directive,
      ElementRef,
      Injectable,
      Injector,
      Input,
      Renderer,
      forwardRef,
      NG_VALUE_ACCESSOR,
      NgControl,
      RADIO_VALUE_ACCESSOR,
      RadioControlRegistry,
      RadioControlValueAccessor;
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      ElementRef = $__m.ElementRef;
      Injectable = $__m.Injectable;
      Injector = $__m.Injector;
      Input = $__m.Input;
      Renderer = $__m.Renderer;
      forwardRef = $__m.forwardRef;
    }, function($__m) {
      NG_VALUE_ACCESSOR = $__m.NG_VALUE_ACCESSOR;
    }, function($__m) {
      NgControl = $__m.NgControl;
    }],
    execute: function() {
      RADIO_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function() {
          return RadioControlValueAccessor;
        }),
        multi: true
      };
      $__export("RADIO_VALUE_ACCESSOR", RADIO_VALUE_ACCESSOR);
      RadioControlRegistry = (function() {
        function RadioControlRegistry() {
          this._accessors = [];
        }
        RadioControlRegistry.prototype.add = function(control, accessor) {
          this._accessors.push([control, accessor]);
        };
        RadioControlRegistry.prototype.remove = function(accessor) {
          var indexToRemove = -1;
          for (var i = 0; i < this._accessors.length; ++i) {
            if (this._accessors[i][1] === accessor) {
              indexToRemove = i;
            }
          }
          this._accessors.splice(indexToRemove, 1);
        };
        RadioControlRegistry.prototype.select = function(accessor) {
          var _this = this;
          this._accessors.forEach(function(c) {
            if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {
              c[1].fireUncheck(accessor.value);
            }
          });
        };
        RadioControlRegistry.prototype._isSameGroup = function(controlPair, accessor) {
          if (!controlPair[0].control)
            return false;
          return controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name;
        };
        RadioControlRegistry.decorators = [{type: Injectable}];
        RadioControlRegistry.ctorParameters = [];
        return RadioControlRegistry;
      }());
      $__export("RadioControlRegistry", RadioControlRegistry);
      RadioControlValueAccessor = (function() {
        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
          this._renderer = _renderer;
          this._elementRef = _elementRef;
          this._registry = _registry;
          this._injector = _injector;
          this.onChange = function() {};
          this.onTouched = function() {};
        }
        RadioControlValueAccessor.prototype.ngOnInit = function() {
          this._control = this._injector.get(NgControl);
          this._checkName();
          this._registry.add(this._control, this);
        };
        RadioControlValueAccessor.prototype.ngOnDestroy = function() {
          this._registry.remove(this);
        };
        RadioControlValueAccessor.prototype.writeValue = function(value) {
          this._state = value === this.value;
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);
        };
        RadioControlValueAccessor.prototype.registerOnChange = function(fn) {
          var _this = this;
          this._fn = fn;
          this.onChange = function() {
            fn(_this.value);
            _this._registry.select(_this);
          };
        };
        RadioControlValueAccessor.prototype.fireUncheck = function(value) {
          this.writeValue(value);
        };
        RadioControlValueAccessor.prototype.registerOnTouched = function(fn) {
          this.onTouched = fn;
        };
        RadioControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        RadioControlValueAccessor.prototype._checkName = function() {
          if (this.name && this.formControlName && this.name !== this.formControlName) {
            this._throwNameError();
          }
          if (!this.name && this.formControlName)
            this.name = this.formControlName;
        };
        RadioControlValueAccessor.prototype._throwNameError = function() {
          throw new Error("\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    ");
        };
        RadioControlValueAccessor.decorators = [{
          type: Directive,
          args: [{
            selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
            host: {
              '(change)': 'onChange()',
              '(blur)': 'onTouched()'
            },
            providers: [RADIO_VALUE_ACCESSOR]
          }]
        }];
        RadioControlValueAccessor.ctorParameters = [{type: Renderer}, {type: ElementRef}, {type: RadioControlRegistry}, {type: Injector}];
        RadioControlValueAccessor.propDecorators = {
          'name': [{type: Input}],
          'formControlName': [{type: Input}],
          'value': [{type: Input}]
        };
        return RadioControlValueAccessor;
      }());
      $__export("RadioControlValueAccessor", RadioControlValueAccessor);
    }
  };
});

$__System.register("8b", ["c", "84", "70", "78"], function($__export) {
  "use strict";
  var Directive,
      ElementRef,
      Host,
      Input,
      Optional,
      Renderer,
      forwardRef,
      MapWrapper,
      isBlank,
      isPresent,
      isPrimitive,
      looseIdentical,
      NG_VALUE_ACCESSOR,
      SELECT_VALUE_ACCESSOR,
      SelectControlValueAccessor,
      NgSelectOption;
  function _buildValueString(id, value) {
    if (isBlank(id))
      return "" + value;
    if (!isPrimitive(value))
      value = 'Object';
    return (id + ": " + value).slice(0, 50);
  }
  function _extractId(valueString) {
    return valueString.split(':')[0];
  }
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      ElementRef = $__m.ElementRef;
      Host = $__m.Host;
      Input = $__m.Input;
      Optional = $__m.Optional;
      Renderer = $__m.Renderer;
      forwardRef = $__m.forwardRef;
    }, function($__m) {
      MapWrapper = $__m.MapWrapper;
    }, function($__m) {
      isBlank = $__m.isBlank;
      isPresent = $__m.isPresent;
      isPrimitive = $__m.isPrimitive;
      looseIdentical = $__m.looseIdentical;
    }, function($__m) {
      NG_VALUE_ACCESSOR = $__m.NG_VALUE_ACCESSOR;
    }],
    execute: function() {
      SELECT_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function() {
          return SelectControlValueAccessor;
        }),
        multi: true
      };
      $__export("SELECT_VALUE_ACCESSOR", SELECT_VALUE_ACCESSOR);
      SelectControlValueAccessor = (function() {
        function SelectControlValueAccessor(_renderer, _elementRef) {
          this._renderer = _renderer;
          this._elementRef = _elementRef;
          this._optionMap = new Map();
          this._idCounter = 0;
          this.onChange = function(_) {};
          this.onTouched = function() {};
        }
        SelectControlValueAccessor.prototype.writeValue = function(value) {
          this.value = value;
          var valueString = _buildValueString(this._getOptionId(value), value);
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);
        };
        SelectControlValueAccessor.prototype.registerOnChange = function(fn) {
          var _this = this;
          this.onChange = function(valueString) {
            _this.value = valueString;
            fn(_this._getOptionValue(valueString));
          };
        };
        SelectControlValueAccessor.prototype.registerOnTouched = function(fn) {
          this.onTouched = fn;
        };
        SelectControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        SelectControlValueAccessor.prototype._registerOption = function() {
          return (this._idCounter++).toString();
        };
        SelectControlValueAccessor.prototype._getOptionId = function(value) {
          for (var _i = 0,
              _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {
            var id = _a[_i];
            if (looseIdentical(this._optionMap.get(id), value))
              return id;
          }
          return null;
        };
        SelectControlValueAccessor.prototype._getOptionValue = function(valueString) {
          var value = this._optionMap.get(_extractId(valueString));
          return isPresent(value) ? value : valueString;
        };
        SelectControlValueAccessor.decorators = [{
          type: Directive,
          args: [{
            selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
            host: {
              '(change)': 'onChange($event.target.value)',
              '(blur)': 'onTouched()'
            },
            providers: [SELECT_VALUE_ACCESSOR]
          }]
        }];
        SelectControlValueAccessor.ctorParameters = [{type: Renderer}, {type: ElementRef}];
        return SelectControlValueAccessor;
      }());
      $__export("SelectControlValueAccessor", SelectControlValueAccessor);
      NgSelectOption = (function() {
        function NgSelectOption(_element, _renderer, _select) {
          this._element = _element;
          this._renderer = _renderer;
          this._select = _select;
          if (isPresent(this._select))
            this.id = this._select._registerOption();
        }
        Object.defineProperty(NgSelectOption.prototype, "ngValue", {
          set: function(value) {
            if (this._select == null)
              return;
            this._select._optionMap.set(this.id, value);
            this._setElementValue(_buildValueString(this.id, value));
            this._select.writeValue(this._select.value);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgSelectOption.prototype, "value", {
          set: function(value) {
            this._setElementValue(value);
            if (isPresent(this._select))
              this._select.writeValue(this._select.value);
          },
          enumerable: true,
          configurable: true
        });
        NgSelectOption.prototype._setElementValue = function(value) {
          this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
        };
        NgSelectOption.prototype.ngOnDestroy = function() {
          if (isPresent(this._select)) {
            this._select._optionMap.delete(this.id);
            this._select.writeValue(this._select.value);
          }
        };
        NgSelectOption.decorators = [{
          type: Directive,
          args: [{selector: 'option'}]
        }];
        NgSelectOption.ctorParameters = [{type: ElementRef}, {type: Renderer}, {
          type: SelectControlValueAccessor,
          decorators: [{type: Optional}, {type: Host}]
        }];
        NgSelectOption.propDecorators = {
          'ngValue': [{
            type: Input,
            args: ['ngValue']
          }],
          'value': [{
            type: Input,
            args: ['value']
          }]
        };
        return NgSelectOption;
      }());
      $__export("NgSelectOption", NgSelectOption);
    }
  };
});

$__System.register("84", ["70"], function($__export) {
  "use strict";
  var getSymbolIterator,
      isJsObject,
      isPresent,
      _arrayFromMap,
      MapWrapper,
      StringMapWrapper,
      ListWrapper;
  function _flattenArray(source, target) {
    if (isPresent(source)) {
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        if (Array.isArray(item)) {
          _flattenArray(item, target);
        } else {
          target.push(item);
        }
      }
    }
    return target;
  }
  function isListLikeIterable(obj) {
    if (!isJsObject(obj))
      return false;
    return Array.isArray(obj) || (!(obj instanceof Map) && getSymbolIterator() in obj);
  }
  function areIterablesEqual(a, b, comparator) {
    var iterator1 = a[getSymbolIterator()]();
    var iterator2 = b[getSymbolIterator()]();
    while (true) {
      var item1 = iterator1.next();
      var item2 = iterator2.next();
      if (item1.done && item2.done)
        return true;
      if (item1.done || item2.done)
        return false;
      if (!comparator(item1.value, item2.value))
        return false;
    }
  }
  function iterateListLike(obj, fn) {
    if (Array.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        fn(obj[i]);
      }
    } else {
      var iterator = obj[getSymbolIterator()]();
      var item = void 0;
      while (!((item = iterator.next()).done)) {
        fn(item.value);
      }
    }
  }
  $__export("isListLikeIterable", isListLikeIterable);
  $__export("areIterablesEqual", areIterablesEqual);
  $__export("iterateListLike", iterateListLike);
  return {
    setters: [function($__m) {
      getSymbolIterator = $__m.getSymbolIterator;
      isJsObject = $__m.isJsObject;
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      _arrayFromMap = (function() {
        try {
          if ((new Map()).values().next) {
            return function createArrayFromMap(m, getValues) {
              return getValues ? Array.from(m.values()) : Array.from(m.keys());
            };
          }
        } catch (e) {}
        return function createArrayFromMapWithForeach(m, getValues) {
          var res = new Array(m.size),
              i = 0;
          m.forEach(function(v, k) {
            res[i] = getValues ? v : k;
            i++;
          });
          return res;
        };
      })();
      MapWrapper = (function() {
        function MapWrapper() {}
        MapWrapper.createFromStringMap = function(stringMap) {
          var result = new Map();
          for (var prop in stringMap) {
            result.set(prop, stringMap[prop]);
          }
          return result;
        };
        MapWrapper.keys = function(m) {
          return _arrayFromMap(m, false);
        };
        MapWrapper.values = function(m) {
          return _arrayFromMap(m, true);
        };
        return MapWrapper;
      }());
      $__export("MapWrapper", MapWrapper);
      StringMapWrapper = (function() {
        function StringMapWrapper() {}
        StringMapWrapper.merge = function(m1, m2) {
          var m = {};
          for (var _i = 0,
              _a = Object.keys(m1); _i < _a.length; _i++) {
            var k = _a[_i];
            m[k] = m1[k];
          }
          for (var _b = 0,
              _c = Object.keys(m2); _b < _c.length; _b++) {
            var k = _c[_b];
            m[k] = m2[k];
          }
          return m;
        };
        StringMapWrapper.equals = function(m1, m2) {
          var k1 = Object.keys(m1);
          var k2 = Object.keys(m2);
          if (k1.length != k2.length) {
            return false;
          }
          for (var i = 0; i < k1.length; i++) {
            var key = k1[i];
            if (m1[key] !== m2[key]) {
              return false;
            }
          }
          return true;
        };
        return StringMapWrapper;
      }());
      $__export("StringMapWrapper", StringMapWrapper);
      ListWrapper = (function() {
        function ListWrapper() {}
        ListWrapper.removeAll = function(list, items) {
          for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            list.splice(index, 1);
          }
        };
        ListWrapper.remove = function(list, el) {
          var index = list.indexOf(el);
          if (index > -1) {
            list.splice(index, 1);
            return true;
          }
          return false;
        };
        ListWrapper.equals = function(a, b) {
          if (a.length != b.length)
            return false;
          for (var i = 0; i < a.length; ++i) {
            if (a[i] !== b[i])
              return false;
          }
          return true;
        };
        ListWrapper.maximum = function(list, predicate) {
          if (list.length == 0) {
            return null;
          }
          var solution = null;
          var maxValue = -Infinity;
          for (var index = 0; index < list.length; index++) {
            var candidate = list[index];
            if (candidate == null) {
              continue;
            }
            var candidateValue = predicate(candidate);
            if (candidateValue > maxValue) {
              solution = candidate;
              maxValue = candidateValue;
            }
          }
          return solution;
        };
        ListWrapper.flatten = function(list) {
          var target = [];
          _flattenArray(list, target);
          return target;
        };
        return ListWrapper;
      }());
      $__export("ListWrapper", ListWrapper);
    }
  };
});

$__System.register("70", [], function($__export) {
  "use strict";
  var globalScope,
      _global,
      STRING_MAP_PROTO,
      NumberWrapper,
      _symbolIterator;
  function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
  }
  function getTypeNameForDebugging(type) {
    return type['name'] || (typeof type === 'undefined' ? 'undefined' : $traceurRuntime.typeof(type));
  }
  function isPresent(obj) {
    return obj != null;
  }
  function isBlank(obj) {
    return obj == null;
  }
  function isStrictStringMap(obj) {
    return (typeof obj === 'undefined' ? 'undefined' : $traceurRuntime.typeof(obj)) === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
  }
  function isDate(obj) {
    return obj instanceof Date && !isNaN(obj.valueOf());
  }
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token === undefined || token === null) {
      return '' + token;
    }
    if (token.overriddenName) {
      return token.overriddenName;
    }
    if (token.name) {
      return token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
  }
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || (typeof o === 'undefined' ? 'undefined' : $traceurRuntime.typeof(o)) === 'object');
  }
  function print(obj) {
    console.log(obj);
  }
  function warn(obj) {
    console.warn(obj);
  }
  function setValueOnPath(global, path, value) {
    var parts = path.split('.');
    var obj = global;
    while (parts.length > 1) {
      var name = parts.shift();
      if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
        obj = obj[name];
      } else {
        obj = obj[name] = {};
      }
    }
    if (obj === undefined || obj === null) {
      obj = {};
    }
    obj[parts.shift()] = value;
  }
  function getSymbolIterator() {
    if (!_symbolIterator) {
      if (globalScope.Symbol && Symbol.iterator) {
        _symbolIterator = Symbol.iterator;
      } else {
        var keys = Object.getOwnPropertyNames(Map.prototype);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
            _symbolIterator = key;
          }
        }
      }
    }
    return _symbolIterator;
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  function escapeRegExp(s) {
    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }
  $__export("scheduleMicroTask", scheduleMicroTask);
  $__export("getTypeNameForDebugging", getTypeNameForDebugging);
  $__export("isPresent", isPresent);
  $__export("isBlank", isBlank);
  $__export("isStrictStringMap", isStrictStringMap);
  $__export("isDate", isDate);
  $__export("stringify", stringify);
  $__export("looseIdentical", looseIdentical);
  $__export("isJsObject", isJsObject);
  $__export("print", print);
  $__export("warn", warn);
  $__export("setValueOnPath", setValueOnPath);
  $__export("getSymbolIterator", getSymbolIterator);
  $__export("isPrimitive", isPrimitive);
  $__export("escapeRegExp", escapeRegExp);
  return {
    setters: [],
    execute: function() {
      if (typeof window === 'undefined') {
        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
          globalScope = self;
        } else {
          globalScope = global;
        }
      } else {
        globalScope = window;
      }
      _global = globalScope;
      $__export("global", _global);
      _global.assert = function assert(condition) {};
      STRING_MAP_PROTO = Object.getPrototypeOf({});
      NumberWrapper = (function() {
        function NumberWrapper() {}
        NumberWrapper.parseIntAutoRadix = function(text) {
          var result = parseInt(text);
          if (isNaN(result)) {
            throw new Error('Invalid integer literal when parsing ' + text);
          }
          return result;
        };
        NumberWrapper.parseInt = function(text, radix) {
          if (radix == 10) {
            if (/^(\-|\+)?[0-9]+$/.test(text)) {
              return parseInt(text, radix);
            }
          } else if (radix == 16) {
            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
              return parseInt(text, radix);
            }
          } else {
            var result = parseInt(text, radix);
            if (!isNaN(result)) {
              return result;
            }
          }
          throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
        };
        NumberWrapper.isNumeric = function(value) {
          return !isNaN(value - parseFloat(value));
        };
        return NumberWrapper;
      }());
      $__export("NumberWrapper", NumberWrapper);
      _symbolIterator = null;
    }
  };
});

$__System.register("78", ["c"], function($__export) {
  "use strict";
  var OpaqueToken,
      NG_VALUE_ACCESSOR;
  return {
    setters: [function($__m) {
      OpaqueToken = $__m.OpaqueToken;
    }],
    execute: function() {
      NG_VALUE_ACCESSOR = new OpaqueToken('NgValueAccessor');
      $__export("NG_VALUE_ACCESSOR", NG_VALUE_ACCESSOR);
    }
  };
});

$__System.register("8c", ["c", "84", "70", "78"], function($__export) {
  "use strict";
  var Directive,
      ElementRef,
      Host,
      Input,
      Optional,
      Renderer,
      forwardRef,
      MapWrapper,
      isBlank,
      isPresent,
      isPrimitive,
      looseIdentical,
      NG_VALUE_ACCESSOR,
      SELECT_MULTIPLE_VALUE_ACCESSOR,
      HTMLCollection,
      SelectMultipleControlValueAccessor,
      NgSelectMultipleOption,
      SELECT_DIRECTIVES;
  function _buildValueString(id, value) {
    if (isBlank(id))
      return "" + value;
    if (typeof value === 'string')
      value = "'" + value + "'";
    if (!isPrimitive(value))
      value = 'Object';
    return (id + ": " + value).slice(0, 50);
  }
  function _extractId(valueString) {
    return valueString.split(':')[0];
  }
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      ElementRef = $__m.ElementRef;
      Host = $__m.Host;
      Input = $__m.Input;
      Optional = $__m.Optional;
      Renderer = $__m.Renderer;
      forwardRef = $__m.forwardRef;
    }, function($__m) {
      MapWrapper = $__m.MapWrapper;
    }, function($__m) {
      isBlank = $__m.isBlank;
      isPresent = $__m.isPresent;
      isPrimitive = $__m.isPrimitive;
      looseIdentical = $__m.looseIdentical;
    }, function($__m) {
      NG_VALUE_ACCESSOR = $__m.NG_VALUE_ACCESSOR;
    }],
    execute: function() {
      SELECT_MULTIPLE_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function() {
          return SelectMultipleControlValueAccessor;
        }),
        multi: true
      };
      $__export("SELECT_MULTIPLE_VALUE_ACCESSOR", SELECT_MULTIPLE_VALUE_ACCESSOR);
      HTMLCollection = (function() {
        function HTMLCollection() {}
        return HTMLCollection;
      }());
      SelectMultipleControlValueAccessor = (function() {
        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {
          this._renderer = _renderer;
          this._elementRef = _elementRef;
          this._optionMap = new Map();
          this._idCounter = 0;
          this.onChange = function(_) {};
          this.onTouched = function() {};
        }
        SelectMultipleControlValueAccessor.prototype.writeValue = function(value) {
          var _this = this;
          this.value = value;
          if (value == null)
            return;
          var values = value;
          var ids = values.map(function(v) {
            return _this._getOptionId(v);
          });
          this._optionMap.forEach(function(opt, o) {
            opt._setSelected(ids.indexOf(o.toString()) > -1);
          });
        };
        SelectMultipleControlValueAccessor.prototype.registerOnChange = function(fn) {
          var _this = this;
          this.onChange = function(_) {
            var selected = [];
            if (_.hasOwnProperty('selectedOptions')) {
              var options = _.selectedOptions;
              for (var i = 0; i < options.length; i++) {
                var opt = options.item(i);
                var val = _this._getOptionValue(opt.value);
                selected.push(val);
              }
            } else {
              var options = _.options;
              for (var i = 0; i < options.length; i++) {
                var opt = options.item(i);
                if (opt.selected) {
                  var val = _this._getOptionValue(opt.value);
                  selected.push(val);
                }
              }
            }
            fn(selected);
          };
        };
        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function(fn) {
          this.onTouched = fn;
        };
        SelectMultipleControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
          this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        SelectMultipleControlValueAccessor.prototype._registerOption = function(value) {
          var id = (this._idCounter++).toString();
          this._optionMap.set(id, value);
          return id;
        };
        SelectMultipleControlValueAccessor.prototype._getOptionId = function(value) {
          for (var _i = 0,
              _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {
            var id = _a[_i];
            if (looseIdentical(this._optionMap.get(id)._value, value))
              return id;
          }
          return null;
        };
        SelectMultipleControlValueAccessor.prototype._getOptionValue = function(valueString) {
          var opt = this._optionMap.get(_extractId(valueString));
          return isPresent(opt) ? opt._value : valueString;
        };
        SelectMultipleControlValueAccessor.decorators = [{
          type: Directive,
          args: [{
            selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',
            host: {
              '(change)': 'onChange($event.target)',
              '(blur)': 'onTouched()'
            },
            providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
          }]
        }];
        SelectMultipleControlValueAccessor.ctorParameters = [{type: Renderer}, {type: ElementRef}];
        return SelectMultipleControlValueAccessor;
      }());
      $__export("SelectMultipleControlValueAccessor", SelectMultipleControlValueAccessor);
      NgSelectMultipleOption = (function() {
        function NgSelectMultipleOption(_element, _renderer, _select) {
          this._element = _element;
          this._renderer = _renderer;
          this._select = _select;
          if (isPresent(this._select)) {
            this.id = this._select._registerOption(this);
          }
        }
        Object.defineProperty(NgSelectMultipleOption.prototype, "ngValue", {
          set: function(value) {
            if (this._select == null)
              return;
            this._value = value;
            this._setElementValue(_buildValueString(this.id, value));
            this._select.writeValue(this._select.value);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgSelectMultipleOption.prototype, "value", {
          set: function(value) {
            if (isPresent(this._select)) {
              this._value = value;
              this._setElementValue(_buildValueString(this.id, value));
              this._select.writeValue(this._select.value);
            } else {
              this._setElementValue(value);
            }
          },
          enumerable: true,
          configurable: true
        });
        NgSelectMultipleOption.prototype._setElementValue = function(value) {
          this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
        };
        NgSelectMultipleOption.prototype._setSelected = function(selected) {
          this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);
        };
        NgSelectMultipleOption.prototype.ngOnDestroy = function() {
          if (isPresent(this._select)) {
            this._select._optionMap.delete(this.id);
            this._select.writeValue(this._select.value);
          }
        };
        NgSelectMultipleOption.decorators = [{
          type: Directive,
          args: [{selector: 'option'}]
        }];
        NgSelectMultipleOption.ctorParameters = [{type: ElementRef}, {type: Renderer}, {
          type: SelectMultipleControlValueAccessor,
          decorators: [{type: Optional}, {type: Host}]
        }];
        NgSelectMultipleOption.propDecorators = {
          'ngValue': [{
            type: Input,
            args: ['ngValue']
          }],
          'value': [{
            type: Input,
            args: ['value']
          }]
        };
        return NgSelectMultipleOption;
      }());
      $__export("NgSelectMultipleOption", NgSelectMultipleOption);
      SELECT_DIRECTIVES = [SelectMultipleControlValueAccessor, NgSelectMultipleOption];
      $__export("SELECT_DIRECTIVES", SELECT_DIRECTIVES);
    }
  };
});

$__System.register("7b", ["70", "76", "87", "88", "8f", "89", "8a", "8b", "8c"], function($__export) {
  "use strict";
  var isBlank,
      isPresent,
      looseIdentical,
      Validators,
      CheckboxControlValueAccessor,
      DefaultValueAccessor,
      normalizeAsyncValidator,
      normalizeValidator,
      NumberValueAccessor,
      RadioControlValueAccessor,
      SelectControlValueAccessor,
      SelectMultipleControlValueAccessor,
      BUILTIN_ACCESSORS;
  function controlPath(name, parent) {
    return parent.path.concat([name]);
  }
  function setUpControl(control, dir) {
    if (!control)
      _throwError(dir, 'Cannot find control with');
    if (!dir.valueAccessor)
      _throwError(dir, 'No value accessor for form control with');
    control.validator = Validators.compose([control.validator, dir.validator]);
    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
    dir.valueAccessor.writeValue(control.value);
    dir.valueAccessor.registerOnChange(function(newValue) {
      dir.viewToModelUpdate(newValue);
      control.markAsDirty();
      control.setValue(newValue, {emitModelToViewChange: false});
    });
    dir.valueAccessor.registerOnTouched(function() {
      return control.markAsTouched();
    });
    control.registerOnChange(function(newValue, emitModelEvent) {
      dir.valueAccessor.writeValue(newValue);
      if (emitModelEvent)
        dir.viewToModelUpdate(newValue);
    });
    if (dir.valueAccessor.setDisabledState) {
      control.registerOnDisabledChange(function(isDisabled) {
        dir.valueAccessor.setDisabledState(isDisabled);
      });
    }
    dir._rawValidators.forEach(function(validator) {
      if (validator.registerOnValidatorChange)
        validator.registerOnValidatorChange(function() {
          return control.updateValueAndValidity();
        });
    });
    dir._rawAsyncValidators.forEach(function(validator) {
      if (validator.registerOnValidatorChange)
        validator.registerOnValidatorChange(function() {
          return control.updateValueAndValidity();
        });
    });
  }
  function cleanUpControl(control, dir) {
    dir.valueAccessor.registerOnChange(function() {
      return _noControlError(dir);
    });
    dir.valueAccessor.registerOnTouched(function() {
      return _noControlError(dir);
    });
    dir._rawValidators.forEach(function(validator) {
      return validator.registerOnValidatorChange(null);
    });
    dir._rawAsyncValidators.forEach(function(validator) {
      return validator.registerOnValidatorChange(null);
    });
    if (control)
      control._clearChangeFns();
  }
  function setUpFormContainer(control, dir) {
    if (isBlank(control))
      _throwError(dir, 'Cannot find control with');
    control.validator = Validators.compose([control.validator, dir.validator]);
    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
  }
  function _noControlError(dir) {
    return _throwError(dir, 'There is no FormControl instance attached to form control element with');
  }
  function _throwError(dir, message) {
    var messageEnd;
    if (dir.path.length > 1) {
      messageEnd = "path: '" + dir.path.join(' -> ') + "'";
    } else if (dir.path[0]) {
      messageEnd = "name: '" + dir.path + "'";
    } else {
      messageEnd = 'unspecified name attribute';
    }
    throw new Error(message + " " + messageEnd);
  }
  function composeValidators(validators) {
    return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;
  }
  function composeAsyncValidators(validators) {
    return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) : null;
  }
  function isPropertyUpdated(changes, viewModel) {
    if (!changes.hasOwnProperty('model'))
      return false;
    var change = changes['model'];
    if (change.isFirstChange())
      return true;
    return !looseIdentical(viewModel, change.currentValue);
  }
  function isBuiltInAccessor(valueAccessor) {
    return BUILTIN_ACCESSORS.some(function(a) {
      return valueAccessor.constructor === a;
    });
  }
  function selectValueAccessor(dir, valueAccessors) {
    if (!valueAccessors)
      return null;
    var defaultAccessor;
    var builtinAccessor;
    var customAccessor;
    valueAccessors.forEach(function(v) {
      if (v.constructor === DefaultValueAccessor) {
        defaultAccessor = v;
      } else if (isBuiltInAccessor(v)) {
        if (builtinAccessor)
          _throwError(dir, 'More than one built-in value accessor matches form control with');
        builtinAccessor = v;
      } else {
        if (customAccessor)
          _throwError(dir, 'More than one custom value accessor matches form control with');
        customAccessor = v;
      }
    });
    if (customAccessor)
      return customAccessor;
    if (builtinAccessor)
      return builtinAccessor;
    if (defaultAccessor)
      return defaultAccessor;
    _throwError(dir, 'No valid value accessor for form control with');
    return null;
  }
  $__export("controlPath", controlPath);
  $__export("setUpControl", setUpControl);
  $__export("cleanUpControl", cleanUpControl);
  $__export("setUpFormContainer", setUpFormContainer);
  $__export("composeValidators", composeValidators);
  $__export("composeAsyncValidators", composeAsyncValidators);
  $__export("isPropertyUpdated", isPropertyUpdated);
  $__export("isBuiltInAccessor", isBuiltInAccessor);
  $__export("selectValueAccessor", selectValueAccessor);
  return {
    setters: [function($__m) {
      isBlank = $__m.isBlank;
      isPresent = $__m.isPresent;
      looseIdentical = $__m.looseIdentical;
    }, function($__m) {
      Validators = $__m.Validators;
    }, function($__m) {
      CheckboxControlValueAccessor = $__m.CheckboxControlValueAccessor;
    }, function($__m) {
      DefaultValueAccessor = $__m.DefaultValueAccessor;
    }, function($__m) {
      normalizeAsyncValidator = $__m.normalizeAsyncValidator;
      normalizeValidator = $__m.normalizeValidator;
    }, function($__m) {
      NumberValueAccessor = $__m.NumberValueAccessor;
    }, function($__m) {
      RadioControlValueAccessor = $__m.RadioControlValueAccessor;
    }, function($__m) {
      SelectControlValueAccessor = $__m.SelectControlValueAccessor;
    }, function($__m) {
      SelectMultipleControlValueAccessor = $__m.SelectMultipleControlValueAccessor;
    }],
    execute: function() {
      BUILTIN_ACCESSORS = [CheckboxControlValueAccessor, NumberValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor];
    }
  };
});

$__System.register("74", ["90", "91"], function($__export) {
  "use strict";
  var __extends,
      Subject,
      EventEmitter;
  return {
    setters: [function($__m) {
      Subject = $__m.Subject;
      $__export({Subject: $__m.Subject});
    }, function($__m) {
      $__export({Observable: $__m.Observable});
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      EventEmitter = (function(_super) {
        __extends(EventEmitter, _super);
        function EventEmitter(isAsync) {
          if (isAsync === void 0) {
            isAsync = false;
          }
          _super.call(this);
          this.__isAsync = isAsync;
        }
        EventEmitter.prototype.emit = function(value) {
          _super.prototype.next.call(this, value);
        };
        EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
          var schedulerFn;
          var errorFn = function(err) {
            return null;
          };
          var completeFn = function() {
            return null;
          };
          if (generatorOrNext && (typeof generatorOrNext === 'undefined' ? 'undefined' : $traceurRuntime.typeof(generatorOrNext)) === 'object') {
            schedulerFn = this.__isAsync ? function(value) {
              setTimeout(function() {
                return generatorOrNext.next(value);
              });
            } : function(value) {
              generatorOrNext.next(value);
            };
            if (generatorOrNext.error) {
              errorFn = this.__isAsync ? function(err) {
                setTimeout(function() {
                  return generatorOrNext.error(err);
                });
              } : function(err) {
                generatorOrNext.error(err);
              };
            }
            if (generatorOrNext.complete) {
              completeFn = this.__isAsync ? function() {
                setTimeout(function() {
                  return generatorOrNext.complete();
                });
              } : function() {
                generatorOrNext.complete();
              };
            }
          } else {
            schedulerFn = this.__isAsync ? function(value) {
              setTimeout(function() {
                return generatorOrNext(value);
              });
            } : function(value) {
              generatorOrNext(value);
            };
            if (error) {
              errorFn = this.__isAsync ? function(err) {
                setTimeout(function() {
                  return error(err);
                });
              } : function(err) {
                error(err);
              };
            }
            if (complete) {
              completeFn = this.__isAsync ? function() {
                setTimeout(function() {
                  return complete();
                });
              } : function() {
                complete();
              };
            }
          }
          return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
        };
        return EventEmitter;
      }(Subject));
      $__export("EventEmitter", EventEmitter);
    }
  };
});

$__System.register("8e", ["c"], function($__export) {
  "use strict";
  var r,
      isPromise;
  return {
    setters: [function($__m) {
      r = $__m.__core_private__;
    }],
    execute: function() {
      isPromise = r.isPromise;
      $__export("isPromise", isPromise);
    }
  };
});

$__System.register("75", ["92", "7b", "74", "8e"], function($__export) {
  "use strict";
  var __extends,
      fromPromise,
      composeAsyncValidators,
      composeValidators,
      EventEmitter,
      isPromise,
      VALID,
      INVALID,
      PENDING,
      DISABLED,
      AbstractControl,
      FormControl,
      FormGroup,
      FormArray;
  function isControl(control) {
    return control instanceof AbstractControl;
  }
  function _find(control, path, delimiter) {
    if (path == null)
      return null;
    if (!(path instanceof Array)) {
      path = path.split(delimiter);
    }
    if (path instanceof Array && (path.length === 0))
      return null;
    return path.reduce(function(v, name) {
      if (v instanceof FormGroup) {
        return v.controls[name] || null;
      }
      if (v instanceof FormArray) {
        return v.at(name) || null;
      }
      return null;
    }, control);
  }
  function toObservable(r) {
    return isPromise(r) ? fromPromise(r) : r;
  }
  function coerceToValidator(validator) {
    return Array.isArray(validator) ? composeValidators(validator) : validator;
  }
  function coerceToAsyncValidator(asyncValidator) {
    return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;
  }
  $__export("isControl", isControl);
  return {
    setters: [function($__m) {
      fromPromise = $__m.fromPromise;
    }, function($__m) {
      composeAsyncValidators = $__m.composeAsyncValidators;
      composeValidators = $__m.composeValidators;
    }, function($__m) {
      EventEmitter = $__m.EventEmitter;
    }, function($__m) {
      isPromise = $__m.isPromise;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      VALID = 'VALID';
      $__export("VALID", VALID);
      INVALID = 'INVALID';
      $__export("INVALID", INVALID);
      PENDING = 'PENDING';
      $__export("PENDING", PENDING);
      DISABLED = 'DISABLED';
      $__export("DISABLED", DISABLED);
      AbstractControl = (function() {
        function AbstractControl(validator, asyncValidator) {
          this.validator = validator;
          this.asyncValidator = asyncValidator;
          this._onCollectionChange = function() {};
          this._pristine = true;
          this._touched = false;
          this._onDisabledChange = [];
        }
        Object.defineProperty(AbstractControl.prototype, "value", {
          get: function() {
            return this._value;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "status", {
          get: function() {
            return this._status;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "valid", {
          get: function() {
            return this._status === VALID;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "invalid", {
          get: function() {
            return this._status === INVALID;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "pending", {
          get: function() {
            return this._status == PENDING;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "disabled", {
          get: function() {
            return this._status === DISABLED;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "enabled", {
          get: function() {
            return this._status !== DISABLED;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "errors", {
          get: function() {
            return this._errors;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "pristine", {
          get: function() {
            return this._pristine;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "dirty", {
          get: function() {
            return !this.pristine;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "touched", {
          get: function() {
            return this._touched;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "untouched", {
          get: function() {
            return !this._touched;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "valueChanges", {
          get: function() {
            return this._valueChanges;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "statusChanges", {
          get: function() {
            return this._statusChanges;
          },
          enumerable: true,
          configurable: true
        });
        AbstractControl.prototype.setValidators = function(newValidator) {
          this.validator = coerceToValidator(newValidator);
        };
        AbstractControl.prototype.setAsyncValidators = function(newValidator) {
          this.asyncValidator = coerceToAsyncValidator(newValidator);
        };
        AbstractControl.prototype.clearValidators = function() {
          this.validator = null;
        };
        AbstractControl.prototype.clearAsyncValidators = function() {
          this.asyncValidator = null;
        };
        AbstractControl.prototype.markAsTouched = function(_a) {
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          this._touched = true;
          if (this._parent && !onlySelf) {
            this._parent.markAsTouched({onlySelf: onlySelf});
          }
        };
        AbstractControl.prototype.markAsUntouched = function(_a) {
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          this._touched = false;
          this._forEachChild(function(control) {
            control.markAsUntouched({onlySelf: true});
          });
          if (this._parent && !onlySelf) {
            this._parent._updateTouched({onlySelf: onlySelf});
          }
        };
        AbstractControl.prototype.markAsDirty = function(_a) {
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          this._pristine = false;
          if (this._parent && !onlySelf) {
            this._parent.markAsDirty({onlySelf: onlySelf});
          }
        };
        AbstractControl.prototype.markAsPristine = function(_a) {
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          this._pristine = true;
          this._forEachChild(function(control) {
            control.markAsPristine({onlySelf: true});
          });
          if (this._parent && !onlySelf) {
            this._parent._updatePristine({onlySelf: onlySelf});
          }
        };
        AbstractControl.prototype.markAsPending = function(_a) {
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          this._status = PENDING;
          if (this._parent && !onlySelf) {
            this._parent.markAsPending({onlySelf: onlySelf});
          }
        };
        AbstractControl.prototype.disable = function(_a) {
          var _b = _a === void 0 ? {} : _a,
              onlySelf = _b.onlySelf,
              emitEvent = _b.emitEvent;
          this._status = DISABLED;
          this._errors = null;
          this._forEachChild(function(control) {
            control.disable({onlySelf: true});
          });
          this._updateValue();
          if (emitEvent !== false) {
            this._valueChanges.emit(this._value);
            this._statusChanges.emit(this._status);
          }
          this._updateAncestors(onlySelf);
          this._onDisabledChange.forEach(function(changeFn) {
            return changeFn(true);
          });
        };
        AbstractControl.prototype.enable = function(_a) {
          var _b = _a === void 0 ? {} : _a,
              onlySelf = _b.onlySelf,
              emitEvent = _b.emitEvent;
          this._status = VALID;
          this._forEachChild(function(control) {
            control.enable({onlySelf: true});
          });
          this.updateValueAndValidity({
            onlySelf: true,
            emitEvent: emitEvent
          });
          this._updateAncestors(onlySelf);
          this._onDisabledChange.forEach(function(changeFn) {
            return changeFn(false);
          });
        };
        AbstractControl.prototype._updateAncestors = function(onlySelf) {
          if (this._parent && !onlySelf) {
            this._parent.updateValueAndValidity();
            this._parent._updatePristine();
            this._parent._updateTouched();
          }
        };
        AbstractControl.prototype.setParent = function(parent) {
          this._parent = parent;
        };
        AbstractControl.prototype.updateValueAndValidity = function(_a) {
          var _b = _a === void 0 ? {} : _a,
              onlySelf = _b.onlySelf,
              emitEvent = _b.emitEvent;
          this._setInitialStatus();
          this._updateValue();
          if (this.enabled) {
            this._errors = this._runValidator();
            this._status = this._calculateStatus();
            if (this._status === VALID || this._status === PENDING) {
              this._runAsyncValidator(emitEvent);
            }
          }
          if (emitEvent !== false) {
            this._valueChanges.emit(this._value);
            this._statusChanges.emit(this._status);
          }
          if (this._parent && !onlySelf) {
            this._parent.updateValueAndValidity({
              onlySelf: onlySelf,
              emitEvent: emitEvent
            });
          }
        };
        AbstractControl.prototype._updateTreeValidity = function(_a) {
          var emitEvent = (_a === void 0 ? {emitEvent: true} : _a).emitEvent;
          this._forEachChild(function(ctrl) {
            return ctrl._updateTreeValidity({emitEvent: emitEvent});
          });
          this.updateValueAndValidity({
            onlySelf: true,
            emitEvent: emitEvent
          });
        };
        AbstractControl.prototype._setInitialStatus = function() {
          this._status = this._allControlsDisabled() ? DISABLED : VALID;
        };
        AbstractControl.prototype._runValidator = function() {
          return this.validator ? this.validator(this) : null;
        };
        AbstractControl.prototype._runAsyncValidator = function(emitEvent) {
          var _this = this;
          if (this.asyncValidator) {
            this._status = PENDING;
            this._cancelExistingSubscription();
            var obs = toObservable(this.asyncValidator(this));
            this._asyncValidationSubscription = obs.subscribe({next: function(res) {
                return _this.setErrors(res, {emitEvent: emitEvent});
              }});
          }
        };
        AbstractControl.prototype._cancelExistingSubscription = function() {
          if (this._asyncValidationSubscription) {
            this._asyncValidationSubscription.unsubscribe();
          }
        };
        AbstractControl.prototype.setErrors = function(errors, _a) {
          var emitEvent = (_a === void 0 ? {} : _a).emitEvent;
          this._errors = errors;
          this._updateControlsErrors(emitEvent !== false);
        };
        AbstractControl.prototype.get = function(path) {
          return _find(this, path, '.');
        };
        AbstractControl.prototype.getError = function(errorCode, path) {
          if (path === void 0) {
            path = null;
          }
          var control = path ? this.get(path) : this;
          return control && control._errors ? control._errors[errorCode] : null;
        };
        AbstractControl.prototype.hasError = function(errorCode, path) {
          if (path === void 0) {
            path = null;
          }
          return !!this.getError(errorCode, path);
        };
        Object.defineProperty(AbstractControl.prototype, "root", {
          get: function() {
            var x = this;
            while (x._parent) {
              x = x._parent;
            }
            return x;
          },
          enumerable: true,
          configurable: true
        });
        AbstractControl.prototype._updateControlsErrors = function(emitEvent) {
          this._status = this._calculateStatus();
          if (emitEvent) {
            this._statusChanges.emit(this._status);
          }
          if (this._parent) {
            this._parent._updateControlsErrors(emitEvent);
          }
        };
        AbstractControl.prototype._initObservables = function() {
          this._valueChanges = new EventEmitter();
          this._statusChanges = new EventEmitter();
        };
        AbstractControl.prototype._calculateStatus = function() {
          if (this._allControlsDisabled())
            return DISABLED;
          if (this._errors)
            return INVALID;
          if (this._anyControlsHaveStatus(PENDING))
            return PENDING;
          if (this._anyControlsHaveStatus(INVALID))
            return INVALID;
          return VALID;
        };
        AbstractControl.prototype._anyControlsHaveStatus = function(status) {
          return this._anyControls(function(control) {
            return control.status === status;
          });
        };
        AbstractControl.prototype._anyControlsDirty = function() {
          return this._anyControls(function(control) {
            return control.dirty;
          });
        };
        AbstractControl.prototype._anyControlsTouched = function() {
          return this._anyControls(function(control) {
            return control.touched;
          });
        };
        AbstractControl.prototype._updatePristine = function(_a) {
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          this._pristine = !this._anyControlsDirty();
          if (this._parent && !onlySelf) {
            this._parent._updatePristine({onlySelf: onlySelf});
          }
        };
        AbstractControl.prototype._updateTouched = function(_a) {
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          this._touched = this._anyControlsTouched();
          if (this._parent && !onlySelf) {
            this._parent._updateTouched({onlySelf: onlySelf});
          }
        };
        AbstractControl.prototype._isBoxedValue = function(formState) {
          return (typeof formState === 'undefined' ? 'undefined' : $traceurRuntime.typeof(formState)) === 'object' && formState !== null && Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;
        };
        AbstractControl.prototype._registerOnCollectionChange = function(fn) {
          this._onCollectionChange = fn;
        };
        return AbstractControl;
      }());
      $__export("AbstractControl", AbstractControl);
      FormControl = (function(_super) {
        __extends(FormControl, _super);
        function FormControl(formState, validator, asyncValidator) {
          if (formState === void 0) {
            formState = null;
          }
          if (validator === void 0) {
            validator = null;
          }
          if (asyncValidator === void 0) {
            asyncValidator = null;
          }
          _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));
          this._onChange = [];
          this._applyFormState(formState);
          this.updateValueAndValidity({
            onlySelf: true,
            emitEvent: false
          });
          this._initObservables();
        }
        FormControl.prototype.setValue = function(value, _a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a,
              onlySelf = _b.onlySelf,
              emitEvent = _b.emitEvent,
              emitModelToViewChange = _b.emitModelToViewChange,
              emitViewToModelChange = _b.emitViewToModelChange;
          this._value = value;
          if (this._onChange.length && emitModelToViewChange !== false) {
            this._onChange.forEach(function(changeFn) {
              return changeFn(_this._value, emitViewToModelChange !== false);
            });
          }
          this.updateValueAndValidity({
            onlySelf: onlySelf,
            emitEvent: emitEvent
          });
        };
        FormControl.prototype.patchValue = function(value, options) {
          if (options === void 0) {
            options = {};
          }
          this.setValue(value, options);
        };
        FormControl.prototype.reset = function(formState, _a) {
          if (formState === void 0) {
            formState = null;
          }
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          this._applyFormState(formState);
          this.markAsPristine({onlySelf: onlySelf});
          this.markAsUntouched({onlySelf: onlySelf});
          this.setValue(this._value, {onlySelf: onlySelf});
        };
        FormControl.prototype._updateValue = function() {};
        FormControl.prototype._anyControls = function(condition) {
          return false;
        };
        FormControl.prototype._allControlsDisabled = function() {
          return this.disabled;
        };
        FormControl.prototype.registerOnChange = function(fn) {
          this._onChange.push(fn);
        };
        FormControl.prototype._clearChangeFns = function() {
          this._onChange = [];
          this._onDisabledChange = [];
          this._onCollectionChange = function() {};
        };
        FormControl.prototype.registerOnDisabledChange = function(fn) {
          this._onDisabledChange.push(fn);
        };
        FormControl.prototype._forEachChild = function(cb) {};
        FormControl.prototype._applyFormState = function(formState) {
          if (this._isBoxedValue(formState)) {
            this._value = formState.value;
            formState.disabled ? this.disable({
              onlySelf: true,
              emitEvent: false
            }) : this.enable({
              onlySelf: true,
              emitEvent: false
            });
          } else {
            this._value = formState;
          }
        };
        return FormControl;
      }(AbstractControl));
      $__export("FormControl", FormControl);
      FormGroup = (function(_super) {
        __extends(FormGroup, _super);
        function FormGroup(controls, validator, asyncValidator) {
          if (validator === void 0) {
            validator = null;
          }
          if (asyncValidator === void 0) {
            asyncValidator = null;
          }
          _super.call(this, validator, asyncValidator);
          this.controls = controls;
          this._initObservables();
          this._setUpControls();
          this.updateValueAndValidity({
            onlySelf: true,
            emitEvent: false
          });
        }
        FormGroup.prototype.registerControl = function(name, control) {
          if (this.controls[name])
            return this.controls[name];
          this.controls[name] = control;
          control.setParent(this);
          control._registerOnCollectionChange(this._onCollectionChange);
          return control;
        };
        FormGroup.prototype.addControl = function(name, control) {
          this.registerControl(name, control);
          this.updateValueAndValidity();
          this._onCollectionChange();
        };
        FormGroup.prototype.removeControl = function(name) {
          if (this.controls[name])
            this.controls[name]._registerOnCollectionChange(function() {});
          delete(this.controls[name]);
          this.updateValueAndValidity();
          this._onCollectionChange();
        };
        FormGroup.prototype.setControl = function(name, control) {
          if (this.controls[name])
            this.controls[name]._registerOnCollectionChange(function() {});
          delete(this.controls[name]);
          if (control)
            this.registerControl(name, control);
          this.updateValueAndValidity();
          this._onCollectionChange();
        };
        FormGroup.prototype.contains = function(controlName) {
          return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
        };
        FormGroup.prototype.setValue = function(value, _a) {
          var _this = this;
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          this._checkAllValuesPresent(value);
          Object.keys(value).forEach(function(name) {
            _this._throwIfControlMissing(name);
            _this.controls[name].setValue(value[name], {onlySelf: true});
          });
          this.updateValueAndValidity({onlySelf: onlySelf});
        };
        FormGroup.prototype.patchValue = function(value, _a) {
          var _this = this;
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          Object.keys(value).forEach(function(name) {
            if (_this.controls[name]) {
              _this.controls[name].patchValue(value[name], {onlySelf: true});
            }
          });
          this.updateValueAndValidity({onlySelf: onlySelf});
        };
        FormGroup.prototype.reset = function(value, _a) {
          if (value === void 0) {
            value = {};
          }
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          this._forEachChild(function(control, name) {
            control.reset(value[name], {onlySelf: true});
          });
          this.updateValueAndValidity({onlySelf: onlySelf});
          this._updatePristine({onlySelf: onlySelf});
          this._updateTouched({onlySelf: onlySelf});
        };
        FormGroup.prototype.getRawValue = function() {
          return this._reduceChildren({}, function(acc, control, name) {
            acc[name] = control.value;
            return acc;
          });
        };
        FormGroup.prototype._throwIfControlMissing = function(name) {
          if (!Object.keys(this.controls).length) {
            throw new Error("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
          }
          if (!this.controls[name]) {
            throw new Error("Cannot find form control with name: " + name + ".");
          }
        };
        FormGroup.prototype._forEachChild = function(cb) {
          var _this = this;
          Object.keys(this.controls).forEach(function(k) {
            return cb(_this.controls[k], k);
          });
        };
        FormGroup.prototype._setUpControls = function() {
          var _this = this;
          this._forEachChild(function(control) {
            control.setParent(_this);
            control._registerOnCollectionChange(_this._onCollectionChange);
          });
        };
        FormGroup.prototype._updateValue = function() {
          this._value = this._reduceValue();
        };
        FormGroup.prototype._anyControls = function(condition) {
          var _this = this;
          var res = false;
          this._forEachChild(function(control, name) {
            res = res || (_this.contains(name) && condition(control));
          });
          return res;
        };
        FormGroup.prototype._reduceValue = function() {
          var _this = this;
          return this._reduceChildren({}, function(acc, control, name) {
            if (control.enabled || _this.disabled) {
              acc[name] = control.value;
            }
            return acc;
          });
        };
        FormGroup.prototype._reduceChildren = function(initValue, fn) {
          var res = initValue;
          this._forEachChild(function(control, name) {
            res = fn(res, control, name);
          });
          return res;
        };
        FormGroup.prototype._allControlsDisabled = function() {
          for (var _i = 0,
              _a = Object.keys(this.controls); _i < _a.length; _i++) {
            var controlName = _a[_i];
            if (this.controls[controlName].enabled) {
              return false;
            }
          }
          return Object.keys(this.controls).length > 0 || this.disabled;
        };
        FormGroup.prototype._checkAllValuesPresent = function(value) {
          this._forEachChild(function(control, name) {
            if (value[name] === undefined) {
              throw new Error("Must supply a value for form control with name: '" + name + "'.");
            }
          });
        };
        return FormGroup;
      }(AbstractControl));
      $__export("FormGroup", FormGroup);
      FormArray = (function(_super) {
        __extends(FormArray, _super);
        function FormArray(controls, validator, asyncValidator) {
          if (validator === void 0) {
            validator = null;
          }
          if (asyncValidator === void 0) {
            asyncValidator = null;
          }
          _super.call(this, validator, asyncValidator);
          this.controls = controls;
          this._initObservables();
          this._setUpControls();
          this.updateValueAndValidity({
            onlySelf: true,
            emitEvent: false
          });
        }
        FormArray.prototype.at = function(index) {
          return this.controls[index];
        };
        FormArray.prototype.push = function(control) {
          this.controls.push(control);
          this._registerControl(control);
          this.updateValueAndValidity();
          this._onCollectionChange();
        };
        FormArray.prototype.insert = function(index, control) {
          this.controls.splice(index, 0, control);
          this._registerControl(control);
          this.updateValueAndValidity();
          this._onCollectionChange();
        };
        FormArray.prototype.removeAt = function(index) {
          if (this.controls[index])
            this.controls[index]._registerOnCollectionChange(function() {});
          this.controls.splice(index, 1);
          this.updateValueAndValidity();
          this._onCollectionChange();
        };
        FormArray.prototype.setControl = function(index, control) {
          if (this.controls[index])
            this.controls[index]._registerOnCollectionChange(function() {});
          this.controls.splice(index, 1);
          if (control) {
            this.controls.splice(index, 0, control);
            this._registerControl(control);
          }
          this.updateValueAndValidity();
          this._onCollectionChange();
        };
        Object.defineProperty(FormArray.prototype, "length", {
          get: function() {
            return this.controls.length;
          },
          enumerable: true,
          configurable: true
        });
        FormArray.prototype.setValue = function(value, _a) {
          var _this = this;
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          this._checkAllValuesPresent(value);
          value.forEach(function(newValue, index) {
            _this._throwIfControlMissing(index);
            _this.at(index).setValue(newValue, {onlySelf: true});
          });
          this.updateValueAndValidity({onlySelf: onlySelf});
        };
        FormArray.prototype.patchValue = function(value, _a) {
          var _this = this;
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          value.forEach(function(newValue, index) {
            if (_this.at(index)) {
              _this.at(index).patchValue(newValue, {onlySelf: true});
            }
          });
          this.updateValueAndValidity({onlySelf: onlySelf});
        };
        FormArray.prototype.reset = function(value, _a) {
          if (value === void 0) {
            value = [];
          }
          var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
          this._forEachChild(function(control, index) {
            control.reset(value[index], {onlySelf: true});
          });
          this.updateValueAndValidity({onlySelf: onlySelf});
          this._updatePristine({onlySelf: onlySelf});
          this._updateTouched({onlySelf: onlySelf});
        };
        FormArray.prototype.getRawValue = function() {
          return this.controls.map(function(control) {
            return control.value;
          });
        };
        FormArray.prototype._throwIfControlMissing = function(index) {
          if (!this.controls.length) {
            throw new Error("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
          }
          if (!this.at(index)) {
            throw new Error("Cannot find form control at index " + index);
          }
        };
        FormArray.prototype._forEachChild = function(cb) {
          this.controls.forEach(function(control, index) {
            cb(control, index);
          });
        };
        FormArray.prototype._updateValue = function() {
          var _this = this;
          this._value = this.controls.filter(function(control) {
            return control.enabled || _this.disabled;
          }).map(function(control) {
            return control.value;
          });
        };
        FormArray.prototype._anyControls = function(condition) {
          return this.controls.some(function(control) {
            return control.enabled && condition(control);
          });
        };
        FormArray.prototype._setUpControls = function() {
          var _this = this;
          this._forEachChild(function(control) {
            return _this._registerControl(control);
          });
        };
        FormArray.prototype._checkAllValuesPresent = function(value) {
          this._forEachChild(function(control, i) {
            if (value[i] === undefined) {
              throw new Error("Must supply a value for form control at index: " + i + ".");
            }
          });
        };
        FormArray.prototype._allControlsDisabled = function() {
          for (var _i = 0,
              _a = this.controls; _i < _a.length; _i++) {
            var control = _a[_i];
            if (control.enabled)
              return false;
          }
          return this.controls.length > 0 || this.disabled;
        };
        FormArray.prototype._registerControl = function(control) {
          control.setParent(this);
          control._registerOnCollectionChange(this._onCollectionChange);
        };
        return FormArray;
      }(AbstractControl));
      $__export("FormArray", FormArray);
    }
  };
});

$__System.register("93", ["c", "70", "75"], function($__export) {
  "use strict";
  var Injectable,
      isPresent,
      FormArray,
      FormControl,
      FormGroup,
      FormBuilder;
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      FormArray = $__m.FormArray;
      FormControl = $__m.FormControl;
      FormGroup = $__m.FormGroup;
    }],
    execute: function() {
      FormBuilder = (function() {
        function FormBuilder() {}
        FormBuilder.prototype.group = function(controlsConfig, extra) {
          if (extra === void 0) {
            extra = null;
          }
          var controls = this._reduceControls(controlsConfig);
          var validator = isPresent(extra) ? extra['validator'] : null;
          var asyncValidator = isPresent(extra) ? extra['asyncValidator'] : null;
          return new FormGroup(controls, validator, asyncValidator);
        };
        FormBuilder.prototype.control = function(formState, validator, asyncValidator) {
          if (validator === void 0) {
            validator = null;
          }
          if (asyncValidator === void 0) {
            asyncValidator = null;
          }
          return new FormControl(formState, validator, asyncValidator);
        };
        FormBuilder.prototype.array = function(controlsConfig, validator, asyncValidator) {
          var _this = this;
          if (validator === void 0) {
            validator = null;
          }
          if (asyncValidator === void 0) {
            asyncValidator = null;
          }
          var controls = controlsConfig.map(function(c) {
            return _this._createControl(c);
          });
          return new FormArray(controls, validator, asyncValidator);
        };
        FormBuilder.prototype._reduceControls = function(controlsConfig) {
          var _this = this;
          var controls = {};
          Object.keys(controlsConfig).forEach(function(controlName) {
            controls[controlName] = _this._createControl(controlsConfig[controlName]);
          });
          return controls;
        };
        FormBuilder.prototype._createControl = function(controlConfig) {
          if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup || controlConfig instanceof FormArray) {
            return controlConfig;
          } else if (Array.isArray(controlConfig)) {
            var value = controlConfig[0];
            var validator = controlConfig.length > 1 ? controlConfig[1] : null;
            var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
            return this.control(value, validator, asyncValidator);
          } else {
            return this.control(controlConfig);
          }
        };
        FormBuilder.decorators = [{type: Injectable}];
        FormBuilder.ctorParameters = [];
        return FormBuilder;
      }());
      $__export("FormBuilder", FormBuilder);
    }
  };
});

$__System.register("94", ["c", "86", "8a", "93"], function($__export) {
  "use strict";
  var NgModule,
      InternalFormsSharedModule,
      REACTIVE_DRIVEN_DIRECTIVES,
      TEMPLATE_DRIVEN_DIRECTIVES,
      RadioControlRegistry,
      FormBuilder,
      FormsModule,
      ReactiveFormsModule;
  return {
    setters: [function($__m) {
      NgModule = $__m.NgModule;
    }, function($__m) {
      InternalFormsSharedModule = $__m.InternalFormsSharedModule;
      REACTIVE_DRIVEN_DIRECTIVES = $__m.REACTIVE_DRIVEN_DIRECTIVES;
      TEMPLATE_DRIVEN_DIRECTIVES = $__m.TEMPLATE_DRIVEN_DIRECTIVES;
    }, function($__m) {
      RadioControlRegistry = $__m.RadioControlRegistry;
    }, function($__m) {
      FormBuilder = $__m.FormBuilder;
    }],
    execute: function() {
      FormsModule = (function() {
        function FormsModule() {}
        FormsModule.decorators = [{
          type: NgModule,
          args: [{
            declarations: TEMPLATE_DRIVEN_DIRECTIVES,
            providers: [RadioControlRegistry],
            exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
          }]
        }];
        FormsModule.ctorParameters = [];
        return FormsModule;
      }());
      $__export("FormsModule", FormsModule);
      ReactiveFormsModule = (function() {
        function ReactiveFormsModule() {}
        ReactiveFormsModule.decorators = [{
          type: NgModule,
          args: [{
            declarations: [REACTIVE_DRIVEN_DIRECTIVES],
            providers: [FormBuilder, RadioControlRegistry],
            exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
          }]
        }];
        ReactiveFormsModule.ctorParameters = [];
        return ReactiveFormsModule;
      }());
      $__export("ReactiveFormsModule", ReactiveFormsModule);
    }
  };
});

$__System.register("95", ["83", "77", "87", "71", "78", "88", "72", "6f", "79", "73", "7a", "8a", "7e", "80", "81", "82", "8b", "8c", "85", "93", "75", "76", "94"], function($__export) {
  "use strict";
  var $__exportNames = {undefined: true};
  return {
    setters: [function($__m) {
      $__export({AbstractControlDirective: $__m.AbstractControlDirective});
    }, function($__m) {
      $__export({AbstractFormGroupDirective: $__m.AbstractFormGroupDirective});
    }, function($__m) {
      $__export({CheckboxControlValueAccessor: $__m.CheckboxControlValueAccessor});
    }, function($__m) {
      $__export({ControlContainer: $__m.ControlContainer});
    }, function($__m) {
      $__export({NG_VALUE_ACCESSOR: $__m.NG_VALUE_ACCESSOR});
    }, function($__m) {
      $__export({DefaultValueAccessor: $__m.DefaultValueAccessor});
    }, function($__m) {
      $__export({NgControl: $__m.NgControl});
    }, function($__m) {
      $__export({
        NgControlStatus: $__m.NgControlStatus,
        NgControlStatusGroup: $__m.NgControlStatusGroup
      });
    }, function($__m) {
      $__export({NgForm: $__m.NgForm});
    }, function($__m) {
      $__export({NgModel: $__m.NgModel});
    }, function($__m) {
      $__export({NgModelGroup: $__m.NgModelGroup});
    }, function($__m) {
      $__export({RadioControlValueAccessor: $__m.RadioControlValueAccessor});
    }, function($__m) {
      $__export({FormControlDirective: $__m.FormControlDirective});
    }, function($__m) {
      $__export({FormControlName: $__m.FormControlName});
    }, function($__m) {
      $__export({FormGroupDirective: $__m.FormGroupDirective});
    }, function($__m) {
      $__export({
        FormArrayName: $__m.FormArrayName,
        FormGroupName: $__m.FormGroupName
      });
    }, function($__m) {
      $__export({
        NgSelectOption: $__m.NgSelectOption,
        SelectControlValueAccessor: $__m.SelectControlValueAccessor
      });
    }, function($__m) {
      $__export({SelectMultipleControlValueAccessor: $__m.SelectMultipleControlValueAccessor});
    }, function($__m) {
      $__export({
        MaxLengthValidator: $__m.MaxLengthValidator,
        MinLengthValidator: $__m.MinLengthValidator,
        PatternValidator: $__m.PatternValidator,
        RequiredValidator: $__m.RequiredValidator
      });
    }, function($__m) {
      $__export({FormBuilder: $__m.FormBuilder});
    }, function($__m) {
      $__export({
        AbstractControl: $__m.AbstractControl,
        FormArray: $__m.FormArray,
        FormControl: $__m.FormControl,
        FormGroup: $__m.FormGroup
      });
    }, function($__m) {
      $__export({
        NG_ASYNC_VALIDATORS: $__m.NG_ASYNC_VALIDATORS,
        NG_VALIDATORS: $__m.NG_VALIDATORS,
        Validators: $__m.Validators
      });
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }],
    execute: function() {}
  };
});

$__System.register("96", ["95"], function($__export) {
  "use strict";
  var $__exportNames = {};
  return {
    setters: [function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }],
    execute: function() {}
  };
});

$__System.registerDynamic("97", ["c", "98", "99"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var router_1 = $__require("98");
    var services_1 = $__require("99");
    var NavigationDesktopDirective = function () {
        function NavigationDesktopDirective(router, accountService, navigationService, searchService) {
            this.router = router;
            this.accountService = accountService;
            this.navigationService = navigationService;
            this.searchService = searchService;
        }
        NavigationDesktopDirective = __decorate([core_1.Component({
            selector: 'navigationdesktop-directive',
            templateUrl: '/views/directives/navigation/NavigationDesktop.html'
        }), __metadata('design:paramtypes', [router_1.Router, services_1.AccountService, services_1.NavigationService, services_1.SearchService])], NavigationDesktopDirective);
        return NavigationDesktopDirective;
    }();
    exports.NavigationDesktopDirective = NavigationDesktopDirective;
    return module.exports;
});
$__System.registerDynamic("9a", ["c", "98", "99"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var router_1 = $__require("98");
    var services_1 = $__require("99");
    var NavigationMobileDirective = function () {
        function NavigationMobileDirective(router, accountService, navigationService, searchService) {
            this.router = router;
            this.accountService = accountService;
            this.navigationService = navigationService;
            this.searchService = searchService;
        }
        NavigationMobileDirective = __decorate([core_1.Component({
            selector: 'navigationmobile-directive',
            templateUrl: '/views/directives/navigation/NavigationMobile.html'
        }), __metadata('design:paramtypes', [router_1.Router, services_1.AccountService, services_1.NavigationService, services_1.SearchService])], NavigationMobileDirective);
        return NavigationMobileDirective;
    }();
    exports.NavigationMobileDirective = NavigationMobileDirective;
    return module.exports;
});
$__System.registerDynamic("9b", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var RecipeIngredientsDirective = function () {
        function RecipeIngredientsDirective() {}
        RecipeIngredientsDirective.prototype.ngOnChanges = function () {
            if (this.amount != undefined) {
                this.costumAmount = this.amount;
            }
        };
        RecipeIngredientsDirective.prototype.calculateAmount = function (value) {
            return value / this.amount * this.costumAmount;
        };
        RecipeIngredientsDirective.prototype.addCostumAmount = function () {
            this.costumAmount = +this.costumAmount + +1;
        };
        RecipeIngredientsDirective.prototype.subtractCostumAmount = function () {
            if (this.costumAmount > 1) {
                this.costumAmount = +this.costumAmount - +1;
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], RecipeIngredientsDirective.prototype, "ingredients", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], RecipeIngredientsDirective.prototype, "measurement", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], RecipeIngredientsDirective.prototype, "amount", void 0);
        RecipeIngredientsDirective = __decorate([core_1.Component({
            selector: 'recipeingredients-directive',
            templateUrl: '/views/directives/recipe/RecipeIngredients.html'
        }), __metadata('design:paramtypes', [])], RecipeIngredientsDirective);
        return RecipeIngredientsDirective;
    }();
    exports.RecipeIngredientsDirective = RecipeIngredientsDirective;
    return module.exports;
});
$__System.registerDynamic("9c", ["c", "9d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var models_1 = $__require("9d");
    var RecipeOverviewItemDirective = function () {
        function RecipeOverviewItemDirective() {}
        __decorate([core_1.Input(), __metadata('design:type', models_1.RecipeOverviewRecipeModel)], RecipeOverviewItemDirective.prototype, "recipe", void 0);
        RecipeOverviewItemDirective = __decorate([core_1.Component({
            selector: 'recipeoverviewitem-directive',
            template: "\t<div class=\"teaser-image\">\n\t\t\t\t\t<img src=\"{{recipe.teaserImageUrl}}?w=640&h=480&mode=crop\">\n\t\t\t\t</div>\n\t\t\t\t<div class=\"teaser-text\">\n\t\t\t\t\t<div class=\"recipe-name\">{{recipe.name}}</div>\n\n\t\t\t\t\t<div class=\"recipe-info\">\n\t\t\t\t\t\t<div class=\"hidden-sm-down\">{{recipe.description}}<br></div>\n\t\t\t\t\t\tErstellt: {{recipe.publishDate}}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div style=\"clear:both\"></div>\n\t\t\t"
        }), __metadata('design:paramtypes', [])], RecipeOverviewItemDirective);
        return RecipeOverviewItemDirective;
    }();
    exports.RecipeOverviewItemDirective = RecipeOverviewItemDirective;
    return module.exports;
});
$__System.registerDynamic("9e", ["c", "9d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var models_1 = $__require("9d");
    var PagingDirective = function () {
        function PagingDirective() {
            this.changePage = new core_1.EventEmitter();
            this.paging = new models_1.PagingModel();
        }
        __decorate([core_1.Input(), __metadata('design:type', models_1.PagingModel)], PagingDirective.prototype, "paging", void 0);
        __decorate([core_1.Output(), __metadata('design:type', Object)], PagingDirective.prototype, "changePage", void 0);
        PagingDirective = __decorate([core_1.Component({
            selector: 'paging-directive',
            template: "\t<nav class=\"text-center\" *ngIf=\"paging.showPaging\">\n\t\t\t\t\t<ul class=\"pagination\">\n\t\t\t\t\t\t<li class=\"page-item\" [ngClass]=\"{disabled: !paging.showPreview}\" (click)=\"changePage.emit(page - 1)\">\n\t\t\t\t\t\t\t<span class=\"page-link\" aria-label=\"Previous\">\n\t\t\t\t\t\t\t\t<span aria-hidden=\"true\">&laquo;</span>\n\t\t\t\t\t\t\t\t<span class=\"sr-only\">Previous</span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li *ngFor=\"let page of paging.pages\" (click)=\"changePage.emit(page)\" class=\"page-item active\" [ngClass]=\"{active: page == paging.currentPage}\"><span class=\"page-link\">{{page}}</span></li>\n\t\t\t\t\t\t<li class=\"page-item\" [ngClass]=\"{disabled: !paging.ShowNext}\" (click)=\"changePage.emit(page + 1)\">\n\t\t\t\t\t\t\t<span class=\"page-link\" aria-label=\"Next\">\n\t\t\t\t\t\t\t\t<span aria-hidden=\"true\">&raquo;</span>\n\t\t\t\t\t\t\t\t<span class=\"sr-only\">Next</span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</nav>\n\t\t\t"
        }), __metadata('design:paramtypes', [])], PagingDirective);
        return PagingDirective;
    }();
    exports.PagingDirective = PagingDirective;
    return module.exports;
});
$__System.registerDynamic("9f", ["97", "9a", "9b", "9c", "9e"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    __export($__require("97"));
    __export($__require("9a"));
    __export($__require("9b"));
    __export($__require("9c"));
    __export($__require("9e"));
    return module.exports;
});
$__System.registerDynamic("a0", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var NumberFormatPipe = function () {
        function NumberFormatPipe() {}
        NumberFormatPipe.prototype.transform = function (value, args) {
            return value.toFixed(2).toString().replace(".", ",").replace(",00", "");
        };
        NumberFormatPipe = __decorate([core_1.Pipe({ name: 'numberFormat' }), __metadata('design:paramtypes', [])], NumberFormatPipe);
        return NumberFormatPipe;
    }();
    exports.NumberFormatPipe = NumberFormatPipe;
    return module.exports;
});
$__System.registerDynamic("a1", ["a0"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    __export($__require("a0"));
    return module.exports;
});
$__System.registerDynamic("a2", ["a3", "c", "a", "96", "a4", "98", "a5", "a6", "99", "9f", "a1"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    $__require("a3");
    var core_1 = $__require("c");
    var platform_browser_1 = $__require("a");
    var forms_1 = $__require("96");
    var http_1 = $__require("a4");
    var router_1 = $__require("98");
    var common_1 = $__require("a5");
    var components_1 = $__require("a6");
    var services_1 = $__require("99");
    var components_2 = $__require("a6");
    var directives_1 = $__require("9f");
    var pipes_1 = $__require("a1");
    var AppModule = function () {
        function AppModule() {}
        AppModule = __decorate([core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, forms_1.FormsModule, http_1.HttpModule, router_1.RouterModule.forRoot([{ path: 'Anmelden', component: components_2.AccountLoginComponent }, { path: 'Abmelden', component: components_2.AccountLogoutComponent }, { path: 'Registrieren', component: components_2.AccountRegisterComponent }, { path: 'Registrieren/Schritt-2', component: components_2.AccountDisplayEmailComponent }, { path: 'Registrierung/Abgeschlossen', component: components_2.AccountConfirmEmailComponent }, { path: 'Passwort/Vergessen', component: components_2.AccountForgotPasswordComponent }, { path: 'Passwort/Zuruecksetzen', component: components_2.AccountForgotPasswordConfirmComponent }, { path: 'Registrierung/Passwort/Zuruecksetzen', component: components_2.AccountResetPasswordComponent }, { path: 'Registrierung/Passwort/Zuruecksetzen/Erfolgreich', component: components_2.AccountResetPasswordConfirmComponent }, { path: 'Rezept/:url/:id', component: components_2.RecipeDetailComponent }, {
                path: 'Rezepte/Uebersicht', component: components_2.RecipeOverviewComponent,
                data: { cms: false }
            }, {
                path: 'Rezepte/:categoryUrl', component: components_2.RecipeOverviewComponent,
                data: { cms: false }
            }, {
                path: 'Rezepte/:categoryUrl/:subCategoryUrl', component: components_2.RecipeOverviewComponent,
                data: { cms: false }
            }, { path: 'Impressum', component: components_2.AboutComponent }, { path: 'Kontakt', component: components_2.ContactComponent }, {
                path: 'CMS', component: components_2.CmsTemplateComponent,
                children: [{ path: 'Rezepte', component: components_2.CmsRecipeOverviewComponent }, { path: 'Rezepte/Bearbeiten/:id', component: components_2.CmsRecipeEditComponent }, { path: 'Kategorien', component: components_2.CmsCategoryEditComponent }, { path: 'Dashboard', component: components_2.CmsDashboardComponent }, { path: '', redirectTo: '/CMS/Rezepte' }]
            }, { path: '', redirectTo: '/Rezepte/Uebersicht', pathMatch: 'full' }, { path: '**', component: components_2.ErrorComponent }])],
            providers: [services_1.AccountService, services_1.CmsService, services_1.NavigationService, services_1.RecipeService, services_1.SearchService, { provide: common_1.APP_BASE_HREF, useValue: '/' }],
            declarations: [components_1.AppComponent, components_2.AccountConfirmEmailComponent, components_2.AccountDisplayEmailComponent, components_2.AccountForgotPasswordComponent, components_2.AccountForgotPasswordConfirmComponent, components_2.AccountLoginComponent, components_2.AccountLogoutComponent, components_2.AccountRegisterComponent, components_2.AccountResetPasswordComponent, components_2.AccountResetPasswordConfirmComponent, components_2.RecipeDetailComponent, components_2.RecipeOverviewComponent, components_2.AboutComponent, components_2.ContactComponent, components_2.EmptyComponent, components_2.CmsCategoryEditComponent, components_2.CmsDashboardComponent, components_2.CmsRecipeOverviewComponent, components_2.CmsRecipeEditComponent, components_2.CmsTemplateComponent, components_2.ErrorComponent, directives_1.NavigationMobileDirective, directives_1.NavigationDesktopDirective, directives_1.RecipeIngredientsDirective, directives_1.RecipeOverviewItemDirective, directives_1.PagingDirective, pipes_1.NumberFormatPipe],
            bootstrap: [components_1.AppComponent]
        }), __metadata('design:paramtypes', [])], AppModule);
        return AppModule;
    }();
    exports.AppModule = AppModule;
    return module.exports;
});
$__System.registerDynamic('a7', ['91', 'a8'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('91');
  var of_1 = $__require('a8');
  Observable_1.Observable.of = of_1.of;
  

  return module.exports;
});
$__System.registerDynamic("a9", ["91"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require("91");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ErrorObservable = function (_super) {
        __extends(ErrorObservable, _super);
        function ErrorObservable(error, scheduler) {
            _super.call(this);
            this.error = error;
            this.scheduler = scheduler;
        }
        /**
         * Creates an Observable that emits no items to the Observer and immediately
         * emits an error notification.
         *
         * <span class="informal">Just emits 'error', and nothing else.
         * </span>
         *
         * <img src="./img/throw.png" width="100%">
         *
         * This static operator is useful for creating a simple Observable that only
         * emits the error notification. It can be used for composing with other
         * Observables, such as in a {@link mergeMap}.
         *
         * @example <caption>Emit the number 7, then emit an error.</caption>
         * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);
         * result.subscribe(x => console.log(x), e => console.error(e));
         *
         * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>
         * var interval = Rx.Observable.interval(1000);
         * var result = interval.mergeMap(x =>
         *   x === 13 ?
         *     Rx.Observable.throw('Thirteens are bad') :
         *     Rx.Observable.of('a', 'b', 'c')
         * );
         * result.subscribe(x => console.log(x), e => console.error(e));
         *
         * @see {@link create}
         * @see {@link empty}
         * @see {@link never}
         * @see {@link of}
         *
         * @param {any} error The particular Error to pass to the error notification.
         * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
         * the emission of the error notification.
         * @return {Observable} An error Observable: emits only the error notification
         * using the given error argument.
         * @static true
         * @name throw
         * @owner Observable
         */
        ErrorObservable.create = function (error, scheduler) {
            return new ErrorObservable(error, scheduler);
        };
        ErrorObservable.dispatch = function (arg) {
            var error = arg.error,
                subscriber = arg.subscriber;
            subscriber.error(error);
        };
        ErrorObservable.prototype._subscribe = function (subscriber) {
            var error = this.error;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(ErrorObservable.dispatch, 0, {
                    error: error, subscriber: subscriber
                });
            } else {
                subscriber.error(error);
            }
        };
        return ErrorObservable;
    }(Observable_1.Observable);
    exports.ErrorObservable = ErrorObservable;
    

    return module.exports;
});
$__System.registerDynamic("aa", ["a9"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var ErrorObservable_1 = $__require("a9");
  exports._throw = ErrorObservable_1.ErrorObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('ab', ['91', 'aa'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('91');
  var throw_1 = $__require('aa');
  Observable_1.Observable.throw = throw_1._throw;
  

  return module.exports;
});
$__System.registerDynamic('ac', ['91', 'ad'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('91');
  var catch_1 = $__require('ad');
  Observable_1.Observable.prototype.catch = catch_1._catch;
  Observable_1.Observable.prototype._catch = catch_1._catch;
  

  return module.exports;
});
$__System.registerDynamic("ae", ["af"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscription_1 = $__require("af");
    /**
     * A unit of work to be executed in a {@link Scheduler}. An action is typically
     * created from within a Scheduler and an RxJS user does not need to concern
     * themselves about creating and manipulating an Action.
     *
     * ```ts
     * class Action<T> extends Subscription {
     *   new (scheduler: Scheduler, work: (state?: T) => void);
     *   schedule(state?: T, delay: number = 0): Subscription;
     * }
     * ```
     *
     * @class Action<T>
     */
    var Action = function (_super) {
        __extends(Action, _super);
        function Action(scheduler, work) {
            _super.call(this);
        }
        /**
         * Schedules this action on its parent Scheduler for execution. May be passed
         * some context object, `state`. May happen at some point in the future,
         * according to the `delay` parameter, if specified.
         * @param {T} [state] Some contextual data that the `work` function uses when
         * called by the Scheduler.
         * @param {number} [delay] Time to wait before executing the work, where the
         * time unit is implicit and defined by the Scheduler.
         * @return {void}
         */
        Action.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            return this;
        };
        return Action;
    }(Subscription_1.Subscription);
    exports.Action = Action;
    

    return module.exports;
});
$__System.registerDynamic('b0', ['b1', 'ae'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1 = $__require('b1');
    var Action_1 = $__require('ae');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var AsyncAction = function (_super) {
        __extends(AsyncAction, _super);
        function AsyncAction(scheduler, work) {
            _super.call(this, scheduler, work);
            this.scheduler = scheduler;
            this.work = work;
            this.pending = false;
        }
        AsyncAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (this.closed) {
                return this;
            }
            // Always replace the current state with the new state.
            this.state = state;
            // Set the pending flag indicating that this action has been scheduled, or
            // has recursively rescheduled itself.
            this.pending = true;
            var id = this.id;
            var scheduler = this.scheduler;
            //
            // Important implementation note:
            //
            // Actions only execute once by default, unless rescheduled from within the
            // scheduled callback. This allows us to implement single and repeat
            // actions via the same code path, without adding API surface area, as well
            // as mimic traditional recursion but across asynchronous boundaries.
            //
            // However, JS runtimes and timers distinguish between intervals achieved by
            // serial `setTimeout` calls vs. a single `setInterval` call. An interval of
            // serial `setTimeout` calls can be individually delayed, which delays
            // scheduling the next `setTimeout`, and so on. `setInterval` attempts to
            // guarantee the interval callback will be invoked more precisely to the
            // interval period, regardless of load.
            //
            // Therefore, we use `setInterval` to schedule single and repeat actions.
            // If the action reschedules itself with the same delay, the interval is not
            // canceled. If the action doesn't reschedule, or reschedules with a
            // different delay, the interval will be canceled after scheduled callback
            // execution.
            //
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, delay);
            }
            this.delay = delay;
            // If this action has already an async Id, don't request a new one.
            this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
            return this;
        };
        AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);
        };
        AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            // If this action is rescheduled with the same delay time, don't clear the interval id.
            if (delay !== null && this.delay === delay) {
                return id;
            }
            // Otherwise, if the action's delay time is different from the current delay,
            // clear the interval id
            return root_1.root.clearInterval(id) && undefined || undefined;
        };
        /**
         * Immediately executes this action and the `work` it contains.
         * @return {any}
         */
        AsyncAction.prototype.execute = function (state, delay) {
            if (this.closed) {
                return new Error('executing a cancelled action');
            }
            this.pending = false;
            var error = this._execute(state, delay);
            if (error) {
                return error;
            } else if (this.pending === false && this.id != null) {
                // Dequeue if the action didn't reschedule itself. Don't call
                // unsubscribe(), because the action could reschedule later.
                // For example:
                // ```
                // scheduler.schedule(function doWork(counter) {
                //   /* ... I'm a busy worker bee ... */
                //   var originalAction = this;
                //   /* wait 100ms before rescheduling the action */
                //   setTimeout(function () {
                //     originalAction.schedule(counter + 1);
                //   }, 100);
                // }, 1000);
                // ```
                this.id = this.recycleAsyncId(this.scheduler, this.id, null);
            }
        };
        AsyncAction.prototype._execute = function (state, delay) {
            var errored = false;
            var errorValue = undefined;
            try {
                this.work(state);
            } catch (e) {
                errored = true;
                errorValue = !!e && e || new Error(e);
            }
            if (errored) {
                this.unsubscribe();
                return errorValue;
            }
        };
        AsyncAction.prototype._unsubscribe = function () {
            var id = this.id;
            var scheduler = this.scheduler;
            var actions = scheduler.actions;
            var index = actions.indexOf(this);
            this.work = null;
            this.delay = null;
            this.state = null;
            this.pending = false;
            this.scheduler = null;
            if (index !== -1) {
                actions.splice(index, 1);
            }
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, null);
            }
        };
        return AsyncAction;
    }(Action_1.Action);
    exports.AsyncAction = AsyncAction;
    

    return module.exports;
});
$__System.registerDynamic("b2", [], true, function ($__require, exports, module) {
    "use strict";
    /**
     * An execution context and a data structure to order tasks and schedule their
     * execution. Provides a notion of (potentially virtual) time, through the
     * `now()` getter method.
     *
     * Each unit of work in a Scheduler is called an {@link Action}.
     *
     * ```ts
     * class Scheduler {
     *   now(): number;
     *   schedule(work, delay?, state?): Subscription;
     * }
     * ```
     *
     * @class Scheduler
     */

    var define,
        global = this || self,
        GLOBAL = global;
    var Scheduler = function () {
        function Scheduler(SchedulerAction, now) {
            if (now === void 0) {
                now = Scheduler.now;
            }
            this.SchedulerAction = SchedulerAction;
            this.now = now;
        }
        /**
         * Schedules a function, `work`, for execution. May happen at some point in
         * the future, according to the `delay` parameter, if specified. May be passed
         * some context object, `state`, which will be passed to the `work` function.
         *
         * The given arguments will be processed an stored as an Action object in a
         * queue of actions.
         *
         * @param {function(state: ?T): ?Subscription} work A function representing a
         * task, or some unit of work to be executed by the Scheduler.
         * @param {number} [delay] Time to wait before executing the work, where the
         * time unit is implicit and defined by the Scheduler itself.
         * @param {T} [state] Some contextual data that the `work` function uses when
         * called by the Scheduler.
         * @return {Subscription} A subscription in order to be able to unsubscribe
         * the scheduled work.
         */
        Scheduler.prototype.schedule = function (work, delay, state) {
            if (delay === void 0) {
                delay = 0;
            }
            return new this.SchedulerAction(this, work).schedule(state, delay);
        };
        Scheduler.now = Date.now ? Date.now : function () {
            return +new Date();
        };
        return Scheduler;
    }();
    exports.Scheduler = Scheduler;
    

    return module.exports;
});
$__System.registerDynamic("b3", ["b2"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Scheduler_1 = $__require("b2");
    var AsyncScheduler = function (_super) {
        __extends(AsyncScheduler, _super);
        function AsyncScheduler() {
            _super.apply(this, arguments);
            this.actions = [];
            /**
             * A flag to indicate whether the Scheduler is currently executing a batch of
             * queued actions.
             * @type {boolean}
             */
            this.active = false;
            /**
             * An internal ID used to track the latest asynchronous task such as those
             * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and
             * others.
             * @type {any}
             */
            this.scheduled = undefined;
        }
        AsyncScheduler.prototype.flush = function (action) {
            var actions = this.actions;
            if (this.active) {
                actions.push(action);
                return;
            }
            var error;
            this.active = true;
            do {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            } while (action = actions.shift()); // exhaust the scheduler queue
            this.active = false;
            if (error) {
                while (action = actions.shift()) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsyncScheduler;
    }(Scheduler_1.Scheduler);
    exports.AsyncScheduler = AsyncScheduler;
    

    return module.exports;
});
$__System.registerDynamic('b4', ['b0', 'b3'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var AsyncAction_1 = $__require('b0');
  var AsyncScheduler_1 = $__require('b3');
  exports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);
  

  return module.exports;
});
$__System.registerDynamic('b5', ['b6', 'b4'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('b6');
    var async_1 = $__require('b4');
    /**
     * Emits a value from the source Observable only after a particular time span
     * has passed without another source emission.
     *
     * <span class="informal">It's like {@link delay}, but passes only the most
     * recent value from each burst of emissions.</span>
     *
     * <img src="./img/debounceTime.png" width="100%">
     *
     * `debounceTime` delays values emitted by the source Observable, but drops
     * previous pending delayed emissions if a new value arrives on the source
     * Observable. This operator keeps track of the most recent value from the
     * source Observable, and emits that only when `dueTime` enough time has passed
     * without any other value appearing on the source Observable. If a new value
     * appears before `dueTime` silence occurs, the previous value will be dropped
     * and will not be emitted on the output Observable.
     *
     * This is a rate-limiting operator, because it is impossible for more than one
     * value to be emitted in any time window of duration `dueTime`, but it is also
     * a delay-like operator since output emissions do not occur at the same time as
     * they did on the source Observable. Optionally takes a {@link Scheduler} for
     * managing timers.
     *
     * @example <caption>Emit the most recent click after a burst of clicks</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.debounceTime(1000);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link auditTime}
     * @see {@link debounce}
     * @see {@link delay}
     * @see {@link sampleTime}
     * @see {@link throttleTime}
     *
     * @param {number} dueTime The timeout duration in milliseconds (or the time
     * unit determined internally by the optional `scheduler`) for the window of
     * time required to wait for emission silence before emitting the most recent
     * source value.
     * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for
     * managing the timers that handle the timeout for each value.
     * @return {Observable} An Observable that delays the emissions of the source
     * Observable by the specified `dueTime`, and may drop some values if they occur
     * too frequently.
     * @method debounceTime
     * @owner Observable
     */
    function debounceTime(dueTime, scheduler) {
        if (scheduler === void 0) {
            scheduler = async_1.async;
        }
        return this.lift(new DebounceTimeOperator(dueTime, scheduler));
    }
    exports.debounceTime = debounceTime;
    var DebounceTimeOperator = function () {
        function DebounceTimeOperator(dueTime, scheduler) {
            this.dueTime = dueTime;
            this.scheduler = scheduler;
        }
        DebounceTimeOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
        };
        return DebounceTimeOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DebounceTimeSubscriber = function (_super) {
        __extends(DebounceTimeSubscriber, _super);
        function DebounceTimeSubscriber(destination, dueTime, scheduler) {
            _super.call(this, destination);
            this.dueTime = dueTime;
            this.scheduler = scheduler;
            this.debouncedSubscription = null;
            this.lastValue = null;
            this.hasValue = false;
        }
        DebounceTimeSubscriber.prototype._next = function (value) {
            this.clearDebounce();
            this.lastValue = value;
            this.hasValue = true;
            this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
        };
        DebounceTimeSubscriber.prototype._complete = function () {
            this.debouncedNext();
            this.destination.complete();
        };
        DebounceTimeSubscriber.prototype.debouncedNext = function () {
            this.clearDebounce();
            if (this.hasValue) {
                this.destination.next(this.lastValue);
                this.lastValue = null;
                this.hasValue = false;
            }
        };
        DebounceTimeSubscriber.prototype.clearDebounce = function () {
            var debouncedSubscription = this.debouncedSubscription;
            if (debouncedSubscription !== null) {
                this.remove(debouncedSubscription);
                debouncedSubscription.unsubscribe();
                this.debouncedSubscription = null;
            }
        };
        return DebounceTimeSubscriber;
    }(Subscriber_1.Subscriber);
    function dispatchNext(subscriber) {
        subscriber.debouncedNext();
    }
    

    return module.exports;
});
$__System.registerDynamic('b7', ['91', 'b5'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('91');
  var debounceTime_1 = $__require('b5');
  Observable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;
  

  return module.exports;
});
$__System.registerDynamic('b8', ['b6', 'b9', 'ba'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('b6');
    var tryCatch_1 = $__require('b9');
    var errorObject_1 = $__require('ba');
    /**
     * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.
     * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
     * If a comparator function is not provided, an equality check is used by default.
     * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.
     * @return {Observable} an Observable that emits items from the source Observable with distinct values.
     * @method distinctUntilChanged
     * @owner Observable
     */
    function distinctUntilChanged(compare, keySelector) {
        return this.lift(new DistinctUntilChangedOperator(compare, keySelector));
    }
    exports.distinctUntilChanged = distinctUntilChanged;
    var DistinctUntilChangedOperator = function () {
        function DistinctUntilChangedOperator(compare, keySelector) {
            this.compare = compare;
            this.keySelector = keySelector;
        }
        DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
        };
        return DistinctUntilChangedOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DistinctUntilChangedSubscriber = function (_super) {
        __extends(DistinctUntilChangedSubscriber, _super);
        function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
            _super.call(this, destination);
            this.keySelector = keySelector;
            this.hasKey = false;
            if (typeof compare === 'function') {
                this.compare = compare;
            }
        }
        DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
            return x === y;
        };
        DistinctUntilChangedSubscriber.prototype._next = function (value) {
            var keySelector = this.keySelector;
            var key = value;
            if (keySelector) {
                key = tryCatch_1.tryCatch(this.keySelector)(value);
                if (key === errorObject_1.errorObject) {
                    return this.destination.error(errorObject_1.errorObject.e);
                }
            }
            var result = false;
            if (this.hasKey) {
                result = tryCatch_1.tryCatch(this.compare)(this.key, key);
                if (result === errorObject_1.errorObject) {
                    return this.destination.error(errorObject_1.errorObject.e);
                }
            } else {
                this.hasKey = true;
            }
            if (Boolean(result) === false) {
                this.key = key;
                this.destination.next(value);
            }
        };
        return DistinctUntilChangedSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('bb', ['91', 'b8'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('91');
  var distinctUntilChanged_1 = $__require('b8');
  Observable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;
  

  return module.exports;
});
$__System.registerDynamic("bc", ["b6"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("b6");
    /**
     * Perform a side effect for every emission on the source Observable, but return
     * an Observable that is identical to the source.
     *
     * <span class="informal">Intercepts each emission on the source and runs a
     * function, but returns an output which is identical to the source.</span>
     *
     * <img src="./img/do.png" width="100%">
     *
     * Returns a mirrored Observable of the source Observable, but modified so that
     * the provided Observer is called to perform a side effect for every value,
     * error, and completion emitted by the source. Any errors that are thrown in
     * the aforementioned Observer or handlers are safely sent down the error path
     * of the output Observable.
     *
     * This operator is useful for debugging your Observables for the correct values
     * or performing other side effects.
     *
     * Note: this is different to a `subscribe` on the Observable. If the Observable
     * returned by `do` is not subscribed, the side effects specified by the
     * Observer will never happen. `do` therefore simply spies on existing
     * execution, it does not trigger an execution to happen like `subscribe` does.
     *
     * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var positions = clicks
     *   .do(ev => console.log(ev))
     *   .map(ev => ev.clientX);
     * positions.subscribe(x => console.log(x));
     *
     * @see {@link map}
     * @see {@link subscribe}
     *
     * @param {Observer|function} [nextOrObserver] A normal Observer object or a
     * callback for `next`.
     * @param {function} [error] Callback for errors in the source.
     * @param {function} [complete] Callback for the completion of the source.
     * @return {Observable} An Observable identical to the source, but runs the
     * specified Observer or callback(s) for each item.
     * @method do
     * @name do
     * @owner Observable
     */
    function _do(nextOrObserver, error, complete) {
        return this.lift(new DoOperator(nextOrObserver, error, complete));
    }
    exports._do = _do;
    var DoOperator = function () {
        function DoOperator(nextOrObserver, error, complete) {
            this.nextOrObserver = nextOrObserver;
            this.error = error;
            this.complete = complete;
        }
        DoOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
        };
        return DoOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DoSubscriber = function (_super) {
        __extends(DoSubscriber, _super);
        function DoSubscriber(destination, nextOrObserver, error, complete) {
            _super.call(this, destination);
            var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);
            safeSubscriber.syncErrorThrowable = true;
            this.add(safeSubscriber);
            this.safeSubscriber = safeSubscriber;
        }
        DoSubscriber.prototype._next = function (value) {
            var safeSubscriber = this.safeSubscriber;
            safeSubscriber.next(value);
            if (safeSubscriber.syncErrorThrown) {
                this.destination.error(safeSubscriber.syncErrorValue);
            } else {
                this.destination.next(value);
            }
        };
        DoSubscriber.prototype._error = function (err) {
            var safeSubscriber = this.safeSubscriber;
            safeSubscriber.error(err);
            if (safeSubscriber.syncErrorThrown) {
                this.destination.error(safeSubscriber.syncErrorValue);
            } else {
                this.destination.error(err);
            }
        };
        DoSubscriber.prototype._complete = function () {
            var safeSubscriber = this.safeSubscriber;
            safeSubscriber.complete();
            if (safeSubscriber.syncErrorThrown) {
                this.destination.error(safeSubscriber.syncErrorValue);
            } else {
                this.destination.complete();
            }
        };
        return DoSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('bd', ['91', 'bc'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('91');
  var do_1 = $__require('bc');
  Observable_1.Observable.prototype.do = do_1._do;
  Observable_1.Observable.prototype._do = do_1._do;
  

  return module.exports;
});
$__System.registerDynamic('be', ['91', 'bf'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('91');
  var filter_1 = $__require('bf');
  Observable_1.Observable.prototype.filter = filter_1.filter;
  

  return module.exports;
});
$__System.registerDynamic('c0', ['91', 'c1'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('91');
  var map_1 = $__require('c1');
  Observable_1.Observable.prototype.map = map_1.map;
  

  return module.exports;
});
$__System.registerDynamic('c2', ['c3', 'c4'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('c3');
    var subscribeToResult_1 = $__require('c4');
    /**
     * Projects each source value to an Observable which is merged in the output
     * Observable, emitting values only from the most recently projected Observable.
     *
     * <span class="informal">Maps each value to an Observable, then flattens all of
     * these inner Observables using {@link switch}.</span>
     *
     * <img src="./img/switchMap.png" width="100%">
     *
     * Returns an Observable that emits items based on applying a function that you
     * supply to each item emitted by the source Observable, where that function
     * returns an (so-called "inner") Observable. Each time it observes one of these
     * inner Observables, the output Observable begins emitting the items emitted by
     * that inner Observable. When a new inner Observable is emitted, `switchMap`
     * stops emitting items from the earlier-emitted inner Observable and begins
     * emitting items from the new one. It continues to behave like this for
     * subsequent inner Observables.
     *
     * @example <caption>Rerun an interval Observable on every click event</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));
     * result.subscribe(x => console.log(x));
     *
     * @see {@link concatMap}
     * @see {@link exhaustMap}
     * @see {@link mergeMap}
     * @see {@link switch}
     * @see {@link switchMapTo}
     *
     * @param {function(value: T, ?index: number): Observable} project A function
     * that, when applied to an item emitted by the source Observable, returns an
     * Observable.
     * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
     * A function to produce the value on the output Observable based on the values
     * and the indices of the source (outer) emission and the inner Observable
     * emission. The arguments passed to this function are:
     * - `outerValue`: the value that came from the source
     * - `innerValue`: the value that came from the projected Observable
     * - `outerIndex`: the "index" of the value that came from the source
     * - `innerIndex`: the "index" of the value from the projected Observable
     * @return {Observable} An Observable that emits the result of applying the
     * projection function (and the optional `resultSelector`) to each item emitted
     * by the source Observable and taking only the values from the most recently
     * projected inner Observable.
     * @method switchMap
     * @owner Observable
     */
    function switchMap(project, resultSelector) {
        return this.lift(new SwitchMapOperator(project, resultSelector));
    }
    exports.switchMap = switchMap;
    var SwitchMapOperator = function () {
        function SwitchMapOperator(project, resultSelector) {
            this.project = project;
            this.resultSelector = resultSelector;
        }
        SwitchMapOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));
        };
        return SwitchMapOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SwitchMapSubscriber = function (_super) {
        __extends(SwitchMapSubscriber, _super);
        function SwitchMapSubscriber(destination, project, resultSelector) {
            _super.call(this, destination);
            this.project = project;
            this.resultSelector = resultSelector;
            this.index = 0;
        }
        SwitchMapSubscriber.prototype._next = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            } catch (error) {
                this.destination.error(error);
                return;
            }
            this._innerSub(result, value, index);
        };
        SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {
            var innerSubscription = this.innerSubscription;
            if (innerSubscription) {
                innerSubscription.unsubscribe();
            }
            this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));
        };
        SwitchMapSubscriber.prototype._complete = function () {
            var innerSubscription = this.innerSubscription;
            if (!innerSubscription || innerSubscription.closed) {
                _super.prototype._complete.call(this);
            }
        };
        SwitchMapSubscriber.prototype._unsubscribe = function () {
            this.innerSubscription = null;
        };
        SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
            this.remove(innerSub);
            this.innerSubscription = null;
            if (this.isStopped) {
                _super.prototype._complete.call(this);
            }
        };
        SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (this.resultSelector) {
                this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);
            } else {
                this.destination.next(innerValue);
            }
        };
        SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
            var result;
            try {
                result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return SwitchMapSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('c5', ['91', 'c2'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('91');
  var switchMap_1 = $__require('c2');
  Observable_1.Observable.prototype.switchMap = switchMap_1.switchMap;
  

  return module.exports;
});
$__System.registerDynamic('a3', ['a7', 'ab', 'ac', 'b7', 'bb', 'bd', 'be', 'c0', 'c5'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  $__require('a7');
  $__require('ab');
  $__require('ac');
  $__require('b7');
  $__require('bb');
  $__require('bd');
  $__require('be');
  $__require('c0');
  $__require('c5');
  return module.exports;
});
$__System.registerDynamic("c6", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var AccountConfirmEmailComponent = function () {
        function AccountConfirmEmailComponent() {}
        AccountConfirmEmailComponent.prototype.ngOnInit = function () {};
        AccountConfirmEmailComponent = __decorate([core_1.Component({
            template: 'Confirm Email'
        }), __metadata('design:paramtypes', [])], AccountConfirmEmailComponent);
        return AccountConfirmEmailComponent;
    }();
    exports.AccountConfirmEmailComponent = AccountConfirmEmailComponent;
    return module.exports;
});
$__System.registerDynamic("c7", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var AccountDisplayEmailComponent = function () {
        function AccountDisplayEmailComponent() {}
        AccountDisplayEmailComponent.prototype.ngOnInit = function () {};
        AccountDisplayEmailComponent = __decorate([core_1.Component({
            template: 'Display Email'
        }), __metadata('design:paramtypes', [])], AccountDisplayEmailComponent);
        return AccountDisplayEmailComponent;
    }();
    exports.AccountDisplayEmailComponent = AccountDisplayEmailComponent;
    return module.exports;
});
$__System.registerDynamic("c8", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var AccountForgotPasswordComponent = function () {
        function AccountForgotPasswordComponent() {}
        AccountForgotPasswordComponent.prototype.ngOnInit = function () {};
        AccountForgotPasswordComponent = __decorate([core_1.Component({
            template: 'Forgot Password'
        }), __metadata('design:paramtypes', [])], AccountForgotPasswordComponent);
        return AccountForgotPasswordComponent;
    }();
    exports.AccountForgotPasswordComponent = AccountForgotPasswordComponent;
    return module.exports;
});
$__System.registerDynamic("c9", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var AccountForgotPasswordConfirmComponent = function () {
        function AccountForgotPasswordConfirmComponent() {}
        AccountForgotPasswordConfirmComponent.prototype.ngOnInit = function () {};
        AccountForgotPasswordConfirmComponent = __decorate([core_1.Component({
            template: 'Overview'
        }), __metadata('design:paramtypes', [])], AccountForgotPasswordConfirmComponent);
        return AccountForgotPasswordConfirmComponent;
    }();
    exports.AccountForgotPasswordConfirmComponent = AccountForgotPasswordConfirmComponent;
    return module.exports;
});
$__System.registerDynamic("ca", ["c", "98", "99", "9d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var router_1 = $__require("98");
    var services_1 = $__require("99");
    var models_1 = $__require("9d");
    var AccountLoginComponent = function () {
        function AccountLoginComponent(accountService, router) {
            this.accountService = accountService;
            this.router = router;
            this.submitted = false;
        }
        AccountLoginComponent.prototype.ngOnInit = function () {
            this.model = new models_1.AccountLoginModel();
        };
        AccountLoginComponent.prototype.submit = function (model) {
            var _this = this;
            this.submitted = true;
            this.accountService.login(model).then(function (loginSuccess) {
                if (loginSuccess) {
                    _this.accountService.userInformations.isAuthenticated = true;
                    _this.router.navigate(['/']);
                } else {}
            });
        };
        AccountLoginComponent = __decorate([core_1.Component({
            templateUrl: '/views/account/AccountLogin.html'
        }), __metadata('design:paramtypes', [services_1.AccountService, router_1.Router])], AccountLoginComponent);
        return AccountLoginComponent;
    }();
    exports.AccountLoginComponent = AccountLoginComponent;
    return module.exports;
});
$__System.registerDynamic("cb", ["c", "98", "99"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var router_1 = $__require("98");
    var services_1 = $__require("99");
    var AccountLogoutComponent = function () {
        function AccountLogoutComponent(accountService, navigationService, router) {
            this.accountService = accountService;
            this.navigationService = navigationService;
            this.router = router;
        }
        AccountLogoutComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.accountService.logout().then(function (result) {
                return _this.loggedOut();
            });
        };
        AccountLogoutComponent.prototype.loggedOut = function () {
            this.navigationService.loadNavigation();
            this.router.navigate(['/']);
        };
        AccountLogoutComponent = __decorate([core_1.Component({
            template: ''
        }), __metadata('design:paramtypes', [services_1.AccountService, services_1.NavigationService, router_1.Router])], AccountLogoutComponent);
        return AccountLogoutComponent;
    }();
    exports.AccountLogoutComponent = AccountLogoutComponent;
    return module.exports;
});
$__System.registerDynamic("cc", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var AccountRegisterComponent = function () {
        function AccountRegisterComponent() {}
        AccountRegisterComponent.prototype.ngOnInit = function () {};
        AccountRegisterComponent = __decorate([core_1.Component({
            template: 'Account Register'
        }), __metadata('design:paramtypes', [])], AccountRegisterComponent);
        return AccountRegisterComponent;
    }();
    exports.AccountRegisterComponent = AccountRegisterComponent;
    return module.exports;
});
$__System.registerDynamic("cd", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var AccountResetPasswordComponent = function () {
        function AccountResetPasswordComponent() {}
        AccountResetPasswordComponent.prototype.ngOnInit = function () {};
        AccountResetPasswordComponent = __decorate([core_1.Component({
            template: 'Reset Password'
        }), __metadata('design:paramtypes', [])], AccountResetPasswordComponent);
        return AccountResetPasswordComponent;
    }();
    exports.AccountResetPasswordComponent = AccountResetPasswordComponent;
    return module.exports;
});
$__System.registerDynamic("ce", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var AccountResetPasswordConfirmComponent = function () {
        function AccountResetPasswordConfirmComponent() {}
        AccountResetPasswordConfirmComponent.prototype.ngOnInit = function () {};
        AccountResetPasswordConfirmComponent = __decorate([core_1.Component({
            template: 'Reset Password Confirm'
        }), __metadata('design:paramtypes', [])], AccountResetPasswordConfirmComponent);
        return AccountResetPasswordConfirmComponent;
    }();
    exports.AccountResetPasswordConfirmComponent = AccountResetPasswordConfirmComponent;
    return module.exports;
});
$__System.registerDynamic("cf", ["c", "99"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var services_1 = $__require("99");
    var AppComponent = function () {
        function AppComponent(accountService, navigationService) {
            this.accountService = accountService;
            this.navigationService = navigationService;
        }
        AppComponent.prototype.ngOnInit = function () {
            this.accountService.updateUserInformations();
            this.navigationService.loadNavigation();
        };
        AppComponent = __decorate([core_1.Component({
            selector: 'my-app',
            providers: [services_1.NavigationService],
            templateUrl: '/views/template/layout.html'
        }), __metadata('design:paramtypes', [services_1.AccountService, services_1.NavigationService])], AppComponent);
        return AppComponent;
    }();
    exports.AppComponent = AppComponent;
    return module.exports;
});
$__System.registerDynamic("d0", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var CmsCategoryEditComponent = function () {
        function CmsCategoryEditComponent() {}
        CmsCategoryEditComponent = __decorate([core_1.Component({
            template: "CMS Kategorien"
        }), __metadata('design:paramtypes', [])], CmsCategoryEditComponent);
        return CmsCategoryEditComponent;
    }();
    exports.CmsCategoryEditComponent = CmsCategoryEditComponent;
    return module.exports;
});
$__System.registerDynamic("d1", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var CmsDashboardComponent = function () {
        function CmsDashboardComponent() {}
        CmsDashboardComponent = __decorate([core_1.Component({
            template: 'Dashboard'
        }), __metadata('design:paramtypes', [])], CmsDashboardComponent);
        return CmsDashboardComponent;
    }();
    exports.CmsDashboardComponent = CmsDashboardComponent;
    return module.exports;
});
$__System.registerDynamic("d2", ["c", "98", "99", "9d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var router_1 = $__require("98");
    var services_1 = $__require("99");
    var models_1 = $__require("9d");
    var CmsRecipeEditComponent = function () {
        function CmsRecipeEditComponent(route, router, cmsService) {
            this.route = route;
            this.router = router;
            this.cmsService = cmsService;
            this.recipe = new models_1.RecipeEditModel();
            this.SelectAbleHours = new Array();
            for (var i = 0; i <= 59; i++) {
                this.SelectAbleHours.push(i);
            }
            this.SelectAbleMinuts = new Array();
            for (var i = 0; i <= 50; i = i + 10) {
                this.SelectAbleMinuts.push(i);
            }
        }
        CmsRecipeEditComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.cmsService.getIngredients().then(function (ingredients) {
                return _this.SelectAbleIngerdients = ingredients;
            });
            this.cmsService.getMeasurements().then(function (measurements) {
                return _this.SelectAbleMeasurements = measurements;
            });
            this.cmsService.getAuthors().then(function (authors) {
                return _this.SelectAbleAuthors = authors;
            });
            this.cmsService.getSeoTags().then(function (seos) {
                return _this.SelectAbleSeoTags = seos;
            });
            this.route.params.forEach(function (params) {
                _this.id = +params['id'];
                _this.cmsService.getRecipeEdit(_this.id).then(function (recipe) {
                    return _this.setRecipe(recipe);
                });
            });
        };
        CmsRecipeEditComponent.prototype.setRecipe = function (newRecipe) {
            this.recipe = newRecipe;
        };
        CmsRecipeEditComponent.prototype.addIngredient = function () {
            if (this.recipe.ingredientList == null) {
                this.recipe.ingredientList = new Array();
            }
            var ingredientListItem = new models_1.IngredientListItemModel();
            ingredientListItem.id = 0;
            ingredientListItem.amount = 1;
            ingredientListItem.ingredientId = 0;
            ingredientListItem.ingredientName = "";
            ingredientListItem.measurementId = 0;
            ingredientListItem.measurementName = "";
            this.recipe.ingredientList.push(ingredientListItem);
        };
        CmsRecipeEditComponent = __decorate([core_1.Component({
            templateUrl: '/views/cms/CmsRecipeEdit.html'
        }), __metadata('design:paramtypes', [router_1.ActivatedRoute, router_1.Router, services_1.CmsService])], CmsRecipeEditComponent);
        return CmsRecipeEditComponent;
    }();
    exports.CmsRecipeEditComponent = CmsRecipeEditComponent;
    return module.exports;
});
$__System.registerDynamic("d3", ["c", "98", "99", "9d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var router_1 = $__require("98");
    var services_1 = $__require("99");
    var models_1 = $__require("9d");
    var CmsRecipeOverviewComponent = function () {
        function CmsRecipeOverviewComponent(route, router, cmsService) {
            this.route = route;
            this.router = router;
            this.cmsService = cmsService;
            this.recipeViewModel = new models_1.RecipeOverviewModel();
        }
        CmsRecipeOverviewComponent.prototype.ngOnInit = function () {
            this.loadRecipes(1);
        };
        CmsRecipeOverviewComponent.prototype.loadRecipes = function (page) {
            var _this = this;
            if (page < 1) {
                return;
            }
            if (this.recipeViewModel.paging.maxPage > 0 && page > this.recipeViewModel.paging.maxPage) {
                return;
            }
            this.cmsService.getRecipes(page).then(function (recipes) {
                return _this.recipesLoaded(recipes);
            });
        };
        CmsRecipeOverviewComponent.prototype.recipesLoaded = function (data) {
            this.recipeViewModel = data;
            this.recipeViewModel.paging.showPaging = false;
            this.recipeViewModel.paging.showPreview = true;
            this.recipeViewModel.paging.showNext = true;
            if (data.paging.maxPage > 1) {
                this.recipeViewModel.paging.showPaging = true;
                this.recipeViewModel.paging.pages = new Array();
                var minPage = data.paging.currentPage - 2;
                var maxPage = data.paging.currentPage + 2;
                if (data.paging.currentPage == 1) {
                    maxPage = maxPage + 2;
                }
                if (data.paging.currentPage == 2) {
                    maxPage = maxPage + 1;
                }
                if (data.paging.currentPage + 1 > data.paging.maxPage) {
                    minPage = minPage - 1;
                }
                if (data.paging.currentPage + 2 > data.paging.maxPage) {
                    minPage = minPage - 1;
                }
                this.recipeViewModel.paging.showPreview = data.paging.currentPage != 1;
                this.recipeViewModel.paging.showNext = data.paging.currentPage != data.paging.maxPage;
                for (var n = 1; n <= data.paging.maxPage; n++) {
                    if (n >= minPage && n <= maxPage) {
                        this.recipeViewModel.paging.pages.push(n);
                    }
                }
            }
        };
        CmsRecipeOverviewComponent = __decorate([core_1.Component({
            templateUrl: '/views/cms/CmsRecipeOverview.html'
        }), __metadata('design:paramtypes', [router_1.ActivatedRoute, router_1.Router, services_1.CmsService])], CmsRecipeOverviewComponent);
        return CmsRecipeOverviewComponent;
    }();
    exports.CmsRecipeOverviewComponent = CmsRecipeOverviewComponent;
    return module.exports;
});
$__System.registerDynamic("d4", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var CmsTemplateComponent = function () {
        function CmsTemplateComponent() {}
        CmsTemplateComponent = __decorate([core_1.Component({
            template: "\n\t<h1 class=\"headline\">CMS</h1>\n\n\t<ul class=\"nav nav-tabs\">\n\t\t<li class=\"nav-item\"><a class=\"nav-link\" routerLinkActive=\"active\" routerLink=\"/CMS/Rezepte\">Rezepte</a></li>\n\t\t<li class=\"nav-item\"><a class=\"nav-link\" routerLinkActive=\"active\" routerLink=\"/CMS/Kategorien\">Kategorien</a></li>\n\t\t<li class=\"nav-item\"><a class=\"nav-link\" routerLinkActive=\"active\" routerLink=\"/CMS/Dashboard\">Dashboard</a></li>\n\t</ul>\n\t<br>\n\n\t<router-outlet></router-outlet>"
        }), __metadata('design:paramtypes', [])], CmsTemplateComponent);
        return CmsTemplateComponent;
    }();
    exports.CmsTemplateComponent = CmsTemplateComponent;
    return module.exports;
});
$__System.registerDynamic("d5", ["c", "98", "99", "9d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var router_1 = $__require("98");
    var services_1 = $__require("99");
    var models_1 = $__require("9d");
    var RecipeDetailComponent = function () {
        function RecipeDetailComponent(route, router, recipeService) {
            this.route = route;
            this.router = router;
            this.recipeService = recipeService;
            this.recipe = new models_1.RecipeDetailModel();
        }
        RecipeDetailComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.route.params.forEach(function (params) {
                _this.id = +params['id'];
                _this.recipeService.getRecipeDetail(_this.id).then(function (recipe) {
                    return _this.setRecipe(recipe);
                });
            });
        };
        RecipeDetailComponent.prototype.setRecipe = function (newRecipe) {
            this.recipe = newRecipe;
        };
        RecipeDetailComponent = __decorate([core_1.Component({
            templateUrl: '/views/recipe/RecipeDetail.html'
        }), __metadata('design:paramtypes', [router_1.ActivatedRoute, router_1.Router, services_1.RecipeService])], RecipeDetailComponent);
        return RecipeDetailComponent;
    }();
    exports.RecipeDetailComponent = RecipeDetailComponent;
    return module.exports;
});
$__System.registerDynamic("d6", ["c", "98", "99", "9d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var router_1 = $__require("98");
    var services_1 = $__require("99");
    var models_1 = $__require("9d");
    var RecipeOverviewComponent = function () {
        function RecipeOverviewComponent(route, router, recipeService) {
            this.route = route;
            this.router = router;
            this.recipeService = recipeService;
            this.recipeViewModel = new models_1.RecipeOverviewModel();
        }
        RecipeOverviewComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.route.params.forEach(function (params) {
                _this.categoryUrl = params['categoryUrl'];
                _this.subCategoryUrl = params['subCategoryUrl'];
                _this.loadRecipes(1);
            });
        };
        RecipeOverviewComponent.prototype.loadRecipes = function (page) {
            var _this = this;
            if (page < 1) {
                return;
            }
            if (this.recipeViewModel.paging.maxPage > 0 && page > this.recipeViewModel.paging.maxPage) {
                return;
            }
            this.recipeService.getRecipeOverview(page, this.categoryUrl, this.subCategoryUrl).then(function (recipes) {
                return _this.recipesLoaded(recipes);
            });
        };
        RecipeOverviewComponent.prototype.recipesLoaded = function (data) {
            this.recipeViewModel = data;
            this.recipeViewModel.paging.showPaging = false;
            this.recipeViewModel.paging.showPreview = true;
            this.recipeViewModel.paging.showNext = true;
            if (data.paging.maxPage > 1) {
                this.recipeViewModel.paging.showPaging = true;
                this.recipeViewModel.paging.pages = new Array();
                var minPage = data.paging.currentPage - 2;
                var maxPage = data.paging.currentPage + 2;
                if (data.paging.currentPage == 1) {
                    maxPage = maxPage + 2;
                }
                if (data.paging.currentPage == 2) {
                    maxPage = maxPage + 1;
                }
                if (data.paging.currentPage + 1 > data.paging.maxPage) {
                    minPage = minPage - 1;
                }
                if (data.paging.currentPage + 2 > data.paging.maxPage) {
                    minPage = minPage - 1;
                }
                this.recipeViewModel.paging.showPreview = data.paging.currentPage != 1;
                this.recipeViewModel.paging.showNext = data.paging.currentPage != data.paging.maxPage;
                for (var n = 1; n <= data.paging.maxPage; n++) {
                    if (n >= minPage && n <= maxPage) {
                        this.recipeViewModel.paging.pages.push(n);
                    }
                }
            }
        };
        RecipeOverviewComponent = __decorate([core_1.Component({
            templateUrl: '/views/recipe/RecipeOverview.html'
        }), __metadata('design:paramtypes', [router_1.ActivatedRoute, router_1.Router, services_1.RecipeService])], RecipeOverviewComponent);
        return RecipeOverviewComponent;
    }();
    exports.RecipeOverviewComponent = RecipeOverviewComponent;
    return module.exports;
});
$__System.registerDynamic("d7", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var AboutComponent = function () {
        function AboutComponent() {}
        AboutComponent.prototype.ngOnInit = function () {};
        AboutComponent = __decorate([core_1.Component({
            templateUrl: '/views/shared/About.html'
        }), __metadata('design:paramtypes', [])], AboutComponent);
        return AboutComponent;
    }();
    exports.AboutComponent = AboutComponent;
    return module.exports;
});
$__System.registerDynamic("d8", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var ContactComponent = function () {
        function ContactComponent() {}
        ContactComponent.prototype.ngOnInit = function () {};
        ContactComponent = __decorate([core_1.Component({
            templateUrl: '/views/shared/Contact.html'
        }), __metadata('design:paramtypes', [])], ContactComponent);
        return ContactComponent;
    }();
    exports.ContactComponent = ContactComponent;
    return module.exports;
});
$__System.registerDynamic("d9", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var EmptyComponent = function () {
        function EmptyComponent() {}
        EmptyComponent = __decorate([core_1.Component({
            template: ""
        }), __metadata('design:paramtypes', [])], EmptyComponent);
        return EmptyComponent;
    }();
    exports.EmptyComponent = EmptyComponent;
    return module.exports;
});
$__System.registerDynamic("da", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var ErrorComponent = function () {
        function ErrorComponent() {}
        ErrorComponent = __decorate([core_1.Component({
            template: "Es ist ein Fehler aufgetreten, bitte versuchen Sie es sp\u00E4ter erneut."
        }), __metadata('design:paramtypes', [])], ErrorComponent);
        return ErrorComponent;
    }();
    exports.ErrorComponent = ErrorComponent;
    return module.exports;
});
$__System.registerDynamic("a6", ["c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    __export($__require("c6"));
    __export($__require("c7"));
    __export($__require("c8"));
    __export($__require("c9"));
    __export($__require("ca"));
    __export($__require("cb"));
    __export($__require("cc"));
    __export($__require("cd"));
    __export($__require("ce"));
    __export($__require("cf"));
    __export($__require("d0"));
    __export($__require("d1"));
    __export($__require("d2"));
    __export($__require("d3"));
    __export($__require("d4"));
    __export($__require("d5"));
    __export($__require("d6"));
    __export($__require("d7"));
    __export($__require("d8"));
    __export($__require("d9"));
    __export($__require("da"));
    return module.exports;
});
$__System.registerDynamic("db", ["c", "a4", "98", "dc", "9d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var http_1 = $__require("a4");
    var router_1 = $__require("98");
    $__require("dc");
    var models_1 = $__require("9d");
    var AccountService = function () {
        function AccountService(http, router) {
            this.http = http;
            this.router = router;
            this.headers = new http_1.Headers({ 'Content-Type': 'application/json' });
            this.userInformations = new models_1.UserInformationModel();
        }
        AccountService.prototype.canActivate = function (route, state) {
            var roles = route.data["roles"];
            for (var _i = 0, roles_1 = roles; _i < roles_1.length; _i++) {
                var role = roles_1[_i];
                if (this.isUserInGroup(role)) {
                    return true;
                }
            }
            this.router.navigate(['/']);
            return false;
        };
        AccountService.prototype.isUserInGroup = function (group) {
            switch (group) {
                case "author":
                    return this.userInformations.isAuthor;
                case "admin":
                    return this.userInformations.isAdmin;
            }
            return false;
        };
        AccountService.prototype.updateUserInformations = function () {
            var _this = this;
            this.http.get('/api/account/GetUserInformation', { headers: this.headers }).toPromise().then(function (response) {
                return response.json();
            }).then(function (result) {
                return _this.userInformations = result;
            }).catch(this.handleError);
        };
        AccountService.prototype.login = function (data) {
            var headers = new http_1.Headers();
            headers.append('Content-Type', 'application/json');
            var myData = JSON.stringify(data);
            var result;
            result = this.http.post('/api/account/Login', myData, { headers: this.headers }).toPromise().then(function (response) {
                return response.json();
            }).catch(this.handleError);
            this.updateUserInformations();
            return result;
        };
        AccountService.prototype.logout = function () {
            var _this = this;
            return this.http.post('/api/account/Logout', { headers: this.headers }).toPromise().then(function (response) {
                return response.json();
            }).then(function (result) {
                return _this.userInformations.isAdmin = false;
            }).then(function (result) {
                return _this.userInformations.isAuthenticated = false;
            }).then(function (result) {
                return _this.userInformations.isAuthor = false;
            }).then(function (result) {
                return _this.userInformations.isFriend = false;
            }).then(function (result) {
                return _this.userInformations.userName = null;
            }).catch(this.handleError);
        };
        AccountService.prototype.register = function (data) {
            var headers = new http_1.Headers();
            headers.append('Content-Type', 'application/json');
            var myData = JSON.stringify(data);
            return this.http.post('/api/account/Register', myData, { headers: this.headers }).toPromise().then(function (response) {
                return response.json();
            }).catch(this.handleError);
        };
        AccountService.prototype.forgotPassword = function (data) {
            var headers = new http_1.Headers();
            headers.append('Content-Type', 'application/json');
            var myData = JSON.stringify(data);
            return this.http.post('/api/account/ForgotPassword', myData, { headers: this.headers }).toPromise().then(function (response) {
                return response.json();
            }).catch(this.handleError);
        };
        AccountService.prototype.resetPassword = function (data) {
            var headers = new http_1.Headers();
            headers.append('Content-Type', 'application/json');
            var myData = JSON.stringify(data);
            return this.http.post('/api/account/ResetPassword', myData, { headers: this.headers }).toPromise().then(function (response) {
                return response.json();
            }).catch(this.handleError);
        };
        AccountService.prototype.handleError = function (error) {
            console.error('An error occurred', error);
            return Promise.reject(error.message || error);
        };
        AccountService = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [http_1.Http, router_1.Router])], AccountService);
        return AccountService;
    }();
    exports.AccountService = AccountService;
    return module.exports;
});
$__System.registerDynamic("dd", ["c", "a4", "dc"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var http_1 = $__require("a4");
    $__require("dc");
    var CmsService = function () {
        function CmsService(http) {
            this.http = http;
            this.headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        }
        CmsService.prototype.getRecipes = function (page) {
            var url = '/api/cms/Recipes?page=' + page;
            return this.http.get(url, { headers: this.headers }).toPromise().then(function (response) {
                return response.json();
            }).catch(this.handleError);
        };
        CmsService.prototype.getRecipeEdit = function (id) {
            return this.http.get('/api/cms/RecipeEdit/' + id, { headers: this.headers }).toPromise().then(function (response) {
                return response.json();
            }).catch(this.handleError);
        };
        CmsService.prototype.getIngredients = function () {
            var url = '/api/cms/Ingredients';
            return this.http.get(url, { headers: this.headers }).toPromise().then(function (response) {
                return response.json();
            }).catch(this.handleError);
        };
        CmsService.prototype.getMeasurements = function () {
            var url = '/api/cms/Measurements';
            return this.http.get(url, { headers: this.headers }).toPromise().then(function (response) {
                return response.json();
            }).catch(this.handleError);
        };
        CmsService.prototype.getAuthors = function () {
            var url = '/api/cms/Authors';
            return this.http.get(url, { headers: this.headers }).toPromise().then(function (response) {
                return response.json();
            }).catch(this.handleError);
        };
        CmsService.prototype.getSeoTags = function () {
            var url = '/api/cms/SeoTags';
            return this.http.get(url, { headers: this.headers }).toPromise().then(function (response) {
                return response.json();
            }).catch(this.handleError);
        };
        CmsService.prototype.handleError = function (error) {
            console.error('An error occurred', error);
            return Promise.reject(error.message || error);
        };
        CmsService = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [http_1.Http])], CmsService);
        return CmsService;
    }();
    exports.CmsService = CmsService;
    return module.exports;
});
$__System.registerDynamic("de", ["c", "a4", "98", "dc", "9d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var http_1 = $__require("a4");
    var router_1 = $__require("98");
    $__require("dc");
    var models_1 = $__require("9d");
    var NavigationService = function () {
        function NavigationService(http, router) {
            this.http = http;
            this.router = router;
            this.headers = new http_1.Headers({ 'Content-Type': 'application/json' });
            this.navigationUrl = '/api/Navigation/Load';
            this.navigation = new models_1.NavigationModel();
        }
        NavigationService.prototype.ngOnInit = function () {};
        NavigationService.prototype.loadNavigation = function () {
            var _this = this;
            this.http.get(this.navigationUrl, { headers: this.headers }).toPromise().then(function (response) {
                return response.json();
            }).then(function (result) {
                return _this.navigation = result;
            }).catch(this.handleError);
        };
        NavigationService.prototype.handleError = function (error) {
            console.error('An error occurred', error);
            return Promise.reject(error.message || error);
        };
        NavigationService.prototype.SetActiveNavigation = function (routeName) {
            var IsNaviFounded = false;
            this.navigation.MainNavigation.forEach(function (navigation) {
                if (navigation.RouteName === routeName) {
                    navigation.Active = !IsNaviFounded;
                    IsNaviFounded = true;
                } else {
                    navigation.Active = false;
                }
            });
            if (!IsNaviFounded) {
                this.navigation.MainNavigation[0].Active = true;
            }
        };
        NavigationService.prototype.UpdateActiveNavigaton = function () {
            var _this = this;
            var IsNaviFounded = false;
            this.navigation.MainNavigation.forEach(function (navigation) {
                if (navigation.CategoryUrl != null && navigation.CategoryUrl === _this.currentCategoryUrl) {
                    navigation.Active = !IsNaviFounded;
                    IsNaviFounded = true;
                } else {
                    navigation.Active = false;
                }
            });
            this.navigation.SubNavigation.forEach(function (navigation) {
                if (navigation.CategoryUrl != null && navigation.CategoryUrl === _this.currentCategoryUrl) {
                    navigation.Active = !IsNaviFounded;
                    IsNaviFounded = true;
                } else {
                    navigation.Active = false;
                }
            });
            if (!IsNaviFounded && this.navigation != null && this.navigation.MainNavigation != null && this.navigation.MainNavigation.length >= 1) {
                this.navigation.MainNavigation[0].Active = true;
            }
        };
        NavigationService.prototype.SetMobileMenuHeight = function () {
            this.GetScreenWidthAndHeight();
            $('.mobile-menu-height').css('height', this.displayHeight - 58 + 'px');
            $('.mobile-menu-height').css('max-height', this.displayHeight - 58 + 'px');
        };
        NavigationService.prototype.GetScreenWidthAndHeight = function () {
            this.displayWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
            this.displayHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
        };
        NavigationService = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [http_1.Http, router_1.Router])], NavigationService);
        return NavigationService;
    }();
    exports.NavigationService = NavigationService;
    return module.exports;
});
$__System.registerDynamic("df", ["c", "a4", "dc"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var http_1 = $__require("a4");
    $__require("dc");
    var RecipeService = function () {
        function RecipeService(http) {
            this.http = http;
            this.headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        }
        RecipeService.prototype.getRecipeOverview = function (page, categoryUrl, subCategoryUrl) {
            var url = '/api/RecipeOverview?page=' + page;
            if (categoryUrl != null && categoryUrl != 'null') {
                url = url + '&categoryUrl=' + categoryUrl;
            }
            if (subCategoryUrl != null && subCategoryUrl != 'null') {
                url = url + '&subCategoryUrl=' + subCategoryUrl;
            }
            return this.http.get(url, { headers: this.headers }).toPromise().then(function (response) {
                return response.json();
            }).catch(this.handleError);
        };
        RecipeService.prototype.getRecipeDetail = function (id) {
            return this.http.get('/api/RecipeDetail/' + id, { headers: this.headers }).toPromise().then(function (response) {
                return response.json();
            }).catch(this.handleError);
        };
        RecipeService.prototype.handleError = function (error) {
            console.error('An error occurred', error);
            return Promise.reject(error.message || error);
        };
        RecipeService = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [http_1.Http])], RecipeService);
        return RecipeService;
    }();
    exports.RecipeService = RecipeService;
    return module.exports;
});
$__System.register("e0", ["c", "e1"], function($__export) {
  "use strict";
  var Injectable,
      global,
      _nextRequestId,
      JSONP_HOME,
      _jsonpConnections,
      BrowserJsonp;
  function _getJsonpConnections() {
    if (_jsonpConnections === null) {
      _jsonpConnections = global[JSONP_HOME] = {};
    }
    return _jsonpConnections;
  }
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
    }, function($__m) {
      global = $__m.global;
    }],
    execute: function() {
      _nextRequestId = 0;
      JSONP_HOME = '__ng_jsonp__';
      $__export("JSONP_HOME", JSONP_HOME);
      _jsonpConnections = null;
      BrowserJsonp = (function() {
        function BrowserJsonp() {}
        BrowserJsonp.prototype.build = function(url) {
          var node = document.createElement('script');
          node.src = url;
          return node;
        };
        BrowserJsonp.prototype.nextRequestID = function() {
          return "__req" + _nextRequestId++;
        };
        BrowserJsonp.prototype.requestCallback = function(id) {
          return JSONP_HOME + "." + id + ".finished";
        };
        BrowserJsonp.prototype.exposeConnection = function(id, connection) {
          var connections = _getJsonpConnections();
          connections[id] = connection;
        };
        BrowserJsonp.prototype.removeConnection = function(id) {
          var connections = _getJsonpConnections();
          connections[id] = null;
        };
        BrowserJsonp.prototype.send = function(node) {
          document.body.appendChild((node));
        };
        BrowserJsonp.prototype.cleanup = function(node) {
          if (node.parentNode) {
            node.parentNode.removeChild((node));
          }
        };
        BrowserJsonp.decorators = [{type: Injectable}];
        BrowserJsonp.ctorParameters = [];
        return BrowserJsonp;
      }());
      $__export("BrowserJsonp", BrowserJsonp);
    }
  };
});

$__System.register("e2", ["c", "91", "e3", "e4", "e1", "e5", "e6", "e0"], function($__export) {
  "use strict";
  var __extends,
      Injectable,
      Observable,
      ResponseOptions,
      ReadyState,
      RequestMethod,
      ResponseType,
      isPresent,
      ConnectionBackend,
      Response,
      BrowserJsonp,
      JSONP_ERR_NO_CALLBACK,
      JSONP_ERR_WRONG_METHOD,
      JSONPConnection,
      JSONPConnection_,
      JSONPBackend,
      JSONPBackend_;
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
    }, function($__m) {
      Observable = $__m.Observable;
    }, function($__m) {
      ResponseOptions = $__m.ResponseOptions;
    }, function($__m) {
      ReadyState = $__m.ReadyState;
      RequestMethod = $__m.RequestMethod;
      ResponseType = $__m.ResponseType;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      ConnectionBackend = $__m.ConnectionBackend;
    }, function($__m) {
      Response = $__m.Response;
    }, function($__m) {
      BrowserJsonp = $__m.BrowserJsonp;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
      JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';
      JSONPConnection = (function() {
        function JSONPConnection() {}
        return JSONPConnection;
      }());
      $__export("JSONPConnection", JSONPConnection);
      JSONPConnection_ = (function(_super) {
        __extends(JSONPConnection_, _super);
        function JSONPConnection_(req, _dom, baseResponseOptions) {
          var _this = this;
          _super.call(this);
          this._dom = _dom;
          this.baseResponseOptions = baseResponseOptions;
          this._finished = false;
          if (req.method !== RequestMethod.Get) {
            throw new TypeError(JSONP_ERR_WRONG_METHOD);
          }
          this.request = req;
          this.response = new Observable(function(responseObserver) {
            _this.readyState = ReadyState.Loading;
            var id = _this._id = _dom.nextRequestID();
            _dom.exposeConnection(id, _this);
            var callback = _dom.requestCallback(_this._id);
            var url = req.url;
            if (url.indexOf('=JSONP_CALLBACK&') > -1) {
              url = url.replace('=JSONP_CALLBACK&', "=" + callback + "&");
            } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {
              url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + ("=" + callback);
            }
            var script = _this._script = _dom.build(url);
            var onLoad = function(event) {
              if (_this.readyState === ReadyState.Cancelled)
                return;
              _this.readyState = ReadyState.Done;
              _dom.cleanup(script);
              if (!_this._finished) {
                var responseOptions_1 = new ResponseOptions({
                  body: JSONP_ERR_NO_CALLBACK,
                  type: ResponseType.Error,
                  url: url
                });
                if (isPresent(baseResponseOptions)) {
                  responseOptions_1 = baseResponseOptions.merge(responseOptions_1);
                }
                responseObserver.error(new Response(responseOptions_1));
                return;
              }
              var responseOptions = new ResponseOptions({
                body: _this._responseData,
                url: url
              });
              if (isPresent(_this.baseResponseOptions)) {
                responseOptions = _this.baseResponseOptions.merge(responseOptions);
              }
              responseObserver.next(new Response(responseOptions));
              responseObserver.complete();
            };
            var onError = function(error) {
              if (_this.readyState === ReadyState.Cancelled)
                return;
              _this.readyState = ReadyState.Done;
              _dom.cleanup(script);
              var responseOptions = new ResponseOptions({
                body: error.message,
                type: ResponseType.Error
              });
              if (isPresent(baseResponseOptions)) {
                responseOptions = baseResponseOptions.merge(responseOptions);
              }
              responseObserver.error(new Response(responseOptions));
            };
            script.addEventListener('load', onLoad);
            script.addEventListener('error', onError);
            _dom.send(script);
            return function() {
              _this.readyState = ReadyState.Cancelled;
              script.removeEventListener('load', onLoad);
              script.removeEventListener('error', onError);
              if (isPresent(script)) {
                _this._dom.cleanup(script);
              }
            };
          });
        }
        JSONPConnection_.prototype.finished = function(data) {
          this._finished = true;
          this._dom.removeConnection(this._id);
          if (this.readyState === ReadyState.Cancelled)
            return;
          this._responseData = data;
        };
        return JSONPConnection_;
      }(JSONPConnection));
      $__export("JSONPConnection_", JSONPConnection_);
      JSONPBackend = (function(_super) {
        __extends(JSONPBackend, _super);
        function JSONPBackend() {
          _super.apply(this, arguments);
        }
        return JSONPBackend;
      }(ConnectionBackend));
      $__export("JSONPBackend", JSONPBackend);
      JSONPBackend_ = (function(_super) {
        __extends(JSONPBackend_, _super);
        function JSONPBackend_(_browserJSONP, _baseResponseOptions) {
          _super.call(this);
          this._browserJSONP = _browserJSONP;
          this._baseResponseOptions = _baseResponseOptions;
        }
        JSONPBackend_.prototype.createConnection = function(request) {
          return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);
        };
        JSONPBackend_.decorators = [{type: Injectable}];
        JSONPBackend_.ctorParameters = [{type: BrowserJsonp}, {type: ResponseOptions}];
        return JSONPBackend_;
      }(JSONPBackend));
      $__export("JSONPBackend_", JSONPBackend_);
    }
  };
});

$__System.register("e7", [], function($__export) {
  "use strict";
  var win,
      document,
      location,
      gc,
      performance,
      Event,
      MouseEvent,
      KeyboardEvent,
      EventTarget,
      History,
      Location,
      EventListener;
  return {
    setters: [],
    execute: function() {
      win = typeof window !== 'undefined' && window || {};
      $__export("window", win);
      document = win.document;
      $__export("document", document);
      location = win.location;
      $__export("location", location);
      gc = win['gc'] ? function() {
        return win['gc']();
      } : function() {
        return null;
      };
      $__export("gc", gc);
      performance = win['performance'] ? win['performance'] : null;
      $__export("performance", performance);
      Event = win['Event'];
      $__export("Event", Event);
      MouseEvent = win['MouseEvent'];
      $__export("MouseEvent", MouseEvent);
      KeyboardEvent = win['KeyboardEvent'];
      $__export("KeyboardEvent", KeyboardEvent);
      EventTarget = win['EventTarget'];
      $__export("EventTarget", EventTarget);
      History = win['History'];
      $__export("History", History);
      Location = win['Location'];
      $__export("Location", Location);
      EventListener = win['EventListener'];
      $__export("EventListener", EventListener);
    }
  };
});

$__System.register("e8", ["c", "e9", "e7", "ea"], function($__export) {
  "use strict";
  var ApplicationRef,
      getDOM,
      window,
      isPresent,
      ChangeDetectionPerfRecord,
      AngularTools,
      AngularProfiler;
  return {
    setters: [function($__m) {
      ApplicationRef = $__m.ApplicationRef;
    }, function($__m) {
      getDOM = $__m.getDOM;
    }, function($__m) {
      window = $__m.window;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      ChangeDetectionPerfRecord = (function() {
        function ChangeDetectionPerfRecord(msPerTick, numTicks) {
          this.msPerTick = msPerTick;
          this.numTicks = numTicks;
        }
        return ChangeDetectionPerfRecord;
      }());
      $__export("ChangeDetectionPerfRecord", ChangeDetectionPerfRecord);
      AngularTools = (function() {
        function AngularTools(ref) {
          this.profiler = new AngularProfiler(ref);
        }
        return AngularTools;
      }());
      $__export("AngularTools", AngularTools);
      AngularProfiler = (function() {
        function AngularProfiler(ref) {
          this.appRef = ref.injector.get(ApplicationRef);
        }
        AngularProfiler.prototype.timeChangeDetection = function(config) {
          var record = config && config['record'];
          var profileName = 'Change Detection';
          var isProfilerAvailable = isPresent(window.console.profile);
          if (record && isProfilerAvailable) {
            window.console.profile(profileName);
          }
          var start = getDOM().performanceNow();
          var numTicks = 0;
          while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {
            this.appRef.tick();
            numTicks++;
          }
          var end = getDOM().performanceNow();
          if (record && isProfilerAvailable) {
            window.console.profileEnd(profileName);
          }
          var msPerTick = (end - start) / numTicks;
          window.console.log("ran " + numTicks + " change detection cycles");
          window.console.log(msPerTick.toFixed(2) + " ms per check");
          return new ChangeDetectionPerfRecord(msPerTick, numTicks);
        };
        return AngularProfiler;
      }());
      $__export("AngularProfiler", AngularProfiler);
    }
  };
});

$__System.register("eb", ["ea", "e8"], function($__export) {
  "use strict";
  var global,
      AngularTools,
      context;
  function enableDebugTools(ref) {
    context.ng = new AngularTools(ref);
    return ref;
  }
  function disableDebugTools() {
    delete context.ng;
  }
  $__export("enableDebugTools", enableDebugTools);
  $__export("disableDebugTools", disableDebugTools);
  return {
    setters: [function($__m) {
      global = $__m.global;
    }, function($__m) {
      AngularTools = $__m.AngularTools;
    }],
    execute: function() {
      context = global;
    }
  };
});

$__System.register("ec", ["e9", "ea"], function($__export) {
  "use strict";
  var getDOM,
      isPresent,
      By;
  return {
    setters: [function($__m) {
      getDOM = $__m.getDOM;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      By = (function() {
        function By() {}
        By.all = function() {
          return function(debugElement) {
            return true;
          };
        };
        By.css = function(selector) {
          return function(debugElement) {
            return isPresent(debugElement.nativeElement) ? getDOM().elementMatches(debugElement.nativeElement, selector) : false;
          };
        };
        By.directive = function(type) {
          return function(debugElement) {
            return debugElement.providerTokens.indexOf(type) !== -1;
          };
        };
        return By;
      }());
      $__export("By", By);
    }
  };
});

$__System.register("ed", ["c", "ea", "e9"], function($__export) {
  "use strict";
  var AUTO_STYLE,
      isPresent,
      getDOM,
      WebAnimationsPlayer;
  function _computeStyle(element, prop) {
    return getDOM().getComputedStyle(element)[prop];
  }
  return {
    setters: [function($__m) {
      AUTO_STYLE = $__m.AUTO_STYLE;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      getDOM = $__m.getDOM;
    }],
    execute: function() {
      WebAnimationsPlayer = (function() {
        function WebAnimationsPlayer(element, keyframes, options) {
          this.element = element;
          this.keyframes = keyframes;
          this.options = options;
          this._onDoneFns = [];
          this._onStartFns = [];
          this._finished = false;
          this._initialized = false;
          this._started = false;
          this.parentPlayer = null;
          this._duration = options['duration'];
        }
        WebAnimationsPlayer.prototype._onFinish = function() {
          if (!this._finished) {
            this._finished = true;
            if (!isPresent(this.parentPlayer)) {
              this.destroy();
            }
            this._onDoneFns.forEach(function(fn) {
              return fn();
            });
            this._onDoneFns = [];
          }
        };
        WebAnimationsPlayer.prototype.init = function() {
          var _this = this;
          if (this._initialized)
            return;
          this._initialized = true;
          var keyframes = this.keyframes.map(function(styles) {
            var formattedKeyframe = {};
            Object.keys(styles).forEach(function(prop) {
              var value = styles[prop];
              formattedKeyframe[prop] = value == AUTO_STYLE ? _computeStyle(_this.element, prop) : value;
            });
            return formattedKeyframe;
          });
          this._player = this._triggerWebAnimation(this.element, keyframes, this.options);
          this.reset();
          this._player.onfinish = function() {
            return _this._onFinish();
          };
        };
        WebAnimationsPlayer.prototype._triggerWebAnimation = function(element, keyframes, options) {
          return element.animate(keyframes, options);
        };
        WebAnimationsPlayer.prototype.onStart = function(fn) {
          this._onStartFns.push(fn);
        };
        WebAnimationsPlayer.prototype.onDone = function(fn) {
          this._onDoneFns.push(fn);
        };
        WebAnimationsPlayer.prototype.play = function() {
          this.init();
          if (!this.hasStarted()) {
            this._onStartFns.forEach(function(fn) {
              return fn();
            });
            this._onStartFns = [];
            this._started = true;
          }
          this._player.play();
        };
        WebAnimationsPlayer.prototype.pause = function() {
          this.init();
          this._player.pause();
        };
        WebAnimationsPlayer.prototype.finish = function() {
          this.init();
          this._onFinish();
          this._player.finish();
        };
        WebAnimationsPlayer.prototype.reset = function() {
          this._player.cancel();
        };
        WebAnimationsPlayer.prototype.restart = function() {
          this.reset();
          this.play();
        };
        WebAnimationsPlayer.prototype.hasStarted = function() {
          return this._started;
        };
        WebAnimationsPlayer.prototype.destroy = function() {
          this.reset();
          this._onFinish();
        };
        Object.defineProperty(WebAnimationsPlayer.prototype, "totalTime", {
          get: function() {
            return this._duration;
          },
          enumerable: true,
          configurable: true
        });
        WebAnimationsPlayer.prototype.setPosition = function(p) {
          this._player.currentTime = p * this.totalTime;
        };
        WebAnimationsPlayer.prototype.getPosition = function() {
          return this._player.currentTime / this.totalTime;
        };
        return WebAnimationsPlayer;
      }());
      $__export("WebAnimationsPlayer", WebAnimationsPlayer);
    }
  };
});

$__System.register("ee", ["c", "ea", "ef", "ed"], function($__export) {
  "use strict";
  var AUTO_STYLE,
      isPresent,
      dashCaseToCamelCase,
      WebAnimationsPlayer,
      WebAnimationsDriver,
      _$0,
      _$9,
      _$PERIOD;
  function _populateStyles(element, styles, defaultStyles) {
    var data = {};
    styles.styles.forEach(function(entry) {
      Object.keys(entry).forEach(function(prop) {
        var val = entry[prop];
        var formattedProp = dashCaseToCamelCase(prop);
        data[formattedProp] = val == AUTO_STYLE ? val : val.toString() + _resolveStyleUnit(val, prop, formattedProp);
      });
    });
    Object.keys(defaultStyles).forEach(function(prop) {
      if (!isPresent(data[prop])) {
        data[prop] = defaultStyles[prop];
      }
    });
    return data;
  }
  function _resolveStyleUnit(val, userProvidedProp, formattedProp) {
    var unit = '';
    if (_isPixelDimensionStyle(formattedProp) && val != 0 && val != '0') {
      if (typeof val === 'number') {
        unit = 'px';
      } else if (_findDimensionalSuffix(val.toString()).length == 0) {
        throw new Error('Please provide a CSS unit value for ' + userProvidedProp + ':' + val);
      }
    }
    return unit;
  }
  function _findDimensionalSuffix(value) {
    for (var i = 0; i < value.length; i++) {
      var c = value.charCodeAt(i);
      if ((c >= _$0 && c <= _$9) || c == _$PERIOD)
        continue;
      return value.substring(i, value.length);
    }
    return '';
  }
  function _isPixelDimensionStyle(prop) {
    switch (prop) {
      case 'width':
      case 'height':
      case 'minWidth':
      case 'minHeight':
      case 'maxWidth':
      case 'maxHeight':
      case 'left':
      case 'top':
      case 'bottom':
      case 'right':
      case 'fontSize':
      case 'outlineWidth':
      case 'outlineOffset':
      case 'paddingTop':
      case 'paddingLeft':
      case 'paddingBottom':
      case 'paddingRight':
      case 'marginTop':
      case 'marginLeft':
      case 'marginBottom':
      case 'marginRight':
      case 'borderRadius':
      case 'borderWidth':
      case 'borderTopWidth':
      case 'borderLeftWidth':
      case 'borderRightWidth':
      case 'borderBottomWidth':
      case 'textIndent':
        return true;
      default:
        return false;
    }
  }
  return {
    setters: [function($__m) {
      AUTO_STYLE = $__m.AUTO_STYLE;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      dashCaseToCamelCase = $__m.dashCaseToCamelCase;
    }, function($__m) {
      WebAnimationsPlayer = $__m.WebAnimationsPlayer;
    }],
    execute: function() {
      WebAnimationsDriver = (function() {
        function WebAnimationsDriver() {}
        WebAnimationsDriver.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing) {
          var formattedSteps = [];
          var startingStyleLookup = {};
          if (isPresent(startingStyles) && startingStyles.styles.length > 0) {
            startingStyleLookup = _populateStyles(element, startingStyles, {});
            startingStyleLookup['offset'] = 0;
            formattedSteps.push(startingStyleLookup);
          }
          keyframes.forEach(function(keyframe) {
            var data = _populateStyles(element, keyframe.styles, startingStyleLookup);
            data['offset'] = keyframe.offset;
            formattedSteps.push(data);
          });
          if (formattedSteps.length == 1) {
            var start = formattedSteps[0];
            start['offset'] = null;
            formattedSteps = [start, start];
          }
          var playerOptions = {
            'duration': duration,
            'delay': delay,
            'fill': 'both'
          };
          if (easing) {
            playerOptions['easing'] = easing;
          }
          return new WebAnimationsPlayer(element, formattedSteps, playerOptions);
        };
        return WebAnimationsDriver;
      }());
      $__export("WebAnimationsDriver", WebAnimationsDriver);
      _$0 = 48;
      _$9 = 57;
      _$PERIOD = 46;
    }
  };
});

$__System.register("f0", ["e9"], function($__export) {
  "use strict";
  var getDOM,
      Title;
  return {
    setters: [function($__m) {
      getDOM = $__m.getDOM;
    }],
    execute: function() {
      Title = (function() {
        function Title() {}
        Title.prototype.getTitle = function() {
          return getDOM().getTitle();
        };
        Title.prototype.setTitle = function(newTitle) {
          getDOM().setTitle(newTitle);
        };
        return Title;
      }());
      $__export("Title", Title);
    }
  };
});

$__System.register("f1", ["c", "e9", "f2"], function($__export) {
  "use strict";
  var isDevMode,
      getDOM,
      sanitizeSrcset,
      sanitizeUrl,
      inertElement,
      DOM,
      VOID_ELEMENTS,
      OPTIONAL_END_TAG_BLOCK_ELEMENTS,
      OPTIONAL_END_TAG_INLINE_ELEMENTS,
      OPTIONAL_END_TAG_ELEMENTS,
      BLOCK_ELEMENTS,
      INLINE_ELEMENTS,
      VALID_ELEMENTS,
      URI_ATTRS,
      SRCSET_ATTRS,
      HTML_ATTRS,
      VALID_ATTRS,
      SanitizingHtmlSerializer,
      SURROGATE_PAIR_REGEXP,
      NON_ALPHANUMERIC_REGEXP;
  function getInertElement() {
    if (inertElement)
      return inertElement;
    DOM = getDOM();
    var templateEl = DOM.createElement('template');
    if ('content' in templateEl)
      return templateEl;
    var doc = DOM.createHtmlDocument();
    inertElement = DOM.querySelector(doc, 'body');
    if (inertElement == null) {
      var html = DOM.createElement('html', doc);
      inertElement = DOM.createElement('body', doc);
      DOM.appendChild(html, inertElement);
      DOM.appendChild(doc, html);
    }
    return inertElement;
  }
  function tagSet(tags) {
    var res = {};
    for (var _i = 0,
        _a = tags.split(','); _i < _a.length; _i++) {
      var t = _a[_i];
      res[t] = true;
    }
    return res;
  }
  function merge() {
    var sets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      sets[_i - 0] = arguments[_i];
    }
    var res = {};
    for (var _a = 0,
        sets_1 = sets; _a < sets_1.length; _a++) {
      var s = sets_1[_a];
      for (var v in s) {
        if (s.hasOwnProperty(v))
          res[v] = true;
      }
    }
    return res;
  }
  function encodeEntities(value) {
    return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function(match) {
      var hi = match.charCodeAt(0);
      var low = match.charCodeAt(1);
      return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
    }).replace(NON_ALPHANUMERIC_REGEXP, function(match) {
      return '&#' + match.charCodeAt(0) + ';';
    }).replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }
  function stripCustomNsAttrs(el) {
    DOM.attributeMap(el).forEach(function(_, attrName) {
      if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
        DOM.removeAttribute(el, attrName);
      }
    });
    for (var _i = 0,
        _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
      var n = _a[_i];
      if (DOM.isElementNode(n))
        stripCustomNsAttrs(n);
    }
  }
  function sanitizeHtml(unsafeHtmlInput) {
    try {
      var containerEl = getInertElement();
      var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
      var mXSSAttempts = 5;
      var parsedHtml = unsafeHtml;
      do {
        if (mXSSAttempts === 0) {
          throw new Error('Failed to sanitize html because the input is unstable');
        }
        mXSSAttempts--;
        unsafeHtml = parsedHtml;
        DOM.setInnerHTML(containerEl, unsafeHtml);
        if (DOM.defaultDoc().documentMode) {
          stripCustomNsAttrs(containerEl);
        }
        parsedHtml = DOM.getInnerHTML(containerEl);
      } while (unsafeHtml !== parsedHtml);
      var sanitizer = new SanitizingHtmlSerializer();
      var safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
      var parent_1 = DOM.getTemplateContent(containerEl) || containerEl;
      for (var _i = 0,
          _a = DOM.childNodesAsList(parent_1); _i < _a.length; _i++) {
        var child = _a[_i];
        DOM.removeChild(parent_1, child);
      }
      if (isDevMode() && sanitizer.sanitizedSomething) {
        DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
      }
      return safeHtml;
    } catch (e) {
      inertElement = null;
      throw e;
    }
  }
  $__export("sanitizeHtml", sanitizeHtml);
  return {
    setters: [function($__m) {
      isDevMode = $__m.isDevMode;
    }, function($__m) {
      getDOM = $__m.getDOM;
    }, function($__m) {
      sanitizeSrcset = $__m.sanitizeSrcset;
      sanitizeUrl = $__m.sanitizeUrl;
    }],
    execute: function() {
      inertElement = null;
      DOM = null;
      VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
      OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
      OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
      OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
      BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
      INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
      VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
      URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
      SRCSET_ATTRS = tagSet('srcset');
      HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width');
      VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
      SanitizingHtmlSerializer = (function() {
        function SanitizingHtmlSerializer() {
          this.sanitizedSomething = false;
          this.buf = [];
        }
        SanitizingHtmlSerializer.prototype.sanitizeChildren = function(el) {
          var current = el.firstChild;
          while (current) {
            if (DOM.isElementNode(current)) {
              this.startElement(current);
            } else if (DOM.isTextNode(current)) {
              this.chars(DOM.nodeValue(current));
            } else {
              this.sanitizedSomething = true;
            }
            if (DOM.firstChild(current)) {
              current = DOM.firstChild(current);
              continue;
            }
            while (current) {
              if (DOM.isElementNode(current)) {
                this.endElement(current);
              }
              if (DOM.nextSibling(current)) {
                current = DOM.nextSibling(current);
                break;
              }
              current = DOM.parentElement(current);
            }
          }
          return this.buf.join('');
        };
        SanitizingHtmlSerializer.prototype.startElement = function(element) {
          var _this = this;
          var tagName = DOM.nodeName(element).toLowerCase();
          if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
            this.sanitizedSomething = true;
            return;
          }
          this.buf.push('<');
          this.buf.push(tagName);
          DOM.attributeMap(element).forEach(function(value, attrName) {
            var lower = attrName.toLowerCase();
            if (!VALID_ATTRS.hasOwnProperty(lower)) {
              _this.sanitizedSomething = true;
              return;
            }
            if (URI_ATTRS[lower])
              value = sanitizeUrl(value);
            if (SRCSET_ATTRS[lower])
              value = sanitizeSrcset(value);
            _this.buf.push(' ');
            _this.buf.push(attrName);
            _this.buf.push('="');
            _this.buf.push(encodeEntities(value));
            _this.buf.push('"');
          });
          this.buf.push('>');
        };
        SanitizingHtmlSerializer.prototype.endElement = function(current) {
          var tagName = DOM.nodeName(current).toLowerCase();
          if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
            this.buf.push('</');
            this.buf.push(tagName);
            this.buf.push('>');
          }
        };
        SanitizingHtmlSerializer.prototype.chars = function(chars) {
          this.buf.push(encodeEntities(chars));
        };
        return SanitizingHtmlSerializer;
      }());
      SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
      NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
    }
  };
});

$__System.register("f3", ["c", "e9", "f2"], function($__export) {
  "use strict";
  var isDevMode,
      getDOM,
      sanitizeUrl,
      VALUES,
      TRANSFORMATION_FNS,
      COLOR_FNS,
      FN_ARGS,
      SAFE_STYLE_VALUE,
      URL_RE;
  function hasBalancedQuotes(value) {
    var outsideSingle = true;
    var outsideDouble = true;
    for (var i = 0; i < value.length; i++) {
      var c = value.charAt(i);
      if (c === '\'' && outsideDouble) {
        outsideSingle = !outsideSingle;
      } else if (c === '"' && outsideSingle) {
        outsideDouble = !outsideDouble;
      }
    }
    return outsideSingle && outsideDouble;
  }
  function sanitizeStyle(value) {
    value = String(value).trim();
    if (!value)
      return '';
    var urlMatch = value.match(URL_RE);
    if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) || value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
      return value;
    }
    if (isDevMode()) {
      getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
    }
    return 'unsafe';
  }
  $__export("sanitizeStyle", sanitizeStyle);
  return {
    setters: [function($__m) {
      isDevMode = $__m.isDevMode;
    }, function($__m) {
      getDOM = $__m.getDOM;
    }, function($__m) {
      sanitizeUrl = $__m.sanitizeUrl;
    }],
    execute: function() {
      VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
      TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
      COLOR_FNS = '(?:rgb|hsl)a?';
      FN_ARGS = '\\([-0-9.%, a-zA-Z]+\\)';
      SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + ")" + FN_ARGS + ")$", 'g');
      URL_RE = /^url\(([^)]+)\)$/;
    }
  };
});

$__System.register("f2", ["c", "e9"], function($__export) {
  "use strict";
  var isDevMode,
      getDOM,
      SAFE_URL_PATTERN,
      SAFE_SRCSET_PATTERN,
      DATA_URL_PATTERN;
  function sanitizeUrl(url) {
    url = String(url);
    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
      return url;
    if (isDevMode()) {
      getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
    }
    return 'unsafe:' + url;
  }
  function sanitizeSrcset(srcset) {
    srcset = String(srcset);
    return srcset.split(',').map(function(srcset) {
      return sanitizeUrl(srcset.trim());
    }).join(', ');
  }
  $__export("sanitizeUrl", sanitizeUrl);
  $__export("sanitizeSrcset", sanitizeSrcset);
  return {
    setters: [function($__m) {
      isDevMode = $__m.isDevMode;
    }, function($__m) {
      getDOM = $__m.getDOM;
    }],
    execute: function() {
      SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
      SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;
      DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
    }
  };
});

$__System.register("f4", ["c", "f1", "f3", "f2"], function($__export) {
  "use strict";
  var __extends,
      Injectable,
      SecurityContext,
      sanitizeHtml,
      sanitizeStyle,
      sanitizeUrl,
      DomSanitizer,
      DomSanitizerImpl,
      SafeValueImpl,
      SafeHtmlImpl,
      SafeStyleImpl,
      SafeScriptImpl,
      SafeUrlImpl,
      SafeResourceUrlImpl;
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
      SecurityContext = $__m.SecurityContext;
    }, function($__m) {
      sanitizeHtml = $__m.sanitizeHtml;
    }, function($__m) {
      sanitizeStyle = $__m.sanitizeStyle;
    }, function($__m) {
      sanitizeUrl = $__m.sanitizeUrl;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      $__export("SecurityContext", SecurityContext);
      DomSanitizer = (function() {
        function DomSanitizer() {}
        return DomSanitizer;
      }());
      $__export("DomSanitizer", DomSanitizer);
      DomSanitizerImpl = (function(_super) {
        __extends(DomSanitizerImpl, _super);
        function DomSanitizerImpl() {
          _super.apply(this, arguments);
        }
        DomSanitizerImpl.prototype.sanitize = function(ctx, value) {
          if (value == null)
            return null;
          switch (ctx) {
            case SecurityContext.NONE:
              return value;
            case SecurityContext.HTML:
              if (value instanceof SafeHtmlImpl)
                return value.changingThisBreaksApplicationSecurity;
              this.checkNotSafeValue(value, 'HTML');
              return sanitizeHtml(String(value));
            case SecurityContext.STYLE:
              if (value instanceof SafeStyleImpl)
                return value.changingThisBreaksApplicationSecurity;
              this.checkNotSafeValue(value, 'Style');
              return sanitizeStyle(value);
            case SecurityContext.SCRIPT:
              if (value instanceof SafeScriptImpl)
                return value.changingThisBreaksApplicationSecurity;
              this.checkNotSafeValue(value, 'Script');
              throw new Error('unsafe value used in a script context');
            case SecurityContext.URL:
              if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
                return value.changingThisBreaksApplicationSecurity;
              }
              this.checkNotSafeValue(value, 'URL');
              return sanitizeUrl(String(value));
            case SecurityContext.RESOURCE_URL:
              if (value instanceof SafeResourceUrlImpl) {
                return value.changingThisBreaksApplicationSecurity;
              }
              this.checkNotSafeValue(value, 'ResourceURL');
              throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
            default:
              throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
          }
        };
        DomSanitizerImpl.prototype.checkNotSafeValue = function(value, expectedType) {
          if (value instanceof SafeValueImpl) {
            throw new Error(("Required a safe " + expectedType + ", got a " + value.getTypeName() + " ") + "(see http://g.co/ng/security#xss)");
          }
        };
        DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function(value) {
          return new SafeHtmlImpl(value);
        };
        DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function(value) {
          return new SafeStyleImpl(value);
        };
        DomSanitizerImpl.prototype.bypassSecurityTrustScript = function(value) {
          return new SafeScriptImpl(value);
        };
        DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function(value) {
          return new SafeUrlImpl(value);
        };
        DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function(value) {
          return new SafeResourceUrlImpl(value);
        };
        DomSanitizerImpl.decorators = [{type: Injectable}];
        DomSanitizerImpl.ctorParameters = [];
        return DomSanitizerImpl;
      }(DomSanitizer));
      $__export("DomSanitizerImpl", DomSanitizerImpl);
      SafeValueImpl = (function() {
        function SafeValueImpl(changingThisBreaksApplicationSecurity) {
          this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
        }
        SafeValueImpl.prototype.toString = function() {
          return ("SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity) + " (see http://g.co/ng/security#xss)";
        };
        return SafeValueImpl;
      }());
      SafeHtmlImpl = (function(_super) {
        __extends(SafeHtmlImpl, _super);
        function SafeHtmlImpl() {
          _super.apply(this, arguments);
        }
        SafeHtmlImpl.prototype.getTypeName = function() {
          return 'HTML';
        };
        return SafeHtmlImpl;
      }(SafeValueImpl));
      SafeStyleImpl = (function(_super) {
        __extends(SafeStyleImpl, _super);
        function SafeStyleImpl() {
          _super.apply(this, arguments);
        }
        SafeStyleImpl.prototype.getTypeName = function() {
          return 'Style';
        };
        return SafeStyleImpl;
      }(SafeValueImpl));
      SafeScriptImpl = (function(_super) {
        __extends(SafeScriptImpl, _super);
        function SafeScriptImpl() {
          _super.apply(this, arguments);
        }
        SafeScriptImpl.prototype.getTypeName = function() {
          return 'Script';
        };
        return SafeScriptImpl;
      }(SafeValueImpl));
      SafeUrlImpl = (function(_super) {
        __extends(SafeUrlImpl, _super);
        function SafeUrlImpl() {
          _super.apply(this, arguments);
        }
        SafeUrlImpl.prototype.getTypeName = function() {
          return 'URL';
        };
        return SafeUrlImpl;
      }(SafeValueImpl));
      SafeResourceUrlImpl = (function(_super) {
        __extends(SafeResourceUrlImpl, _super);
        function SafeResourceUrlImpl() {
          _super.apply(this, arguments);
        }
        SafeResourceUrlImpl.prototype.getTypeName = function() {
          return 'ResourceURL';
        };
        return SafeResourceUrlImpl;
      }(SafeValueImpl));
    }
  };
});

$__System.register("f5", ["a5", "c", "f6", "ee", "f7", "f8", "f9", "f0", "fa", "e9", "fb", "fc", "fd", "fe", "ff", "100", "101", "f4"], function($__export) {
  "use strict";
  var CommonModule,
      PlatformLocation,
      ApplicationModule,
      ErrorHandler,
      NgModule,
      Optional,
      PLATFORM_INITIALIZER,
      RootRenderer,
      Sanitizer,
      SkipSelf,
      Testability,
      createPlatformFactory,
      platformCore,
      AnimationDriver,
      WebAnimationsDriver,
      BrowserDomAdapter,
      BrowserPlatformLocation,
      BrowserGetTestability,
      Title,
      ELEMENT_PROBE_PROVIDERS,
      getDOM,
      DomRootRenderer,
      DomRootRenderer_,
      DOCUMENT,
      DomEventsPlugin,
      EVENT_MANAGER_PLUGINS,
      EventManager,
      HAMMER_GESTURE_CONFIG,
      HammerGestureConfig,
      HammerGesturesPlugin,
      KeyEventsPlugin,
      DomSharedStylesHost,
      SharedStylesHost,
      DomSanitizer,
      DomSanitizerImpl,
      INTERNAL_BROWSER_PLATFORM_PROVIDERS,
      BROWSER_SANITIZATION_PROVIDERS,
      platformBrowser,
      BrowserModule;
  function initDomAdapter() {
    BrowserDomAdapter.makeCurrent();
    BrowserGetTestability.init();
  }
  function errorHandler() {
    return new ErrorHandler();
  }
  function _document() {
    return getDOM().defaultDoc();
  }
  function _resolveDefaultAnimationDriver() {
    if (getDOM().supportsWebAnimation()) {
      return new WebAnimationsDriver();
    }
    return AnimationDriver.NOOP;
  }
  $__export("initDomAdapter", initDomAdapter);
  $__export("errorHandler", errorHandler);
  $__export("_document", _document);
  $__export("_resolveDefaultAnimationDriver", _resolveDefaultAnimationDriver);
  return {
    setters: [function($__m) {
      CommonModule = $__m.CommonModule;
      PlatformLocation = $__m.PlatformLocation;
    }, function($__m) {
      ApplicationModule = $__m.ApplicationModule;
      ErrorHandler = $__m.ErrorHandler;
      NgModule = $__m.NgModule;
      Optional = $__m.Optional;
      PLATFORM_INITIALIZER = $__m.PLATFORM_INITIALIZER;
      RootRenderer = $__m.RootRenderer;
      Sanitizer = $__m.Sanitizer;
      SkipSelf = $__m.SkipSelf;
      Testability = $__m.Testability;
      createPlatformFactory = $__m.createPlatformFactory;
      platformCore = $__m.platformCore;
    }, function($__m) {
      AnimationDriver = $__m.AnimationDriver;
    }, function($__m) {
      WebAnimationsDriver = $__m.WebAnimationsDriver;
    }, function($__m) {
      BrowserDomAdapter = $__m.BrowserDomAdapter;
    }, function($__m) {
      BrowserPlatformLocation = $__m.BrowserPlatformLocation;
    }, function($__m) {
      BrowserGetTestability = $__m.BrowserGetTestability;
    }, function($__m) {
      Title = $__m.Title;
    }, function($__m) {
      ELEMENT_PROBE_PROVIDERS = $__m.ELEMENT_PROBE_PROVIDERS;
    }, function($__m) {
      getDOM = $__m.getDOM;
    }, function($__m) {
      DomRootRenderer = $__m.DomRootRenderer;
      DomRootRenderer_ = $__m.DomRootRenderer_;
    }, function($__m) {
      DOCUMENT = $__m.DOCUMENT;
    }, function($__m) {
      DomEventsPlugin = $__m.DomEventsPlugin;
    }, function($__m) {
      EVENT_MANAGER_PLUGINS = $__m.EVENT_MANAGER_PLUGINS;
      EventManager = $__m.EventManager;
    }, function($__m) {
      HAMMER_GESTURE_CONFIG = $__m.HAMMER_GESTURE_CONFIG;
      HammerGestureConfig = $__m.HammerGestureConfig;
      HammerGesturesPlugin = $__m.HammerGesturesPlugin;
    }, function($__m) {
      KeyEventsPlugin = $__m.KeyEventsPlugin;
    }, function($__m) {
      DomSharedStylesHost = $__m.DomSharedStylesHost;
      SharedStylesHost = $__m.SharedStylesHost;
    }, function($__m) {
      DomSanitizer = $__m.DomSanitizer;
      DomSanitizerImpl = $__m.DomSanitizerImpl;
    }],
    execute: function() {
      INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{
        provide: PLATFORM_INITIALIZER,
        useValue: initDomAdapter,
        multi: true
      }, {
        provide: PlatformLocation,
        useClass: BrowserPlatformLocation
      }];
      $__export("INTERNAL_BROWSER_PLATFORM_PROVIDERS", INTERNAL_BROWSER_PLATFORM_PROVIDERS);
      BROWSER_SANITIZATION_PROVIDERS = [{
        provide: Sanitizer,
        useExisting: DomSanitizer
      }, {
        provide: DomSanitizer,
        useClass: DomSanitizerImpl
      }];
      $__export("BROWSER_SANITIZATION_PROVIDERS", BROWSER_SANITIZATION_PROVIDERS);
      platformBrowser = createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
      $__export("platformBrowser", platformBrowser);
      BrowserModule = (function() {
        function BrowserModule(parentModule) {
          if (parentModule) {
            throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
          }
        }
        BrowserModule.decorators = [{
          type: NgModule,
          args: [{
            providers: [BROWSER_SANITIZATION_PROVIDERS, {
              provide: ErrorHandler,
              useFactory: errorHandler,
              deps: []
            }, {
              provide: DOCUMENT,
              useFactory: _document,
              deps: []
            }, {
              provide: EVENT_MANAGER_PLUGINS,
              useClass: DomEventsPlugin,
              multi: true
            }, {
              provide: EVENT_MANAGER_PLUGINS,
              useClass: KeyEventsPlugin,
              multi: true
            }, {
              provide: EVENT_MANAGER_PLUGINS,
              useClass: HammerGesturesPlugin,
              multi: true
            }, {
              provide: HAMMER_GESTURE_CONFIG,
              useClass: HammerGestureConfig
            }, {
              provide: DomRootRenderer,
              useClass: DomRootRenderer_
            }, {
              provide: RootRenderer,
              useExisting: DomRootRenderer
            }, {
              provide: SharedStylesHost,
              useExisting: DomSharedStylesHost
            }, {
              provide: AnimationDriver,
              useFactory: _resolveDefaultAnimationDriver
            }, DomSharedStylesHost, Testability, EventManager, ELEMENT_PROBE_PROVIDERS, Title],
            exports: [CommonModule, ApplicationModule]
          }]
        }];
        BrowserModule.ctorParameters = [{
          type: BrowserModule,
          decorators: [{type: Optional}, {type: SkipSelf}]
        }];
        return BrowserModule;
      }());
      $__export("BrowserModule", BrowserModule);
    }
  };
});

$__System.register("102", ["e9", "ea"], function($__export) {
  "use strict";
  var __extends,
      DomAdapter,
      isPresent,
      GenericBrowserDomAdapter;
  return {
    setters: [function($__m) {
      DomAdapter = $__m.DomAdapter;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      GenericBrowserDomAdapter = (function(_super) {
        __extends(GenericBrowserDomAdapter, _super);
        function GenericBrowserDomAdapter() {
          var _this = this;
          _super.call(this);
          this._animationPrefix = null;
          this._transitionEnd = null;
          try {
            var element_1 = this.createElement('div', this.defaultDoc());
            if (isPresent(this.getStyle(element_1, 'animationName'))) {
              this._animationPrefix = '';
            } else {
              var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
              for (var i = 0; i < domPrefixes.length; i++) {
                if (isPresent(this.getStyle(element_1, domPrefixes[i] + 'AnimationName'))) {
                  this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
                  break;
                }
              }
            }
            var transEndEventNames_1 = {
              WebkitTransition: 'webkitTransitionEnd',
              MozTransition: 'transitionend',
              OTransition: 'oTransitionEnd otransitionend',
              transition: 'transitionend'
            };
            Object.keys(transEndEventNames_1).forEach(function(key) {
              if (isPresent(_this.getStyle(element_1, key))) {
                _this._transitionEnd = transEndEventNames_1[key];
              }
            });
          } catch (e) {
            this._animationPrefix = null;
            this._transitionEnd = null;
          }
        }
        GenericBrowserDomAdapter.prototype.getDistributedNodes = function(el) {
          return el.getDistributedNodes();
        };
        GenericBrowserDomAdapter.prototype.resolveAndSetHref = function(el, baseUrl, href) {
          el.href = href == null ? baseUrl : baseUrl + '/../' + href;
        };
        GenericBrowserDomAdapter.prototype.supportsDOMEvents = function() {
          return true;
        };
        GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function() {
          return typeof this.defaultDoc().body.createShadowRoot === 'function';
        };
        GenericBrowserDomAdapter.prototype.getAnimationPrefix = function() {
          return this._animationPrefix ? this._animationPrefix : '';
        };
        GenericBrowserDomAdapter.prototype.getTransitionEnd = function() {
          return this._transitionEnd ? this._transitionEnd : '';
        };
        GenericBrowserDomAdapter.prototype.supportsAnimation = function() {
          return isPresent(this._animationPrefix) && isPresent(this._transitionEnd);
        };
        return GenericBrowserDomAdapter;
      }(DomAdapter));
      $__export("GenericBrowserDomAdapter", GenericBrowserDomAdapter);
    }
  };
});

$__System.register("f7", ["e9", "ea", "102"], function($__export) {
  "use strict";
  var __extends,
      setRootDomAdapter,
      global,
      isBlank,
      isPresent,
      setValueOnPath,
      GenericBrowserDomAdapter,
      _attrToPropMap,
      DOM_KEY_LOCATION_NUMPAD,
      _keyMap,
      _chromeNumKeyPadMap,
      BrowserDomAdapter,
      baseElement,
      urlParsingNode;
  function getBaseElementHref() {
    if (!baseElement) {
      baseElement = document.querySelector('base');
      if (!baseElement) {
        return null;
      }
    }
    return baseElement.getAttribute('href');
  }
  function relativePath(url) {
    if (!urlParsingNode) {
      urlParsingNode = document.createElement('a');
    }
    urlParsingNode.setAttribute('href', url);
    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname : '/' + urlParsingNode.pathname;
  }
  function parseCookieValue(cookieStr, name) {
    name = encodeURIComponent(name);
    for (var _i = 0,
        _a = cookieStr.split(';'); _i < _a.length; _i++) {
      var cookie = _a[_i];
      var eqIndex = cookie.indexOf('=');
      var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)],
          cookieName = _b[0],
          cookieValue = _b[1];
      if (cookieName.trim() === name) {
        return decodeURIComponent(cookieValue);
      }
    }
    return null;
  }
  $__export("parseCookieValue", parseCookieValue);
  return {
    setters: [function($__m) {
      setRootDomAdapter = $__m.setRootDomAdapter;
    }, function($__m) {
      global = $__m.global;
      isBlank = $__m.isBlank;
      isPresent = $__m.isPresent;
      setValueOnPath = $__m.setValueOnPath;
    }, function($__m) {
      GenericBrowserDomAdapter = $__m.GenericBrowserDomAdapter;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      _attrToPropMap = {
        'class': 'className',
        'innerHtml': 'innerHTML',
        'readonly': 'readOnly',
        'tabindex': 'tabIndex'
      };
      DOM_KEY_LOCATION_NUMPAD = 3;
      _keyMap = {
        '\b': 'Backspace',
        '\t': 'Tab',
        '\x7F': 'Delete',
        '\x1B': 'Escape',
        'Del': 'Delete',
        'Esc': 'Escape',
        'Left': 'ArrowLeft',
        'Right': 'ArrowRight',
        'Up': 'ArrowUp',
        'Down': 'ArrowDown',
        'Menu': 'ContextMenu',
        'Scroll': 'ScrollLock',
        'Win': 'OS'
      };
      _chromeNumKeyPadMap = {
        'A': '1',
        'B': '2',
        'C': '3',
        'D': '4',
        'E': '5',
        'F': '6',
        'G': '7',
        'H': '8',
        'I': '9',
        'J': '*',
        'K': '+',
        'M': '-',
        'N': '.',
        'O': '/',
        '\x60': '0',
        '\x90': 'NumLock'
      };
      BrowserDomAdapter = (function(_super) {
        __extends(BrowserDomAdapter, _super);
        function BrowserDomAdapter() {
          _super.apply(this, arguments);
        }
        BrowserDomAdapter.prototype.parse = function(templateHtml) {
          throw new Error('parse not implemented');
        };
        BrowserDomAdapter.makeCurrent = function() {
          setRootDomAdapter(new BrowserDomAdapter());
        };
        BrowserDomAdapter.prototype.hasProperty = function(element, name) {
          return name in element;
        };
        BrowserDomAdapter.prototype.setProperty = function(el, name, value) {
          el[name] = value;
        };
        BrowserDomAdapter.prototype.getProperty = function(el, name) {
          return el[name];
        };
        BrowserDomAdapter.prototype.invoke = function(el, methodName, args) {
          (_a = el)[methodName].apply(_a, args);
          var _a;
        };
        BrowserDomAdapter.prototype.logError = function(error) {
          (window.console.error || window.console.log)(error);
        };
        BrowserDomAdapter.prototype.log = function(error) {
          window.console.log(error);
        };
        BrowserDomAdapter.prototype.logGroup = function(error) {
          window.console.group && window.console.group(error);
          this.logError(error);
        };
        BrowserDomAdapter.prototype.logGroupEnd = function() {
          window.console.groupEnd && window.console.groupEnd();
        };
        Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
          get: function() {
            return _attrToPropMap;
          },
          enumerable: true,
          configurable: true
        });
        BrowserDomAdapter.prototype.query = function(selector) {
          return document.querySelector(selector);
        };
        BrowserDomAdapter.prototype.querySelector = function(el, selector) {
          return el.querySelector(selector);
        };
        BrowserDomAdapter.prototype.querySelectorAll = function(el, selector) {
          return el.querySelectorAll(selector);
        };
        BrowserDomAdapter.prototype.on = function(el, evt, listener) {
          el.addEventListener(evt, listener, false);
        };
        BrowserDomAdapter.prototype.onAndCancel = function(el, evt, listener) {
          el.addEventListener(evt, listener, false);
          return function() {
            el.removeEventListener(evt, listener, false);
          };
        };
        BrowserDomAdapter.prototype.dispatchEvent = function(el, evt) {
          el.dispatchEvent(evt);
        };
        BrowserDomAdapter.prototype.createMouseEvent = function(eventType) {
          var evt = document.createEvent('MouseEvent');
          evt.initEvent(eventType, true, true);
          return evt;
        };
        BrowserDomAdapter.prototype.createEvent = function(eventType) {
          var evt = document.createEvent('Event');
          evt.initEvent(eventType, true, true);
          return evt;
        };
        BrowserDomAdapter.prototype.preventDefault = function(evt) {
          evt.preventDefault();
          evt.returnValue = false;
        };
        BrowserDomAdapter.prototype.isPrevented = function(evt) {
          return evt.defaultPrevented || isPresent(evt.returnValue) && !evt.returnValue;
        };
        BrowserDomAdapter.prototype.getInnerHTML = function(el) {
          return el.innerHTML;
        };
        BrowserDomAdapter.prototype.getTemplateContent = function(el) {
          return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
        };
        BrowserDomAdapter.prototype.getOuterHTML = function(el) {
          return el.outerHTML;
        };
        BrowserDomAdapter.prototype.nodeName = function(node) {
          return node.nodeName;
        };
        BrowserDomAdapter.prototype.nodeValue = function(node) {
          return node.nodeValue;
        };
        BrowserDomAdapter.prototype.type = function(node) {
          return node.type;
        };
        BrowserDomAdapter.prototype.content = function(node) {
          if (this.hasProperty(node, 'content')) {
            return node.content;
          } else {
            return node;
          }
        };
        BrowserDomAdapter.prototype.firstChild = function(el) {
          return el.firstChild;
        };
        BrowserDomAdapter.prototype.nextSibling = function(el) {
          return el.nextSibling;
        };
        BrowserDomAdapter.prototype.parentElement = function(el) {
          return el.parentNode;
        };
        BrowserDomAdapter.prototype.childNodes = function(el) {
          return el.childNodes;
        };
        BrowserDomAdapter.prototype.childNodesAsList = function(el) {
          var childNodes = el.childNodes;
          var res = new Array(childNodes.length);
          for (var i = 0; i < childNodes.length; i++) {
            res[i] = childNodes[i];
          }
          return res;
        };
        BrowserDomAdapter.prototype.clearNodes = function(el) {
          while (el.firstChild) {
            el.removeChild(el.firstChild);
          }
        };
        BrowserDomAdapter.prototype.appendChild = function(el, node) {
          el.appendChild(node);
        };
        BrowserDomAdapter.prototype.removeChild = function(el, node) {
          el.removeChild(node);
        };
        BrowserDomAdapter.prototype.replaceChild = function(el, newChild, oldChild) {
          el.replaceChild(newChild, oldChild);
        };
        BrowserDomAdapter.prototype.remove = function(node) {
          if (node.parentNode) {
            node.parentNode.removeChild(node);
          }
          return node;
        };
        BrowserDomAdapter.prototype.insertBefore = function(el, node) {
          el.parentNode.insertBefore(node, el);
        };
        BrowserDomAdapter.prototype.insertAllBefore = function(el, nodes) {
          nodes.forEach(function(n) {
            return el.parentNode.insertBefore(n, el);
          });
        };
        BrowserDomAdapter.prototype.insertAfter = function(el, node) {
          el.parentNode.insertBefore(node, el.nextSibling);
        };
        BrowserDomAdapter.prototype.setInnerHTML = function(el, value) {
          el.innerHTML = value;
        };
        BrowserDomAdapter.prototype.getText = function(el) {
          return el.textContent;
        };
        BrowserDomAdapter.prototype.setText = function(el, value) {
          el.textContent = value;
        };
        BrowserDomAdapter.prototype.getValue = function(el) {
          return el.value;
        };
        BrowserDomAdapter.prototype.setValue = function(el, value) {
          el.value = value;
        };
        BrowserDomAdapter.prototype.getChecked = function(el) {
          return el.checked;
        };
        BrowserDomAdapter.prototype.setChecked = function(el, value) {
          el.checked = value;
        };
        BrowserDomAdapter.prototype.createComment = function(text) {
          return document.createComment(text);
        };
        BrowserDomAdapter.prototype.createTemplate = function(html) {
          var t = document.createElement('template');
          t.innerHTML = html;
          return t;
        };
        BrowserDomAdapter.prototype.createElement = function(tagName, doc) {
          if (doc === void 0) {
            doc = document;
          }
          return doc.createElement(tagName);
        };
        BrowserDomAdapter.prototype.createElementNS = function(ns, tagName, doc) {
          if (doc === void 0) {
            doc = document;
          }
          return doc.createElementNS(ns, tagName);
        };
        BrowserDomAdapter.prototype.createTextNode = function(text, doc) {
          if (doc === void 0) {
            doc = document;
          }
          return doc.createTextNode(text);
        };
        BrowserDomAdapter.prototype.createScriptTag = function(attrName, attrValue, doc) {
          if (doc === void 0) {
            doc = document;
          }
          var el = doc.createElement('SCRIPT');
          el.setAttribute(attrName, attrValue);
          return el;
        };
        BrowserDomAdapter.prototype.createStyleElement = function(css, doc) {
          if (doc === void 0) {
            doc = document;
          }
          var style = doc.createElement('style');
          this.appendChild(style, this.createTextNode(css));
          return style;
        };
        BrowserDomAdapter.prototype.createShadowRoot = function(el) {
          return el.createShadowRoot();
        };
        BrowserDomAdapter.prototype.getShadowRoot = function(el) {
          return el.shadowRoot;
        };
        BrowserDomAdapter.prototype.getHost = function(el) {
          return el.host;
        };
        BrowserDomAdapter.prototype.clone = function(node) {
          return node.cloneNode(true);
        };
        BrowserDomAdapter.prototype.getElementsByClassName = function(element, name) {
          return element.getElementsByClassName(name);
        };
        BrowserDomAdapter.prototype.getElementsByTagName = function(element, name) {
          return element.getElementsByTagName(name);
        };
        BrowserDomAdapter.prototype.classList = function(element) {
          return Array.prototype.slice.call(element.classList, 0);
        };
        BrowserDomAdapter.prototype.addClass = function(element, className) {
          element.classList.add(className);
        };
        BrowserDomAdapter.prototype.removeClass = function(element, className) {
          element.classList.remove(className);
        };
        BrowserDomAdapter.prototype.hasClass = function(element, className) {
          return element.classList.contains(className);
        };
        BrowserDomAdapter.prototype.setStyle = function(element, styleName, styleValue) {
          element.style[styleName] = styleValue;
        };
        BrowserDomAdapter.prototype.removeStyle = function(element, stylename) {
          element.style[stylename] = '';
        };
        BrowserDomAdapter.prototype.getStyle = function(element, stylename) {
          return element.style[stylename];
        };
        BrowserDomAdapter.prototype.hasStyle = function(element, styleName, styleValue) {
          if (styleValue === void 0) {
            styleValue = null;
          }
          var value = this.getStyle(element, styleName) || '';
          return styleValue ? value == styleValue : value.length > 0;
        };
        BrowserDomAdapter.prototype.tagName = function(element) {
          return element.tagName;
        };
        BrowserDomAdapter.prototype.attributeMap = function(element) {
          var res = new Map();
          var elAttrs = element.attributes;
          for (var i = 0; i < elAttrs.length; i++) {
            var attrib = elAttrs[i];
            res.set(attrib.name, attrib.value);
          }
          return res;
        };
        BrowserDomAdapter.prototype.hasAttribute = function(element, attribute) {
          return element.hasAttribute(attribute);
        };
        BrowserDomAdapter.prototype.hasAttributeNS = function(element, ns, attribute) {
          return element.hasAttributeNS(ns, attribute);
        };
        BrowserDomAdapter.prototype.getAttribute = function(element, attribute) {
          return element.getAttribute(attribute);
        };
        BrowserDomAdapter.prototype.getAttributeNS = function(element, ns, name) {
          return element.getAttributeNS(ns, name);
        };
        BrowserDomAdapter.prototype.setAttribute = function(element, name, value) {
          element.setAttribute(name, value);
        };
        BrowserDomAdapter.prototype.setAttributeNS = function(element, ns, name, value) {
          element.setAttributeNS(ns, name, value);
        };
        BrowserDomAdapter.prototype.removeAttribute = function(element, attribute) {
          element.removeAttribute(attribute);
        };
        BrowserDomAdapter.prototype.removeAttributeNS = function(element, ns, name) {
          element.removeAttributeNS(ns, name);
        };
        BrowserDomAdapter.prototype.templateAwareRoot = function(el) {
          return this.isTemplateElement(el) ? this.content(el) : el;
        };
        BrowserDomAdapter.prototype.createHtmlDocument = function() {
          return document.implementation.createHTMLDocument('fakeTitle');
        };
        BrowserDomAdapter.prototype.defaultDoc = function() {
          return document;
        };
        BrowserDomAdapter.prototype.getBoundingClientRect = function(el) {
          try {
            return el.getBoundingClientRect();
          } catch (e) {
            return {
              top: 0,
              bottom: 0,
              left: 0,
              right: 0,
              width: 0,
              height: 0
            };
          }
        };
        BrowserDomAdapter.prototype.getTitle = function() {
          return document.title;
        };
        BrowserDomAdapter.prototype.setTitle = function(newTitle) {
          document.title = newTitle || '';
        };
        BrowserDomAdapter.prototype.elementMatches = function(n, selector) {
          if (n instanceof HTMLElement) {
            return n.matches && n.matches(selector) || n.msMatchesSelector && n.msMatchesSelector(selector) || n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
          }
          return false;
        };
        BrowserDomAdapter.prototype.isTemplateElement = function(el) {
          return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
        };
        BrowserDomAdapter.prototype.isTextNode = function(node) {
          return node.nodeType === Node.TEXT_NODE;
        };
        BrowserDomAdapter.prototype.isCommentNode = function(node) {
          return node.nodeType === Node.COMMENT_NODE;
        };
        BrowserDomAdapter.prototype.isElementNode = function(node) {
          return node.nodeType === Node.ELEMENT_NODE;
        };
        BrowserDomAdapter.prototype.hasShadowRoot = function(node) {
          return isPresent(node.shadowRoot) && node instanceof HTMLElement;
        };
        BrowserDomAdapter.prototype.isShadowRoot = function(node) {
          return node instanceof DocumentFragment;
        };
        BrowserDomAdapter.prototype.importIntoDoc = function(node) {
          return document.importNode(this.templateAwareRoot(node), true);
        };
        BrowserDomAdapter.prototype.adoptNode = function(node) {
          return document.adoptNode(node);
        };
        BrowserDomAdapter.prototype.getHref = function(el) {
          return el.href;
        };
        BrowserDomAdapter.prototype.getEventKey = function(event) {
          var key = event.key;
          if (isBlank(key)) {
            key = event.keyIdentifier;
            if (isBlank(key)) {
              return 'Unidentified';
            }
            if (key.startsWith('U+')) {
              key = String.fromCharCode(parseInt(key.substring(2), 16));
              if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
                key = _chromeNumKeyPadMap[key];
              }
            }
          }
          return _keyMap[key] || key;
        };
        BrowserDomAdapter.prototype.getGlobalEventTarget = function(target) {
          if (target === 'window') {
            return window;
          }
          if (target === 'document') {
            return document;
          }
          if (target === 'body') {
            return document.body;
          }
        };
        BrowserDomAdapter.prototype.getHistory = function() {
          return window.history;
        };
        BrowserDomAdapter.prototype.getLocation = function() {
          return window.location;
        };
        BrowserDomAdapter.prototype.getBaseHref = function() {
          var href = getBaseElementHref();
          return isBlank(href) ? null : relativePath(href);
        };
        BrowserDomAdapter.prototype.resetBaseElement = function() {
          baseElement = null;
        };
        BrowserDomAdapter.prototype.getUserAgent = function() {
          return window.navigator.userAgent;
        };
        BrowserDomAdapter.prototype.setData = function(element, name, value) {
          this.setAttribute(element, 'data-' + name, value);
        };
        BrowserDomAdapter.prototype.getData = function(element, name) {
          return this.getAttribute(element, 'data-' + name);
        };
        BrowserDomAdapter.prototype.getComputedStyle = function(element) {
          return getComputedStyle(element);
        };
        BrowserDomAdapter.prototype.setGlobalVar = function(path, value) {
          setValueOnPath(global, path, value);
        };
        BrowserDomAdapter.prototype.supportsWebAnimation = function() {
          return typeof Element.prototype['animate'] === 'function';
        };
        BrowserDomAdapter.prototype.performanceNow = function() {
          return window.performance && window.performance.now ? window.performance.now() : new Date().getTime();
        };
        BrowserDomAdapter.prototype.supportsCookies = function() {
          return true;
        };
        BrowserDomAdapter.prototype.getCookie = function(name) {
          return parseCookieValue(document.cookie, name);
        };
        BrowserDomAdapter.prototype.setCookie = function(name, value) {
          document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
        };
        return BrowserDomAdapter;
      }(GenericBrowserDomAdapter));
      $__export("BrowserDomAdapter", BrowserDomAdapter);
      baseElement = null;
    }
  };
});

$__System.register("103", [], function($__export) {
  "use strict";
  function supportsState() {
    return !!window.history.pushState;
  }
  $__export("supportsState", supportsState);
  return {
    setters: [],
    execute: function() {}
  };
});

$__System.register("f8", ["a5", "c", "e9", "103"], function($__export) {
  "use strict";
  var __extends,
      PlatformLocation,
      Injectable,
      getDOM,
      supportsState,
      BrowserPlatformLocation;
  return {
    setters: [function($__m) {
      PlatformLocation = $__m.PlatformLocation;
    }, function($__m) {
      Injectable = $__m.Injectable;
    }, function($__m) {
      getDOM = $__m.getDOM;
    }, function($__m) {
      supportsState = $__m.supportsState;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      BrowserPlatformLocation = (function(_super) {
        __extends(BrowserPlatformLocation, _super);
        function BrowserPlatformLocation() {
          _super.call(this);
          this._init();
        }
        BrowserPlatformLocation.prototype._init = function() {
          this._location = getDOM().getLocation();
          this._history = getDOM().getHistory();
        };
        Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
          get: function() {
            return this._location;
          },
          enumerable: true,
          configurable: true
        });
        BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function() {
          return getDOM().getBaseHref();
        };
        BrowserPlatformLocation.prototype.onPopState = function(fn) {
          getDOM().getGlobalEventTarget('window').addEventListener('popstate', fn, false);
        };
        BrowserPlatformLocation.prototype.onHashChange = function(fn) {
          getDOM().getGlobalEventTarget('window').addEventListener('hashchange', fn, false);
        };
        Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
          get: function() {
            return this._location.pathname;
          },
          set: function(newPath) {
            this._location.pathname = newPath;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
          get: function() {
            return this._location.search;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
          get: function() {
            return this._location.hash;
          },
          enumerable: true,
          configurable: true
        });
        BrowserPlatformLocation.prototype.pushState = function(state, title, url) {
          if (supportsState()) {
            this._history.pushState(state, title, url);
          } else {
            this._location.hash = url;
          }
        };
        BrowserPlatformLocation.prototype.replaceState = function(state, title, url) {
          if (supportsState()) {
            this._history.replaceState(state, title, url);
          } else {
            this._location.hash = url;
          }
        };
        BrowserPlatformLocation.prototype.forward = function() {
          this._history.forward();
        };
        BrowserPlatformLocation.prototype.back = function() {
          this._history.back();
        };
        BrowserPlatformLocation.decorators = [{type: Injectable}];
        BrowserPlatformLocation.ctorParameters = [];
        return BrowserPlatformLocation;
      }(PlatformLocation));
      $__export("BrowserPlatformLocation", BrowserPlatformLocation);
    }
  };
});

$__System.register("f9", ["c", "e9", "ea"], function($__export) {
  "use strict";
  var setTestabilityGetter,
      getDOM,
      global,
      isPresent,
      BrowserGetTestability;
  return {
    setters: [function($__m) {
      setTestabilityGetter = $__m.setTestabilityGetter;
    }, function($__m) {
      getDOM = $__m.getDOM;
    }, function($__m) {
      global = $__m.global;
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      BrowserGetTestability = (function() {
        function BrowserGetTestability() {}
        BrowserGetTestability.init = function() {
          setTestabilityGetter(new BrowserGetTestability());
        };
        BrowserGetTestability.prototype.addToWindow = function(registry) {
          global.getAngularTestability = function(elem, findInAncestors) {
            if (findInAncestors === void 0) {
              findInAncestors = true;
            }
            var testability = registry.findTestabilityInTree(elem, findInAncestors);
            if (testability == null) {
              throw new Error('Could not find testability for element.');
            }
            return testability;
          };
          global.getAllAngularTestabilities = function() {
            return registry.getAllTestabilities();
          };
          global.getAllAngularRootElements = function() {
            return registry.getAllRootElements();
          };
          var whenAllStable = function(callback) {
            var testabilities = global.getAllAngularTestabilities();
            var count = testabilities.length;
            var didWork = false;
            var decrement = function(didWork_) {
              didWork = didWork || didWork_;
              count--;
              if (count == 0) {
                callback(didWork);
              }
            };
            testabilities.forEach(function(testability) {
              testability.whenStable(decrement);
            });
          };
          if (!global['frameworkStabilizers']) {
            global['frameworkStabilizers'] = [];
          }
          global['frameworkStabilizers'].push(whenAllStable);
        };
        BrowserGetTestability.prototype.findTestabilityInTree = function(registry, elem, findInAncestors) {
          if (elem == null) {
            return null;
          }
          var t = registry.getTestability(elem);
          if (isPresent(t)) {
            return t;
          } else if (!findInAncestors) {
            return null;
          }
          if (getDOM().isShadowRoot(elem)) {
            return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
          }
          return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
        };
        return BrowserGetTestability;
      }());
      $__export("BrowserGetTestability", BrowserGetTestability);
    }
  };
});

$__System.register("fa", ["c", "104", "105", "e9", "fb"], function($__export) {
  "use strict";
  var ApplicationRef,
      NgZone,
      Optional,
      RootRenderer,
      getDebugNode,
      isDevMode,
      StringMapWrapper,
      DebugDomRootRenderer,
      getDOM,
      DomRootRenderer,
      CORE_TOKENS,
      INSPECT_GLOBAL_NAME,
      CORE_TOKENS_GLOBAL_NAME,
      NgProbeToken,
      ELEMENT_PROBE_PROVIDERS,
      ELEMENT_PROBE_PROVIDERS_PROD_MODE;
  function inspectNativeElement(element) {
    return getDebugNode(element);
  }
  function _createConditionalRootRenderer(rootRenderer, extraTokens) {
    if (isDevMode()) {
      return _createRootRenderer(rootRenderer, extraTokens);
    }
    return rootRenderer;
  }
  function _createRootRenderer(rootRenderer, extraTokens) {
    getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
    getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, StringMapWrapper.merge(CORE_TOKENS, _ngProbeTokensToMap(extraTokens || [])));
    return new DebugDomRootRenderer(rootRenderer);
  }
  function _ngProbeTokensToMap(tokens) {
    return tokens.reduce(function(prev, t) {
      return (prev[t.name] = t.token, prev);
    }, {});
  }
  $__export("inspectNativeElement", inspectNativeElement);
  $__export("_createConditionalRootRenderer", _createConditionalRootRenderer);
  return {
    setters: [function($__m) {
      ApplicationRef = $__m.ApplicationRef;
      NgZone = $__m.NgZone;
      Optional = $__m.Optional;
      RootRenderer = $__m.RootRenderer;
      getDebugNode = $__m.getDebugNode;
      isDevMode = $__m.isDevMode;
    }, function($__m) {
      StringMapWrapper = $__m.StringMapWrapper;
    }, function($__m) {
      DebugDomRootRenderer = $__m.DebugDomRootRenderer;
    }, function($__m) {
      getDOM = $__m.getDOM;
    }, function($__m) {
      DomRootRenderer = $__m.DomRootRenderer;
    }],
    execute: function() {
      CORE_TOKENS = {
        'ApplicationRef': ApplicationRef,
        'NgZone': NgZone
      };
      INSPECT_GLOBAL_NAME = 'ng.probe';
      CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
      NgProbeToken = (function() {
        function NgProbeToken(name, token) {
          this.name = name;
          this.token = token;
        }
        return NgProbeToken;
      }());
      $__export("NgProbeToken", NgProbeToken);
      ELEMENT_PROBE_PROVIDERS = [{
        provide: RootRenderer,
        useFactory: _createConditionalRootRenderer,
        deps: [DomRootRenderer, [NgProbeToken, new Optional()]]
      }];
      $__export("ELEMENT_PROBE_PROVIDERS", ELEMENT_PROBE_PROVIDERS);
      ELEMENT_PROBE_PROVIDERS_PROD_MODE = [{
        provide: RootRenderer,
        useFactory: _createRootRenderer,
        deps: [DomRootRenderer, [NgProbeToken, new Optional()]]
      }];
      $__export("ELEMENT_PROBE_PROVIDERS_PROD_MODE", ELEMENT_PROBE_PROVIDERS_PROD_MODE);
    }
  };
});

$__System.register("105", ["c"], function($__export) {
  "use strict";
  var r,
      RenderDebugInfo,
      ReflectionCapabilities,
      DebugDomRootRenderer,
      reflector,
      NoOpAnimationPlayer,
      AnimationPlayer,
      AnimationSequencePlayer,
      AnimationGroupPlayer,
      AnimationKeyframe,
      AnimationStyles,
      prepareFinalAnimationStyles,
      balanceAnimationKeyframes,
      clearStyles,
      collectAndResolveStyles;
  return {
    setters: [function($__m) {
      r = $__m.__core_private__;
    }],
    execute: function() {
      RenderDebugInfo = r.RenderDebugInfo;
      $__export("RenderDebugInfo", RenderDebugInfo);
      ReflectionCapabilities = r.ReflectionCapabilities;
      $__export("ReflectionCapabilities", ReflectionCapabilities);
      DebugDomRootRenderer = r.DebugDomRootRenderer;
      $__export("DebugDomRootRenderer", DebugDomRootRenderer);
      reflector = r.reflector;
      $__export("reflector", reflector);
      NoOpAnimationPlayer = r.NoOpAnimationPlayer;
      $__export("NoOpAnimationPlayer", NoOpAnimationPlayer);
      AnimationPlayer = r.AnimationPlayer;
      $__export("AnimationPlayer", AnimationPlayer);
      AnimationSequencePlayer = r.AnimationSequencePlayer;
      $__export("AnimationSequencePlayer", AnimationSequencePlayer);
      AnimationGroupPlayer = r.AnimationGroupPlayer;
      $__export("AnimationGroupPlayer", AnimationGroupPlayer);
      AnimationKeyframe = r.AnimationKeyframe;
      $__export("AnimationKeyframe", AnimationKeyframe);
      AnimationStyles = r.AnimationStyles;
      $__export("AnimationStyles", AnimationStyles);
      prepareFinalAnimationStyles = r.prepareFinalAnimationStyles;
      $__export("prepareFinalAnimationStyles", prepareFinalAnimationStyles);
      balanceAnimationKeyframes = r.balanceAnimationKeyframes;
      $__export("balanceAnimationKeyframes", balanceAnimationKeyframes);
      clearStyles = r.clearStyles;
      $__export("clearStyles", clearStyles);
      collectAndResolveStyles = r.collectAndResolveStyles;
      $__export("collectAndResolveStyles", collectAndResolveStyles);
    }
  };
});

$__System.register("f6", ["105"], function($__export) {
  "use strict";
  var NoOpAnimationPlayer,
      _NoOpAnimationDriver,
      AnimationDriver;
  return {
    setters: [function($__m) {
      NoOpAnimationPlayer = $__m.NoOpAnimationPlayer;
    }],
    execute: function() {
      _NoOpAnimationDriver = (function() {
        function _NoOpAnimationDriver() {}
        _NoOpAnimationDriver.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing) {
          return new NoOpAnimationPlayer();
        };
        return _NoOpAnimationDriver;
      }());
      AnimationDriver = (function() {
        function AnimationDriver() {}
        AnimationDriver.NOOP = new _NoOpAnimationDriver();
        return AnimationDriver;
      }());
      $__export("AnimationDriver", AnimationDriver);
    }
  };
});

$__System.register("ef", [], function($__export) {
  "use strict";
  var CAMEL_CASE_REGEXP,
      DASH_CASE_REGEXP;
  function camelCaseToDashCase(input) {
    return input.replace(CAMEL_CASE_REGEXP, function() {
      var m = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        m[_i - 0] = arguments[_i];
      }
      return '-' + m[1].toLowerCase();
    });
  }
  function dashCaseToCamelCase(input) {
    return input.replace(DASH_CASE_REGEXP, function() {
      var m = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        m[_i - 0] = arguments[_i];
      }
      return m[1].toUpperCase();
    });
  }
  $__export("camelCaseToDashCase", camelCaseToDashCase);
  $__export("dashCaseToCamelCase", dashCaseToCamelCase);
  return {
    setters: [],
    execute: function() {
      CAMEL_CASE_REGEXP = /([A-Z])/g;
      DASH_CASE_REGEXP = /-([a-z])/g;
    }
  };
});

$__System.register("fb", ["c", "ea", "f6", "e9", "fc", "fe", "101", "ef"], function($__export) {
  "use strict";
  var __extends,
      Inject,
      Injectable,
      ViewEncapsulation,
      isBlank,
      isPresent,
      stringify,
      AnimationDriver,
      getDOM,
      DOCUMENT,
      EventManager,
      DomSharedStylesHost,
      camelCaseToDashCase,
      NAMESPACE_URIS,
      TEMPLATE_COMMENT_TEXT,
      TEMPLATE_BINDINGS_EXP,
      DomRootRenderer,
      DomRootRenderer_,
      DomRenderer,
      COMPONENT_REGEX,
      COMPONENT_VARIABLE,
      HOST_ATTR,
      CONTENT_ATTR,
      NS_PREFIX_RE;
  function moveNodesAfterSibling(sibling, nodes) {
    var parent = getDOM().parentElement(sibling);
    if (nodes.length > 0 && isPresent(parent)) {
      var nextSibling = getDOM().nextSibling(sibling);
      if (isPresent(nextSibling)) {
        for (var i = 0; i < nodes.length; i++) {
          getDOM().insertBefore(nextSibling, nodes[i]);
        }
      } else {
        for (var i = 0; i < nodes.length; i++) {
          getDOM().appendChild(parent, nodes[i]);
        }
      }
    }
  }
  function appendNodes(parent, nodes) {
    for (var i = 0; i < nodes.length; i++) {
      getDOM().appendChild(parent, nodes[i]);
    }
  }
  function decoratePreventDefault(eventHandler) {
    return function(event) {
      var allowDefaultBehavior = eventHandler(event);
      if (allowDefaultBehavior === false) {
        getDOM().preventDefault(event);
      }
    };
  }
  function _shimContentAttribute(componentShortId) {
    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
  }
  function _shimHostAttribute(componentShortId) {
    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
  }
  function _flattenStyles(compId, styles, target) {
    for (var i = 0; i < styles.length; i++) {
      var style = styles[i];
      if (Array.isArray(style)) {
        _flattenStyles(compId, style, target);
      } else {
        style = style.replace(COMPONENT_REGEX, compId);
        target.push(style);
      }
    }
    return target;
  }
  function splitNamespace(name) {
    if (name[0] != ':') {
      return [null, name];
    }
    var match = name.match(NS_PREFIX_RE);
    return [match[1], match[2]];
  }
  return {
    setters: [function($__m) {
      Inject = $__m.Inject;
      Injectable = $__m.Injectable;
      ViewEncapsulation = $__m.ViewEncapsulation;
    }, function($__m) {
      isBlank = $__m.isBlank;
      isPresent = $__m.isPresent;
      stringify = $__m.stringify;
    }, function($__m) {
      AnimationDriver = $__m.AnimationDriver;
    }, function($__m) {
      getDOM = $__m.getDOM;
    }, function($__m) {
      DOCUMENT = $__m.DOCUMENT;
    }, function($__m) {
      EventManager = $__m.EventManager;
    }, function($__m) {
      DomSharedStylesHost = $__m.DomSharedStylesHost;
    }, function($__m) {
      camelCaseToDashCase = $__m.camelCaseToDashCase;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      NAMESPACE_URIS = {
        'xlink': 'http://www.w3.org/1999/xlink',
        'svg': 'http://www.w3.org/2000/svg',
        'xhtml': 'http://www.w3.org/1999/xhtml'
      };
      TEMPLATE_COMMENT_TEXT = 'template bindings={}';
      TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/;
      DomRootRenderer = (function() {
        function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver) {
          this.document = document;
          this.eventManager = eventManager;
          this.sharedStylesHost = sharedStylesHost;
          this.animationDriver = animationDriver;
          this.registeredComponents = new Map();
        }
        DomRootRenderer.prototype.renderComponent = function(componentProto) {
          var renderer = this.registeredComponents.get(componentProto.id);
          if (!renderer) {
            renderer = new DomRenderer(this, componentProto, this.animationDriver);
            this.registeredComponents.set(componentProto.id, renderer);
          }
          return renderer;
        };
        return DomRootRenderer;
      }());
      $__export("DomRootRenderer", DomRootRenderer);
      DomRootRenderer_ = (function(_super) {
        __extends(DomRootRenderer_, _super);
        function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver) {
          _super.call(this, _document, _eventManager, sharedStylesHost, animationDriver);
        }
        DomRootRenderer_.decorators = [{type: Injectable}];
        DomRootRenderer_.ctorParameters = [{
          type: undefined,
          decorators: [{
            type: Inject,
            args: [DOCUMENT]
          }]
        }, {type: EventManager}, {type: DomSharedStylesHost}, {type: AnimationDriver}];
        return DomRootRenderer_;
      }(DomRootRenderer));
      $__export("DomRootRenderer_", DomRootRenderer_);
      DomRenderer = (function() {
        function DomRenderer(_rootRenderer, componentProto, _animationDriver) {
          this._rootRenderer = _rootRenderer;
          this.componentProto = componentProto;
          this._animationDriver = _animationDriver;
          this._styles = _flattenStyles(componentProto.id, componentProto.styles, []);
          if (componentProto.encapsulation !== ViewEncapsulation.Native) {
            this._rootRenderer.sharedStylesHost.addStyles(this._styles);
          }
          if (this.componentProto.encapsulation === ViewEncapsulation.Emulated) {
            this._contentAttr = _shimContentAttribute(componentProto.id);
            this._hostAttr = _shimHostAttribute(componentProto.id);
          } else {
            this._contentAttr = null;
            this._hostAttr = null;
          }
        }
        DomRenderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {
          var el;
          if (typeof selectorOrNode === 'string') {
            el = getDOM().querySelector(this._rootRenderer.document, selectorOrNode);
            if (isBlank(el)) {
              throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
            }
          } else {
            el = selectorOrNode;
          }
          getDOM().clearNodes(el);
          return el;
        };
        DomRenderer.prototype.createElement = function(parent, name, debugInfo) {
          var nsAndName = splitNamespace(name);
          var el = isPresent(nsAndName[0]) ? getDOM().createElementNS(NAMESPACE_URIS[nsAndName[0]], nsAndName[1]) : getDOM().createElement(nsAndName[1]);
          if (isPresent(this._contentAttr)) {
            getDOM().setAttribute(el, this._contentAttr, '');
          }
          if (isPresent(parent)) {
            getDOM().appendChild(parent, el);
          }
          return el;
        };
        DomRenderer.prototype.createViewRoot = function(hostElement) {
          var nodesParent;
          if (this.componentProto.encapsulation === ViewEncapsulation.Native) {
            nodesParent = getDOM().createShadowRoot(hostElement);
            this._rootRenderer.sharedStylesHost.addHost(nodesParent);
            for (var i = 0; i < this._styles.length; i++) {
              getDOM().appendChild(nodesParent, getDOM().createStyleElement(this._styles[i]));
            }
          } else {
            if (isPresent(this._hostAttr)) {
              getDOM().setAttribute(hostElement, this._hostAttr, '');
            }
            nodesParent = hostElement;
          }
          return nodesParent;
        };
        DomRenderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {
          var comment = getDOM().createComment(TEMPLATE_COMMENT_TEXT);
          if (isPresent(parentElement)) {
            getDOM().appendChild(parentElement, comment);
          }
          return comment;
        };
        DomRenderer.prototype.createText = function(parentElement, value, debugInfo) {
          var node = getDOM().createTextNode(value);
          if (isPresent(parentElement)) {
            getDOM().appendChild(parentElement, node);
          }
          return node;
        };
        DomRenderer.prototype.projectNodes = function(parentElement, nodes) {
          if (isBlank(parentElement))
            return;
          appendNodes(parentElement, nodes);
        };
        DomRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
          moveNodesAfterSibling(node, viewRootNodes);
        };
        DomRenderer.prototype.detachView = function(viewRootNodes) {
          for (var i = 0; i < viewRootNodes.length; i++) {
            getDOM().remove(viewRootNodes[i]);
          }
        };
        DomRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
          if (this.componentProto.encapsulation === ViewEncapsulation.Native && isPresent(hostElement)) {
            this._rootRenderer.sharedStylesHost.removeHost(getDOM().getShadowRoot(hostElement));
          }
        };
        DomRenderer.prototype.listen = function(renderElement, name, callback) {
          return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
        };
        DomRenderer.prototype.listenGlobal = function(target, name, callback) {
          return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
        };
        DomRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
          getDOM().setProperty(renderElement, propertyName, propertyValue);
        };
        DomRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
          var attrNs;
          var nsAndName = splitNamespace(attributeName);
          if (isPresent(nsAndName[0])) {
            attributeName = nsAndName[0] + ':' + nsAndName[1];
            attrNs = NAMESPACE_URIS[nsAndName[0]];
          }
          if (isPresent(attributeValue)) {
            if (isPresent(attrNs)) {
              getDOM().setAttributeNS(renderElement, attrNs, attributeName, attributeValue);
            } else {
              getDOM().setAttribute(renderElement, attributeName, attributeValue);
            }
          } else {
            if (isPresent(attrNs)) {
              getDOM().removeAttributeNS(renderElement, attrNs, nsAndName[1]);
            } else {
              getDOM().removeAttribute(renderElement, attributeName);
            }
          }
        };
        DomRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
          var dashCasedPropertyName = camelCaseToDashCase(propertyName);
          if (getDOM().isCommentNode(renderElement)) {
            var existingBindings = getDOM().getText(renderElement).replace(/\n/g, '').match(TEMPLATE_BINDINGS_EXP);
            var parsedBindings = JSON.parse(existingBindings[1]);
            parsedBindings[dashCasedPropertyName] = propertyValue;
            getDOM().setText(renderElement, TEMPLATE_COMMENT_TEXT.replace('{}', JSON.stringify(parsedBindings, null, 2)));
          } else {
            this.setElementAttribute(renderElement, propertyName, propertyValue);
          }
        };
        DomRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
          if (isAdd) {
            getDOM().addClass(renderElement, className);
          } else {
            getDOM().removeClass(renderElement, className);
          }
        };
        DomRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
          if (isPresent(styleValue)) {
            getDOM().setStyle(renderElement, styleName, stringify(styleValue));
          } else {
            getDOM().removeStyle(renderElement, styleName);
          }
        };
        DomRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
          getDOM().invoke(renderElement, methodName, args);
        };
        DomRenderer.prototype.setText = function(renderNode, text) {
          getDOM().setText(renderNode, text);
        };
        DomRenderer.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing) {
          return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing);
        };
        return DomRenderer;
      }());
      $__export("DomRenderer", DomRenderer);
      COMPONENT_REGEX = /%COMP%/g;
      COMPONENT_VARIABLE = '%COMP%';
      $__export("COMPONENT_VARIABLE", COMPONENT_VARIABLE);
      HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
      $__export("HOST_ATTR", HOST_ATTR);
      CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
      $__export("CONTENT_ATTR", CONTENT_ATTR);
      NS_PREFIX_RE = /^:([^:]+):(.+)$/;
    }
  };
});

$__System.register("fd", ["c", "e9", "fe"], function($__export) {
  "use strict";
  var __extends,
      Injectable,
      getDOM,
      EventManagerPlugin,
      DomEventsPlugin;
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
    }, function($__m) {
      getDOM = $__m.getDOM;
    }, function($__m) {
      EventManagerPlugin = $__m.EventManagerPlugin;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      DomEventsPlugin = (function(_super) {
        __extends(DomEventsPlugin, _super);
        function DomEventsPlugin() {
          _super.apply(this, arguments);
        }
        DomEventsPlugin.prototype.supports = function(eventName) {
          return true;
        };
        DomEventsPlugin.prototype.addEventListener = function(element, eventName, handler) {
          var zone = this.manager.getZone();
          var outsideHandler = function(event) {
            return zone.runGuarded(function() {
              return handler(event);
            });
          };
          return this.manager.getZone().runOutsideAngular(function() {
            return getDOM().onAndCancel(element, eventName, outsideHandler);
          });
        };
        DomEventsPlugin.prototype.addGlobalEventListener = function(target, eventName, handler) {
          var element = getDOM().getGlobalEventTarget(target);
          var zone = this.manager.getZone();
          var outsideHandler = function(event) {
            return zone.runGuarded(function() {
              return handler(event);
            });
          };
          return this.manager.getZone().runOutsideAngular(function() {
            return getDOM().onAndCancel(element, eventName, outsideHandler);
          });
        };
        DomEventsPlugin.decorators = [{type: Injectable}];
        DomEventsPlugin.ctorParameters = [];
        return DomEventsPlugin;
      }(EventManagerPlugin));
      $__export("DomEventsPlugin", DomEventsPlugin);
    }
  };
});

$__System.register("106", ["fe"], function($__export) {
  "use strict";
  var __extends,
      EventManagerPlugin,
      _eventNames,
      HammerGesturesPluginCommon;
  return {
    setters: [function($__m) {
      EventManagerPlugin = $__m.EventManagerPlugin;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      _eventNames = {
        'pan': true,
        'panstart': true,
        'panmove': true,
        'panend': true,
        'pancancel': true,
        'panleft': true,
        'panright': true,
        'panup': true,
        'pandown': true,
        'pinch': true,
        'pinchstart': true,
        'pinchmove': true,
        'pinchend': true,
        'pinchcancel': true,
        'pinchin': true,
        'pinchout': true,
        'press': true,
        'pressup': true,
        'rotate': true,
        'rotatestart': true,
        'rotatemove': true,
        'rotateend': true,
        'rotatecancel': true,
        'swipe': true,
        'swipeleft': true,
        'swiperight': true,
        'swipeup': true,
        'swipedown': true,
        'tap': true
      };
      HammerGesturesPluginCommon = (function(_super) {
        __extends(HammerGesturesPluginCommon, _super);
        function HammerGesturesPluginCommon() {
          _super.call(this);
        }
        HammerGesturesPluginCommon.prototype.supports = function(eventName) {
          return _eventNames.hasOwnProperty(eventName.toLowerCase());
        };
        return HammerGesturesPluginCommon;
      }(EventManagerPlugin));
      $__export("HammerGesturesPluginCommon", HammerGesturesPluginCommon);
    }
  };
});

$__System.register("ff", ["c", "ea", "106"], function($__export) {
  "use strict";
  var __extends,
      Inject,
      Injectable,
      OpaqueToken,
      isPresent,
      HammerGesturesPluginCommon,
      HAMMER_GESTURE_CONFIG,
      HammerGestureConfig,
      HammerGesturesPlugin;
  return {
    setters: [function($__m) {
      Inject = $__m.Inject;
      Injectable = $__m.Injectable;
      OpaqueToken = $__m.OpaqueToken;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      HammerGesturesPluginCommon = $__m.HammerGesturesPluginCommon;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      HAMMER_GESTURE_CONFIG = new OpaqueToken('HammerGestureConfig');
      $__export("HAMMER_GESTURE_CONFIG", HAMMER_GESTURE_CONFIG);
      HammerGestureConfig = (function() {
        function HammerGestureConfig() {
          this.events = [];
          this.overrides = {};
        }
        HammerGestureConfig.prototype.buildHammer = function(element) {
          var mc = new Hammer(element);
          mc.get('pinch').set({enable: true});
          mc.get('rotate').set({enable: true});
          for (var eventName in this.overrides) {
            mc.get(eventName).set(this.overrides[eventName]);
          }
          return mc;
        };
        HammerGestureConfig.decorators = [{type: Injectable}];
        HammerGestureConfig.ctorParameters = [];
        return HammerGestureConfig;
      }());
      $__export("HammerGestureConfig", HammerGestureConfig);
      HammerGesturesPlugin = (function(_super) {
        __extends(HammerGesturesPlugin, _super);
        function HammerGesturesPlugin(_config) {
          _super.call(this);
          this._config = _config;
        }
        HammerGesturesPlugin.prototype.supports = function(eventName) {
          if (!_super.prototype.supports.call(this, eventName) && !this.isCustomEvent(eventName))
            return false;
          if (!isPresent(window['Hammer'])) {
            throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
          }
          return true;
        };
        HammerGesturesPlugin.prototype.addEventListener = function(element, eventName, handler) {
          var _this = this;
          var zone = this.manager.getZone();
          eventName = eventName.toLowerCase();
          return zone.runOutsideAngular(function() {
            var mc = _this._config.buildHammer(element);
            var callback = function(eventObj) {
              zone.runGuarded(function() {
                handler(eventObj);
              });
            };
            mc.on(eventName, callback);
            return function() {
              mc.off(eventName, callback);
            };
          });
        };
        HammerGesturesPlugin.prototype.isCustomEvent = function(eventName) {
          return this._config.events.indexOf(eventName) > -1;
        };
        HammerGesturesPlugin.decorators = [{type: Injectable}];
        HammerGesturesPlugin.ctorParameters = [{
          type: HammerGestureConfig,
          decorators: [{
            type: Inject,
            args: [HAMMER_GESTURE_CONFIG]
          }]
        }];
        return HammerGesturesPlugin;
      }(HammerGesturesPluginCommon));
      $__export("HammerGesturesPlugin", HammerGesturesPlugin);
    }
  };
});

$__System.register("104", ["ea"], function($__export) {
  "use strict";
  var getSymbolIterator,
      isJsObject,
      isPresent,
      _arrayFromMap,
      MapWrapper,
      StringMapWrapper,
      ListWrapper;
  function _flattenArray(source, target) {
    if (isPresent(source)) {
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        if (Array.isArray(item)) {
          _flattenArray(item, target);
        } else {
          target.push(item);
        }
      }
    }
    return target;
  }
  function isListLikeIterable(obj) {
    if (!isJsObject(obj))
      return false;
    return Array.isArray(obj) || (!(obj instanceof Map) && getSymbolIterator() in obj);
  }
  function areIterablesEqual(a, b, comparator) {
    var iterator1 = a[getSymbolIterator()]();
    var iterator2 = b[getSymbolIterator()]();
    while (true) {
      var item1 = iterator1.next();
      var item2 = iterator2.next();
      if (item1.done && item2.done)
        return true;
      if (item1.done || item2.done)
        return false;
      if (!comparator(item1.value, item2.value))
        return false;
    }
  }
  function iterateListLike(obj, fn) {
    if (Array.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        fn(obj[i]);
      }
    } else {
      var iterator = obj[getSymbolIterator()]();
      var item = void 0;
      while (!((item = iterator.next()).done)) {
        fn(item.value);
      }
    }
  }
  $__export("isListLikeIterable", isListLikeIterable);
  $__export("areIterablesEqual", areIterablesEqual);
  $__export("iterateListLike", iterateListLike);
  return {
    setters: [function($__m) {
      getSymbolIterator = $__m.getSymbolIterator;
      isJsObject = $__m.isJsObject;
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      _arrayFromMap = (function() {
        try {
          if ((new Map()).values().next) {
            return function createArrayFromMap(m, getValues) {
              return getValues ? Array.from(m.values()) : Array.from(m.keys());
            };
          }
        } catch (e) {}
        return function createArrayFromMapWithForeach(m, getValues) {
          var res = new Array(m.size),
              i = 0;
          m.forEach(function(v, k) {
            res[i] = getValues ? v : k;
            i++;
          });
          return res;
        };
      })();
      MapWrapper = (function() {
        function MapWrapper() {}
        MapWrapper.createFromStringMap = function(stringMap) {
          var result = new Map();
          for (var prop in stringMap) {
            result.set(prop, stringMap[prop]);
          }
          return result;
        };
        MapWrapper.keys = function(m) {
          return _arrayFromMap(m, false);
        };
        MapWrapper.values = function(m) {
          return _arrayFromMap(m, true);
        };
        return MapWrapper;
      }());
      $__export("MapWrapper", MapWrapper);
      StringMapWrapper = (function() {
        function StringMapWrapper() {}
        StringMapWrapper.merge = function(m1, m2) {
          var m = {};
          for (var _i = 0,
              _a = Object.keys(m1); _i < _a.length; _i++) {
            var k = _a[_i];
            m[k] = m1[k];
          }
          for (var _b = 0,
              _c = Object.keys(m2); _b < _c.length; _b++) {
            var k = _c[_b];
            m[k] = m2[k];
          }
          return m;
        };
        StringMapWrapper.equals = function(m1, m2) {
          var k1 = Object.keys(m1);
          var k2 = Object.keys(m2);
          if (k1.length != k2.length) {
            return false;
          }
          for (var i = 0; i < k1.length; i++) {
            var key = k1[i];
            if (m1[key] !== m2[key]) {
              return false;
            }
          }
          return true;
        };
        return StringMapWrapper;
      }());
      $__export("StringMapWrapper", StringMapWrapper);
      ListWrapper = (function() {
        function ListWrapper() {}
        ListWrapper.removeAll = function(list, items) {
          for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            list.splice(index, 1);
          }
        };
        ListWrapper.remove = function(list, el) {
          var index = list.indexOf(el);
          if (index > -1) {
            list.splice(index, 1);
            return true;
          }
          return false;
        };
        ListWrapper.equals = function(a, b) {
          if (a.length != b.length)
            return false;
          for (var i = 0; i < a.length; ++i) {
            if (a[i] !== b[i])
              return false;
          }
          return true;
        };
        ListWrapper.maximum = function(list, predicate) {
          if (list.length == 0) {
            return null;
          }
          var solution = null;
          var maxValue = -Infinity;
          for (var index = 0; index < list.length; index++) {
            var candidate = list[index];
            if (candidate == null) {
              continue;
            }
            var candidateValue = predicate(candidate);
            if (candidateValue > maxValue) {
              solution = candidate;
              maxValue = candidateValue;
            }
          }
          return solution;
        };
        ListWrapper.flatten = function(list) {
          var target = [];
          _flattenArray(list, target);
          return target;
        };
        return ListWrapper;
      }());
      $__export("ListWrapper", ListWrapper);
    }
  };
});

$__System.register("ea", [], function($__export) {
  "use strict";
  var globalScope,
      _global,
      STRING_MAP_PROTO,
      NumberWrapper,
      _symbolIterator;
  function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
  }
  function getTypeNameForDebugging(type) {
    return type['name'] || (typeof type === 'undefined' ? 'undefined' : $traceurRuntime.typeof(type));
  }
  function isPresent(obj) {
    return obj != null;
  }
  function isBlank(obj) {
    return obj == null;
  }
  function isStrictStringMap(obj) {
    return (typeof obj === 'undefined' ? 'undefined' : $traceurRuntime.typeof(obj)) === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
  }
  function isDate(obj) {
    return obj instanceof Date && !isNaN(obj.valueOf());
  }
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token === undefined || token === null) {
      return '' + token;
    }
    if (token.overriddenName) {
      return token.overriddenName;
    }
    if (token.name) {
      return token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
  }
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || (typeof o === 'undefined' ? 'undefined' : $traceurRuntime.typeof(o)) === 'object');
  }
  function print(obj) {
    console.log(obj);
  }
  function warn(obj) {
    console.warn(obj);
  }
  function setValueOnPath(global, path, value) {
    var parts = path.split('.');
    var obj = global;
    while (parts.length > 1) {
      var name = parts.shift();
      if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
        obj = obj[name];
      } else {
        obj = obj[name] = {};
      }
    }
    if (obj === undefined || obj === null) {
      obj = {};
    }
    obj[parts.shift()] = value;
  }
  function getSymbolIterator() {
    if (!_symbolIterator) {
      if (globalScope.Symbol && Symbol.iterator) {
        _symbolIterator = Symbol.iterator;
      } else {
        var keys = Object.getOwnPropertyNames(Map.prototype);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
            _symbolIterator = key;
          }
        }
      }
    }
    return _symbolIterator;
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  function escapeRegExp(s) {
    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }
  $__export("scheduleMicroTask", scheduleMicroTask);
  $__export("getTypeNameForDebugging", getTypeNameForDebugging);
  $__export("isPresent", isPresent);
  $__export("isBlank", isBlank);
  $__export("isStrictStringMap", isStrictStringMap);
  $__export("isDate", isDate);
  $__export("stringify", stringify);
  $__export("looseIdentical", looseIdentical);
  $__export("isJsObject", isJsObject);
  $__export("print", print);
  $__export("warn", warn);
  $__export("setValueOnPath", setValueOnPath);
  $__export("getSymbolIterator", getSymbolIterator);
  $__export("isPrimitive", isPrimitive);
  $__export("escapeRegExp", escapeRegExp);
  return {
    setters: [],
    execute: function() {
      if (typeof window === 'undefined') {
        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
          globalScope = self;
        } else {
          globalScope = global;
        }
      } else {
        globalScope = window;
      }
      _global = globalScope;
      $__export("global", _global);
      _global.assert = function assert(condition) {};
      STRING_MAP_PROTO = Object.getPrototypeOf({});
      NumberWrapper = (function() {
        function NumberWrapper() {}
        NumberWrapper.parseIntAutoRadix = function(text) {
          var result = parseInt(text);
          if (isNaN(result)) {
            throw new Error('Invalid integer literal when parsing ' + text);
          }
          return result;
        };
        NumberWrapper.parseInt = function(text, radix) {
          if (radix == 10) {
            if (/^(\-|\+)?[0-9]+$/.test(text)) {
              return parseInt(text, radix);
            }
          } else if (radix == 16) {
            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
              return parseInt(text, radix);
            }
          } else {
            var result = parseInt(text, radix);
            if (!isNaN(result)) {
              return result;
            }
          }
          throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
        };
        NumberWrapper.isNumeric = function(value) {
          return !isNaN(value - parseFloat(value));
        };
        return NumberWrapper;
      }());
      $__export("NumberWrapper", NumberWrapper);
      _symbolIterator = null;
    }
  };
});

$__System.register("fe", ["c"], function($__export) {
  "use strict";
  var Inject,
      Injectable,
      NgZone,
      OpaqueToken,
      EVENT_MANAGER_PLUGINS,
      EventManager,
      EventManagerPlugin;
  return {
    setters: [function($__m) {
      Inject = $__m.Inject;
      Injectable = $__m.Injectable;
      NgZone = $__m.NgZone;
      OpaqueToken = $__m.OpaqueToken;
    }],
    execute: function() {
      EVENT_MANAGER_PLUGINS = new OpaqueToken('EventManagerPlugins');
      $__export("EVENT_MANAGER_PLUGINS", EVENT_MANAGER_PLUGINS);
      EventManager = (function() {
        function EventManager(plugins, _zone) {
          var _this = this;
          this._zone = _zone;
          plugins.forEach(function(p) {
            return p.manager = _this;
          });
          this._plugins = plugins.slice().reverse();
        }
        EventManager.prototype.addEventListener = function(element, eventName, handler) {
          var plugin = this._findPluginFor(eventName);
          return plugin.addEventListener(element, eventName, handler);
        };
        EventManager.prototype.addGlobalEventListener = function(target, eventName, handler) {
          var plugin = this._findPluginFor(eventName);
          return plugin.addGlobalEventListener(target, eventName, handler);
        };
        EventManager.prototype.getZone = function() {
          return this._zone;
        };
        EventManager.prototype._findPluginFor = function(eventName) {
          var plugins = this._plugins;
          for (var i = 0; i < plugins.length; i++) {
            var plugin = plugins[i];
            if (plugin.supports(eventName)) {
              return plugin;
            }
          }
          throw new Error("No event manager plugin found for event " + eventName);
        };
        EventManager.decorators = [{type: Injectable}];
        EventManager.ctorParameters = [{
          type: Array,
          decorators: [{
            type: Inject,
            args: [EVENT_MANAGER_PLUGINS]
          }]
        }, {type: NgZone}];
        return EventManager;
      }());
      $__export("EventManager", EventManager);
      EventManagerPlugin = (function() {
        function EventManagerPlugin() {}
        EventManagerPlugin.prototype.supports = function(eventName) {
          return false;
        };
        EventManagerPlugin.prototype.addEventListener = function(element, eventName, handler) {
          throw 'not implemented';
        };
        EventManagerPlugin.prototype.addGlobalEventListener = function(element, eventName, handler) {
          throw 'not implemented';
        };
        return EventManagerPlugin;
      }());
      $__export("EventManagerPlugin", EventManagerPlugin);
    }
  };
});

$__System.register("100", ["c", "104", "ea", "e9", "fe"], function($__export) {
  "use strict";
  var __extends,
      Injectable,
      ListWrapper,
      isPresent,
      getDOM,
      EventManagerPlugin,
      modifierKeys,
      modifierKeyGetters,
      KeyEventsPlugin;
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
    }, function($__m) {
      ListWrapper = $__m.ListWrapper;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      getDOM = $__m.getDOM;
    }, function($__m) {
      EventManagerPlugin = $__m.EventManagerPlugin;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      modifierKeys = ['alt', 'control', 'meta', 'shift'];
      modifierKeyGetters = {
        'alt': function(event) {
          return event.altKey;
        },
        'control': function(event) {
          return event.ctrlKey;
        },
        'meta': function(event) {
          return event.metaKey;
        },
        'shift': function(event) {
          return event.shiftKey;
        }
      };
      KeyEventsPlugin = (function(_super) {
        __extends(KeyEventsPlugin, _super);
        function KeyEventsPlugin() {
          _super.call(this);
        }
        KeyEventsPlugin.prototype.supports = function(eventName) {
          return isPresent(KeyEventsPlugin.parseEventName(eventName));
        };
        KeyEventsPlugin.prototype.addEventListener = function(element, eventName, handler) {
          var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
          var outsideHandler = KeyEventsPlugin.eventCallback(element, parsedEvent['fullKey'], handler, this.manager.getZone());
          return this.manager.getZone().runOutsideAngular(function() {
            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
          });
        };
        KeyEventsPlugin.parseEventName = function(eventName) {
          var parts = eventName.toLowerCase().split('.');
          var domEventName = parts.shift();
          if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {
            return null;
          }
          var key = KeyEventsPlugin._normalizeKey(parts.pop());
          var fullKey = '';
          modifierKeys.forEach(function(modifierName) {
            if (parts.indexOf(modifierName) > -1) {
              ListWrapper.remove(parts, modifierName);
              fullKey += modifierName + '.';
            }
          });
          fullKey += key;
          if (parts.length != 0 || key.length === 0) {
            return null;
          }
          var result = {};
          result['domEventName'] = domEventName;
          result['fullKey'] = fullKey;
          return result;
        };
        KeyEventsPlugin.getEventFullKey = function(event) {
          var fullKey = '';
          var key = getDOM().getEventKey(event);
          key = key.toLowerCase();
          if (key === ' ') {
            key = 'space';
          } else if (key === '.') {
            key = 'dot';
          }
          modifierKeys.forEach(function(modifierName) {
            if (modifierName != key) {
              var modifierGetter = modifierKeyGetters[modifierName];
              if (modifierGetter(event)) {
                fullKey += modifierName + '.';
              }
            }
          });
          fullKey += key;
          return fullKey;
        };
        KeyEventsPlugin.eventCallback = function(element, fullKey, handler, zone) {
          return function(event) {
            if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
              zone.runGuarded(function() {
                return handler(event);
              });
            }
          };
        };
        KeyEventsPlugin._normalizeKey = function(keyName) {
          switch (keyName) {
            case 'esc':
              return 'escape';
            default:
              return keyName;
          }
        };
        KeyEventsPlugin.decorators = [{type: Injectable}];
        KeyEventsPlugin.ctorParameters = [];
        return KeyEventsPlugin;
      }(EventManagerPlugin));
      $__export("KeyEventsPlugin", KeyEventsPlugin);
    }
  };
});

$__System.register("e9", [], function($__export) {
  "use strict";
  var _DOM,
      DomAdapter;
  function getDOM() {
    return _DOM;
  }
  function setDOM(adapter) {
    _DOM = adapter;
  }
  function setRootDomAdapter(adapter) {
    if (!_DOM) {
      _DOM = adapter;
    }
  }
  $__export("getDOM", getDOM);
  $__export("setDOM", setDOM);
  $__export("setRootDomAdapter", setRootDomAdapter);
  return {
    setters: [],
    execute: function() {
      _DOM = null;
      DomAdapter = (function() {
        function DomAdapter() {
          this.resourceLoaderType = null;
        }
        Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
          get: function() {
            return this._attrToPropMap;
          },
          set: function(value) {
            this._attrToPropMap = value;
          },
          enumerable: true,
          configurable: true
        });
        ;
        ;
        return DomAdapter;
      }());
      $__export("DomAdapter", DomAdapter);
    }
  };
});

$__System.register("fc", ["c"], function($__export) {
  "use strict";
  var OpaqueToken,
      DOCUMENT;
  return {
    setters: [function($__m) {
      OpaqueToken = $__m.OpaqueToken;
    }],
    execute: function() {
      DOCUMENT = new OpaqueToken('DocumentToken');
      $__export("DOCUMENT", DOCUMENT);
    }
  };
});

$__System.register("101", ["c", "e9", "fc"], function($__export) {
  "use strict";
  var __extends,
      Inject,
      Injectable,
      getDOM,
      DOCUMENT,
      SharedStylesHost,
      DomSharedStylesHost;
  return {
    setters: [function($__m) {
      Inject = $__m.Inject;
      Injectable = $__m.Injectable;
    }, function($__m) {
      getDOM = $__m.getDOM;
    }, function($__m) {
      DOCUMENT = $__m.DOCUMENT;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      SharedStylesHost = (function() {
        function SharedStylesHost() {
          this._styles = [];
          this._stylesSet = new Set();
        }
        SharedStylesHost.prototype.addStyles = function(styles) {
          var _this = this;
          var additions = [];
          styles.forEach(function(style) {
            if (!_this._stylesSet.has(style)) {
              _this._stylesSet.add(style);
              _this._styles.push(style);
              additions.push(style);
            }
          });
          this.onStylesAdded(additions);
        };
        SharedStylesHost.prototype.onStylesAdded = function(additions) {};
        SharedStylesHost.prototype.getAllStyles = function() {
          return this._styles;
        };
        SharedStylesHost.decorators = [{type: Injectable}];
        SharedStylesHost.ctorParameters = [];
        return SharedStylesHost;
      }());
      $__export("SharedStylesHost", SharedStylesHost);
      DomSharedStylesHost = (function(_super) {
        __extends(DomSharedStylesHost, _super);
        function DomSharedStylesHost(doc) {
          _super.call(this);
          this._hostNodes = new Set();
          this._hostNodes.add(doc.head);
        }
        DomSharedStylesHost.prototype._addStylesToHost = function(styles, host) {
          for (var i = 0; i < styles.length; i++) {
            var style = styles[i];
            getDOM().appendChild(host, getDOM().createStyleElement(style));
          }
        };
        DomSharedStylesHost.prototype.addHost = function(hostNode) {
          this._addStylesToHost(this._styles, hostNode);
          this._hostNodes.add(hostNode);
        };
        DomSharedStylesHost.prototype.removeHost = function(hostNode) {
          this._hostNodes.delete(hostNode);
        };
        DomSharedStylesHost.prototype.onStylesAdded = function(additions) {
          var _this = this;
          this._hostNodes.forEach(function(hostNode) {
            _this._addStylesToHost(additions, hostNode);
          });
        };
        DomSharedStylesHost.decorators = [{type: Injectable}];
        DomSharedStylesHost.ctorParameters = [{
          type: undefined,
          decorators: [{
            type: Inject,
            args: [DOCUMENT]
          }]
        }];
        return DomSharedStylesHost;
      }(SharedStylesHost));
      $__export("DomSharedStylesHost", DomSharedStylesHost);
    }
  };
});

$__System.register("107", ["f5", "f7", "f8", "f9", "fa", "e9", "fb", "fd", "ff", "100", "101"], function($__export) {
  "use strict";
  var browser,
      browserDomAdapter,
      location,
      testability,
      ng_probe,
      dom_adapter,
      dom_renderer,
      dom_events,
      hammer_gesture,
      key_events,
      shared_styles_host,
      __platform_browser_private__;
  return {
    setters: [function($__m) {
      browser = $__m;
    }, function($__m) {
      browserDomAdapter = $__m;
    }, function($__m) {
      location = $__m;
    }, function($__m) {
      testability = $__m;
    }, function($__m) {
      ng_probe = $__m;
    }, function($__m) {
      dom_adapter = $__m;
    }, function($__m) {
      dom_renderer = $__m;
    }, function($__m) {
      dom_events = $__m;
    }, function($__m) {
      hammer_gesture = $__m;
    }, function($__m) {
      key_events = $__m;
    }, function($__m) {
      shared_styles_host = $__m;
    }],
    execute: function() {
      __platform_browser_private__ = {
        BrowserPlatformLocation: location.BrowserPlatformLocation,
        DomAdapter: dom_adapter.DomAdapter,
        BrowserDomAdapter: browserDomAdapter.BrowserDomAdapter,
        BrowserGetTestability: testability.BrowserGetTestability,
        getDOM: dom_adapter.getDOM,
        setRootDomAdapter: dom_adapter.setRootDomAdapter,
        DomRootRenderer_: dom_renderer.DomRootRenderer_,
        DomRootRenderer: dom_renderer.DomRootRenderer,
        DomSharedStylesHost: shared_styles_host.DomSharedStylesHost,
        SharedStylesHost: shared_styles_host.SharedStylesHost,
        ELEMENT_PROBE_PROVIDERS: ng_probe.ELEMENT_PROBE_PROVIDERS,
        DomEventsPlugin: dom_events.DomEventsPlugin,
        KeyEventsPlugin: key_events.KeyEventsPlugin,
        HammerGesturesPlugin: hammer_gesture.HammerGesturesPlugin,
        initDomAdapter: browser.initDomAdapter,
        INTERNAL_BROWSER_PLATFORM_PROVIDERS: browser.INTERNAL_BROWSER_PLATFORM_PROVIDERS,
        BROWSER_SANITIZATION_PROVIDERS: browser.BROWSER_SANITIZATION_PROVIDERS
      };
      $__export("__platform_browser_private__", __platform_browser_private__);
    }
  };
});

$__System.register("108", ["f5", "f0", "eb", "f6", "ec", "fa", "fc", "fe", "ff", "f4", "107"], function($__export) {
  "use strict";
  var $__exportNames = {undefined: true};
  return {
    setters: [function($__m) {
      $__export({
        BrowserModule: $__m.BrowserModule,
        platformBrowser: $__m.platformBrowser
      });
    }, function($__m) {
      $__export({Title: $__m.Title});
    }, function($__m) {
      $__export({
        disableDebugTools: $__m.disableDebugTools,
        enableDebugTools: $__m.enableDebugTools
      });
    }, function($__m) {
      $__export({AnimationDriver: $__m.AnimationDriver});
    }, function($__m) {
      $__export({By: $__m.By});
    }, function($__m) {
      $__export({NgProbeToken: $__m.NgProbeToken});
    }, function($__m) {
      $__export({DOCUMENT: $__m.DOCUMENT});
    }, function($__m) {
      $__export({
        EVENT_MANAGER_PLUGINS: $__m.EVENT_MANAGER_PLUGINS,
        EventManager: $__m.EventManager
      });
    }, function($__m) {
      $__export({
        HAMMER_GESTURE_CONFIG: $__m.HAMMER_GESTURE_CONFIG,
        HammerGestureConfig: $__m.HammerGestureConfig
      });
    }, function($__m) {
      $__export({DomSanitizer: $__m.DomSanitizer});
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }],
    execute: function() {}
  };
});

$__System.register("a", ["108"], function($__export) {
  "use strict";
  var $__exportNames = {};
  return {
    setters: [function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }],
    execute: function() {}
  };
});

$__System.register("109", ["c"], function($__export) {
  "use strict";
  var Injectable,
      BrowserXhr;
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
    }],
    execute: function() {
      BrowserXhr = (function() {
        function BrowserXhr() {}
        BrowserXhr.prototype.build = function() {
          return (new XMLHttpRequest());
        };
        BrowserXhr.decorators = [{type: Injectable}];
        BrowserXhr.ctorParameters = [];
        return BrowserXhr;
      }());
      $__export("BrowserXhr", BrowserXhr);
    }
  };
});

$__System.register("10a", ["c", "a", "91", "e3", "e4", "e1", "10b", "10c", "e5", "e6", "109"], function($__export) {
  "use strict";
  var Injectable,
      __platform_browser_private__,
      Observable,
      ResponseOptions,
      ContentType,
      RequestMethod,
      ResponseContentType,
      ResponseType,
      isPresent,
      Headers,
      getResponseURL,
      isSuccess,
      XSRFStrategy,
      Response,
      BrowserXhr,
      XSSI_PREFIX,
      XHRConnection,
      CookieXSRFStrategy,
      XHRBackend;
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
    }, function($__m) {
      __platform_browser_private__ = $__m.__platform_browser_private__;
    }, function($__m) {
      Observable = $__m.Observable;
    }, function($__m) {
      ResponseOptions = $__m.ResponseOptions;
    }, function($__m) {
      ContentType = $__m.ContentType;
      RequestMethod = $__m.RequestMethod;
      ResponseContentType = $__m.ResponseContentType;
      ResponseType = $__m.ResponseType;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      Headers = $__m.Headers;
    }, function($__m) {
      getResponseURL = $__m.getResponseURL;
      isSuccess = $__m.isSuccess;
    }, function($__m) {
      XSRFStrategy = $__m.XSRFStrategy;
    }, function($__m) {
      Response = $__m.Response;
    }, function($__m) {
      BrowserXhr = $__m.BrowserXhr;
    }],
    execute: function() {
      XSSI_PREFIX = /^\)\]\}',?\n/;
      XHRConnection = (function() {
        function XHRConnection(req, browserXHR, baseResponseOptions) {
          var _this = this;
          this.request = req;
          this.response = new Observable(function(responseObserver) {
            var _xhr = browserXHR.build();
            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);
            if (isPresent(req.withCredentials)) {
              _xhr.withCredentials = req.withCredentials;
            }
            var onLoad = function() {
              var body = _xhr.response === undefined ? _xhr.responseText : _xhr.response;
              if (typeof body === 'string')
                body = body.replace(XSSI_PREFIX, '');
              var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());
              var url = getResponseURL(_xhr);
              var status = _xhr.status === 1223 ? 204 : _xhr.status;
              if (status === 0) {
                status = body ? 200 : 0;
              }
              var statusText = _xhr.statusText || 'OK';
              var responseOptions = new ResponseOptions({
                body: body,
                status: status,
                headers: headers,
                statusText: statusText,
                url: url
              });
              if (isPresent(baseResponseOptions)) {
                responseOptions = baseResponseOptions.merge(responseOptions);
              }
              var response = new Response(responseOptions);
              response.ok = isSuccess(status);
              if (response.ok) {
                responseObserver.next(response);
                responseObserver.complete();
                return;
              }
              responseObserver.error(response);
            };
            var onError = function(err) {
              var responseOptions = new ResponseOptions({
                body: err,
                type: ResponseType.Error,
                status: _xhr.status,
                statusText: _xhr.statusText
              });
              if (isPresent(baseResponseOptions)) {
                responseOptions = baseResponseOptions.merge(responseOptions);
              }
              responseObserver.error(new Response(responseOptions));
            };
            _this.setDetectedContentType(req, _xhr);
            if (isPresent(req.headers)) {
              req.headers.forEach(function(values, name) {
                return _xhr.setRequestHeader(name, values.join(','));
              });
            }
            if (isPresent(req.responseType) && isPresent(_xhr.responseType)) {
              switch (req.responseType) {
                case ResponseContentType.ArrayBuffer:
                  _xhr.responseType = 'arraybuffer';
                  break;
                case ResponseContentType.Json:
                  _xhr.responseType = 'json';
                  break;
                case ResponseContentType.Text:
                  _xhr.responseType = 'text';
                  break;
                case ResponseContentType.Blob:
                  _xhr.responseType = 'blob';
                  break;
                default:
                  throw new Error('The selected responseType is not supported');
              }
            }
            _xhr.addEventListener('load', onLoad);
            _xhr.addEventListener('error', onError);
            _xhr.send(_this.request.getBody());
            return function() {
              _xhr.removeEventListener('load', onLoad);
              _xhr.removeEventListener('error', onError);
              _xhr.abort();
            };
          });
        }
        XHRConnection.prototype.setDetectedContentType = function(req, _xhr) {
          if (isPresent(req.headers) && isPresent(req.headers.get('Content-Type'))) {
            return;
          }
          switch (req.contentType) {
            case ContentType.NONE:
              break;
            case ContentType.JSON:
              _xhr.setRequestHeader('content-type', 'application/json');
              break;
            case ContentType.FORM:
              _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
              break;
            case ContentType.TEXT:
              _xhr.setRequestHeader('content-type', 'text/plain');
              break;
            case ContentType.BLOB:
              var blob = req.blob();
              if (blob.type) {
                _xhr.setRequestHeader('content-type', blob.type);
              }
              break;
          }
        };
        return XHRConnection;
      }());
      $__export("XHRConnection", XHRConnection);
      CookieXSRFStrategy = (function() {
        function CookieXSRFStrategy(_cookieName, _headerName) {
          if (_cookieName === void 0) {
            _cookieName = 'XSRF-TOKEN';
          }
          if (_headerName === void 0) {
            _headerName = 'X-XSRF-TOKEN';
          }
          this._cookieName = _cookieName;
          this._headerName = _headerName;
        }
        CookieXSRFStrategy.prototype.configureRequest = function(req) {
          var xsrfToken = __platform_browser_private__.getDOM().getCookie(this._cookieName);
          if (xsrfToken) {
            req.headers.set(this._headerName, xsrfToken);
          }
        };
        return CookieXSRFStrategy;
      }());
      $__export("CookieXSRFStrategy", CookieXSRFStrategy);
      XHRBackend = (function() {
        function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {
          this._browserXHR = _browserXHR;
          this._baseResponseOptions = _baseResponseOptions;
          this._xsrfStrategy = _xsrfStrategy;
        }
        XHRBackend.prototype.createConnection = function(request) {
          this._xsrfStrategy.configureRequest(request);
          return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
        };
        XHRBackend.decorators = [{type: Injectable}];
        XHRBackend.ctorParameters = [{type: BrowserXhr}, {type: ResponseOptions}, {type: XSRFStrategy}];
        return XHRBackend;
      }());
      $__export("XHRBackend", XHRBackend);
    }
  };
});

$__System.register("e3", ["c", "e1", "e4", "10b"], function($__export) {
  "use strict";
  var __extends,
      Injectable,
      isPresent,
      ResponseType,
      Headers,
      ResponseOptions,
      BaseResponseOptions;
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      ResponseType = $__m.ResponseType;
    }, function($__m) {
      Headers = $__m.Headers;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      ResponseOptions = (function() {
        function ResponseOptions(_a) {
          var _b = _a === void 0 ? {} : _a,
              body = _b.body,
              status = _b.status,
              headers = _b.headers,
              statusText = _b.statusText,
              type = _b.type,
              url = _b.url;
          this.body = isPresent(body) ? body : null;
          this.status = isPresent(status) ? status : null;
          this.headers = isPresent(headers) ? headers : null;
          this.statusText = isPresent(statusText) ? statusText : null;
          this.type = isPresent(type) ? type : null;
          this.url = isPresent(url) ? url : null;
        }
        ResponseOptions.prototype.merge = function(options) {
          return new ResponseOptions({
            body: isPresent(options) && isPresent(options.body) ? options.body : this.body,
            status: isPresent(options) && isPresent(options.status) ? options.status : this.status,
            headers: isPresent(options) && isPresent(options.headers) ? options.headers : this.headers,
            statusText: isPresent(options) && isPresent(options.statusText) ? options.statusText : this.statusText,
            type: isPresent(options) && isPresent(options.type) ? options.type : this.type,
            url: isPresent(options) && isPresent(options.url) ? options.url : this.url
          });
        };
        return ResponseOptions;
      }());
      $__export("ResponseOptions", ResponseOptions);
      BaseResponseOptions = (function(_super) {
        __extends(BaseResponseOptions, _super);
        function BaseResponseOptions() {
          _super.call(this, {
            status: 200,
            statusText: 'Ok',
            type: ResponseType.Default,
            headers: new Headers()
          });
        }
        BaseResponseOptions.decorators = [{type: Injectable}];
        BaseResponseOptions.ctorParameters = [];
        return BaseResponseOptions;
      }(ResponseOptions));
      $__export("BaseResponseOptions", BaseResponseOptions);
    }
  };
});

$__System.register("10d", ["c", "e1", "e4", "10b", "10c", "10e"], function($__export) {
  "use strict";
  var __extends,
      Injectable,
      isPresent,
      RequestMethod,
      Headers,
      normalizeMethodName,
      URLSearchParams,
      RequestOptions,
      BaseRequestOptions;
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      RequestMethod = $__m.RequestMethod;
    }, function($__m) {
      Headers = $__m.Headers;
    }, function($__m) {
      normalizeMethodName = $__m.normalizeMethodName;
    }, function($__m) {
      URLSearchParams = $__m.URLSearchParams;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      RequestOptions = (function() {
        function RequestOptions(_a) {
          var _b = _a === void 0 ? {} : _a,
              method = _b.method,
              headers = _b.headers,
              body = _b.body,
              url = _b.url,
              search = _b.search,
              withCredentials = _b.withCredentials,
              responseType = _b.responseType;
          this.method = isPresent(method) ? normalizeMethodName(method) : null;
          this.headers = isPresent(headers) ? headers : null;
          this.body = isPresent(body) ? body : null;
          this.url = isPresent(url) ? url : null;
          this.search = isPresent(search) ? (typeof search === 'string' ? new URLSearchParams((search)) : (search)) : null;
          this.withCredentials = isPresent(withCredentials) ? withCredentials : null;
          this.responseType = isPresent(responseType) ? responseType : null;
        }
        RequestOptions.prototype.merge = function(options) {
          return new RequestOptions({
            method: options && isPresent(options.method) ? options.method : this.method,
            headers: options && isPresent(options.headers) ? options.headers : this.headers,
            body: options && isPresent(options.body) ? options.body : this.body,
            url: options && isPresent(options.url) ? options.url : this.url,
            search: options && isPresent(options.search) ? (typeof options.search === 'string' ? new URLSearchParams(options.search) : (options.search).clone()) : this.search,
            withCredentials: options && isPresent(options.withCredentials) ? options.withCredentials : this.withCredentials,
            responseType: options && isPresent(options.responseType) ? options.responseType : this.responseType
          });
        };
        return RequestOptions;
      }());
      $__export("RequestOptions", RequestOptions);
      BaseRequestOptions = (function(_super) {
        __extends(BaseRequestOptions, _super);
        function BaseRequestOptions() {
          _super.call(this, {
            method: RequestMethod.Get,
            headers: new Headers()
          });
        }
        BaseRequestOptions.decorators = [{type: Injectable}];
        BaseRequestOptions.ctorParameters = [];
        return BaseRequestOptions;
      }(RequestOptions));
      $__export("BaseRequestOptions", BaseRequestOptions);
    }
  };
});

$__System.register("10f", ["c", "e1", "10d", "e4", "e5", "110"], function($__export) {
  "use strict";
  var __extends,
      Injectable,
      isPresent,
      RequestOptions,
      RequestMethod,
      ConnectionBackend,
      Request,
      Http,
      Jsonp;
  function httpRequest(backend, request) {
    return backend.createConnection(request).response;
  }
  function mergeOptions(defaultOpts, providedOpts, method, url) {
    var newOptions = defaultOpts;
    if (isPresent(providedOpts)) {
      return newOptions.merge(new RequestOptions({
        method: providedOpts.method || method,
        url: providedOpts.url || url,
        search: providedOpts.search,
        headers: providedOpts.headers,
        body: providedOpts.body,
        withCredentials: providedOpts.withCredentials,
        responseType: providedOpts.responseType
      }));
    }
    if (isPresent(method)) {
      return newOptions.merge(new RequestOptions({
        method: method,
        url: url
      }));
    } else {
      return newOptions.merge(new RequestOptions({url: url}));
    }
  }
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      RequestOptions = $__m.RequestOptions;
    }, function($__m) {
      RequestMethod = $__m.RequestMethod;
    }, function($__m) {
      ConnectionBackend = $__m.ConnectionBackend;
    }, function($__m) {
      Request = $__m.Request;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      Http = (function() {
        function Http(_backend, _defaultOptions) {
          this._backend = _backend;
          this._defaultOptions = _defaultOptions;
        }
        Http.prototype.request = function(url, options) {
          var responseObservable;
          if (typeof url === 'string') {
            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));
          } else if (url instanceof Request) {
            responseObservable = httpRequest(this._backend, url);
          } else {
            throw new Error('First argument must be a url string or Request instance.');
          }
          return responseObservable;
        };
        Http.prototype.get = function(url, options) {
          return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));
        };
        Http.prototype.post = function(url, body, options) {
          return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Post, url)));
        };
        Http.prototype.put = function(url, body, options) {
          return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Put, url)));
        };
        Http.prototype.delete = function(url, options) {
          return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));
        };
        Http.prototype.patch = function(url, body, options) {
          return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Patch, url)));
        };
        Http.prototype.head = function(url, options) {
          return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));
        };
        Http.prototype.options = function(url, options) {
          return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));
        };
        Http.decorators = [{type: Injectable}];
        Http.ctorParameters = [{type: ConnectionBackend}, {type: RequestOptions}];
        return Http;
      }());
      $__export("Http", Http);
      Jsonp = (function(_super) {
        __extends(Jsonp, _super);
        function Jsonp(backend, defaultOptions) {
          _super.call(this, backend, defaultOptions);
        }
        Jsonp.prototype.request = function(url, options) {
          var responseObservable;
          if (typeof url === 'string') {
            url = new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url));
          }
          if (url instanceof Request) {
            if (url.method !== RequestMethod.Get) {
              throw new Error('JSONP requests must use GET request method.');
            }
            responseObservable = httpRequest(this._backend, url);
          } else {
            throw new Error('First argument must be a url string or Request instance.');
          }
          return responseObservable;
        };
        Jsonp.decorators = [{type: Injectable}];
        Jsonp.ctorParameters = [{type: ConnectionBackend}, {type: RequestOptions}];
        return Jsonp;
      }(Http));
      $__export("Jsonp", Jsonp);
    }
  };
});

$__System.register("111", ["c", "e0", "109", "e2", "10a", "10d", "e3", "10f", "e5"], function($__export) {
  "use strict";
  var NgModule,
      BrowserJsonp,
      BrowserXhr,
      JSONPBackend,
      JSONPBackend_,
      CookieXSRFStrategy,
      XHRBackend,
      BaseRequestOptions,
      RequestOptions,
      BaseResponseOptions,
      ResponseOptions,
      Http,
      Jsonp,
      XSRFStrategy,
      HttpModule,
      JsonpModule;
  function _createDefaultCookieXSRFStrategy() {
    return new CookieXSRFStrategy();
  }
  function httpFactory(xhrBackend, requestOptions) {
    return new Http(xhrBackend, requestOptions);
  }
  function jsonpFactory(jsonpBackend, requestOptions) {
    return new Jsonp(jsonpBackend, requestOptions);
  }
  $__export("_createDefaultCookieXSRFStrategy", _createDefaultCookieXSRFStrategy);
  $__export("httpFactory", httpFactory);
  $__export("jsonpFactory", jsonpFactory);
  return {
    setters: [function($__m) {
      NgModule = $__m.NgModule;
    }, function($__m) {
      BrowserJsonp = $__m.BrowserJsonp;
    }, function($__m) {
      BrowserXhr = $__m.BrowserXhr;
    }, function($__m) {
      JSONPBackend = $__m.JSONPBackend;
      JSONPBackend_ = $__m.JSONPBackend_;
    }, function($__m) {
      CookieXSRFStrategy = $__m.CookieXSRFStrategy;
      XHRBackend = $__m.XHRBackend;
    }, function($__m) {
      BaseRequestOptions = $__m.BaseRequestOptions;
      RequestOptions = $__m.RequestOptions;
    }, function($__m) {
      BaseResponseOptions = $__m.BaseResponseOptions;
      ResponseOptions = $__m.ResponseOptions;
    }, function($__m) {
      Http = $__m.Http;
      Jsonp = $__m.Jsonp;
    }, function($__m) {
      XSRFStrategy = $__m.XSRFStrategy;
    }],
    execute: function() {
      HttpModule = (function() {
        function HttpModule() {}
        HttpModule.decorators = [{
          type: NgModule,
          args: [{providers: [{
              provide: Http,
              useFactory: httpFactory,
              deps: [XHRBackend, RequestOptions]
            }, BrowserXhr, {
              provide: RequestOptions,
              useClass: BaseRequestOptions
            }, {
              provide: ResponseOptions,
              useClass: BaseResponseOptions
            }, XHRBackend, {
              provide: XSRFStrategy,
              useFactory: _createDefaultCookieXSRFStrategy
            }]}]
        }];
        HttpModule.ctorParameters = [];
        return HttpModule;
      }());
      $__export("HttpModule", HttpModule);
      JsonpModule = (function() {
        function JsonpModule() {}
        JsonpModule.decorators = [{
          type: NgModule,
          args: [{providers: [{
              provide: Jsonp,
              useFactory: jsonpFactory,
              deps: [JSONPBackend, RequestOptions]
            }, BrowserJsonp, {
              provide: RequestOptions,
              useClass: BaseRequestOptions
            }, {
              provide: ResponseOptions,
              useClass: BaseResponseOptions
            }, {
              provide: JSONPBackend,
              useClass: JSONPBackend_
            }]}]
        }];
        JsonpModule.ctorParameters = [];
        return JsonpModule;
      }());
      $__export("JsonpModule", JsonpModule);
    }
  };
});

$__System.register("e5", [], function($__export) {
  "use strict";
  var ConnectionBackend,
      Connection,
      XSRFStrategy;
  return {
    setters: [],
    execute: function() {
      ConnectionBackend = (function() {
        function ConnectionBackend() {}
        return ConnectionBackend;
      }());
      $__export("ConnectionBackend", ConnectionBackend);
      Connection = (function() {
        function Connection() {}
        return Connection;
      }());
      $__export("Connection", Connection);
      XSRFStrategy = (function() {
        function XSRFStrategy() {}
        return XSRFStrategy;
      }());
      $__export("XSRFStrategy", XSRFStrategy);
    }
  };
});

$__System.register("112", ["e1"], function($__export) {
  "use strict";
  var getSymbolIterator,
      isJsObject,
      isPresent,
      _arrayFromMap,
      MapWrapper,
      StringMapWrapper,
      ListWrapper;
  function _flattenArray(source, target) {
    if (isPresent(source)) {
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        if (Array.isArray(item)) {
          _flattenArray(item, target);
        } else {
          target.push(item);
        }
      }
    }
    return target;
  }
  function isListLikeIterable(obj) {
    if (!isJsObject(obj))
      return false;
    return Array.isArray(obj) || (!(obj instanceof Map) && getSymbolIterator() in obj);
  }
  function areIterablesEqual(a, b, comparator) {
    var iterator1 = a[getSymbolIterator()]();
    var iterator2 = b[getSymbolIterator()]();
    while (true) {
      var item1 = iterator1.next();
      var item2 = iterator2.next();
      if (item1.done && item2.done)
        return true;
      if (item1.done || item2.done)
        return false;
      if (!comparator(item1.value, item2.value))
        return false;
    }
  }
  function iterateListLike(obj, fn) {
    if (Array.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        fn(obj[i]);
      }
    } else {
      var iterator = obj[getSymbolIterator()]();
      var item = void 0;
      while (!((item = iterator.next()).done)) {
        fn(item.value);
      }
    }
  }
  $__export("isListLikeIterable", isListLikeIterable);
  $__export("areIterablesEqual", areIterablesEqual);
  $__export("iterateListLike", iterateListLike);
  return {
    setters: [function($__m) {
      getSymbolIterator = $__m.getSymbolIterator;
      isJsObject = $__m.isJsObject;
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      _arrayFromMap = (function() {
        try {
          if ((new Map()).values().next) {
            return function createArrayFromMap(m, getValues) {
              return getValues ? Array.from(m.values()) : Array.from(m.keys());
            };
          }
        } catch (e) {}
        return function createArrayFromMapWithForeach(m, getValues) {
          var res = new Array(m.size),
              i = 0;
          m.forEach(function(v, k) {
            res[i] = getValues ? v : k;
            i++;
          });
          return res;
        };
      })();
      MapWrapper = (function() {
        function MapWrapper() {}
        MapWrapper.createFromStringMap = function(stringMap) {
          var result = new Map();
          for (var prop in stringMap) {
            result.set(prop, stringMap[prop]);
          }
          return result;
        };
        MapWrapper.keys = function(m) {
          return _arrayFromMap(m, false);
        };
        MapWrapper.values = function(m) {
          return _arrayFromMap(m, true);
        };
        return MapWrapper;
      }());
      $__export("MapWrapper", MapWrapper);
      StringMapWrapper = (function() {
        function StringMapWrapper() {}
        StringMapWrapper.merge = function(m1, m2) {
          var m = {};
          for (var _i = 0,
              _a = Object.keys(m1); _i < _a.length; _i++) {
            var k = _a[_i];
            m[k] = m1[k];
          }
          for (var _b = 0,
              _c = Object.keys(m2); _b < _c.length; _b++) {
            var k = _c[_b];
            m[k] = m2[k];
          }
          return m;
        };
        StringMapWrapper.equals = function(m1, m2) {
          var k1 = Object.keys(m1);
          var k2 = Object.keys(m2);
          if (k1.length != k2.length) {
            return false;
          }
          for (var i = 0; i < k1.length; i++) {
            var key = k1[i];
            if (m1[key] !== m2[key]) {
              return false;
            }
          }
          return true;
        };
        return StringMapWrapper;
      }());
      $__export("StringMapWrapper", StringMapWrapper);
      ListWrapper = (function() {
        function ListWrapper() {}
        ListWrapper.removeAll = function(list, items) {
          for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            list.splice(index, 1);
          }
        };
        ListWrapper.remove = function(list, el) {
          var index = list.indexOf(el);
          if (index > -1) {
            list.splice(index, 1);
            return true;
          }
          return false;
        };
        ListWrapper.equals = function(a, b) {
          if (a.length != b.length)
            return false;
          for (var i = 0; i < a.length; ++i) {
            if (a[i] !== b[i])
              return false;
          }
          return true;
        };
        ListWrapper.maximum = function(list, predicate) {
          if (list.length == 0) {
            return null;
          }
          var solution = null;
          var maxValue = -Infinity;
          for (var index = 0; index < list.length; index++) {
            var candidate = list[index];
            if (candidate == null) {
              continue;
            }
            var candidateValue = predicate(candidate);
            if (candidateValue > maxValue) {
              solution = candidate;
              maxValue = candidateValue;
            }
          }
          return solution;
        };
        ListWrapper.flatten = function(list) {
          var target = [];
          _flattenArray(list, target);
          return target;
        };
        return ListWrapper;
      }());
      $__export("ListWrapper", ListWrapper);
    }
  };
});

$__System.register("10b", ["112"], function($__export) {
  "use strict";
  var MapWrapper,
      Headers;
  return {
    setters: [function($__m) {
      MapWrapper = $__m.MapWrapper;
    }],
    execute: function() {
      Headers = (function() {
        function Headers(headers) {
          var _this = this;
          this._headers = new Map();
          this._normalizedNames = new Map();
          if (!headers) {
            return;
          }
          if (headers instanceof Headers) {
            headers._headers.forEach(function(values, name) {
              values.forEach(function(value) {
                return _this.append(name, value);
              });
            });
            return;
          }
          Object.keys(headers).forEach(function(name) {
            var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];
            _this.delete(name);
            values.forEach(function(value) {
              return _this.append(name, value);
            });
          });
        }
        Headers.fromResponseHeaderString = function(headersString) {
          var headers = new Headers();
          headersString.split('\n').forEach(function(line) {
            var index = line.indexOf(':');
            if (index > 0) {
              var name_1 = line.slice(0, index);
              var value = line.slice(index + 1).trim();
              headers.set(name_1, value);
            }
          });
          return headers;
        };
        Headers.prototype.append = function(name, value) {
          var values = this.getAll(name);
          if (values === null) {
            this.set(name, value);
          } else {
            values.push(value);
          }
        };
        Headers.prototype.delete = function(name) {
          var lcName = name.toLowerCase();
          this._normalizedNames.delete(lcName);
          this._headers.delete(lcName);
        };
        Headers.prototype.forEach = function(fn) {
          var _this = this;
          this._headers.forEach(function(values, lcName) {
            return fn(values, _this._normalizedNames.get(lcName), _this._headers);
          });
        };
        Headers.prototype.get = function(name) {
          var values = this.getAll(name);
          if (values === null) {
            return null;
          }
          return values.length > 0 ? values[0] : null;
        };
        Headers.prototype.has = function(name) {
          return this._headers.has(name.toLowerCase());
        };
        Headers.prototype.keys = function() {
          return MapWrapper.values(this._normalizedNames);
        };
        Headers.prototype.set = function(name, value) {
          if (Array.isArray(value)) {
            if (value.length) {
              this._headers.set(name.toLowerCase(), [value.join(',')]);
            }
          } else {
            this._headers.set(name.toLowerCase(), [value]);
          }
          this.mayBeSetNormalizedName(name);
        };
        Headers.prototype.values = function() {
          return MapWrapper.values(this._headers);
        };
        Headers.prototype.toJSON = function() {
          var _this = this;
          var serialized = {};
          this._headers.forEach(function(values, name) {
            var split = [];
            values.forEach(function(v) {
              return split.push.apply(split, v.split(','));
            });
            serialized[_this._normalizedNames.get(name)] = split;
          });
          return serialized;
        };
        Headers.prototype.getAll = function(name) {
          return this.has(name) ? this._headers.get(name.toLowerCase()) : null;
        };
        Headers.prototype.entries = function() {
          throw new Error('"entries" method is not implemented on Headers class');
        };
        Headers.prototype.mayBeSetNormalizedName = function(name) {
          var lcName = name.toLowerCase();
          if (!this._normalizedNames.has(lcName)) {
            this._normalizedNames.set(lcName, name);
          }
        };
        return Headers;
      }());
      $__export("Headers", Headers);
    }
  };
});

$__System.register("110", ["e1", "113", "e4", "10b", "10c", "10e"], function($__export) {
  "use strict";
  var __extends,
      isPresent,
      Body,
      ContentType,
      Headers,
      normalizeMethodName,
      URLSearchParams,
      Request,
      noop,
      w,
      FormData,
      Blob,
      ArrayBuffer;
  return {
    setters: [function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      Body = $__m.Body;
    }, function($__m) {
      ContentType = $__m.ContentType;
    }, function($__m) {
      Headers = $__m.Headers;
    }, function($__m) {
      normalizeMethodName = $__m.normalizeMethodName;
    }, function($__m) {
      URLSearchParams = $__m.URLSearchParams;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      Request = (function(_super) {
        __extends(Request, _super);
        function Request(requestOptions) {
          _super.call(this);
          var url = requestOptions.url;
          this.url = requestOptions.url;
          if (isPresent(requestOptions.search)) {
            var search = requestOptions.search.toString();
            if (search.length > 0) {
              var prefix = '?';
              if (this.url.indexOf('?') != -1) {
                prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';
              }
              this.url = url + prefix + search;
            }
          }
          this._body = requestOptions.body;
          this.method = normalizeMethodName(requestOptions.method);
          this.headers = new Headers(requestOptions.headers);
          this.contentType = this.detectContentType();
          this.withCredentials = requestOptions.withCredentials;
          this.responseType = requestOptions.responseType;
        }
        Request.prototype.detectContentType = function() {
          switch (this.headers.get('content-type')) {
            case 'application/json':
              return ContentType.JSON;
            case 'application/x-www-form-urlencoded':
              return ContentType.FORM;
            case 'multipart/form-data':
              return ContentType.FORM_DATA;
            case 'text/plain':
            case 'text/html':
              return ContentType.TEXT;
            case 'application/octet-stream':
              return ContentType.BLOB;
            default:
              return this.detectContentTypeFromBody();
          }
        };
        Request.prototype.detectContentTypeFromBody = function() {
          if (this._body == null) {
            return ContentType.NONE;
          } else if (this._body instanceof URLSearchParams) {
            return ContentType.FORM;
          } else if (this._body instanceof FormData) {
            return ContentType.FORM_DATA;
          } else if (this._body instanceof Blob) {
            return ContentType.BLOB;
          } else if (this._body instanceof ArrayBuffer) {
            return ContentType.ARRAY_BUFFER;
          } else if (this._body && $traceurRuntime.typeof(this._body) == 'object') {
            return ContentType.JSON;
          } else {
            return ContentType.TEXT;
          }
        };
        Request.prototype.getBody = function() {
          switch (this.contentType) {
            case ContentType.JSON:
              return this.text();
            case ContentType.FORM:
              return this.text();
            case ContentType.FORM_DATA:
              return this._body;
            case ContentType.TEXT:
              return this.text();
            case ContentType.BLOB:
              return this.blob();
            case ContentType.ARRAY_BUFFER:
              return this.arrayBuffer();
            default:
              return null;
          }
        };
        return Request;
      }(Body));
      $__export("Request", Request);
      noop = function() {};
      w = (typeof window === 'undefined' ? 'undefined' : $traceurRuntime.typeof(window)) == 'object' ? window : noop;
      FormData = w['FormData'] || noop;
      Blob = w['Blob'] || noop;
      ArrayBuffer = w['ArrayBuffer'] || noop;
    }
  };
});

$__System.register("e4", [], function($__export) {
  "use strict";
  var RequestMethod,
      ReadyState,
      ResponseType,
      ContentType,
      ResponseContentType;
  return {
    setters: [],
    execute: function() {
      $__export("RequestMethod", RequestMethod);
      (function(RequestMethod) {
        RequestMethod[RequestMethod["Get"] = 0] = "Get";
        RequestMethod[RequestMethod["Post"] = 1] = "Post";
        RequestMethod[RequestMethod["Put"] = 2] = "Put";
        RequestMethod[RequestMethod["Delete"] = 3] = "Delete";
        RequestMethod[RequestMethod["Options"] = 4] = "Options";
        RequestMethod[RequestMethod["Head"] = 5] = "Head";
        RequestMethod[RequestMethod["Patch"] = 6] = "Patch";
      })(RequestMethod || ($__export("RequestMethod", RequestMethod = {})));
      $__export("ReadyState", ReadyState);
      (function(ReadyState) {
        ReadyState[ReadyState["Unsent"] = 0] = "Unsent";
        ReadyState[ReadyState["Open"] = 1] = "Open";
        ReadyState[ReadyState["HeadersReceived"] = 2] = "HeadersReceived";
        ReadyState[ReadyState["Loading"] = 3] = "Loading";
        ReadyState[ReadyState["Done"] = 4] = "Done";
        ReadyState[ReadyState["Cancelled"] = 5] = "Cancelled";
      })(ReadyState || ($__export("ReadyState", ReadyState = {})));
      $__export("ResponseType", ResponseType);
      (function(ResponseType) {
        ResponseType[ResponseType["Basic"] = 0] = "Basic";
        ResponseType[ResponseType["Cors"] = 1] = "Cors";
        ResponseType[ResponseType["Default"] = 2] = "Default";
        ResponseType[ResponseType["Error"] = 3] = "Error";
        ResponseType[ResponseType["Opaque"] = 4] = "Opaque";
      })(ResponseType || ($__export("ResponseType", ResponseType = {})));
      $__export("ContentType", ContentType);
      (function(ContentType) {
        ContentType[ContentType["NONE"] = 0] = "NONE";
        ContentType[ContentType["JSON"] = 1] = "JSON";
        ContentType[ContentType["FORM"] = 2] = "FORM";
        ContentType[ContentType["FORM_DATA"] = 3] = "FORM_DATA";
        ContentType[ContentType["TEXT"] = 4] = "TEXT";
        ContentType[ContentType["BLOB"] = 5] = "BLOB";
        ContentType[ContentType["ARRAY_BUFFER"] = 6] = "ARRAY_BUFFER";
      })(ContentType || ($__export("ContentType", ContentType = {})));
      $__export("ResponseContentType", ResponseContentType);
      (function(ResponseContentType) {
        ResponseContentType[ResponseContentType["Text"] = 0] = "Text";
        ResponseContentType[ResponseContentType["Json"] = 1] = "Json";
        ResponseContentType[ResponseContentType["ArrayBuffer"] = 2] = "ArrayBuffer";
        ResponseContentType[ResponseContentType["Blob"] = 3] = "Blob";
      })(ResponseContentType || ($__export("ResponseContentType", ResponseContentType = {})));
    }
  };
});

$__System.register("e1", [], function($__export) {
  "use strict";
  var globalScope,
      _global,
      STRING_MAP_PROTO,
      NumberWrapper,
      _symbolIterator;
  function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
  }
  function getTypeNameForDebugging(type) {
    return type['name'] || (typeof type === 'undefined' ? 'undefined' : $traceurRuntime.typeof(type));
  }
  function isPresent(obj) {
    return obj != null;
  }
  function isBlank(obj) {
    return obj == null;
  }
  function isStrictStringMap(obj) {
    return (typeof obj === 'undefined' ? 'undefined' : $traceurRuntime.typeof(obj)) === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
  }
  function isDate(obj) {
    return obj instanceof Date && !isNaN(obj.valueOf());
  }
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token === undefined || token === null) {
      return '' + token;
    }
    if (token.overriddenName) {
      return token.overriddenName;
    }
    if (token.name) {
      return token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
  }
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || (typeof o === 'undefined' ? 'undefined' : $traceurRuntime.typeof(o)) === 'object');
  }
  function print(obj) {
    console.log(obj);
  }
  function warn(obj) {
    console.warn(obj);
  }
  function setValueOnPath(global, path, value) {
    var parts = path.split('.');
    var obj = global;
    while (parts.length > 1) {
      var name = parts.shift();
      if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
        obj = obj[name];
      } else {
        obj = obj[name] = {};
      }
    }
    if (obj === undefined || obj === null) {
      obj = {};
    }
    obj[parts.shift()] = value;
  }
  function getSymbolIterator() {
    if (!_symbolIterator) {
      if (globalScope.Symbol && Symbol.iterator) {
        _symbolIterator = Symbol.iterator;
      } else {
        var keys = Object.getOwnPropertyNames(Map.prototype);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
            _symbolIterator = key;
          }
        }
      }
    }
    return _symbolIterator;
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  function escapeRegExp(s) {
    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }
  $__export("scheduleMicroTask", scheduleMicroTask);
  $__export("getTypeNameForDebugging", getTypeNameForDebugging);
  $__export("isPresent", isPresent);
  $__export("isBlank", isBlank);
  $__export("isStrictStringMap", isStrictStringMap);
  $__export("isDate", isDate);
  $__export("stringify", stringify);
  $__export("looseIdentical", looseIdentical);
  $__export("isJsObject", isJsObject);
  $__export("print", print);
  $__export("warn", warn);
  $__export("setValueOnPath", setValueOnPath);
  $__export("getSymbolIterator", getSymbolIterator);
  $__export("isPrimitive", isPrimitive);
  $__export("escapeRegExp", escapeRegExp);
  return {
    setters: [],
    execute: function() {
      if (typeof window === 'undefined') {
        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
          globalScope = self;
        } else {
          globalScope = global;
        }
      } else {
        globalScope = window;
      }
      _global = globalScope;
      $__export("global", _global);
      _global.assert = function assert(condition) {};
      STRING_MAP_PROTO = Object.getPrototypeOf({});
      NumberWrapper = (function() {
        function NumberWrapper() {}
        NumberWrapper.parseIntAutoRadix = function(text) {
          var result = parseInt(text);
          if (isNaN(result)) {
            throw new Error('Invalid integer literal when parsing ' + text);
          }
          return result;
        };
        NumberWrapper.parseInt = function(text, radix) {
          if (radix == 10) {
            if (/^(\-|\+)?[0-9]+$/.test(text)) {
              return parseInt(text, radix);
            }
          } else if (radix == 16) {
            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
              return parseInt(text, radix);
            }
          } else {
            var result = parseInt(text, radix);
            if (!isNaN(result)) {
              return result;
            }
          }
          throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
        };
        NumberWrapper.isNumeric = function(value) {
          return !isNaN(value - parseFloat(value));
        };
        return NumberWrapper;
      }());
      $__export("NumberWrapper", NumberWrapper);
      _symbolIterator = null;
    }
  };
});

$__System.register("10c", ["e4", "e1"], function($__export) {
  "use strict";
  var RequestMethod,
      isSuccess;
  function normalizeMethodName(method) {
    if (typeof method !== 'string')
      return method;
    switch (method.toUpperCase()) {
      case 'GET':
        return RequestMethod.Get;
      case 'POST':
        return RequestMethod.Post;
      case 'PUT':
        return RequestMethod.Put;
      case 'DELETE':
        return RequestMethod.Delete;
      case 'OPTIONS':
        return RequestMethod.Options;
      case 'HEAD':
        return RequestMethod.Head;
      case 'PATCH':
        return RequestMethod.Patch;
    }
    throw new Error("Invalid request method. The method \"" + method + "\" is not supported.");
  }
  function getResponseURL(xhr) {
    if ('responseURL' in xhr) {
      return xhr.responseURL;
    }
    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
      return xhr.getResponseHeader('X-Request-URL');
    }
    return;
  }
  function stringToArrayBuffer(input) {
    var view = new Uint16Array(input.length);
    for (var i = 0,
        strLen = input.length; i < strLen; i++) {
      view[i] = input.charCodeAt(i);
    }
    return view.buffer;
  }
  $__export("normalizeMethodName", normalizeMethodName);
  $__export("getResponseURL", getResponseURL);
  $__export("stringToArrayBuffer", stringToArrayBuffer);
  return {
    setters: [function($__m) {
      RequestMethod = $__m.RequestMethod;
    }, function($__m) {
      $__export({isJsObject: $__m.isJsObject});
    }],
    execute: function() {
      isSuccess = function(status) {
        return (status >= 200 && status < 300);
      };
      $__export("isSuccess", isSuccess);
    }
  };
});

$__System.register("113", ["10c", "10e"], function($__export) {
  "use strict";
  var isJsObject,
      stringToArrayBuffer,
      URLSearchParams,
      Body;
  return {
    setters: [function($__m) {
      isJsObject = $__m.isJsObject;
      stringToArrayBuffer = $__m.stringToArrayBuffer;
    }, function($__m) {
      URLSearchParams = $__m.URLSearchParams;
    }],
    execute: function() {
      Body = (function() {
        function Body() {}
        Body.prototype.json = function() {
          if (typeof this._body === 'string') {
            return JSON.parse(this._body);
          }
          if (this._body instanceof ArrayBuffer) {
            return JSON.parse(this.text());
          }
          return this._body;
        };
        Body.prototype.text = function() {
          if (this._body instanceof URLSearchParams) {
            return this._body.toString();
          }
          if (this._body instanceof ArrayBuffer) {
            return String.fromCharCode.apply(null, new Uint16Array(this._body));
          }
          if (this._body === null) {
            return '';
          }
          if (isJsObject(this._body)) {
            return JSON.stringify(this._body, null, 2);
          }
          return this._body.toString();
        };
        Body.prototype.arrayBuffer = function() {
          if (this._body instanceof ArrayBuffer) {
            return this._body;
          }
          return stringToArrayBuffer(this.text());
        };
        Body.prototype.blob = function() {
          if (this._body instanceof Blob) {
            return this._body;
          }
          if (this._body instanceof ArrayBuffer) {
            return new Blob([this._body]);
          }
          throw new Error('The request body isn\'t either a blob or an array buffer');
        };
        return Body;
      }());
      $__export("Body", Body);
    }
  };
});

$__System.register("e6", ["113"], function($__export) {
  "use strict";
  var __extends,
      Body,
      Response;
  return {
    setters: [function($__m) {
      Body = $__m.Body;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      Response = (function(_super) {
        __extends(Response, _super);
        function Response(responseOptions) {
          _super.call(this);
          this._body = responseOptions.body;
          this.status = responseOptions.status;
          this.ok = (this.status >= 200 && this.status <= 299);
          this.statusText = responseOptions.statusText;
          this.headers = responseOptions.headers;
          this.type = responseOptions.type;
          this.url = responseOptions.url;
        }
        Response.prototype.toString = function() {
          return "Response with status: " + this.status + " " + this.statusText + " for URL: " + this.url;
        };
        return Response;
      }(Body));
      $__export("Response", Response);
    }
  };
});

$__System.register("10e", [], function($__export) {
  "use strict";
  var QueryEncoder,
      URLSearchParams;
  function paramParser(rawParams) {
    if (rawParams === void 0) {
      rawParams = '';
    }
    var map = new Map();
    if (rawParams.length > 0) {
      var params = rawParams.split('&');
      params.forEach(function(param) {
        var eqIdx = param.indexOf('=');
        var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)],
            key = _a[0],
            val = _a[1];
        var list = map.get(key) || [];
        list.push(val);
        map.set(key, list);
      });
    }
    return map;
  }
  function standardEncoding(v) {
    return encodeURIComponent(v).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/gi, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%2B/gi, '+').replace(/%3D/gi, '=').replace(/%3F/gi, '?').replace(/%2F/gi, '/');
  }
  return {
    setters: [],
    execute: function() {
      QueryEncoder = (function() {
        function QueryEncoder() {}
        QueryEncoder.prototype.encodeKey = function(k) {
          return standardEncoding(k);
        };
        QueryEncoder.prototype.encodeValue = function(v) {
          return standardEncoding(v);
        };
        return QueryEncoder;
      }());
      $__export("QueryEncoder", QueryEncoder);
      URLSearchParams = (function() {
        function URLSearchParams(rawParams, queryEncoder) {
          if (rawParams === void 0) {
            rawParams = '';
          }
          if (queryEncoder === void 0) {
            queryEncoder = new QueryEncoder();
          }
          this.rawParams = rawParams;
          this.queryEncoder = queryEncoder;
          this.paramsMap = paramParser(rawParams);
        }
        URLSearchParams.prototype.clone = function() {
          var clone = new URLSearchParams('', this.queryEncoder);
          clone.appendAll(this);
          return clone;
        };
        URLSearchParams.prototype.has = function(param) {
          return this.paramsMap.has(param);
        };
        URLSearchParams.prototype.get = function(param) {
          var storedParam = this.paramsMap.get(param);
          return Array.isArray(storedParam) ? storedParam[0] : null;
        };
        URLSearchParams.prototype.getAll = function(param) {
          return this.paramsMap.get(param) || [];
        };
        URLSearchParams.prototype.set = function(param, val) {
          if (val === void 0 || val === null) {
            this.delete(param);
            return;
          }
          var list = this.paramsMap.get(param) || [];
          list.length = 0;
          list.push(val);
          this.paramsMap.set(param, list);
        };
        URLSearchParams.prototype.setAll = function(searchParams) {
          var _this = this;
          searchParams.paramsMap.forEach(function(value, param) {
            var list = _this.paramsMap.get(param) || [];
            list.length = 0;
            list.push(value[0]);
            _this.paramsMap.set(param, list);
          });
        };
        URLSearchParams.prototype.append = function(param, val) {
          if (val === void 0 || val === null)
            return;
          var list = this.paramsMap.get(param) || [];
          list.push(val);
          this.paramsMap.set(param, list);
        };
        URLSearchParams.prototype.appendAll = function(searchParams) {
          var _this = this;
          searchParams.paramsMap.forEach(function(value, param) {
            var list = _this.paramsMap.get(param) || [];
            for (var i = 0; i < value.length; ++i) {
              list.push(value[i]);
            }
            _this.paramsMap.set(param, list);
          });
        };
        URLSearchParams.prototype.replaceAll = function(searchParams) {
          var _this = this;
          searchParams.paramsMap.forEach(function(value, param) {
            var list = _this.paramsMap.get(param) || [];
            list.length = 0;
            for (var i = 0; i < value.length; ++i) {
              list.push(value[i]);
            }
            _this.paramsMap.set(param, list);
          });
        };
        URLSearchParams.prototype.toString = function() {
          var _this = this;
          var paramsList = [];
          this.paramsMap.forEach(function(values, k) {
            values.forEach(function(v) {
              return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v));
            });
          });
          return paramsList.join('&');
        };
        URLSearchParams.prototype.delete = function(param) {
          this.paramsMap.delete(param);
        };
        return URLSearchParams;
      }());
      $__export("URLSearchParams", URLSearchParams);
    }
  };
});

$__System.register("114", ["109", "e2", "10a", "10d", "e3", "e4", "10b", "10f", "111", "e5", "110", "e6", "10e"], function($__export) {
  "use strict";
  return {
    setters: [function($__m) {
      $__export({BrowserXhr: $__m.BrowserXhr});
    }, function($__m) {
      $__export({
        JSONPBackend: $__m.JSONPBackend,
        JSONPConnection: $__m.JSONPConnection
      });
    }, function($__m) {
      $__export({
        CookieXSRFStrategy: $__m.CookieXSRFStrategy,
        XHRBackend: $__m.XHRBackend,
        XHRConnection: $__m.XHRConnection
      });
    }, function($__m) {
      $__export({
        BaseRequestOptions: $__m.BaseRequestOptions,
        RequestOptions: $__m.RequestOptions
      });
    }, function($__m) {
      $__export({
        BaseResponseOptions: $__m.BaseResponseOptions,
        ResponseOptions: $__m.ResponseOptions
      });
    }, function($__m) {
      $__export({
        ReadyState: $__m.ReadyState,
        RequestMethod: $__m.RequestMethod,
        ResponseContentType: $__m.ResponseContentType,
        ResponseType: $__m.ResponseType
      });
    }, function($__m) {
      $__export({Headers: $__m.Headers});
    }, function($__m) {
      $__export({
        Http: $__m.Http,
        Jsonp: $__m.Jsonp
      });
    }, function($__m) {
      $__export({
        HttpModule: $__m.HttpModule,
        JsonpModule: $__m.JsonpModule
      });
    }, function($__m) {
      $__export({
        Connection: $__m.Connection,
        ConnectionBackend: $__m.ConnectionBackend,
        XSRFStrategy: $__m.XSRFStrategy
      });
    }, function($__m) {
      $__export({Request: $__m.Request});
    }, function($__m) {
      $__export({Response: $__m.Response});
    }, function($__m) {
      $__export({
        QueryEncoder: $__m.QueryEncoder,
        URLSearchParams: $__m.URLSearchParams
      });
    }],
    execute: function() {}
  };
});

$__System.register("a4", ["114"], function($__export) {
  "use strict";
  var $__exportNames = {};
  return {
    setters: [function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }],
    execute: function() {}
  };
});

$__System.register("115", ["c", "116", "117", "118", "119"], function($__export) {
  "use strict";
  var __extends,
      Inject,
      Injectable,
      Optional,
      isPresent,
      Location,
      APP_BASE_HREF,
      LocationStrategy,
      PlatformLocation,
      HashLocationStrategy;
  return {
    setters: [function($__m) {
      Inject = $__m.Inject;
      Injectable = $__m.Injectable;
      Optional = $__m.Optional;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      Location = $__m.Location;
    }, function($__m) {
      APP_BASE_HREF = $__m.APP_BASE_HREF;
      LocationStrategy = $__m.LocationStrategy;
    }, function($__m) {
      PlatformLocation = $__m.PlatformLocation;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      HashLocationStrategy = (function(_super) {
        __extends(HashLocationStrategy, _super);
        function HashLocationStrategy(_platformLocation, _baseHref) {
          _super.call(this);
          this._platformLocation = _platformLocation;
          this._baseHref = '';
          if (isPresent(_baseHref)) {
            this._baseHref = _baseHref;
          }
        }
        HashLocationStrategy.prototype.onPopState = function(fn) {
          this._platformLocation.onPopState(fn);
          this._platformLocation.onHashChange(fn);
        };
        HashLocationStrategy.prototype.getBaseHref = function() {
          return this._baseHref;
        };
        HashLocationStrategy.prototype.path = function(includeHash) {
          if (includeHash === void 0) {
            includeHash = false;
          }
          var path = this._platformLocation.hash;
          if (!isPresent(path))
            path = '#';
          return path.length > 0 ? path.substring(1) : path;
        };
        HashLocationStrategy.prototype.prepareExternalUrl = function(internal) {
          var url = Location.joinWithSlash(this._baseHref, internal);
          return url.length > 0 ? ('#' + url) : url;
        };
        HashLocationStrategy.prototype.pushState = function(state, title, path, queryParams) {
          var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
          if (url.length == 0) {
            url = this._platformLocation.pathname;
          }
          this._platformLocation.pushState(state, title, url);
        };
        HashLocationStrategy.prototype.replaceState = function(state, title, path, queryParams) {
          var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
          if (url.length == 0) {
            url = this._platformLocation.pathname;
          }
          this._platformLocation.replaceState(state, title, url);
        };
        HashLocationStrategy.prototype.forward = function() {
          this._platformLocation.forward();
        };
        HashLocationStrategy.prototype.back = function() {
          this._platformLocation.back();
        };
        HashLocationStrategy.decorators = [{type: Injectable}];
        HashLocationStrategy.ctorParameters = [{type: PlatformLocation}, {
          type: undefined,
          decorators: [{type: Optional}, {
            type: Inject,
            args: [APP_BASE_HREF]
          }]
        }];
        return HashLocationStrategy;
      }(LocationStrategy));
      $__export("HashLocationStrategy", HashLocationStrategy);
    }
  };
});

$__System.register("119", [], function($__export) {
  "use strict";
  var PlatformLocation;
  return {
    setters: [],
    execute: function() {
      PlatformLocation = (function() {
        function PlatformLocation() {}
        Object.defineProperty(PlatformLocation.prototype, "pathname", {
          get: function() {
            return null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(PlatformLocation.prototype, "search", {
          get: function() {
            return null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(PlatformLocation.prototype, "hash", {
          get: function() {
            return null;
          },
          enumerable: true,
          configurable: true
        });
        return PlatformLocation;
      }());
      $__export("PlatformLocation", PlatformLocation);
    }
  };
});

$__System.register("11a", ["c", "116", "117", "118", "119"], function($__export) {
  "use strict";
  var __extends,
      Inject,
      Injectable,
      Optional,
      isBlank,
      Location,
      APP_BASE_HREF,
      LocationStrategy,
      PlatformLocation,
      PathLocationStrategy;
  return {
    setters: [function($__m) {
      Inject = $__m.Inject;
      Injectable = $__m.Injectable;
      Optional = $__m.Optional;
    }, function($__m) {
      isBlank = $__m.isBlank;
    }, function($__m) {
      Location = $__m.Location;
    }, function($__m) {
      APP_BASE_HREF = $__m.APP_BASE_HREF;
      LocationStrategy = $__m.LocationStrategy;
    }, function($__m) {
      PlatformLocation = $__m.PlatformLocation;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      PathLocationStrategy = (function(_super) {
        __extends(PathLocationStrategy, _super);
        function PathLocationStrategy(_platformLocation, href) {
          _super.call(this);
          this._platformLocation = _platformLocation;
          if (isBlank(href)) {
            href = this._platformLocation.getBaseHrefFromDOM();
          }
          if (isBlank(href)) {
            throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
          }
          this._baseHref = href;
        }
        PathLocationStrategy.prototype.onPopState = function(fn) {
          this._platformLocation.onPopState(fn);
          this._platformLocation.onHashChange(fn);
        };
        PathLocationStrategy.prototype.getBaseHref = function() {
          return this._baseHref;
        };
        PathLocationStrategy.prototype.prepareExternalUrl = function(internal) {
          return Location.joinWithSlash(this._baseHref, internal);
        };
        PathLocationStrategy.prototype.path = function(includeHash) {
          if (includeHash === void 0) {
            includeHash = false;
          }
          var pathname = this._platformLocation.pathname + Location.normalizeQueryParams(this._platformLocation.search);
          var hash = this._platformLocation.hash;
          return hash && includeHash ? "" + pathname + hash : pathname;
        };
        PathLocationStrategy.prototype.pushState = function(state, title, url, queryParams) {
          var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
          this._platformLocation.pushState(state, title, externalUrl);
        };
        PathLocationStrategy.prototype.replaceState = function(state, title, url, queryParams) {
          var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
          this._platformLocation.replaceState(state, title, externalUrl);
        };
        PathLocationStrategy.prototype.forward = function() {
          this._platformLocation.forward();
        };
        PathLocationStrategy.prototype.back = function() {
          this._platformLocation.back();
        };
        PathLocationStrategy.decorators = [{type: Injectable}];
        PathLocationStrategy.ctorParameters = [{type: PlatformLocation}, {
          type: undefined,
          decorators: [{type: Optional}, {
            type: Inject,
            args: [APP_BASE_HREF]
          }]
        }];
        return PathLocationStrategy;
      }(LocationStrategy));
      $__export("PathLocationStrategy", PathLocationStrategy);
    }
  };
});

$__System.register("118", ["c"], function($__export) {
  "use strict";
  var OpaqueToken,
      LocationStrategy,
      APP_BASE_HREF;
  return {
    setters: [function($__m) {
      OpaqueToken = $__m.OpaqueToken;
    }],
    execute: function() {
      LocationStrategy = (function() {
        function LocationStrategy() {}
        return LocationStrategy;
      }());
      $__export("LocationStrategy", LocationStrategy);
      APP_BASE_HREF = new OpaqueToken('appBaseHref');
      $__export("APP_BASE_HREF", APP_BASE_HREF);
    }
  };
});

$__System.register("117", ["c", "118"], function($__export) {
  "use strict";
  var EventEmitter,
      Injectable,
      LocationStrategy,
      Location;
  function _stripBaseHref(baseHref, url) {
    if (baseHref.length > 0 && url.startsWith(baseHref)) {
      return url.substring(baseHref.length);
    }
    return url;
  }
  function _stripIndexHtml(url) {
    if (/\/index.html$/g.test(url)) {
      return url.substring(0, url.length - 11);
    }
    return url;
  }
  return {
    setters: [function($__m) {
      EventEmitter = $__m.EventEmitter;
      Injectable = $__m.Injectable;
    }, function($__m) {
      LocationStrategy = $__m.LocationStrategy;
    }],
    execute: function() {
      Location = (function() {
        function Location(platformStrategy) {
          var _this = this;
          this._subject = new EventEmitter();
          this._platformStrategy = platformStrategy;
          var browserBaseHref = this._platformStrategy.getBaseHref();
          this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
          this._platformStrategy.onPopState(function(ev) {
            _this._subject.emit({
              'url': _this.path(true),
              'pop': true,
              'type': ev.type
            });
          });
        }
        Location.prototype.path = function(includeHash) {
          if (includeHash === void 0) {
            includeHash = false;
          }
          return this.normalize(this._platformStrategy.path(includeHash));
        };
        Location.prototype.isCurrentPathEqualTo = function(path, query) {
          if (query === void 0) {
            query = '';
          }
          return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
        };
        Location.prototype.normalize = function(url) {
          return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
        };
        Location.prototype.prepareExternalUrl = function(url) {
          if (url.length > 0 && !url.startsWith('/')) {
            url = '/' + url;
          }
          return this._platformStrategy.prepareExternalUrl(url);
        };
        Location.prototype.go = function(path, query) {
          if (query === void 0) {
            query = '';
          }
          this._platformStrategy.pushState(null, '', path, query);
        };
        Location.prototype.replaceState = function(path, query) {
          if (query === void 0) {
            query = '';
          }
          this._platformStrategy.replaceState(null, '', path, query);
        };
        Location.prototype.forward = function() {
          this._platformStrategy.forward();
        };
        Location.prototype.back = function() {
          this._platformStrategy.back();
        };
        Location.prototype.subscribe = function(onNext, onThrow, onReturn) {
          if (onThrow === void 0) {
            onThrow = null;
          }
          if (onReturn === void 0) {
            onReturn = null;
          }
          return this._subject.subscribe({
            next: onNext,
            error: onThrow,
            complete: onReturn
          });
        };
        Location.normalizeQueryParams = function(params) {
          return (params.length > 0 && params.substring(0, 1) != '?') ? ('?' + params) : params;
        };
        Location.joinWithSlash = function(start, end) {
          if (start.length == 0) {
            return end;
          }
          if (end.length == 0) {
            return start;
          }
          var slashes = 0;
          if (start.endsWith('/')) {
            slashes++;
          }
          if (end.startsWith('/')) {
            slashes++;
          }
          if (slashes == 2) {
            return start + end.substring(1);
          }
          if (slashes == 1) {
            return start + end;
          }
          return start + '/' + end;
        };
        Location.stripTrailingSlash = function(url) {
          if (/\/$/g.test(url)) {
            url = url.substring(0, url.length - 1);
          }
          return url;
        };
        Location.decorators = [{type: Injectable}];
        Location.ctorParameters = [{type: LocationStrategy}];
        return Location;
      }());
      $__export("Location", Location);
    }
  };
});

$__System.register("11b", ["119", "118", "115", "11a", "117"], function($__export) {
  "use strict";
  var $__exportNames = {};
  var $__exportNames = {};
  var $__exportNames = {};
  var $__exportNames = {};
  var $__exportNames = {};
  return {
    setters: [function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }],
    execute: function() {}
  };
});

$__System.register("11c", ["c", "11d", "11e", "11f"], function($__export) {
  "use strict";
  var NgModule,
      COMMON_DIRECTIVES,
      NgLocaleLocalization,
      NgLocalization,
      COMMON_PIPES,
      CommonModule;
  return {
    setters: [function($__m) {
      NgModule = $__m.NgModule;
    }, function($__m) {
      COMMON_DIRECTIVES = $__m.COMMON_DIRECTIVES;
    }, function($__m) {
      NgLocaleLocalization = $__m.NgLocaleLocalization;
      NgLocalization = $__m.NgLocalization;
    }, function($__m) {
      COMMON_PIPES = $__m.COMMON_PIPES;
    }],
    execute: function() {
      CommonModule = (function() {
        function CommonModule() {}
        CommonModule.decorators = [{
          type: NgModule,
          args: [{
            declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
            exports: [COMMON_DIRECTIVES, COMMON_PIPES],
            providers: [{
              provide: NgLocalization,
              useClass: NgLocaleLocalization
            }]
          }]
        }];
        CommonModule.ctorParameters = [];
        return CommonModule;
      }());
      $__export("CommonModule", CommonModule);
    }
  };
});

$__System.register("120", ["c", "121", "116"], function($__export) {
  "use strict";
  var Directive,
      ElementRef,
      Input,
      IterableDiffers,
      KeyValueDiffers,
      Renderer,
      isListLikeIterable,
      isPresent,
      NgClass;
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      ElementRef = $__m.ElementRef;
      Input = $__m.Input;
      IterableDiffers = $__m.IterableDiffers;
      KeyValueDiffers = $__m.KeyValueDiffers;
      Renderer = $__m.Renderer;
    }, function($__m) {
      isListLikeIterable = $__m.isListLikeIterable;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      NgClass = (function() {
        function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
          this._iterableDiffers = _iterableDiffers;
          this._keyValueDiffers = _keyValueDiffers;
          this._ngEl = _ngEl;
          this._renderer = _renderer;
          this._initialClasses = [];
        }
        Object.defineProperty(NgClass.prototype, "klass", {
          set: function(v) {
            this._applyInitialClasses(true);
            this._initialClasses = typeof v === 'string' ? v.split(/\s+/) : [];
            this._applyInitialClasses(false);
            this._applyClasses(this._rawClass, false);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgClass.prototype, "ngClass", {
          set: function(v) {
            this._cleanupClasses(this._rawClass);
            this._iterableDiffer = null;
            this._keyValueDiffer = null;
            this._rawClass = typeof v === 'string' ? v.split(/\s+/) : v;
            if (this._rawClass) {
              if (isListLikeIterable(this._rawClass)) {
                this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create(null);
              } else {
                this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create(null);
              }
            }
          },
          enumerable: true,
          configurable: true
        });
        NgClass.prototype.ngDoCheck = function() {
          if (this._iterableDiffer) {
            var changes = this._iterableDiffer.diff(this._rawClass);
            if (changes) {
              this._applyIterableChanges(changes);
            }
          } else if (this._keyValueDiffer) {
            var changes = this._keyValueDiffer.diff(this._rawClass);
            if (changes) {
              this._applyKeyValueChanges(changes);
            }
          }
        };
        NgClass.prototype._cleanupClasses = function(rawClassVal) {
          this._applyClasses(rawClassVal, true);
          this._applyInitialClasses(false);
        };
        NgClass.prototype._applyKeyValueChanges = function(changes) {
          var _this = this;
          changes.forEachAddedItem(function(record) {
            return _this._toggleClass(record.key, record.currentValue);
          });
          changes.forEachChangedItem(function(record) {
            return _this._toggleClass(record.key, record.currentValue);
          });
          changes.forEachRemovedItem(function(record) {
            if (record.previousValue) {
              _this._toggleClass(record.key, false);
            }
          });
        };
        NgClass.prototype._applyIterableChanges = function(changes) {
          var _this = this;
          changes.forEachAddedItem(function(record) {
            return _this._toggleClass(record.item, true);
          });
          changes.forEachRemovedItem(function(record) {
            return _this._toggleClass(record.item, false);
          });
        };
        NgClass.prototype._applyInitialClasses = function(isCleanup) {
          var _this = this;
          this._initialClasses.forEach(function(klass) {
            return _this._toggleClass(klass, !isCleanup);
          });
        };
        NgClass.prototype._applyClasses = function(rawClassVal, isCleanup) {
          var _this = this;
          if (rawClassVal) {
            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
              rawClassVal.forEach(function(klass) {
                return _this._toggleClass(klass, !isCleanup);
              });
            } else {
              Object.keys(rawClassVal).forEach(function(klass) {
                if (isPresent(rawClassVal[klass]))
                  _this._toggleClass(klass, !isCleanup);
              });
            }
          }
        };
        NgClass.prototype._toggleClass = function(klass, enabled) {
          var _this = this;
          klass = klass.trim();
          if (klass) {
            klass.split(/\s+/g).forEach(function(klass) {
              _this._renderer.setElementClass(_this._ngEl.nativeElement, klass, enabled);
            });
          }
        };
        NgClass.decorators = [{
          type: Directive,
          args: [{selector: '[ngClass]'}]
        }];
        NgClass.ctorParameters = [{type: IterableDiffers}, {type: KeyValueDiffers}, {type: ElementRef}, {type: Renderer}];
        NgClass.propDecorators = {
          'klass': [{
            type: Input,
            args: ['class']
          }],
          'ngClass': [{type: Input}]
        };
        return NgClass;
      }());
      $__export("NgClass", NgClass);
    }
  };
});

$__System.register("122", ["c", "116"], function($__export) {
  "use strict";
  var ChangeDetectorRef,
      Directive,
      Input,
      IterableDiffers,
      TemplateRef,
      ViewContainerRef,
      getTypeNameForDebugging,
      NgForRow,
      NgFor,
      RecordViewTuple;
  return {
    setters: [function($__m) {
      ChangeDetectorRef = $__m.ChangeDetectorRef;
      Directive = $__m.Directive;
      Input = $__m.Input;
      IterableDiffers = $__m.IterableDiffers;
      TemplateRef = $__m.TemplateRef;
      ViewContainerRef = $__m.ViewContainerRef;
    }, function($__m) {
      getTypeNameForDebugging = $__m.getTypeNameForDebugging;
    }],
    execute: function() {
      NgForRow = (function() {
        function NgForRow($implicit, index, count) {
          this.$implicit = $implicit;
          this.index = index;
          this.count = count;
        }
        Object.defineProperty(NgForRow.prototype, "first", {
          get: function() {
            return this.index === 0;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgForRow.prototype, "last", {
          get: function() {
            return this.index === this.count - 1;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgForRow.prototype, "even", {
          get: function() {
            return this.index % 2 === 0;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgForRow.prototype, "odd", {
          get: function() {
            return !this.even;
          },
          enumerable: true,
          configurable: true
        });
        return NgForRow;
      }());
      $__export("NgForRow", NgForRow);
      NgFor = (function() {
        function NgFor(_viewContainer, _template, _differs, _cdr) {
          this._viewContainer = _viewContainer;
          this._template = _template;
          this._differs = _differs;
          this._cdr = _cdr;
          this._differ = null;
        }
        Object.defineProperty(NgFor.prototype, "ngForTemplate", {
          set: function(value) {
            if (value) {
              this._template = value;
            }
          },
          enumerable: true,
          configurable: true
        });
        NgFor.prototype.ngOnChanges = function(changes) {
          if ('ngForOf' in changes) {
            var value = changes['ngForOf'].currentValue;
            if (!this._differ && value) {
              try {
                this._differ = this._differs.find(value).create(this._cdr, this.ngForTrackBy);
              } catch (e) {
                throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
              }
            }
          }
        };
        NgFor.prototype.ngDoCheck = function() {
          if (this._differ) {
            var changes = this._differ.diff(this.ngForOf);
            if (changes)
              this._applyChanges(changes);
          }
        };
        NgFor.prototype._applyChanges = function(changes) {
          var _this = this;
          var insertTuples = [];
          changes.forEachOperation(function(item, adjustedPreviousIndex, currentIndex) {
            if (item.previousIndex == null) {
              var view = _this._viewContainer.createEmbeddedView(_this._template, new NgForRow(null, null, null), currentIndex);
              var tuple = new RecordViewTuple(item, view);
              insertTuples.push(tuple);
            } else if (currentIndex == null) {
              _this._viewContainer.remove(adjustedPreviousIndex);
            } else {
              var view = _this._viewContainer.get(adjustedPreviousIndex);
              _this._viewContainer.move(view, currentIndex);
              var tuple = new RecordViewTuple(item, view);
              insertTuples.push(tuple);
            }
          });
          for (var i = 0; i < insertTuples.length; i++) {
            this._perViewChange(insertTuples[i].view, insertTuples[i].record);
          }
          for (var i = 0,
              ilen = this._viewContainer.length; i < ilen; i++) {
            var viewRef = this._viewContainer.get(i);
            viewRef.context.index = i;
            viewRef.context.count = ilen;
          }
          changes.forEachIdentityChange(function(record) {
            var viewRef = _this._viewContainer.get(record.currentIndex);
            viewRef.context.$implicit = record.item;
          });
        };
        NgFor.prototype._perViewChange = function(view, record) {
          view.context.$implicit = record.item;
        };
        NgFor.decorators = [{
          type: Directive,
          args: [{selector: '[ngFor][ngForOf]'}]
        }];
        NgFor.ctorParameters = [{type: ViewContainerRef}, {type: TemplateRef}, {type: IterableDiffers}, {type: ChangeDetectorRef}];
        NgFor.propDecorators = {
          'ngForOf': [{type: Input}],
          'ngForTrackBy': [{type: Input}],
          'ngForTemplate': [{type: Input}]
        };
        return NgFor;
      }());
      $__export("NgFor", NgFor);
      RecordViewTuple = (function() {
        function RecordViewTuple(record, view) {
          this.record = record;
          this.view = view;
        }
        return RecordViewTuple;
      }());
    }
  };
});

$__System.register("123", ["c"], function($__export) {
  "use strict";
  var Directive,
      Input,
      TemplateRef,
      ViewContainerRef,
      NgIf;
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      Input = $__m.Input;
      TemplateRef = $__m.TemplateRef;
      ViewContainerRef = $__m.ViewContainerRef;
    }],
    execute: function() {
      NgIf = (function() {
        function NgIf(_viewContainer, _template) {
          this._viewContainer = _viewContainer;
          this._template = _template;
          this._hasView = false;
        }
        Object.defineProperty(NgIf.prototype, "ngIf", {
          set: function(condition) {
            if (condition && !this._hasView) {
              this._hasView = true;
              this._viewContainer.createEmbeddedView(this._template);
            } else if (!condition && this._hasView) {
              this._hasView = false;
              this._viewContainer.clear();
            }
          },
          enumerable: true,
          configurable: true
        });
        NgIf.decorators = [{
          type: Directive,
          args: [{selector: '[ngIf]'}]
        }];
        NgIf.ctorParameters = [{type: ViewContainerRef}, {type: TemplateRef}];
        NgIf.propDecorators = {'ngIf': [{type: Input}]};
        return NgIf;
      }());
      $__export("NgIf", NgIf);
    }
  };
});

$__System.register("124", ["c", "11e", "125"], function($__export) {
  "use strict";
  var Attribute,
      Directive,
      Host,
      Input,
      TemplateRef,
      ViewContainerRef,
      NgLocalization,
      getPluralCategory,
      SwitchView,
      NgPlural,
      NgPluralCase;
  return {
    setters: [function($__m) {
      Attribute = $__m.Attribute;
      Directive = $__m.Directive;
      Host = $__m.Host;
      Input = $__m.Input;
      TemplateRef = $__m.TemplateRef;
      ViewContainerRef = $__m.ViewContainerRef;
    }, function($__m) {
      NgLocalization = $__m.NgLocalization;
      getPluralCategory = $__m.getPluralCategory;
    }, function($__m) {
      SwitchView = $__m.SwitchView;
    }],
    execute: function() {
      NgPlural = (function() {
        function NgPlural(_localization) {
          this._localization = _localization;
          this._caseViews = {};
        }
        Object.defineProperty(NgPlural.prototype, "ngPlural", {
          set: function(value) {
            this._switchValue = value;
            this._updateView();
          },
          enumerable: true,
          configurable: true
        });
        NgPlural.prototype.addCase = function(value, switchView) {
          this._caseViews[value] = switchView;
        };
        NgPlural.prototype._updateView = function() {
          this._clearViews();
          var cases = Object.keys(this._caseViews);
          var key = getPluralCategory(this._switchValue, cases, this._localization);
          this._activateView(this._caseViews[key]);
        };
        NgPlural.prototype._clearViews = function() {
          if (this._activeView)
            this._activeView.destroy();
        };
        NgPlural.prototype._activateView = function(view) {
          if (view) {
            this._activeView = view;
            this._activeView.create();
          }
        };
        NgPlural.decorators = [{
          type: Directive,
          args: [{selector: '[ngPlural]'}]
        }];
        NgPlural.ctorParameters = [{type: NgLocalization}];
        NgPlural.propDecorators = {'ngPlural': [{type: Input}]};
        return NgPlural;
      }());
      $__export("NgPlural", NgPlural);
      NgPluralCase = (function() {
        function NgPluralCase(value, template, viewContainer, ngPlural) {
          this.value = value;
          ngPlural.addCase(value, new SwitchView(viewContainer, template));
        }
        NgPluralCase.decorators = [{
          type: Directive,
          args: [{selector: '[ngPluralCase]'}]
        }];
        NgPluralCase.ctorParameters = [{
          type: undefined,
          decorators: [{
            type: Attribute,
            args: ['ngPluralCase']
          }]
        }, {type: TemplateRef}, {type: ViewContainerRef}, {
          type: NgPlural,
          decorators: [{type: Host}]
        }];
        return NgPluralCase;
      }());
      $__export("NgPluralCase", NgPluralCase);
    }
  };
});

$__System.register("126", ["c"], function($__export) {
  "use strict";
  var Directive,
      ElementRef,
      Input,
      KeyValueDiffers,
      Renderer,
      NgStyle;
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      ElementRef = $__m.ElementRef;
      Input = $__m.Input;
      KeyValueDiffers = $__m.KeyValueDiffers;
      Renderer = $__m.Renderer;
    }],
    execute: function() {
      NgStyle = (function() {
        function NgStyle(_differs, _ngEl, _renderer) {
          this._differs = _differs;
          this._ngEl = _ngEl;
          this._renderer = _renderer;
        }
        Object.defineProperty(NgStyle.prototype, "ngStyle", {
          set: function(v) {
            this._ngStyle = v;
            if (!this._differ && v) {
              this._differ = this._differs.find(v).create(null);
            }
          },
          enumerable: true,
          configurable: true
        });
        NgStyle.prototype.ngDoCheck = function() {
          if (this._differ) {
            var changes = this._differ.diff(this._ngStyle);
            if (changes) {
              this._applyChanges(changes);
            }
          }
        };
        NgStyle.prototype._applyChanges = function(changes) {
          var _this = this;
          changes.forEachRemovedItem(function(record) {
            return _this._setStyle(record.key, null);
          });
          changes.forEachAddedItem(function(record) {
            return _this._setStyle(record.key, record.currentValue);
          });
          changes.forEachChangedItem(function(record) {
            return _this._setStyle(record.key, record.currentValue);
          });
        };
        NgStyle.prototype._setStyle = function(nameAndUnit, value) {
          var _a = nameAndUnit.split('.'),
              name = _a[0],
              unit = _a[1];
          value = value && unit ? "" + value + unit : value;
          this._renderer.setElementStyle(this._ngEl.nativeElement, name, value);
        };
        NgStyle.decorators = [{
          type: Directive,
          args: [{selector: '[ngStyle]'}]
        }];
        NgStyle.ctorParameters = [{type: KeyValueDiffers}, {type: ElementRef}, {type: Renderer}];
        NgStyle.propDecorators = {'ngStyle': [{type: Input}]};
        return NgStyle;
      }());
      $__export("NgStyle", NgStyle);
    }
  };
});

$__System.register("121", ["116"], function($__export) {
  "use strict";
  var getSymbolIterator,
      isJsObject,
      isPresent,
      _arrayFromMap,
      MapWrapper,
      StringMapWrapper,
      ListWrapper;
  function _flattenArray(source, target) {
    if (isPresent(source)) {
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        if (Array.isArray(item)) {
          _flattenArray(item, target);
        } else {
          target.push(item);
        }
      }
    }
    return target;
  }
  function isListLikeIterable(obj) {
    if (!isJsObject(obj))
      return false;
    return Array.isArray(obj) || (!(obj instanceof Map) && getSymbolIterator() in obj);
  }
  function areIterablesEqual(a, b, comparator) {
    var iterator1 = a[getSymbolIterator()]();
    var iterator2 = b[getSymbolIterator()]();
    while (true) {
      var item1 = iterator1.next();
      var item2 = iterator2.next();
      if (item1.done && item2.done)
        return true;
      if (item1.done || item2.done)
        return false;
      if (!comparator(item1.value, item2.value))
        return false;
    }
  }
  function iterateListLike(obj, fn) {
    if (Array.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        fn(obj[i]);
      }
    } else {
      var iterator = obj[getSymbolIterator()]();
      var item = void 0;
      while (!((item = iterator.next()).done)) {
        fn(item.value);
      }
    }
  }
  $__export("isListLikeIterable", isListLikeIterable);
  $__export("areIterablesEqual", areIterablesEqual);
  $__export("iterateListLike", iterateListLike);
  return {
    setters: [function($__m) {
      getSymbolIterator = $__m.getSymbolIterator;
      isJsObject = $__m.isJsObject;
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      _arrayFromMap = (function() {
        try {
          if ((new Map()).values().next) {
            return function createArrayFromMap(m, getValues) {
              return getValues ? Array.from(m.values()) : Array.from(m.keys());
            };
          }
        } catch (e) {}
        return function createArrayFromMapWithForeach(m, getValues) {
          var res = new Array(m.size),
              i = 0;
          m.forEach(function(v, k) {
            res[i] = getValues ? v : k;
            i++;
          });
          return res;
        };
      })();
      MapWrapper = (function() {
        function MapWrapper() {}
        MapWrapper.createFromStringMap = function(stringMap) {
          var result = new Map();
          for (var prop in stringMap) {
            result.set(prop, stringMap[prop]);
          }
          return result;
        };
        MapWrapper.keys = function(m) {
          return _arrayFromMap(m, false);
        };
        MapWrapper.values = function(m) {
          return _arrayFromMap(m, true);
        };
        return MapWrapper;
      }());
      $__export("MapWrapper", MapWrapper);
      StringMapWrapper = (function() {
        function StringMapWrapper() {}
        StringMapWrapper.merge = function(m1, m2) {
          var m = {};
          for (var _i = 0,
              _a = Object.keys(m1); _i < _a.length; _i++) {
            var k = _a[_i];
            m[k] = m1[k];
          }
          for (var _b = 0,
              _c = Object.keys(m2); _b < _c.length; _b++) {
            var k = _c[_b];
            m[k] = m2[k];
          }
          return m;
        };
        StringMapWrapper.equals = function(m1, m2) {
          var k1 = Object.keys(m1);
          var k2 = Object.keys(m2);
          if (k1.length != k2.length) {
            return false;
          }
          for (var i = 0; i < k1.length; i++) {
            var key = k1[i];
            if (m1[key] !== m2[key]) {
              return false;
            }
          }
          return true;
        };
        return StringMapWrapper;
      }());
      $__export("StringMapWrapper", StringMapWrapper);
      ListWrapper = (function() {
        function ListWrapper() {}
        ListWrapper.removeAll = function(list, items) {
          for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            list.splice(index, 1);
          }
        };
        ListWrapper.remove = function(list, el) {
          var index = list.indexOf(el);
          if (index > -1) {
            list.splice(index, 1);
            return true;
          }
          return false;
        };
        ListWrapper.equals = function(a, b) {
          if (a.length != b.length)
            return false;
          for (var i = 0; i < a.length; ++i) {
            if (a[i] !== b[i])
              return false;
          }
          return true;
        };
        ListWrapper.maximum = function(list, predicate) {
          if (list.length == 0) {
            return null;
          }
          var solution = null;
          var maxValue = -Infinity;
          for (var index = 0; index < list.length; index++) {
            var candidate = list[index];
            if (candidate == null) {
              continue;
            }
            var candidateValue = predicate(candidate);
            if (candidateValue > maxValue) {
              solution = candidate;
              maxValue = candidateValue;
            }
          }
          return solution;
        };
        ListWrapper.flatten = function(list) {
          var target = [];
          _flattenArray(list, target);
          return target;
        };
        return ListWrapper;
      }());
      $__export("ListWrapper", ListWrapper);
    }
  };
});

$__System.register("125", ["c", "121"], function($__export) {
  "use strict";
  var Directive,
      Host,
      Input,
      TemplateRef,
      ViewContainerRef,
      ListWrapper,
      _CASE_DEFAULT,
      SwitchView,
      NgSwitch,
      NgSwitchCase,
      NgSwitchDefault;
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      Host = $__m.Host;
      Input = $__m.Input;
      TemplateRef = $__m.TemplateRef;
      ViewContainerRef = $__m.ViewContainerRef;
    }, function($__m) {
      ListWrapper = $__m.ListWrapper;
    }],
    execute: function() {
      _CASE_DEFAULT = {};
      SwitchView = (function() {
        function SwitchView(_viewContainerRef, _templateRef) {
          this._viewContainerRef = _viewContainerRef;
          this._templateRef = _templateRef;
        }
        SwitchView.prototype.create = function() {
          this._viewContainerRef.createEmbeddedView(this._templateRef);
        };
        SwitchView.prototype.destroy = function() {
          this._viewContainerRef.clear();
        };
        return SwitchView;
      }());
      $__export("SwitchView", SwitchView);
      NgSwitch = (function() {
        function NgSwitch() {
          this._useDefault = false;
          this._valueViews = new Map();
          this._activeViews = [];
        }
        Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
          set: function(value) {
            var views = this._valueViews.get(value);
            if (views) {
              this._useDefault = false;
            } else {
              if (this._useDefault) {
                return;
              }
              this._useDefault = true;
              views = this._valueViews.get(_CASE_DEFAULT);
            }
            this._emptyAllActiveViews();
            this._activateViews(views);
            this._switchValue = value;
          },
          enumerable: true,
          configurable: true
        });
        NgSwitch.prototype._onCaseValueChanged = function(oldCase, newCase, view) {
          this._deregisterView(oldCase, view);
          this._registerView(newCase, view);
          if (oldCase === this._switchValue) {
            view.destroy();
            ListWrapper.remove(this._activeViews, view);
          } else if (newCase === this._switchValue) {
            if (this._useDefault) {
              this._useDefault = false;
              this._emptyAllActiveViews();
            }
            view.create();
            this._activeViews.push(view);
          }
          if (this._activeViews.length === 0 && !this._useDefault) {
            this._useDefault = true;
            this._activateViews(this._valueViews.get(_CASE_DEFAULT));
          }
        };
        NgSwitch.prototype._emptyAllActiveViews = function() {
          var activeContainers = this._activeViews;
          for (var i = 0; i < activeContainers.length; i++) {
            activeContainers[i].destroy();
          }
          this._activeViews = [];
        };
        NgSwitch.prototype._activateViews = function(views) {
          if (views) {
            for (var i = 0; i < views.length; i++) {
              views[i].create();
            }
            this._activeViews = views;
          }
        };
        NgSwitch.prototype._registerView = function(value, view) {
          var views = this._valueViews.get(value);
          if (!views) {
            views = [];
            this._valueViews.set(value, views);
          }
          views.push(view);
        };
        NgSwitch.prototype._deregisterView = function(value, view) {
          if (value === _CASE_DEFAULT)
            return;
          var views = this._valueViews.get(value);
          if (views.length == 1) {
            this._valueViews.delete(value);
          } else {
            ListWrapper.remove(views, view);
          }
        };
        NgSwitch.decorators = [{
          type: Directive,
          args: [{selector: '[ngSwitch]'}]
        }];
        NgSwitch.ctorParameters = [];
        NgSwitch.propDecorators = {'ngSwitch': [{type: Input}]};
        return NgSwitch;
      }());
      $__export("NgSwitch", NgSwitch);
      NgSwitchCase = (function() {
        function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
          this._value = _CASE_DEFAULT;
          this._switch = ngSwitch;
          this._view = new SwitchView(viewContainer, templateRef);
        }
        Object.defineProperty(NgSwitchCase.prototype, "ngSwitchCase", {
          set: function(value) {
            this._switch._onCaseValueChanged(this._value, value, this._view);
            this._value = value;
          },
          enumerable: true,
          configurable: true
        });
        NgSwitchCase.decorators = [{
          type: Directive,
          args: [{selector: '[ngSwitchCase]'}]
        }];
        NgSwitchCase.ctorParameters = [{type: ViewContainerRef}, {type: TemplateRef}, {
          type: NgSwitch,
          decorators: [{type: Host}]
        }];
        NgSwitchCase.propDecorators = {'ngSwitchCase': [{type: Input}]};
        return NgSwitchCase;
      }());
      $__export("NgSwitchCase", NgSwitchCase);
      NgSwitchDefault = (function() {
        function NgSwitchDefault(viewContainer, templateRef, sswitch) {
          sswitch._registerView(_CASE_DEFAULT, new SwitchView(viewContainer, templateRef));
        }
        NgSwitchDefault.decorators = [{
          type: Directive,
          args: [{selector: '[ngSwitchDefault]'}]
        }];
        NgSwitchDefault.ctorParameters = [{type: ViewContainerRef}, {type: TemplateRef}, {
          type: NgSwitch,
          decorators: [{type: Host}]
        }];
        return NgSwitchDefault;
      }());
      $__export("NgSwitchDefault", NgSwitchDefault);
    }
  };
});

$__System.register("127", ["c"], function($__export) {
  "use strict";
  var Directive,
      Input,
      ViewContainerRef,
      NgTemplateOutlet;
  return {
    setters: [function($__m) {
      Directive = $__m.Directive;
      Input = $__m.Input;
      ViewContainerRef = $__m.ViewContainerRef;
    }],
    execute: function() {
      NgTemplateOutlet = (function() {
        function NgTemplateOutlet(_viewContainerRef) {
          this._viewContainerRef = _viewContainerRef;
        }
        Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
          set: function(context) {
            this._context = context;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgTemplateOutlet.prototype, "ngTemplateOutlet", {
          set: function(templateRef) {
            this._templateRef = templateRef;
          },
          enumerable: true,
          configurable: true
        });
        NgTemplateOutlet.prototype.ngOnChanges = function(changes) {
          if (this._viewRef) {
            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
          }
          if (this._templateRef) {
            this._viewRef = this._viewContainerRef.createEmbeddedView(this._templateRef, this._context);
          }
        };
        NgTemplateOutlet.decorators = [{
          type: Directive,
          args: [{selector: '[ngTemplateOutlet]'}]
        }];
        NgTemplateOutlet.ctorParameters = [{type: ViewContainerRef}];
        NgTemplateOutlet.propDecorators = {
          'ngOutletContext': [{type: Input}],
          'ngTemplateOutlet': [{type: Input}]
        };
        return NgTemplateOutlet;
      }());
      $__export("NgTemplateOutlet", NgTemplateOutlet);
    }
  };
});

$__System.register("11d", ["120", "122", "123", "124", "126", "125", "127"], function($__export) {
  "use strict";
  var NgClass,
      NgFor,
      NgIf,
      NgPlural,
      NgPluralCase,
      NgStyle,
      NgSwitch,
      NgSwitchCase,
      NgSwitchDefault,
      NgTemplateOutlet,
      COMMON_DIRECTIVES;
  return {
    setters: [function($__m) {
      NgClass = $__m.NgClass;
    }, function($__m) {
      NgFor = $__m.NgFor;
    }, function($__m) {
      NgIf = $__m.NgIf;
    }, function($__m) {
      NgPlural = $__m.NgPlural;
      NgPluralCase = $__m.NgPluralCase;
    }, function($__m) {
      NgStyle = $__m.NgStyle;
    }, function($__m) {
      NgSwitch = $__m.NgSwitch;
      NgSwitchCase = $__m.NgSwitchCase;
      NgSwitchDefault = $__m.NgSwitchDefault;
    }, function($__m) {
      NgTemplateOutlet = $__m.NgTemplateOutlet;
    }],
    execute: function() {
      $__export("NgClass", NgClass), $__export("NgFor", NgFor), $__export("NgIf", NgIf), $__export("NgPlural", NgPlural), $__export("NgPluralCase", NgPluralCase), $__export("NgStyle", NgStyle), $__export("NgSwitch", NgSwitch), $__export("NgSwitchCase", NgSwitchCase), $__export("NgSwitchDefault", NgSwitchDefault), $__export("NgTemplateOutlet", NgTemplateOutlet);
      COMMON_DIRECTIVES = [NgClass, NgFor, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase];
      $__export("COMMON_DIRECTIVES", COMMON_DIRECTIVES);
    }
  };
});

$__System.register("128", ["c"], function($__export) {
  "use strict";
  var r,
      isPromise;
  return {
    setters: [function($__m) {
      r = $__m.__core_private__;
    }],
    execute: function() {
      isPromise = r.isPromise;
      $__export("isPromise", isPromise);
    }
  };
});

$__System.register("129", ["c", "128", "12a"], function($__export) {
  "use strict";
  var ChangeDetectorRef,
      Pipe,
      WrappedValue,
      isPromise,
      InvalidPipeArgumentError,
      ObservableStrategy,
      PromiseStrategy,
      _promiseStrategy,
      _observableStrategy,
      AsyncPipe;
  return {
    setters: [function($__m) {
      ChangeDetectorRef = $__m.ChangeDetectorRef;
      Pipe = $__m.Pipe;
      WrappedValue = $__m.WrappedValue;
    }, function($__m) {
      isPromise = $__m.isPromise;
    }, function($__m) {
      InvalidPipeArgumentError = $__m.InvalidPipeArgumentError;
    }],
    execute: function() {
      ObservableStrategy = (function() {
        function ObservableStrategy() {}
        ObservableStrategy.prototype.createSubscription = function(async, updateLatestValue) {
          return async.subscribe({
            next: updateLatestValue,
            error: function(e) {
              throw e;
            }
          });
        };
        ObservableStrategy.prototype.dispose = function(subscription) {
          subscription.unsubscribe();
        };
        ObservableStrategy.prototype.onDestroy = function(subscription) {
          subscription.unsubscribe();
        };
        return ObservableStrategy;
      }());
      PromiseStrategy = (function() {
        function PromiseStrategy() {}
        PromiseStrategy.prototype.createSubscription = function(async, updateLatestValue) {
          return async.then(updateLatestValue, function(e) {
            throw e;
          });
        };
        PromiseStrategy.prototype.dispose = function(subscription) {};
        PromiseStrategy.prototype.onDestroy = function(subscription) {};
        return PromiseStrategy;
      }());
      _promiseStrategy = new PromiseStrategy();
      _observableStrategy = new ObservableStrategy();
      AsyncPipe = (function() {
        function AsyncPipe(_ref) {
          this._ref = _ref;
          this._latestValue = null;
          this._latestReturnedValue = null;
          this._subscription = null;
          this._obj = null;
          this._strategy = null;
        }
        AsyncPipe.prototype.ngOnDestroy = function() {
          if (this._subscription) {
            this._dispose();
          }
        };
        AsyncPipe.prototype.transform = function(obj) {
          if (!this._obj) {
            if (obj) {
              this._subscribe(obj);
            }
            this._latestReturnedValue = this._latestValue;
            return this._latestValue;
          }
          if (obj !== this._obj) {
            this._dispose();
            return this.transform(obj);
          }
          if (this._latestValue === this._latestReturnedValue) {
            return this._latestReturnedValue;
          }
          this._latestReturnedValue = this._latestValue;
          return WrappedValue.wrap(this._latestValue);
        };
        AsyncPipe.prototype._subscribe = function(obj) {
          var _this = this;
          this._obj = obj;
          this._strategy = this._selectStrategy(obj);
          this._subscription = this._strategy.createSubscription(obj, function(value) {
            return _this._updateLatestValue(obj, value);
          });
        };
        AsyncPipe.prototype._selectStrategy = function(obj) {
          if (isPromise(obj)) {
            return _promiseStrategy;
          }
          if (obj.subscribe) {
            return _observableStrategy;
          }
          throw new InvalidPipeArgumentError(AsyncPipe, obj);
        };
        AsyncPipe.prototype._dispose = function() {
          this._strategy.dispose(this._subscription);
          this._latestValue = null;
          this._latestReturnedValue = null;
          this._subscription = null;
          this._obj = null;
        };
        AsyncPipe.prototype._updateLatestValue = function(async, value) {
          if (async === this._obj) {
            this._latestValue = value;
            this._ref.markForCheck();
          }
        };
        AsyncPipe.decorators = [{
          type: Pipe,
          args: [{
            name: 'async',
            pure: false
          }]
        }];
        AsyncPipe.ctorParameters = [{type: ChangeDetectorRef}];
        return AsyncPipe;
      }());
      $__export("AsyncPipe", AsyncPipe);
    }
  };
});

$__System.register("12b", ["c", "12c", "116", "12a"], function($__export) {
  "use strict";
  var Inject,
      LOCALE_ID,
      Pipe,
      DateFormatter,
      NumberWrapper,
      isBlank,
      isDate,
      InvalidPipeArgumentError,
      DatePipe;
  return {
    setters: [function($__m) {
      Inject = $__m.Inject;
      LOCALE_ID = $__m.LOCALE_ID;
      Pipe = $__m.Pipe;
    }, function($__m) {
      DateFormatter = $__m.DateFormatter;
    }, function($__m) {
      NumberWrapper = $__m.NumberWrapper;
      isBlank = $__m.isBlank;
      isDate = $__m.isDate;
    }, function($__m) {
      InvalidPipeArgumentError = $__m.InvalidPipeArgumentError;
    }],
    execute: function() {
      DatePipe = (function() {
        function DatePipe(_locale) {
          this._locale = _locale;
        }
        DatePipe.prototype.transform = function(value, pattern) {
          if (pattern === void 0) {
            pattern = 'mediumDate';
          }
          if (isBlank(value))
            return null;
          if (!this.supports(value)) {
            throw new InvalidPipeArgumentError(DatePipe, value);
          }
          if (NumberWrapper.isNumeric(value)) {
            value = parseFloat(value);
          }
          return DateFormatter.format(new Date(value), this._locale, DatePipe._ALIASES[pattern] || pattern);
        };
        DatePipe.prototype.supports = function(obj) {
          return isDate(obj) || NumberWrapper.isNumeric(obj) || (typeof obj === 'string' && isDate(new Date(obj)));
        };
        DatePipe._ALIASES = {
          'medium': 'yMMMdjms',
          'short': 'yMdjm',
          'fullDate': 'yMMMMEEEEd',
          'longDate': 'yMMMMd',
          'mediumDate': 'yMMMd',
          'shortDate': 'yMd',
          'mediumTime': 'jms',
          'shortTime': 'jm'
        };
        DatePipe.decorators = [{
          type: Pipe,
          args: [{
            name: 'date',
            pure: true
          }]
        }];
        DatePipe.ctorParameters = [{
          type: undefined,
          decorators: [{
            type: Inject,
            args: [LOCALE_ID]
          }]
        }];
        return DatePipe;
      }());
      $__export("DatePipe", DatePipe);
    }
  };
});

$__System.register("11e", ["c"], function($__export) {
  "use strict";
  var __extends,
      Inject,
      Injectable,
      LOCALE_ID,
      NgLocalization,
      NgLocaleLocalization,
      Plural;
  function getPluralCategory(value, cases, ngLocalization) {
    var nbCase = "=" + value;
    return cases.indexOf(nbCase) > -1 ? nbCase : ngLocalization.getPluralCategory(value);
  }
  function getPluralCase(locale, nLike) {
    if (typeof nLike === 'string') {
      nLike = parseInt(nLike, 10);
    }
    var n = nLike;
    var nDecimal = n.toString().replace(/^[^.]*\.?/, '');
    var i = Math.floor(Math.abs(n));
    var v = nDecimal.length;
    var f = parseInt(nDecimal, 10);
    var t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
    var lang = locale.split('-')[0].toLowerCase();
    switch (lang) {
      case 'af':
      case 'asa':
      case 'az':
      case 'bem':
      case 'bez':
      case 'bg':
      case 'brx':
      case 'ce':
      case 'cgg':
      case 'chr':
      case 'ckb':
      case 'ee':
      case 'el':
      case 'eo':
      case 'es':
      case 'eu':
      case 'fo':
      case 'fur':
      case 'gsw':
      case 'ha':
      case 'haw':
      case 'hu':
      case 'jgo':
      case 'jmc':
      case 'ka':
      case 'kk':
      case 'kkj':
      case 'kl':
      case 'ks':
      case 'ksb':
      case 'ky':
      case 'lb':
      case 'lg':
      case 'mas':
      case 'mgo':
      case 'ml':
      case 'mn':
      case 'nb':
      case 'nd':
      case 'ne':
      case 'nn':
      case 'nnh':
      case 'nyn':
      case 'om':
      case 'or':
      case 'os':
      case 'ps':
      case 'rm':
      case 'rof':
      case 'rwk':
      case 'saq':
      case 'seh':
      case 'sn':
      case 'so':
      case 'sq':
      case 'ta':
      case 'te':
      case 'teo':
      case 'tk':
      case 'tr':
      case 'ug':
      case 'uz':
      case 'vo':
      case 'vun':
      case 'wae':
      case 'xog':
        if (n === 1)
          return Plural.One;
        return Plural.Other;
      case 'agq':
      case 'bas':
      case 'cu':
      case 'dav':
      case 'dje':
      case 'dua':
      case 'dyo':
      case 'ebu':
      case 'ewo':
      case 'guz':
      case 'kam':
      case 'khq':
      case 'ki':
      case 'kln':
      case 'kok':
      case 'ksf':
      case 'lrc':
      case 'lu':
      case 'luo':
      case 'luy':
      case 'mer':
      case 'mfe':
      case 'mgh':
      case 'mua':
      case 'mzn':
      case 'nmg':
      case 'nus':
      case 'qu':
      case 'rn':
      case 'rw':
      case 'sbp':
      case 'twq':
      case 'vai':
      case 'yav':
      case 'yue':
      case 'zgh':
      case 'ak':
      case 'ln':
      case 'mg':
      case 'pa':
      case 'ti':
        if (n === Math.floor(n) && n >= 0 && n <= 1)
          return Plural.One;
        return Plural.Other;
      case 'am':
      case 'as':
      case 'bn':
      case 'fa':
      case 'gu':
      case 'hi':
      case 'kn':
      case 'mr':
      case 'zu':
        if (i === 0 || n === 1)
          return Plural.One;
        return Plural.Other;
      case 'ar':
        if (n === 0)
          return Plural.Zero;
        if (n === 1)
          return Plural.One;
        if (n === 2)
          return Plural.Two;
        if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)
          return Plural.Few;
        if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)
          return Plural.Many;
        return Plural.Other;
      case 'ast':
      case 'ca':
      case 'de':
      case 'en':
      case 'et':
      case 'fi':
      case 'fy':
      case 'gl':
      case 'it':
      case 'nl':
      case 'sv':
      case 'sw':
      case 'ur':
      case 'yi':
        if (i === 1 && v === 0)
          return Plural.One;
        return Plural.Other;
      case 'be':
        if (n % 10 === 1 && !(n % 100 === 11))
          return Plural.One;
        if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 && !(n % 100 >= 12 && n % 100 <= 14))
          return Plural.Few;
        if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)
          return Plural.Many;
        return Plural.Other;
      case 'br':
        if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))
          return Plural.One;
        if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))
          return Plural.Two;
        if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) && !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 || n % 100 >= 90 && n % 100 <= 99))
          return Plural.Few;
        if (!(n === 0) && n % 1e6 === 0)
          return Plural.Many;
        return Plural.Other;
      case 'bs':
      case 'hr':
      case 'sr':
        if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))
          return Plural.One;
        if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14) || f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 && !(f % 100 >= 12 && f % 100 <= 14))
          return Plural.Few;
        return Plural.Other;
      case 'cs':
      case 'sk':
        if (i === 1 && v === 0)
          return Plural.One;
        if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)
          return Plural.Few;
        if (!(v === 0))
          return Plural.Many;
        return Plural.Other;
      case 'cy':
        if (n === 0)
          return Plural.Zero;
        if (n === 1)
          return Plural.One;
        if (n === 2)
          return Plural.Two;
        if (n === 3)
          return Plural.Few;
        if (n === 6)
          return Plural.Many;
        return Plural.Other;
      case 'da':
        if (n === 1 || !(t === 0) && (i === 0 || i === 1))
          return Plural.One;
        return Plural.Other;
      case 'dsb':
      case 'hsb':
        if (v === 0 && i % 100 === 1 || f % 100 === 1)
          return Plural.One;
        if (v === 0 && i % 100 === 2 || f % 100 === 2)
          return Plural.Two;
        if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)
          return Plural.Few;
        return Plural.Other;
      case 'ff':
      case 'fr':
      case 'hy':
      case 'kab':
        if (i === 0 || i === 1)
          return Plural.One;
        return Plural.Other;
      case 'fil':
        if (v === 0 && (i === 1 || i === 2 || i === 3) || v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) || !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))
          return Plural.One;
        return Plural.Other;
      case 'ga':
        if (n === 1)
          return Plural.One;
        if (n === 2)
          return Plural.Two;
        if (n === Math.floor(n) && n >= 3 && n <= 6)
          return Plural.Few;
        if (n === Math.floor(n) && n >= 7 && n <= 10)
          return Plural.Many;
        return Plural.Other;
      case 'gd':
        if (n === 1 || n === 11)
          return Plural.One;
        if (n === 2 || n === 12)
          return Plural.Two;
        if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))
          return Plural.Few;
        return Plural.Other;
      case 'gv':
        if (v === 0 && i % 10 === 1)
          return Plural.One;
        if (v === 0 && i % 10 === 2)
          return Plural.Two;
        if (v === 0 && (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))
          return Plural.Few;
        if (!(v === 0))
          return Plural.Many;
        return Plural.Other;
      case 'he':
        if (i === 1 && v === 0)
          return Plural.One;
        if (i === 2 && v === 0)
          return Plural.Two;
        if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)
          return Plural.Many;
        return Plural.Other;
      case 'is':
        if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))
          return Plural.One;
        return Plural.Other;
      case 'ksh':
        if (n === 0)
          return Plural.Zero;
        if (n === 1)
          return Plural.One;
        return Plural.Other;
      case 'kw':
      case 'naq':
      case 'se':
      case 'smn':
        if (n === 1)
          return Plural.One;
        if (n === 2)
          return Plural.Two;
        return Plural.Other;
      case 'lag':
        if (n === 0)
          return Plural.Zero;
        if ((i === 0 || i === 1) && !(n === 0))
          return Plural.One;
        return Plural.Other;
      case 'lt':
        if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))
          return Plural.One;
        if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 && !(n % 100 >= 11 && n % 100 <= 19))
          return Plural.Few;
        if (!(f === 0))
          return Plural.Many;
        return Plural.Other;
      case 'lv':
      case 'prg':
        if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 || v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)
          return Plural.Zero;
        if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) || !(v === 2) && f % 10 === 1)
          return Plural.One;
        return Plural.Other;
      case 'mk':
        if (v === 0 && i % 10 === 1 || f % 10 === 1)
          return Plural.One;
        return Plural.Other;
      case 'mt':
        if (n === 1)
          return Plural.One;
        if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)
          return Plural.Few;
        if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)
          return Plural.Many;
        return Plural.Other;
      case 'pl':
        if (i === 1 && v === 0)
          return Plural.One;
        if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14))
          return Plural.Few;
        if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)
          return Plural.Many;
        return Plural.Other;
      case 'pt':
        if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))
          return Plural.One;
        return Plural.Other;
      case 'ro':
        if (i === 1 && v === 0)
          return Plural.One;
        if (!(v === 0) || n === 0 || !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)
          return Plural.Few;
        return Plural.Other;
      case 'ru':
      case 'uk':
        if (v === 0 && i % 10 === 1 && !(i % 100 === 11))
          return Plural.One;
        if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14))
          return Plural.Few;
        if (v === 0 && i % 10 === 0 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)
          return Plural.Many;
        return Plural.Other;
      case 'shi':
        if (i === 0 || n === 1)
          return Plural.One;
        if (n === Math.floor(n) && n >= 2 && n <= 10)
          return Plural.Few;
        return Plural.Other;
      case 'si':
        if (n === 0 || n === 1 || i === 0 && f === 1)
          return Plural.One;
        return Plural.Other;
      case 'sl':
        if (v === 0 && i % 100 === 1)
          return Plural.One;
        if (v === 0 && i % 100 === 2)
          return Plural.Two;
        if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))
          return Plural.Few;
        return Plural.Other;
      case 'tzm':
        if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)
          return Plural.One;
        return Plural.Other;
      default:
        return Plural.Other;
    }
  }
  $__export("getPluralCategory", getPluralCategory);
  $__export("getPluralCase", getPluralCase);
  return {
    setters: [function($__m) {
      Inject = $__m.Inject;
      Injectable = $__m.Injectable;
      LOCALE_ID = $__m.LOCALE_ID;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      NgLocalization = (function() {
        function NgLocalization() {}
        return NgLocalization;
      }());
      $__export("NgLocalization", NgLocalization);
      NgLocaleLocalization = (function(_super) {
        __extends(NgLocaleLocalization, _super);
        function NgLocaleLocalization(_locale) {
          _super.call(this);
          this._locale = _locale;
        }
        NgLocaleLocalization.prototype.getPluralCategory = function(value) {
          var plural = getPluralCase(this._locale, value);
          switch (plural) {
            case Plural.Zero:
              return 'zero';
            case Plural.One:
              return 'one';
            case Plural.Two:
              return 'two';
            case Plural.Few:
              return 'few';
            case Plural.Many:
              return 'many';
            default:
              return 'other';
          }
        };
        NgLocaleLocalization.decorators = [{type: Injectable}];
        NgLocaleLocalization.ctorParameters = [{
          type: undefined,
          decorators: [{
            type: Inject,
            args: [LOCALE_ID]
          }]
        }];
        return NgLocaleLocalization;
      }(NgLocalization));
      $__export("NgLocaleLocalization", NgLocaleLocalization);
      $__export("Plural", Plural);
      (function(Plural) {
        Plural[Plural["Zero"] = 0] = "Zero";
        Plural[Plural["One"] = 1] = "One";
        Plural[Plural["Two"] = 2] = "Two";
        Plural[Plural["Few"] = 3] = "Few";
        Plural[Plural["Many"] = 4] = "Many";
        Plural[Plural["Other"] = 5] = "Other";
      })(Plural || ($__export("Plural", Plural = {})));
    }
  };
});

$__System.register("12d", ["c", "116", "11e", "12a"], function($__export) {
  "use strict";
  var Pipe,
      isBlank,
      NgLocalization,
      getPluralCategory,
      InvalidPipeArgumentError,
      _INTERPOLATION_REGEXP,
      I18nPluralPipe;
  return {
    setters: [function($__m) {
      Pipe = $__m.Pipe;
    }, function($__m) {
      isBlank = $__m.isBlank;
    }, function($__m) {
      NgLocalization = $__m.NgLocalization;
      getPluralCategory = $__m.getPluralCategory;
    }, function($__m) {
      InvalidPipeArgumentError = $__m.InvalidPipeArgumentError;
    }],
    execute: function() {
      _INTERPOLATION_REGEXP = /#/g;
      I18nPluralPipe = (function() {
        function I18nPluralPipe(_localization) {
          this._localization = _localization;
        }
        I18nPluralPipe.prototype.transform = function(value, pluralMap) {
          if (isBlank(value))
            return '';
          if ((typeof pluralMap === 'undefined' ? 'undefined' : $traceurRuntime.typeof(pluralMap)) !== 'object' || pluralMap === null) {
            throw new InvalidPipeArgumentError(I18nPluralPipe, pluralMap);
          }
          var key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
          return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
        };
        I18nPluralPipe.decorators = [{
          type: Pipe,
          args: [{
            name: 'i18nPlural',
            pure: true
          }]
        }];
        I18nPluralPipe.ctorParameters = [{type: NgLocalization}];
        return I18nPluralPipe;
      }());
      $__export("I18nPluralPipe", I18nPluralPipe);
    }
  };
});

$__System.register("12e", ["c", "116", "12a"], function($__export) {
  "use strict";
  var Pipe,
      isBlank,
      InvalidPipeArgumentError,
      I18nSelectPipe;
  return {
    setters: [function($__m) {
      Pipe = $__m.Pipe;
    }, function($__m) {
      isBlank = $__m.isBlank;
    }, function($__m) {
      InvalidPipeArgumentError = $__m.InvalidPipeArgumentError;
    }],
    execute: function() {
      I18nSelectPipe = (function() {
        function I18nSelectPipe() {}
        I18nSelectPipe.prototype.transform = function(value, mapping) {
          if (isBlank(value))
            return '';
          if ((typeof mapping === 'undefined' ? 'undefined' : $traceurRuntime.typeof(mapping)) !== 'object' || mapping === null) {
            throw new InvalidPipeArgumentError(I18nSelectPipe, mapping);
          }
          return mapping[value] || '';
        };
        I18nSelectPipe.decorators = [{
          type: Pipe,
          args: [{
            name: 'i18nSelect',
            pure: true
          }]
        }];
        I18nSelectPipe.ctorParameters = [];
        return I18nSelectPipe;
      }());
      $__export("I18nSelectPipe", I18nSelectPipe);
    }
  };
});

$__System.register("12f", ["c"], function($__export) {
  "use strict";
  var Pipe,
      JsonPipe;
  return {
    setters: [function($__m) {
      Pipe = $__m.Pipe;
    }],
    execute: function() {
      JsonPipe = (function() {
        function JsonPipe() {}
        JsonPipe.prototype.transform = function(value) {
          return JSON.stringify(value, null, 2);
        };
        JsonPipe.decorators = [{
          type: Pipe,
          args: [{
            name: 'json',
            pure: false
          }]
        }];
        JsonPipe.ctorParameters = [];
        return JsonPipe;
      }());
      $__export("JsonPipe", JsonPipe);
    }
  };
});

$__System.register("130", ["c", "116", "12a"], function($__export) {
  "use strict";
  var Pipe,
      isBlank,
      InvalidPipeArgumentError,
      LowerCasePipe;
  return {
    setters: [function($__m) {
      Pipe = $__m.Pipe;
    }, function($__m) {
      isBlank = $__m.isBlank;
    }, function($__m) {
      InvalidPipeArgumentError = $__m.InvalidPipeArgumentError;
    }],
    execute: function() {
      LowerCasePipe = (function() {
        function LowerCasePipe() {}
        LowerCasePipe.prototype.transform = function(value) {
          if (isBlank(value))
            return value;
          if (typeof value !== 'string') {
            throw new InvalidPipeArgumentError(LowerCasePipe, value);
          }
          return value.toLowerCase();
        };
        LowerCasePipe.decorators = [{
          type: Pipe,
          args: [{name: 'lowercase'}]
        }];
        LowerCasePipe.ctorParameters = [];
        return LowerCasePipe;
      }());
      $__export("LowerCasePipe", LowerCasePipe);
    }
  };
});

$__System.register("12c", [], function($__export) {
  "use strict";
  var NumberFormatStyle,
      NumberFormatter,
      DATE_FORMATS_SPLIT,
      PATTERN_ALIASES,
      DATE_FORMATS,
      datePartsFormatterCache,
      slice,
      DateFormatter;
  function digitModifier(inner) {
    return function(date, locale) {
      var result = inner(date, locale);
      return result.length == 1 ? '0' + result : result;
    };
  }
  function hourClockExtracter(inner) {
    return function(date, locale) {
      var result = inner(date, locale);
      return result.split(' ')[1];
    };
  }
  function hourExtracter(inner) {
    return function(date, locale) {
      var result = inner(date, locale);
      return result.split(' ')[0];
    };
  }
  function intlDateFormat(date, locale, options) {
    return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
  }
  function timeZoneGetter(timezone) {
    var options = {
      hour: '2-digit',
      hour12: false,
      timeZoneName: timezone
    };
    return function(date, locale) {
      var result = intlDateFormat(date, locale, options);
      return result ? result.substring(3) : '';
    };
  }
  function hour12Modify(options, value) {
    options.hour12 = value;
    return options;
  }
  function digitCondition(prop, len) {
    var result = {};
    result[prop] = len == 2 ? '2-digit' : 'numeric';
    return result;
  }
  function nameCondition(prop, len) {
    var result = {};
    result[prop] = len < 4 ? 'short' : 'long';
    return result;
  }
  function combine(options) {
    var result = {};
    options.forEach(function(option) {
      Object.assign(result, option);
    });
    return result;
  }
  function datePartGetterFactory(ret) {
    return function(date, locale) {
      return intlDateFormat(date, locale, ret);
    };
  }
  function dateFormatter(format, date, locale) {
    var text = '';
    var match;
    var fn;
    var parts = [];
    if (PATTERN_ALIASES[format]) {
      return PATTERN_ALIASES[format](date, locale);
    }
    if (datePartsFormatterCache.has(format)) {
      parts = datePartsFormatterCache.get(format);
    } else {
      var matches = DATE_FORMATS_SPLIT.exec(format);
      while (format) {
        match = DATE_FORMATS_SPLIT.exec(format);
        if (match) {
          parts = concat(parts, match, 1);
          format = parts.pop();
        } else {
          parts.push(format);
          format = null;
        }
      }
      datePartsFormatterCache.set(format, parts);
    }
    parts.forEach(function(part) {
      fn = DATE_FORMATS[part];
      text += fn ? fn(date, locale) : part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
    });
    return text;
  }
  function concat(array1, array2, index) {
    return array1.concat(slice.call(array2, index));
  }
  return {
    setters: [],
    execute: function() {
      $__export("NumberFormatStyle", NumberFormatStyle);
      (function(NumberFormatStyle) {
        NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
        NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
        NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
      })(NumberFormatStyle || ($__export("NumberFormatStyle", NumberFormatStyle = {})));
      NumberFormatter = (function() {
        function NumberFormatter() {}
        NumberFormatter.format = function(num, locale, style, _a) {
          var _b = _a === void 0 ? {} : _a,
              minimumIntegerDigits = _b.minimumIntegerDigits,
              minimumFractionDigits = _b.minimumFractionDigits,
              maximumFractionDigits = _b.maximumFractionDigits,
              currency = _b.currency,
              _c = _b.currencyAsSymbol,
              currencyAsSymbol = _c === void 0 ? false : _c;
          var options = {
            minimumIntegerDigits: minimumIntegerDigits,
            minimumFractionDigits: minimumFractionDigits,
            maximumFractionDigits: maximumFractionDigits,
            style: NumberFormatStyle[style].toLowerCase()
          };
          if (style == NumberFormatStyle.Currency) {
            options.currency = currency;
            options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
          }
          return new Intl.NumberFormat(locale, options).format(num);
        };
        return NumberFormatter;
      }());
      $__export("NumberFormatter", NumberFormatter);
      DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
      PATTERN_ALIASES = {
        yMMMdjms: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1), digitCondition('hour', 1), digitCondition('minute', 1), digitCondition('second', 1)])),
        yMdjm: datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1), digitCondition('hour', 1), digitCondition('minute', 1)])),
        yMMMMEEEEd: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4), digitCondition('day', 1)])),
        yMMMMd: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
        yMMMd: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
        yMd: datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
        jms: datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
        jm: datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
      };
      DATE_FORMATS = {
        yyyy: datePartGetterFactory(digitCondition('year', 4)),
        yy: datePartGetterFactory(digitCondition('year', 2)),
        y: datePartGetterFactory(digitCondition('year', 1)),
        MMMM: datePartGetterFactory(nameCondition('month', 4)),
        MMM: datePartGetterFactory(nameCondition('month', 3)),
        MM: datePartGetterFactory(digitCondition('month', 2)),
        M: datePartGetterFactory(digitCondition('month', 1)),
        LLLL: datePartGetterFactory(nameCondition('month', 4)),
        dd: datePartGetterFactory(digitCondition('day', 2)),
        d: datePartGetterFactory(digitCondition('day', 1)),
        HH: digitModifier(hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
        H: hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
        hh: digitModifier(hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
        h: hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
        jj: datePartGetterFactory(digitCondition('hour', 2)),
        j: datePartGetterFactory(digitCondition('hour', 1)),
        mm: digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
        m: datePartGetterFactory(digitCondition('minute', 1)),
        ss: digitModifier(datePartGetterFactory(digitCondition('second', 2))),
        s: datePartGetterFactory(digitCondition('second', 1)),
        sss: datePartGetterFactory(digitCondition('second', 3)),
        EEEE: datePartGetterFactory(nameCondition('weekday', 4)),
        EEE: datePartGetterFactory(nameCondition('weekday', 3)),
        EE: datePartGetterFactory(nameCondition('weekday', 2)),
        E: datePartGetterFactory(nameCondition('weekday', 1)),
        a: hourClockExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
        Z: timeZoneGetter('short'),
        z: timeZoneGetter('long'),
        ww: datePartGetterFactory({}),
        w: datePartGetterFactory({}),
        G: datePartGetterFactory(nameCondition('era', 1)),
        GG: datePartGetterFactory(nameCondition('era', 2)),
        GGG: datePartGetterFactory(nameCondition('era', 3)),
        GGGG: datePartGetterFactory(nameCondition('era', 4))
      };
      datePartsFormatterCache = new Map();
      slice = [].slice;
      DateFormatter = (function() {
        function DateFormatter() {}
        DateFormatter.format = function(date, locale, pattern) {
          return dateFormatter(pattern, date, locale);
        };
        return DateFormatter;
      }());
      $__export("DateFormatter", DateFormatter);
    }
  };
});

$__System.register("131", ["c", "12c", "116", "12a"], function($__export) {
  "use strict";
  var Inject,
      LOCALE_ID,
      Pipe,
      NumberFormatStyle,
      NumberFormatter,
      NumberWrapper,
      isBlank,
      isPresent,
      InvalidPipeArgumentError,
      _NUMBER_FORMAT_REGEXP,
      DecimalPipe,
      PercentPipe,
      CurrencyPipe;
  function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
    if (currency === void 0) {
      currency = null;
    }
    if (currencyAsSymbol === void 0) {
      currencyAsSymbol = false;
    }
    if (isBlank(value))
      return null;
    value = typeof value === 'string' && NumberWrapper.isNumeric(value) ? +value : value;
    if (typeof value !== 'number') {
      throw new InvalidPipeArgumentError(pipe, value);
    }
    var minInt;
    var minFraction;
    var maxFraction;
    if (style !== NumberFormatStyle.Currency) {
      minInt = 1;
      minFraction = 0;
      maxFraction = 3;
    }
    if (digits) {
      var parts = digits.match(_NUMBER_FORMAT_REGEXP);
      if (parts === null) {
        throw new Error(digits + " is not a valid digit info for number pipes");
      }
      if (isPresent(parts[1])) {
        minInt = NumberWrapper.parseIntAutoRadix(parts[1]);
      }
      if (isPresent(parts[3])) {
        minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);
      }
      if (isPresent(parts[5])) {
        maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);
      }
    }
    return NumberFormatter.format(value, locale, style, {
      minimumIntegerDigits: minInt,
      minimumFractionDigits: minFraction,
      maximumFractionDigits: maxFraction,
      currency: currency,
      currencyAsSymbol: currencyAsSymbol
    });
  }
  return {
    setters: [function($__m) {
      Inject = $__m.Inject;
      LOCALE_ID = $__m.LOCALE_ID;
      Pipe = $__m.Pipe;
    }, function($__m) {
      NumberFormatStyle = $__m.NumberFormatStyle;
      NumberFormatter = $__m.NumberFormatter;
    }, function($__m) {
      NumberWrapper = $__m.NumberWrapper;
      isBlank = $__m.isBlank;
      isPresent = $__m.isPresent;
    }, function($__m) {
      InvalidPipeArgumentError = $__m.InvalidPipeArgumentError;
    }],
    execute: function() {
      _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
      DecimalPipe = (function() {
        function DecimalPipe(_locale) {
          this._locale = _locale;
        }
        DecimalPipe.prototype.transform = function(value, digits) {
          if (digits === void 0) {
            digits = null;
          }
          return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
        };
        DecimalPipe.decorators = [{
          type: Pipe,
          args: [{name: 'number'}]
        }];
        DecimalPipe.ctorParameters = [{
          type: undefined,
          decorators: [{
            type: Inject,
            args: [LOCALE_ID]
          }]
        }];
        return DecimalPipe;
      }());
      $__export("DecimalPipe", DecimalPipe);
      PercentPipe = (function() {
        function PercentPipe(_locale) {
          this._locale = _locale;
        }
        PercentPipe.prototype.transform = function(value, digits) {
          if (digits === void 0) {
            digits = null;
          }
          return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
        };
        PercentPipe.decorators = [{
          type: Pipe,
          args: [{name: 'percent'}]
        }];
        PercentPipe.ctorParameters = [{
          type: undefined,
          decorators: [{
            type: Inject,
            args: [LOCALE_ID]
          }]
        }];
        return PercentPipe;
      }());
      $__export("PercentPipe", PercentPipe);
      CurrencyPipe = (function() {
        function CurrencyPipe(_locale) {
          this._locale = _locale;
        }
        CurrencyPipe.prototype.transform = function(value, currencyCode, symbolDisplay, digits) {
          if (currencyCode === void 0) {
            currencyCode = 'USD';
          }
          if (symbolDisplay === void 0) {
            symbolDisplay = false;
          }
          if (digits === void 0) {
            digits = null;
          }
          return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
        };
        CurrencyPipe.decorators = [{
          type: Pipe,
          args: [{name: 'currency'}]
        }];
        CurrencyPipe.ctorParameters = [{
          type: undefined,
          decorators: [{
            type: Inject,
            args: [LOCALE_ID]
          }]
        }];
        return CurrencyPipe;
      }());
      $__export("CurrencyPipe", CurrencyPipe);
    }
  };
});

$__System.register("132", ["c", "116", "12a"], function($__export) {
  "use strict";
  var Pipe,
      isBlank,
      InvalidPipeArgumentError,
      SlicePipe;
  return {
    setters: [function($__m) {
      Pipe = $__m.Pipe;
    }, function($__m) {
      isBlank = $__m.isBlank;
    }, function($__m) {
      InvalidPipeArgumentError = $__m.InvalidPipeArgumentError;
    }],
    execute: function() {
      SlicePipe = (function() {
        function SlicePipe() {}
        SlicePipe.prototype.transform = function(value, start, end) {
          if (isBlank(value))
            return value;
          if (!this.supports(value)) {
            throw new InvalidPipeArgumentError(SlicePipe, value);
          }
          return value.slice(start, end);
        };
        SlicePipe.prototype.supports = function(obj) {
          return typeof obj === 'string' || Array.isArray(obj);
        };
        SlicePipe.decorators = [{
          type: Pipe,
          args: [{
            name: 'slice',
            pure: false
          }]
        }];
        SlicePipe.ctorParameters = [];
        return SlicePipe;
      }());
      $__export("SlicePipe", SlicePipe);
    }
  };
});

$__System.register("133", [], function($__export) {
  "use strict";
  var __extends,
      BaseError,
      WrappedError;
  function unimplemented() {
    throw new Error('unimplemented');
  }
  $__export("unimplemented", unimplemented);
  return {
    setters: [],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      BaseError = (function(_super) {
        __extends(BaseError, _super);
        function BaseError(message) {
          var nativeError = _super.call(this, message);
          this._nativeError = nativeError;
        }
        Object.defineProperty(BaseError.prototype, "message", {
          get: function() {
            return this._nativeError.message;
          },
          set: function(message) {
            this._nativeError.message = message;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(BaseError.prototype, "name", {
          get: function() {
            return this._nativeError.name;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(BaseError.prototype, "stack", {
          get: function() {
            return this._nativeError.stack;
          },
          set: function(value) {
            this._nativeError.stack = value;
          },
          enumerable: true,
          configurable: true
        });
        BaseError.prototype.toString = function() {
          return this._nativeError.toString();
        };
        return BaseError;
      }(Error));
      $__export("BaseError", BaseError);
      WrappedError = (function(_super) {
        __extends(WrappedError, _super);
        function WrappedError(message, error) {
          _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
          this.originalError = error;
        }
        Object.defineProperty(WrappedError.prototype, "stack", {
          get: function() {
            return (this.originalError instanceof Error ? this.originalError : this._nativeError).stack;
          },
          enumerable: true,
          configurable: true
        });
        return WrappedError;
      }(BaseError));
      $__export("WrappedError", WrappedError);
    }
  };
});

$__System.register("116", [], function($__export) {
  "use strict";
  var globalScope,
      _global,
      STRING_MAP_PROTO,
      NumberWrapper,
      _symbolIterator;
  function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
  }
  function getTypeNameForDebugging(type) {
    return type['name'] || (typeof type === 'undefined' ? 'undefined' : $traceurRuntime.typeof(type));
  }
  function isPresent(obj) {
    return obj != null;
  }
  function isBlank(obj) {
    return obj == null;
  }
  function isStrictStringMap(obj) {
    return (typeof obj === 'undefined' ? 'undefined' : $traceurRuntime.typeof(obj)) === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
  }
  function isDate(obj) {
    return obj instanceof Date && !isNaN(obj.valueOf());
  }
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token === undefined || token === null) {
      return '' + token;
    }
    if (token.overriddenName) {
      return token.overriddenName;
    }
    if (token.name) {
      return token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
  }
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || (typeof o === 'undefined' ? 'undefined' : $traceurRuntime.typeof(o)) === 'object');
  }
  function print(obj) {
    console.log(obj);
  }
  function warn(obj) {
    console.warn(obj);
  }
  function setValueOnPath(global, path, value) {
    var parts = path.split('.');
    var obj = global;
    while (parts.length > 1) {
      var name = parts.shift();
      if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
        obj = obj[name];
      } else {
        obj = obj[name] = {};
      }
    }
    if (obj === undefined || obj === null) {
      obj = {};
    }
    obj[parts.shift()] = value;
  }
  function getSymbolIterator() {
    if (!_symbolIterator) {
      if (globalScope.Symbol && Symbol.iterator) {
        _symbolIterator = Symbol.iterator;
      } else {
        var keys = Object.getOwnPropertyNames(Map.prototype);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
            _symbolIterator = key;
          }
        }
      }
    }
    return _symbolIterator;
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  function escapeRegExp(s) {
    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }
  $__export("scheduleMicroTask", scheduleMicroTask);
  $__export("getTypeNameForDebugging", getTypeNameForDebugging);
  $__export("isPresent", isPresent);
  $__export("isBlank", isBlank);
  $__export("isStrictStringMap", isStrictStringMap);
  $__export("isDate", isDate);
  $__export("stringify", stringify);
  $__export("looseIdentical", looseIdentical);
  $__export("isJsObject", isJsObject);
  $__export("print", print);
  $__export("warn", warn);
  $__export("setValueOnPath", setValueOnPath);
  $__export("getSymbolIterator", getSymbolIterator);
  $__export("isPrimitive", isPrimitive);
  $__export("escapeRegExp", escapeRegExp);
  return {
    setters: [],
    execute: function() {
      if (typeof window === 'undefined') {
        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
          globalScope = self;
        } else {
          globalScope = global;
        }
      } else {
        globalScope = window;
      }
      _global = globalScope;
      $__export("global", _global);
      _global.assert = function assert(condition) {};
      STRING_MAP_PROTO = Object.getPrototypeOf({});
      NumberWrapper = (function() {
        function NumberWrapper() {}
        NumberWrapper.parseIntAutoRadix = function(text) {
          var result = parseInt(text);
          if (isNaN(result)) {
            throw new Error('Invalid integer literal when parsing ' + text);
          }
          return result;
        };
        NumberWrapper.parseInt = function(text, radix) {
          if (radix == 10) {
            if (/^(\-|\+)?[0-9]+$/.test(text)) {
              return parseInt(text, radix);
            }
          } else if (radix == 16) {
            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
              return parseInt(text, radix);
            }
          } else {
            var result = parseInt(text, radix);
            if (!isNaN(result)) {
              return result;
            }
          }
          throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
        };
        NumberWrapper.isNumeric = function(value) {
          return !isNaN(value - parseFloat(value));
        };
        return NumberWrapper;
      }());
      $__export("NumberWrapper", NumberWrapper);
      _symbolIterator = null;
    }
  };
});

$__System.register("12a", ["133", "116"], function($__export) {
  "use strict";
  var __extends,
      BaseError,
      stringify,
      InvalidPipeArgumentError;
  return {
    setters: [function($__m) {
      BaseError = $__m.BaseError;
    }, function($__m) {
      stringify = $__m.stringify;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      InvalidPipeArgumentError = (function(_super) {
        __extends(InvalidPipeArgumentError, _super);
        function InvalidPipeArgumentError(type, value) {
          _super.call(this, "Invalid argument '" + value + "' for pipe '" + stringify(type) + "'");
        }
        return InvalidPipeArgumentError;
      }(BaseError));
      $__export("InvalidPipeArgumentError", InvalidPipeArgumentError);
    }
  };
});

$__System.register("134", ["c", "116", "12a"], function($__export) {
  "use strict";
  var Pipe,
      isBlank,
      InvalidPipeArgumentError,
      UpperCasePipe;
  return {
    setters: [function($__m) {
      Pipe = $__m.Pipe;
    }, function($__m) {
      isBlank = $__m.isBlank;
    }, function($__m) {
      InvalidPipeArgumentError = $__m.InvalidPipeArgumentError;
    }],
    execute: function() {
      UpperCasePipe = (function() {
        function UpperCasePipe() {}
        UpperCasePipe.prototype.transform = function(value) {
          if (isBlank(value))
            return value;
          if (typeof value !== 'string') {
            throw new InvalidPipeArgumentError(UpperCasePipe, value);
          }
          return value.toUpperCase();
        };
        UpperCasePipe.decorators = [{
          type: Pipe,
          args: [{name: 'uppercase'}]
        }];
        UpperCasePipe.ctorParameters = [];
        return UpperCasePipe;
      }());
      $__export("UpperCasePipe", UpperCasePipe);
    }
  };
});

$__System.register("11f", ["129", "12b", "12d", "12e", "12f", "130", "131", "132", "134"], function($__export) {
  "use strict";
  var AsyncPipe,
      DatePipe,
      I18nPluralPipe,
      I18nSelectPipe,
      JsonPipe,
      LowerCasePipe,
      CurrencyPipe,
      DecimalPipe,
      PercentPipe,
      SlicePipe,
      UpperCasePipe,
      COMMON_PIPES;
  return {
    setters: [function($__m) {
      AsyncPipe = $__m.AsyncPipe;
    }, function($__m) {
      DatePipe = $__m.DatePipe;
    }, function($__m) {
      I18nPluralPipe = $__m.I18nPluralPipe;
    }, function($__m) {
      I18nSelectPipe = $__m.I18nSelectPipe;
    }, function($__m) {
      JsonPipe = $__m.JsonPipe;
    }, function($__m) {
      LowerCasePipe = $__m.LowerCasePipe;
    }, function($__m) {
      CurrencyPipe = $__m.CurrencyPipe;
      DecimalPipe = $__m.DecimalPipe;
      PercentPipe = $__m.PercentPipe;
    }, function($__m) {
      SlicePipe = $__m.SlicePipe;
    }, function($__m) {
      UpperCasePipe = $__m.UpperCasePipe;
    }],
    execute: function() {
      $__export("AsyncPipe", AsyncPipe), $__export("CurrencyPipe", CurrencyPipe), $__export("DatePipe", DatePipe), $__export("DecimalPipe", DecimalPipe), $__export("I18nPluralPipe", I18nPluralPipe), $__export("I18nSelectPipe", I18nSelectPipe), $__export("JsonPipe", JsonPipe), $__export("LowerCasePipe", LowerCasePipe), $__export("PercentPipe", PercentPipe), $__export("SlicePipe", SlicePipe), $__export("UpperCasePipe", UpperCasePipe);
      COMMON_PIPES = [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe];
      $__export("COMMON_PIPES", COMMON_PIPES);
    }
  };
});

$__System.register("a5", ["11b", "11e", "11c", "11d", "11f"], function($__export) {
  "use strict";
  var $__exportNames = {undefined: true};
  return {
    setters: [function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      $__export({NgLocalization: $__m.NgLocalization});
    }, function($__m) {
      $__export({CommonModule: $__m.CommonModule});
    }, function($__m) {
      $__export({
        NgClass: $__m.NgClass,
        NgFor: $__m.NgFor,
        NgIf: $__m.NgIf,
        NgPlural: $__m.NgPlural,
        NgPluralCase: $__m.NgPluralCase,
        NgStyle: $__m.NgStyle,
        NgSwitch: $__m.NgSwitch,
        NgSwitchCase: $__m.NgSwitchCase,
        NgSwitchDefault: $__m.NgSwitchDefault,
        NgTemplateOutlet: $__m.NgTemplateOutlet
      });
    }, function($__m) {
      $__export({
        AsyncPipe: $__m.AsyncPipe,
        DatePipe: $__m.DatePipe,
        I18nPluralPipe: $__m.I18nPluralPipe,
        I18nSelectPipe: $__m.I18nSelectPipe,
        JsonPipe: $__m.JsonPipe,
        LowerCasePipe: $__m.LowerCasePipe,
        CurrencyPipe: $__m.CurrencyPipe,
        DecimalPipe: $__m.DecimalPipe,
        PercentPipe: $__m.PercentPipe,
        SlicePipe: $__m.SlicePipe,
        UpperCasePipe: $__m.UpperCasePipe
      });
    }],
    execute: function() {}
  };
});

$__System.register("135", ["a5", "c", "136", "137"], function($__export) {
  "use strict";
  var LocationStrategy,
      Directive,
      HostBinding,
      HostListener,
      Input,
      NavigationEnd,
      Router,
      ActivatedRoute,
      RouterLink,
      RouterLinkWithHref;
  function toBool(s) {
    if (s === '')
      return true;
    return !!s;
  }
  return {
    setters: [function($__m) {
      LocationStrategy = $__m.LocationStrategy;
    }, function($__m) {
      Directive = $__m.Directive;
      HostBinding = $__m.HostBinding;
      HostListener = $__m.HostListener;
      Input = $__m.Input;
    }, function($__m) {
      NavigationEnd = $__m.NavigationEnd;
      Router = $__m.Router;
    }, function($__m) {
      ActivatedRoute = $__m.ActivatedRoute;
    }],
    execute: function() {
      RouterLink = (function() {
        function RouterLink(router, route, locationStrategy) {
          this.router = router;
          this.route = route;
          this.locationStrategy = locationStrategy;
          this.commands = [];
        }
        Object.defineProperty(RouterLink.prototype, "routerLink", {
          set: function(data) {
            if (Array.isArray(data)) {
              this.commands = data;
            } else {
              this.commands = [data];
            }
          },
          enumerable: true,
          configurable: true
        });
        RouterLink.prototype.onClick = function(button, ctrlKey, metaKey) {
          if (button !== 0 || ctrlKey || metaKey) {
            return true;
          }
          this.router.navigateByUrl(this.urlTree);
          return false;
        };
        Object.defineProperty(RouterLink.prototype, "urlTree", {
          get: function() {
            return this.router.createUrlTree(this.commands, {
              relativeTo: this.route,
              queryParams: this.queryParams,
              fragment: this.fragment,
              preserveQueryParams: toBool(this.preserveQueryParams),
              preserveFragment: toBool(this.preserveFragment)
            });
          },
          enumerable: true,
          configurable: true
        });
        RouterLink.decorators = [{
          type: Directive,
          args: [{selector: ':not(a)[routerLink]'}]
        }];
        RouterLink.ctorParameters = [{type: Router}, {type: ActivatedRoute}, {type: LocationStrategy}];
        RouterLink.propDecorators = {
          'queryParams': [{type: Input}],
          'fragment': [{type: Input}],
          'preserveQueryParams': [{type: Input}],
          'preserveFragment': [{type: Input}],
          'routerLink': [{type: Input}],
          'onClick': [{
            type: HostListener,
            args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey']]
          }]
        };
        return RouterLink;
      }());
      $__export("RouterLink", RouterLink);
      RouterLinkWithHref = (function() {
        function RouterLinkWithHref(router, route, locationStrategy) {
          var _this = this;
          this.router = router;
          this.route = route;
          this.locationStrategy = locationStrategy;
          this.commands = [];
          this.subscription = router.events.subscribe(function(s) {
            if (s instanceof NavigationEnd) {
              _this.updateTargetUrlAndHref();
            }
          });
        }
        Object.defineProperty(RouterLinkWithHref.prototype, "routerLink", {
          set: function(data) {
            if (Array.isArray(data)) {
              this.commands = data;
            } else {
              this.commands = [data];
            }
          },
          enumerable: true,
          configurable: true
        });
        RouterLinkWithHref.prototype.ngOnChanges = function(changes) {
          this.updateTargetUrlAndHref();
        };
        RouterLinkWithHref.prototype.ngOnDestroy = function() {
          this.subscription.unsubscribe();
        };
        RouterLinkWithHref.prototype.onClick = function(button, ctrlKey, metaKey) {
          if (button !== 0 || ctrlKey || metaKey) {
            return true;
          }
          if (typeof this.target === 'string' && this.target != '_self') {
            return true;
          }
          this.router.navigateByUrl(this.urlTree);
          return false;
        };
        RouterLinkWithHref.prototype.updateTargetUrlAndHref = function() {
          this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
        };
        Object.defineProperty(RouterLinkWithHref.prototype, "urlTree", {
          get: function() {
            return this.router.createUrlTree(this.commands, {
              relativeTo: this.route,
              queryParams: this.queryParams,
              fragment: this.fragment,
              preserveQueryParams: toBool(this.preserveQueryParams),
              preserveFragment: toBool(this.preserveFragment)
            });
          },
          enumerable: true,
          configurable: true
        });
        RouterLinkWithHref.decorators = [{
          type: Directive,
          args: [{selector: 'a[routerLink]'}]
        }];
        RouterLinkWithHref.ctorParameters = [{type: Router}, {type: ActivatedRoute}, {type: LocationStrategy}];
        RouterLinkWithHref.propDecorators = {
          'target': [{type: Input}],
          'queryParams': [{type: Input}],
          'fragment': [{type: Input}],
          'routerLinkOptions': [{type: Input}],
          'preserveQueryParams': [{type: Input}],
          'preserveFragment': [{type: Input}],
          'href': [{type: HostBinding}],
          'routerLink': [{type: Input}],
          'onClick': [{
            type: HostListener,
            args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey']]
          }]
        };
        return RouterLinkWithHref;
      }());
      $__export("RouterLinkWithHref", RouterLinkWithHref);
    }
  };
});

$__System.register("138", ["c", "136", "135"], function($__export) {
  "use strict";
  var ContentChildren,
      Directive,
      ElementRef,
      Input,
      Renderer,
      NavigationEnd,
      Router,
      RouterLink,
      RouterLinkWithHref,
      RouterLinkActive;
  return {
    setters: [function($__m) {
      ContentChildren = $__m.ContentChildren;
      Directive = $__m.Directive;
      ElementRef = $__m.ElementRef;
      Input = $__m.Input;
      Renderer = $__m.Renderer;
    }, function($__m) {
      NavigationEnd = $__m.NavigationEnd;
      Router = $__m.Router;
    }, function($__m) {
      RouterLink = $__m.RouterLink;
      RouterLinkWithHref = $__m.RouterLinkWithHref;
    }],
    execute: function() {
      RouterLinkActive = (function() {
        function RouterLinkActive(router, element, renderer) {
          var _this = this;
          this.router = router;
          this.element = element;
          this.renderer = renderer;
          this.classes = [];
          this.routerLinkActiveOptions = {exact: false};
          this.subscription = router.events.subscribe(function(s) {
            if (s instanceof NavigationEnd) {
              _this.update();
            }
          });
        }
        RouterLinkActive.prototype.ngAfterContentInit = function() {
          var _this = this;
          this.links.changes.subscribe(function(s) {
            return _this.update();
          });
          this.linksWithHrefs.changes.subscribe(function(s) {
            return _this.update();
          });
          this.update();
        };
        Object.defineProperty(RouterLinkActive.prototype, "routerLinkActive", {
          set: function(data) {
            if (Array.isArray(data)) {
              this.classes = data;
            } else {
              this.classes = data.split(' ');
            }
          },
          enumerable: true,
          configurable: true
        });
        RouterLinkActive.prototype.ngOnChanges = function(changes) {
          this.update();
        };
        RouterLinkActive.prototype.ngOnDestroy = function() {
          this.subscription.unsubscribe();
        };
        RouterLinkActive.prototype.update = function() {
          var _this = this;
          if (!this.links || !this.linksWithHrefs || !this.router.navigated)
            return;
          var isActive = this.hasActiveLink();
          this.classes.forEach(function(c) {
            return _this.renderer.setElementClass(_this.element.nativeElement, c, isActive);
          });
        };
        RouterLinkActive.prototype.isLinkActive = function(router) {
          var _this = this;
          return function(link) {
            return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact);
          };
        };
        RouterLinkActive.prototype.hasActiveLink = function() {
          return this.links.some(this.isLinkActive(this.router)) || this.linksWithHrefs.some(this.isLinkActive(this.router));
        };
        RouterLinkActive.decorators = [{
          type: Directive,
          args: [{selector: '[routerLinkActive]'}]
        }];
        RouterLinkActive.ctorParameters = [{type: Router}, {type: ElementRef}, {type: Renderer}];
        RouterLinkActive.propDecorators = {
          'links': [{
            type: ContentChildren,
            args: [RouterLink, {descendants: true}]
          }],
          'linksWithHrefs': [{
            type: ContentChildren,
            args: [RouterLinkWithHref, {descendants: true}]
          }],
          'routerLinkActiveOptions': [{type: Input}],
          'routerLinkActive': [{type: Input}]
        };
        return RouterLinkActive;
      }());
      $__export("RouterLinkActive", RouterLinkActive);
    }
  };
});

$__System.register("139", ["c", "13a", "13b"], function($__export) {
  "use strict";
  var Attribute,
      ComponentFactoryResolver,
      Directive,
      EventEmitter,
      Output,
      ReflectiveInjector,
      ViewContainerRef,
      RouterOutletMap,
      PRIMARY_OUTLET,
      RouterOutlet;
  return {
    setters: [function($__m) {
      Attribute = $__m.Attribute;
      ComponentFactoryResolver = $__m.ComponentFactoryResolver;
      Directive = $__m.Directive;
      EventEmitter = $__m.EventEmitter;
      Output = $__m.Output;
      ReflectiveInjector = $__m.ReflectiveInjector;
      ViewContainerRef = $__m.ViewContainerRef;
    }, function($__m) {
      RouterOutletMap = $__m.RouterOutletMap;
    }, function($__m) {
      PRIMARY_OUTLET = $__m.PRIMARY_OUTLET;
    }],
    execute: function() {
      RouterOutlet = (function() {
        function RouterOutlet(parentOutletMap, location, resolver, name) {
          this.parentOutletMap = parentOutletMap;
          this.location = location;
          this.resolver = resolver;
          this.name = name;
          this.activateEvents = new EventEmitter();
          this.deactivateEvents = new EventEmitter();
          parentOutletMap.registerOutlet(name ? name : PRIMARY_OUTLET, this);
        }
        RouterOutlet.prototype.ngOnDestroy = function() {
          this.parentOutletMap.removeOutlet(this.name ? this.name : PRIMARY_OUTLET);
        };
        Object.defineProperty(RouterOutlet.prototype, "isActivated", {
          get: function() {
            return !!this.activated;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RouterOutlet.prototype, "component", {
          get: function() {
            if (!this.activated)
              throw new Error('Outlet is not activated');
            return this.activated.instance;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RouterOutlet.prototype, "activatedRoute", {
          get: function() {
            if (!this.activated)
              throw new Error('Outlet is not activated');
            return this._activatedRoute;
          },
          enumerable: true,
          configurable: true
        });
        RouterOutlet.prototype.deactivate = function() {
          if (this.activated) {
            var c = this.component;
            this.activated.destroy();
            this.activated = null;
            this.deactivateEvents.emit(c);
          }
        };
        RouterOutlet.prototype.activate = function(activatedRoute, loadedResolver, loadedInjector, providers, outletMap) {
          if (this.isActivated) {
            throw new Error('Cannot activate an already activated outlet');
          }
          this.outletMap = outletMap;
          this._activatedRoute = activatedRoute;
          var snapshot = activatedRoute._futureSnapshot;
          var component = snapshot._routeConfig.component;
          var factory;
          if (loadedResolver) {
            factory = loadedResolver.resolveComponentFactory(component);
          } else {
            factory = this.resolver.resolveComponentFactory(component);
          }
          var injector = loadedInjector ? loadedInjector : this.location.parentInjector;
          var inj = ReflectiveInjector.fromResolvedProviders(providers, injector);
          this.activated = this.location.createComponent(factory, this.location.length, inj, []);
          this.activated.changeDetectorRef.detectChanges();
          this.activateEvents.emit(this.activated.instance);
        };
        RouterOutlet.decorators = [{
          type: Directive,
          args: [{selector: 'router-outlet'}]
        }];
        RouterOutlet.ctorParameters = [{type: RouterOutletMap}, {type: ViewContainerRef}, {type: ComponentFactoryResolver}, {
          type: undefined,
          decorators: [{
            type: Attribute,
            args: ['name']
          }]
        }];
        RouterOutlet.propDecorators = {
          'activateEvents': [{
            type: Output,
            args: ['activate']
          }],
          'deactivateEvents': [{
            type: Output,
            args: ['deactivate']
          }]
        };
        return RouterOutlet;
      }());
      $__export("RouterOutlet", RouterOutlet);
    }
  };
});

$__System.registerDynamic("bf", ["b6"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("b6");
    /**
     * Filter items emitted by the source Observable by only emitting those that
     * satisfy a specified predicate.
     *
     * <span class="informal">Like
     * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
     * it only emits a value from the source if it passes a criterion function.</span>
     *
     * <img src="./img/filter.png" width="100%">
     *
     * Similar to the well-known `Array.prototype.filter` method, this operator
     * takes values from the source Observable, passes them through a `predicate`
     * function and only emits those values that yielded `true`.
     *
     * @example <caption>Emit only click events whose target was a DIV element</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
     * clicksOnDivs.subscribe(x => console.log(x));
     *
     * @see {@link distinct}
     * @see {@link distinctKey}
     * @see {@link distinctUntilChanged}
     * @see {@link distinctUntilKeyChanged}
     * @see {@link ignoreElements}
     * @see {@link partition}
     * @see {@link skip}
     *
     * @param {function(value: T, index: number): boolean} predicate A function that
     * evaluates each value emitted by the source Observable. If it returns `true`,
     * the value is emitted, if `false` the value is not passed to the output
     * Observable. The `index` parameter is the number `i` for the i-th source
     * emission that has happened since the subscription, starting from the number
     * `0`.
     * @param {any} [thisArg] An optional argument to determine the value of `this`
     * in the `predicate` function.
     * @return {Observable} An Observable of values from the source that were
     * allowed by the `predicate` function.
     * @method filter
     * @owner Observable
     */
    function filter(predicate, thisArg) {
        return this.lift(new FilterOperator(predicate, thisArg));
    }
    exports.filter = filter;
    var FilterOperator = function () {
        function FilterOperator(predicate, thisArg) {
            this.predicate = predicate;
            this.thisArg = thisArg;
        }
        FilterOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
        };
        return FilterOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var FilterSubscriber = function (_super) {
        __extends(FilterSubscriber, _super);
        function FilterSubscriber(destination, predicate, thisArg) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.count = 0;
            this.predicate = predicate;
        }
        // the try catch block below is left specifically for
        // optimization and perf reasons. a tryCatcher is not necessary here.
        FilterSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.predicate.call(this.thisArg, value, this.count++);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this.destination.next(value);
            }
        };
        return FilterSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic("13c", ["13d"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var mergeMap_1 = $__require("13d");
  /**
   * Projects each source value to an Observable which is merged in the output
   * Observable, in a serialized fashion waiting for each one to complete before
   * merging the next.
   *
   * <span class="informal">Maps each value to an Observable, then flattens all of
   * these inner Observables using {@link concatAll}.</span>
   *
   * <img src="./img/concatMap.png" width="100%">
   *
   * Returns an Observable that emits items based on applying a function that you
   * supply to each item emitted by the source Observable, where that function
   * returns an (so-called "inner") Observable. Each new inner Observable is
   * concatenated with the previous inner Observable.
   *
   * __Warning:__ if source values arrive endlessly and faster than their
   * corresponding inner Observables can complete, it will result in memory issues
   * as inner Observables amass in an unbounded buffer waiting for their turn to
   * be subscribed to.
   *
   * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set
   * to `1`.
   *
   * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
   * var clicks = Rx.Observable.fromEvent(document, 'click');
   * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));
   * result.subscribe(x => console.log(x));
   *
   * @see {@link concat}
   * @see {@link concatAll}
   * @see {@link concatMapTo}
   * @see {@link exhaustMap}
   * @see {@link mergeMap}
   * @see {@link switchMap}
   *
   * @param {function(value: T, ?index: number): Observable} project A function
   * that, when applied to an item emitted by the source Observable, returns an
   * Observable.
   * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
   * A function to produce the value on the output Observable based on the values
   * and the indices of the source (outer) emission and the inner Observable
   * emission. The arguments passed to this function are:
   * - `outerValue`: the value that came from the source
   * - `innerValue`: the value that came from the projected Observable
   * - `outerIndex`: the "index" of the value that came from the source
   * - `innerIndex`: the "index" of the value from the projected Observable
   * @return {Observable} an observable of values merged from the projected
   * Observables as they were subscribed to, one at a time. Optionally, these
   * values may have been projected from a passed `projectResult` argument.
   * @return {Observable} An Observable that emits the result of applying the
   * projection function (and the optional `resultSelector`) to each item emitted
   * by the source Observable and taking values from each projected inner
   * Observable sequentially.
   * @method concatMap
   * @owner Observable
   */
  function concatMap(project, resultSelector) {
    return this.lift(new mergeMap_1.MergeMapOperator(project, resultSelector, 1));
  }
  exports.concatMap = concatMap;
  

  return module.exports;
});
$__System.registerDynamic('13e', ['b6'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('b6');
    /**
     * Applies an accumulator function over the source Observable, and returns the
     * accumulated result when the source completes, given an optional seed value.
     *
     * <span class="informal">Combines together all values emitted on the source,
     * using an accumulator function that knows how to join a new source value into
     * the accumulation from the past.</span>
     *
     * <img src="./img/reduce.png" width="100%">
     *
     * Like
     * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),
     * `reduce` applies an `accumulator` function against an accumulation and each
     * value of the source Observable (from the past) to reduce it to a single
     * value, emitted on the output Observable. Note that `reduce` will only emit
     * one value, only when the source Observable completes. It is equivalent to
     * applying operator {@link scan} followed by operator {@link last}.
     *
     * Returns an Observable that applies a specified `accumulator` function to each
     * item emitted by the source Observable. If a `seed` value is specified, then
     * that value will be used as the initial value for the accumulator. If no seed
     * value is specified, the first item of the source is used as the seed.
     *
     * @example <caption>Count the number of click events that happened in 5 seconds</caption>
     * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')
     *   .takeUntil(Rx.Observable.interval(5000));
     * var ones = clicksInFiveSeconds.mapTo(1);
     * var seed = 0;
     * var count = ones.reduce((acc, one) => acc + one, seed);
     * count.subscribe(x => console.log(x));
     *
     * @see {@link count}
     * @see {@link expand}
     * @see {@link mergeScan}
     * @see {@link scan}
     *
     * @param {function(acc: R, value: T): R} accumulator The accumulator function
     * called on each source value.
     * @param {R} [seed] The initial accumulation value.
     * @return {Observable<R>} An observable of the accumulated values.
     * @return {Observable<R>} An Observable that emits a single value that is the
     * result of accumulating the values emitted by the source Observable.
     * @method reduce
     * @owner Observable
     */
    function reduce(accumulator, seed) {
        return this.lift(new ReduceOperator(accumulator, seed));
    }
    exports.reduce = reduce;
    var ReduceOperator = function () {
        function ReduceOperator(accumulator, seed) {
            this.accumulator = accumulator;
            this.seed = seed;
        }
        ReduceOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));
        };
        return ReduceOperator;
    }();
    exports.ReduceOperator = ReduceOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ReduceSubscriber = function (_super) {
        __extends(ReduceSubscriber, _super);
        function ReduceSubscriber(destination, accumulator, seed) {
            _super.call(this, destination);
            this.accumulator = accumulator;
            this.hasValue = false;
            this.acc = seed;
            this.accumulator = accumulator;
            this.hasSeed = typeof seed !== 'undefined';
        }
        ReduceSubscriber.prototype._next = function (value) {
            if (this.hasValue || (this.hasValue = this.hasSeed)) {
                this._tryReduce(value);
            } else {
                this.acc = value;
                this.hasValue = true;
            }
        };
        ReduceSubscriber.prototype._tryReduce = function (value) {
            var result;
            try {
                result = this.accumulator(this.acc, value);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.acc = result;
        };
        ReduceSubscriber.prototype._complete = function () {
            if (this.hasValue || this.hasSeed) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        };
        return ReduceSubscriber;
    }(Subscriber_1.Subscriber);
    exports.ReduceSubscriber = ReduceSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('13f', ['b1', '91', '140'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1 = $__require('b1');
    var Observable_1 = $__require('91');
    var iterator_1 = $__require('140');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var IteratorObservable = function (_super) {
        __extends(IteratorObservable, _super);
        function IteratorObservable(iterator, scheduler) {
            _super.call(this);
            this.scheduler = scheduler;
            if (iterator == null) {
                throw new Error('iterator cannot be null.');
            }
            this.iterator = getIterator(iterator);
        }
        IteratorObservable.create = function (iterator, scheduler) {
            return new IteratorObservable(iterator, scheduler);
        };
        IteratorObservable.dispatch = function (state) {
            var index = state.index,
                hasError = state.hasError,
                iterator = state.iterator,
                subscriber = state.subscriber;
            if (hasError) {
                subscriber.error(state.error);
                return;
            }
            var result = iterator.next();
            if (result.done) {
                subscriber.complete();
                return;
            }
            subscriber.next(result.value);
            state.index = index + 1;
            if (subscriber.closed) {
                return;
            }
            this.schedule(state);
        };
        IteratorObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var _a = this,
                iterator = _a.iterator,
                scheduler = _a.scheduler;
            if (scheduler) {
                return scheduler.schedule(IteratorObservable.dispatch, 0, {
                    index: index, iterator: iterator, subscriber: subscriber
                });
            } else {
                do {
                    var result = iterator.next();
                    if (result.done) {
                        subscriber.complete();
                        break;
                    } else {
                        subscriber.next(result.value);
                    }
                    if (subscriber.closed) {
                        break;
                    }
                } while (true);
            }
        };
        return IteratorObservable;
    }(Observable_1.Observable);
    exports.IteratorObservable = IteratorObservable;
    var StringIterator = function () {
        function StringIterator(str, idx, len) {
            if (idx === void 0) {
                idx = 0;
            }
            if (len === void 0) {
                len = str.length;
            }
            this.str = str;
            this.idx = idx;
            this.len = len;
        }
        StringIterator.prototype[iterator_1.$$iterator] = function () {
            return this;
        };
        StringIterator.prototype.next = function () {
            return this.idx < this.len ? {
                done: false,
                value: this.str.charAt(this.idx++)
            } : {
                done: true,
                value: undefined
            };
        };
        return StringIterator;
    }();
    var ArrayIterator = function () {
        function ArrayIterator(arr, idx, len) {
            if (idx === void 0) {
                idx = 0;
            }
            if (len === void 0) {
                len = toLength(arr);
            }
            this.arr = arr;
            this.idx = idx;
            this.len = len;
        }
        ArrayIterator.prototype[iterator_1.$$iterator] = function () {
            return this;
        };
        ArrayIterator.prototype.next = function () {
            return this.idx < this.len ? {
                done: false,
                value: this.arr[this.idx++]
            } : {
                done: true,
                value: undefined
            };
        };
        return ArrayIterator;
    }();
    function getIterator(obj) {
        var i = obj[iterator_1.$$iterator];
        if (!i && typeof obj === 'string') {
            return new StringIterator(obj);
        }
        if (!i && obj.length !== undefined) {
            return new ArrayIterator(obj);
        }
        if (!i) {
            throw new TypeError('object is not iterable');
        }
        return obj[iterator_1.$$iterator]();
    }
    var maxSafeInteger = Math.pow(2, 53) - 1;
    function toLength(o) {
        var len = +o.length;
        if (isNaN(len)) {
            return 0;
        }
        if (len === 0 || !numberIsFinite(len)) {
            return len;
        }
        len = sign(len) * Math.floor(Math.abs(len));
        if (len <= 0) {
            return 0;
        }
        if (len > maxSafeInteger) {
            return maxSafeInteger;
        }
        return len;
    }
    function numberIsFinite(value) {
        return typeof value === 'number' && root_1.root.isFinite(value);
    }
    function sign(value) {
        var valueAsNumber = +value;
        if (valueAsNumber === 0) {
            return valueAsNumber;
        }
        if (isNaN(valueAsNumber)) {
            return valueAsNumber;
        }
        return valueAsNumber < 0 ? -1 : 1;
    }
    

    return module.exports;
});
$__System.registerDynamic('141', ['91', '142', '143'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('91');
    var ScalarObservable_1 = $__require('142');
    var EmptyObservable_1 = $__require('143');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ArrayLikeObservable = function (_super) {
        __extends(ArrayLikeObservable, _super);
        function ArrayLikeObservable(arrayLike, scheduler) {
            _super.call(this);
            this.arrayLike = arrayLike;
            this.scheduler = scheduler;
            if (!scheduler && arrayLike.length === 1) {
                this._isScalar = true;
                this.value = arrayLike[0];
            }
        }
        ArrayLikeObservable.create = function (arrayLike, scheduler) {
            var length = arrayLike.length;
            if (length === 0) {
                return new EmptyObservable_1.EmptyObservable();
            } else if (length === 1) {
                return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
            } else {
                return new ArrayLikeObservable(arrayLike, scheduler);
            }
        };
        ArrayLikeObservable.dispatch = function (state) {
            var arrayLike = state.arrayLike,
                index = state.index,
                length = state.length,
                subscriber = state.subscriber;
            if (subscriber.closed) {
                return;
            }
            if (index >= length) {
                subscriber.complete();
                return;
            }
            subscriber.next(arrayLike[index]);
            state.index = index + 1;
            this.schedule(state);
        };
        ArrayLikeObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var _a = this,
                arrayLike = _a.arrayLike,
                scheduler = _a.scheduler;
            var length = arrayLike.length;
            if (scheduler) {
                return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
                    arrayLike: arrayLike, index: index, length: length, subscriber: subscriber
                });
            } else {
                for (var i = 0; i < length && !subscriber.closed; i++) {
                    subscriber.next(arrayLike[i]);
                }
                subscriber.complete();
            }
        };
        return ArrayLikeObservable;
    }(Observable_1.Observable);
    exports.ArrayLikeObservable = ArrayLikeObservable;
    

    return module.exports;
});
$__System.registerDynamic('144', ['91'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var Observable_1 = $__require('91');
    /**
     * Represents a push-based event or value that an {@link Observable} can emit.
     * This class is particularly useful for operators that manage notifications,
     * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
     * others. Besides wrapping the actual delivered value, it also annotates it
     * with metadata of, for instance, what type of push message it is (`next`,
     * `error`, or `complete`).
     *
     * @see {@link materialize}
     * @see {@link dematerialize}
     * @see {@link observeOn}
     *
     * @class Notification<T>
     */
    var Notification = function () {
        function Notification(kind, value, exception) {
            this.kind = kind;
            this.value = value;
            this.exception = exception;
            this.hasValue = kind === 'N';
        }
        /**
         * Delivers to the given `observer` the value wrapped by this Notification.
         * @param {Observer} observer
         * @return
         */
        Notification.prototype.observe = function (observer) {
            switch (this.kind) {
                case 'N':
                    return observer.next && observer.next(this.value);
                case 'E':
                    return observer.error && observer.error(this.exception);
                case 'C':
                    return observer.complete && observer.complete();
            }
        };
        /**
         * Given some {@link Observer} callbacks, deliver the value represented by the
         * current Notification to the correctly corresponding callback.
         * @param {function(value: T): void} next An Observer `next` callback.
         * @param {function(err: any): void} [error] An Observer `error` callback.
         * @param {function(): void} [complete] An Observer `complete` callback.
         * @return {any}
         */
        Notification.prototype.do = function (next, error, complete) {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return next && next(this.value);
                case 'E':
                    return error && error(this.exception);
                case 'C':
                    return complete && complete();
            }
        };
        /**
         * Takes an Observer or its individual callback functions, and calls `observe`
         * or `do` methods accordingly.
         * @param {Observer|function(value: T): void} nextOrObserver An Observer or
         * the `next` callback.
         * @param {function(err: any): void} [error] An Observer `error` callback.
         * @param {function(): void} [complete] An Observer `complete` callback.
         * @return {any}
         */
        Notification.prototype.accept = function (nextOrObserver, error, complete) {
            if (nextOrObserver && typeof nextOrObserver.next === 'function') {
                return this.observe(nextOrObserver);
            } else {
                return this.do(nextOrObserver, error, complete);
            }
        };
        /**
         * Returns a simple Observable that just delivers the notification represented
         * by this Notification instance.
         * @return {any}
         */
        Notification.prototype.toObservable = function () {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return Observable_1.Observable.of(this.value);
                case 'E':
                    return Observable_1.Observable.throw(this.exception);
                case 'C':
                    return Observable_1.Observable.empty();
            }
            throw new Error('unexpected notification kind value');
        };
        /**
         * A shortcut to create a Notification instance of the type `next` from a
         * given value.
         * @param {T} value The `next` value.
         * @return {Notification<T>} The "next" Notification representing the
         * argument.
         */
        Notification.createNext = function (value) {
            if (typeof value !== 'undefined') {
                return new Notification('N', value);
            }
            return this.undefinedValueNotification;
        };
        /**
         * A shortcut to create a Notification instance of the type `error` from a
         * given error.
         * @param {any} [err] The `error` exception.
         * @return {Notification<T>} The "error" Notification representing the
         * argument.
         */
        Notification.createError = function (err) {
            return new Notification('E', undefined, err);
        };
        /**
         * A shortcut to create a Notification instance of the type `complete`.
         * @return {Notification<any>} The valueless "complete" Notification.
         */
        Notification.createComplete = function () {
            return this.completeNotification;
        };
        Notification.completeNotification = new Notification('C');
        Notification.undefinedValueNotification = new Notification('N', undefined);
        return Notification;
    }();
    exports.Notification = Notification;
    

    return module.exports;
});
$__System.registerDynamic('145', ['b6', '144'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('b6');
    var Notification_1 = $__require('144');
    /**
     * @see {@link Notification}
     *
     * @param scheduler
     * @param delay
     * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
     * @method observeOn
     * @owner Observable
     */
    function observeOn(scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return this.lift(new ObserveOnOperator(scheduler, delay));
    }
    exports.observeOn = observeOn;
    var ObserveOnOperator = function () {
        function ObserveOnOperator(scheduler, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            this.scheduler = scheduler;
            this.delay = delay;
        }
        ObserveOnOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
        };
        return ObserveOnOperator;
    }();
    exports.ObserveOnOperator = ObserveOnOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ObserveOnSubscriber = function (_super) {
        __extends(ObserveOnSubscriber, _super);
        function ObserveOnSubscriber(destination, scheduler, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            _super.call(this, destination);
            this.scheduler = scheduler;
            this.delay = delay;
        }
        ObserveOnSubscriber.dispatch = function (arg) {
            var notification = arg.notification,
                destination = arg.destination;
            notification.observe(destination);
        };
        ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
            this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
        };
        ObserveOnSubscriber.prototype._next = function (value) {
            this.scheduleMessage(Notification_1.Notification.createNext(value));
        };
        ObserveOnSubscriber.prototype._error = function (err) {
            this.scheduleMessage(Notification_1.Notification.createError(err));
        };
        ObserveOnSubscriber.prototype._complete = function () {
            this.scheduleMessage(Notification_1.Notification.createComplete());
        };
        return ObserveOnSubscriber;
    }(Subscriber_1.Subscriber);
    exports.ObserveOnSubscriber = ObserveOnSubscriber;
    var ObserveOnMessage = function () {
        function ObserveOnMessage(notification, destination) {
            this.notification = notification;
            this.destination = destination;
        }
        return ObserveOnMessage;
    }();
    exports.ObserveOnMessage = ObserveOnMessage;
    

    return module.exports;
});
$__System.registerDynamic('146', ['147', '148', '149', '13f', '14a', '141', '140', '91', '145', '14b'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var isArray_1 = $__require('147');
    var isPromise_1 = $__require('148');
    var PromiseObservable_1 = $__require('149');
    var IteratorObservable_1 = $__require('13f');
    var ArrayObservable_1 = $__require('14a');
    var ArrayLikeObservable_1 = $__require('141');
    var iterator_1 = $__require('140');
    var Observable_1 = $__require('91');
    var observeOn_1 = $__require('145');
    var observable_1 = $__require('14b');
    var isArrayLike = function (x) {
        return x && typeof x.length === 'number';
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var FromObservable = function (_super) {
        __extends(FromObservable, _super);
        function FromObservable(ish, scheduler) {
            _super.call(this, null);
            this.ish = ish;
            this.scheduler = scheduler;
        }
        /**
         * Creates an Observable from an Array, an array-like object, a Promise, an
         * iterable object, or an Observable-like object.
         *
         * <span class="informal">Converts almost anything to an Observable.</span>
         *
         * <img src="./img/from.png" width="100%">
         *
         * Convert various other objects and data types into Observables. `from`
         * converts a Promise or an array-like or an
         * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)
         * object into an Observable that emits the items in that promise or array or
         * iterable. A String, in this context, is treated as an array of characters.
         * Observable-like objects (contains a function named with the ES2015 Symbol
         * for Observable) can also be converted through this operator.
         *
         * @example <caption>Converts an array to an Observable</caption>
         * var array = [10, 20, 30];
         * var result = Rx.Observable.from(array);
         * result.subscribe(x => console.log(x));
         *
         * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>
         * function* generateDoubles(seed) {
         *   var i = seed;
         *   while (true) {
         *     yield i;
         *     i = 2 * i; // double it
         *   }
         * }
         *
         * var iterator = generateDoubles(3);
         * var result = Rx.Observable.from(iterator).take(10);
         * result.subscribe(x => console.log(x));
         *
         * @see {@link create}
         * @see {@link fromEvent}
         * @see {@link fromEventPattern}
         * @see {@link fromPromise}
         *
         * @param {ObservableInput<T>} ish A subscribable object, a Promise, an
         * Observable-like, an Array, an iterable or an array-like object to be
         * converted.
         * @param {Scheduler} [scheduler] The scheduler on which to schedule the
         * emissions of values.
         * @return {Observable<T>} The Observable whose values are originally from the
         * input object that was converted.
         * @static true
         * @name from
         * @owner Observable
         */
        FromObservable.create = function (ish, scheduler) {
            if (ish != null) {
                if (typeof ish[observable_1.$$observable] === 'function') {
                    if (ish instanceof Observable_1.Observable && !scheduler) {
                        return ish;
                    }
                    return new FromObservable(ish, scheduler);
                } else if (isArray_1.isArray(ish)) {
                    return new ArrayObservable_1.ArrayObservable(ish, scheduler);
                } else if (isPromise_1.isPromise(ish)) {
                    return new PromiseObservable_1.PromiseObservable(ish, scheduler);
                } else if (typeof ish[iterator_1.$$iterator] === 'function' || typeof ish === 'string') {
                    return new IteratorObservable_1.IteratorObservable(ish, scheduler);
                } else if (isArrayLike(ish)) {
                    return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
                }
            }
            throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
        };
        FromObservable.prototype._subscribe = function (subscriber) {
            var ish = this.ish;
            var scheduler = this.scheduler;
            if (scheduler == null) {
                return ish[observable_1.$$observable]().subscribe(subscriber);
            } else {
                return ish[observable_1.$$observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
            }
        };
        return FromObservable;
    }(Observable_1.Observable);
    exports.FromObservable = FromObservable;
    

    return module.exports;
});
$__System.registerDynamic("14c", ["146"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var FromObservable_1 = $__require("146");
  exports.from = FromObservable_1.FromObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('ad', ['c3', 'c4'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('c3');
    var subscribeToResult_1 = $__require('c4');
    /**
     * Catches errors on the observable to be handled by returning a new observable or throwing an error.
     * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
     *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
     *  is returned by the `selector` will be used to continue the observable chain.
     * @return {Observable} an observable that originates from either the source or the observable returned by the
     *  catch `selector` function.
     * @method catch
     * @owner Observable
     */
    function _catch(selector) {
        var operator = new CatchOperator(selector);
        var caught = this.lift(operator);
        return operator.caught = caught;
    }
    exports._catch = _catch;
    var CatchOperator = function () {
        function CatchOperator(selector) {
            this.selector = selector;
        }
        CatchOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
        };
        return CatchOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var CatchSubscriber = function (_super) {
        __extends(CatchSubscriber, _super);
        function CatchSubscriber(destination, selector, caught) {
            _super.call(this, destination);
            this.selector = selector;
            this.caught = caught;
        }
        // NOTE: overriding `error` instead of `_error` because we don't want
        // to have this flag this subscriber as `isStopped`.
        CatchSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var result = void 0;
                try {
                    result = this.selector(err, this.caught);
                } catch (err) {
                    this.destination.error(err);
                    return;
                }
                this.unsubscribe();
                this.destination.remove(this);
                subscribeToResult_1.subscribeToResult(this, result);
            }
        };
        return CatchSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('14d', ['b6', '14e'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('b6');
    var EmptyError_1 = $__require('14e');
    /**
     * Emits only the first value (or the first value that meets some condition)
     * emitted by the source Observable.
     *
     * <span class="informal">Emits only the first value. Or emits only the first
     * value that passes some test.</span>
     *
     * <img src="./img/first.png" width="100%">
     *
     * If called with no arguments, `first` emits the first value of the source
     * Observable, then completes. If called with a `predicate` function, `first`
     * emits the first value of the source that matches the specified condition. It
     * may also take a `resultSelector` function to produce the output value from
     * the input value, and a `defaultValue` to emit in case the source completes
     * before it is able to emit a valid value. Throws an error if `defaultValue`
     * was not provided and a matching element is not found.
     *
     * @example <caption>Emit only the first click that happens on the DOM</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.first();
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Emits the first click that happens on a DIV</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.first(ev => ev.target.tagName === 'DIV');
     * result.subscribe(x => console.log(x));
     *
     * @see {@link filter}
     * @see {@link find}
     * @see {@link take}
     *
     * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
     * callback if the Observable completes before any `next` notification was sent.
     *
     * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
     * An optional function called with each item to test for condition matching.
     * @param {function(value: T, index: number): R} [resultSelector] A function to
     * produce the value on the output Observable based on the values
     * and the indices of the source Observable. The arguments passed to this
     * function are:
     * - `value`: the value that was emitted on the source.
     * - `index`: the "index" of the value from the source.
     * @param {R} [defaultValue] The default value emitted in case no valid value
     * was found on the source.
     * @return {Observable<T|R>} an Observable of the first item that matches the
     * condition.
     * @method first
     * @owner Observable
     */
    function first(predicate, resultSelector, defaultValue) {
        return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
    }
    exports.first = first;
    var FirstOperator = function () {
        function FirstOperator(predicate, resultSelector, defaultValue, source) {
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
        }
        FirstOperator.prototype.call = function (observer, source) {
            return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
        };
        return FirstOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var FirstSubscriber = function (_super) {
        __extends(FirstSubscriber, _super);
        function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
            this.index = 0;
            this.hasCompleted = false;
        }
        FirstSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this._tryPredicate(value, index);
            } else {
                this._emit(value, index);
            }
        };
        FirstSubscriber.prototype._tryPredicate = function (value, index) {
            var result;
            try {
                result = this.predicate(value, index, this.source);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this._emit(value, index);
            }
        };
        FirstSubscriber.prototype._emit = function (value, index) {
            if (this.resultSelector) {
                this._tryResultSelector(value, index);
                return;
            }
            this._emitFinal(value);
        };
        FirstSubscriber.prototype._tryResultSelector = function (value, index) {
            var result;
            try {
                result = this.resultSelector(value, index);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this._emitFinal(result);
        };
        FirstSubscriber.prototype._emitFinal = function (value) {
            var destination = this.destination;
            destination.next(value);
            destination.complete();
            this.hasCompleted = true;
        };
        FirstSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
                destination.next(this.defaultValue);
                destination.complete();
            } else if (!this.hasCompleted) {
                destination.error(new EmptyError_1.EmptyError());
            }
        };
        return FirstSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.register("14f", ["91", "14c", "a8", "ad", "150", "14d", "c1", "13d", "14e", "151", "13b", "152", "153"], function($__export) {
  "use strict";
  var Observable,
      from,
      of,
      _catch,
      concatAll,
      first,
      map,
      mergeMap,
      EmptyError,
      LoadedRouterConfig,
      NavigationCancelingError,
      PRIMARY_OUTLET,
      UrlSegment,
      UrlSegmentGroup,
      UrlTree,
      andObservables,
      merge,
      waitForMap,
      wrapIntoObservable,
      NoMatch,
      AbsoluteRedirect,
      ApplyRedirects;
  function noMatch(segmentGroup) {
    return new Observable(function(obs) {
      return obs.error(new NoMatch(segmentGroup));
    });
  }
  function absoluteRedirect(segments) {
    return new Observable(function(obs) {
      return obs.error(new AbsoluteRedirect(segments));
    });
  }
  function canLoadFails(route) {
    return new Observable(function(obs) {
      return obs.error(new NavigationCancelingError("Cannot load children because the guard of the route \"path: '" + route.path + "'\" returned false"));
    });
  }
  function applyRedirects(injector, configLoader, urlTree, config) {
    return new ApplyRedirects(injector, configLoader, urlTree, config).apply();
  }
  function runGuards(injector, route) {
    var canLoad = route.canLoad;
    if (!canLoad || canLoad.length === 0)
      return of(true);
    var obs = map.call(from(canLoad), function(c) {
      var guard = injector.get(c);
      if (guard.canLoad) {
        return wrapIntoObservable(guard.canLoad(route));
      } else {
        return wrapIntoObservable(guard(route));
      }
    });
    return andObservables(obs);
  }
  function match(segmentGroup, route, segments) {
    var noMatch = {
      matched: false,
      consumedSegments: [],
      lastChild: 0,
      positionalParamSegments: {}
    };
    if (route.path === '') {
      if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {
        return {
          matched: false,
          consumedSegments: [],
          lastChild: 0,
          positionalParamSegments: {}
        };
      } else {
        return {
          matched: true,
          consumedSegments: [],
          lastChild: 0,
          positionalParamSegments: {}
        };
      }
    }
    var path = route.path;
    var parts = path.split('/');
    var positionalParamSegments = {};
    var consumedSegments = [];
    var currentIndex = 0;
    for (var i = 0; i < parts.length; ++i) {
      if (currentIndex >= segments.length)
        return noMatch;
      var current = segments[currentIndex];
      var p = parts[i];
      var isPosParam = p.startsWith(':');
      if (!isPosParam && p !== current.path)
        return noMatch;
      if (isPosParam) {
        positionalParamSegments[p.substring(1)] = current;
      }
      consumedSegments.push(current);
      currentIndex++;
    }
    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || currentIndex < segments.length)) {
      return {
        matched: false,
        consumedSegments: [],
        lastChild: 0,
        positionalParamSegments: {}
      };
    }
    return {
      matched: true,
      consumedSegments: consumedSegments,
      lastChild: currentIndex,
      positionalParamSegments: positionalParamSegments
    };
  }
  function applyRedirectCommands(segments, redirectTo, posParams) {
    var r = redirectTo.startsWith('/') ? redirectTo.substring(1) : redirectTo;
    if (r === '') {
      return [];
    } else {
      return createSegments(redirectTo, r.split('/'), segments, posParams);
    }
  }
  function createSegments(redirectTo, parts, segments, posParams) {
    return parts.map(function(p) {
      return p.startsWith(':') ? findPosParam(p, posParams, redirectTo) : findOrCreateSegment(p, segments);
    });
  }
  function findPosParam(part, posParams, redirectTo) {
    var paramName = part.substring(1);
    var pos = posParams[paramName];
    if (!pos)
      throw new Error("Cannot redirect to '" + redirectTo + "'. Cannot find '" + part + "'.");
    return pos;
  }
  function findOrCreateSegment(part, segments) {
    var idx = 0;
    for (var _i = 0,
        segments_1 = segments; _i < segments_1.length; _i++) {
      var s = segments_1[_i];
      if (s.path === part) {
        segments.splice(idx);
        return s;
      }
      idx++;
    }
    return new UrlSegment(part, {});
  }
  function split(segmentGroup, consumedSegments, slicedSegments, config) {
    if (slicedSegments.length > 0 && containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {
      var s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
      return {
        segmentGroup: mergeTrivialChildren(s),
        slicedSegments: []
      };
    } else if (slicedSegments.length === 0 && containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {
      var s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
      return {
        segmentGroup: mergeTrivialChildren(s),
        slicedSegments: slicedSegments
      };
    } else {
      return {
        segmentGroup: segmentGroup,
        slicedSegments: slicedSegments
      };
    }
  }
  function mergeTrivialChildren(s) {
    if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {
      var c = s.children[PRIMARY_OUTLET];
      return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
    } else {
      return s;
    }
  }
  function addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
    var res = {};
    for (var _i = 0,
        routes_1 = routes; _i < routes_1.length; _i++) {
      var r = routes_1[_i];
      if (emptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {
        res[getOutlet(r)] = new UrlSegmentGroup([], {});
      }
    }
    return merge(children, res);
  }
  function createChildrenForEmptySegments(routes, primarySegmentGroup) {
    var res = {};
    res[PRIMARY_OUTLET] = primarySegmentGroup;
    for (var _i = 0,
        routes_2 = routes; _i < routes_2.length; _i++) {
      var r = routes_2[_i];
      if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {
        res[getOutlet(r)] = new UrlSegmentGroup([], {});
      }
    }
    return res;
  }
  function containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, routes) {
    return routes.filter(function(r) {
      return emptyPathRedirect(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET;
    }).length > 0;
  }
  function containsEmptyPathRedirects(segmentGroup, slicedSegments, routes) {
    return routes.filter(function(r) {
      return emptyPathRedirect(segmentGroup, slicedSegments, r);
    }).length > 0;
  }
  function emptyPathRedirect(segmentGroup, slicedSegments, r) {
    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')
      return false;
    return r.path === '' && r.redirectTo !== undefined;
  }
  function getOutlet(route) {
    return route.outlet ? route.outlet : PRIMARY_OUTLET;
  }
  $__export("applyRedirects", applyRedirects);
  return {
    setters: [function($__m) {
      Observable = $__m.Observable;
    }, function($__m) {
      from = $__m.from;
    }, function($__m) {
      of = $__m.of;
    }, function($__m) {
      _catch = $__m._catch;
    }, function($__m) {
      concatAll = $__m.concatAll;
    }, function($__m) {
      first = $__m.first;
    }, function($__m) {
      map = $__m.map;
    }, function($__m) {
      mergeMap = $__m.mergeMap;
    }, function($__m) {
      EmptyError = $__m.EmptyError;
    }, function($__m) {
      LoadedRouterConfig = $__m.LoadedRouterConfig;
    }, function($__m) {
      NavigationCancelingError = $__m.NavigationCancelingError;
      PRIMARY_OUTLET = $__m.PRIMARY_OUTLET;
    }, function($__m) {
      UrlSegment = $__m.UrlSegment;
      UrlSegmentGroup = $__m.UrlSegmentGroup;
      UrlTree = $__m.UrlTree;
    }, function($__m) {
      andObservables = $__m.andObservables;
      merge = $__m.merge;
      waitForMap = $__m.waitForMap;
      wrapIntoObservable = $__m.wrapIntoObservable;
    }],
    execute: function() {
      NoMatch = (function() {
        function NoMatch(segmentGroup) {
          if (segmentGroup === void 0) {
            segmentGroup = null;
          }
          this.segmentGroup = segmentGroup;
        }
        return NoMatch;
      }());
      AbsoluteRedirect = (function() {
        function AbsoluteRedirect(segments) {
          this.segments = segments;
        }
        return AbsoluteRedirect;
      }());
      ApplyRedirects = (function() {
        function ApplyRedirects(injector, configLoader, urlTree, config) {
          this.injector = injector;
          this.configLoader = configLoader;
          this.urlTree = urlTree;
          this.config = config;
          this.allowRedirects = true;
        }
        ApplyRedirects.prototype.apply = function() {
          var _this = this;
          var expanded$ = this.expandSegmentGroup(this.injector, this.config, this.urlTree.root, PRIMARY_OUTLET);
          var urlTrees$ = map.call(expanded$, function(rootSegmentGroup) {
            return _this.createUrlTree(rootSegmentGroup);
          });
          return _catch.call(urlTrees$, function(e) {
            if (e instanceof AbsoluteRedirect) {
              _this.allowRedirects = false;
              var group = new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = new UrlSegmentGroup(e.segments, {}), _a));
              return _this.match(group);
            } else if (e instanceof NoMatch) {
              throw _this.noMatchError(e);
            } else {
              throw e;
            }
            var _a;
          });
        };
        ApplyRedirects.prototype.match = function(segmentGroup) {
          var _this = this;
          var expanded$ = this.expandSegmentGroup(this.injector, this.config, segmentGroup, PRIMARY_OUTLET);
          var mapped$ = map.call(expanded$, function(rootSegmentGroup) {
            return _this.createUrlTree(rootSegmentGroup);
          });
          return _catch.call(mapped$, function(e) {
            if (e instanceof NoMatch) {
              throw _this.noMatchError(e);
            } else {
              throw e;
            }
          });
        };
        ApplyRedirects.prototype.noMatchError = function(e) {
          return new Error("Cannot match any routes. URL Segment: '" + e.segmentGroup + "'");
        };
        ApplyRedirects.prototype.createUrlTree = function(rootCandidate) {
          var root = rootCandidate.segments.length > 0 ? new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = rootCandidate, _a)) : rootCandidate;
          return new UrlTree(root, this.urlTree.queryParams, this.urlTree.fragment);
          var _a;
        };
        ApplyRedirects.prototype.expandSegmentGroup = function(injector, routes, segmentGroup, outlet) {
          if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
            return map.call(this.expandChildren(injector, routes, segmentGroup), function(children) {
              return new UrlSegmentGroup([], children);
            });
          } else {
            return this.expandSegment(injector, segmentGroup, routes, segmentGroup.segments, outlet, true);
          }
        };
        ApplyRedirects.prototype.expandChildren = function(injector, routes, segmentGroup) {
          var _this = this;
          return waitForMap(segmentGroup.children, function(childOutlet, child) {
            return _this.expandSegmentGroup(injector, routes, child, childOutlet);
          });
        };
        ApplyRedirects.prototype.expandSegment = function(injector, segmentGroup, routes, segments, outlet, allowRedirects) {
          var _this = this;
          var routes$ = of.apply(void 0, routes);
          var processedRoutes$ = map.call(routes$, function(r) {
            var expanded$ = _this.expandSegmentAgainstRoute(injector, segmentGroup, routes, r, segments, outlet, allowRedirects);
            return _catch.call(expanded$, function(e) {
              if (e instanceof NoMatch)
                return of(null);
              else
                throw e;
            });
          });
          var concattedProcessedRoutes$ = concatAll.call(processedRoutes$);
          var first$ = first.call(concattedProcessedRoutes$, function(s) {
            return !!s;
          });
          return _catch.call(first$, function(e, _) {
            if (e instanceof EmptyError) {
              throw new NoMatch(segmentGroup);
            } else {
              throw e;
            }
          });
        };
        ApplyRedirects.prototype.expandSegmentAgainstRoute = function(injector, segmentGroup, routes, route, paths, outlet, allowRedirects) {
          if (getOutlet(route) !== outlet)
            return noMatch(segmentGroup);
          if (route.redirectTo !== undefined && !(allowRedirects && this.allowRedirects))
            return noMatch(segmentGroup);
          if (route.redirectTo === undefined) {
            return this.matchSegmentAgainstRoute(injector, segmentGroup, route, paths);
          } else {
            return this.expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, paths, outlet);
          }
        };
        ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = function(injector, segmentGroup, routes, route, segments, outlet) {
          if (route.path === '**') {
            return this.expandWildCardWithParamsAgainstRouteUsingRedirect(injector, routes, route, outlet);
          } else {
            return this.expandRegularSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, segments, outlet);
          }
        };
        ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = function(injector, routes, route, outlet) {
          var newSegments = applyRedirectCommands([], route.redirectTo, {});
          if (route.redirectTo.startsWith('/')) {
            return absoluteRedirect(newSegments);
          } else {
            var group = new UrlSegmentGroup(newSegments, {});
            return this.expandSegment(injector, group, routes, newSegments, outlet, false);
          }
        };
        ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = function(injector, segmentGroup, routes, route, segments, outlet) {
          var _a = match(segmentGroup, route, segments),
              matched = _a.matched,
              consumedSegments = _a.consumedSegments,
              lastChild = _a.lastChild,
              positionalParamSegments = _a.positionalParamSegments;
          if (!matched)
            return noMatch(segmentGroup);
          var newSegments = applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments);
          if (route.redirectTo.startsWith('/')) {
            return absoluteRedirect(newSegments);
          } else {
            return this.expandSegment(injector, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);
          }
        };
        ApplyRedirects.prototype.matchSegmentAgainstRoute = function(injector, rawSegmentGroup, route, segments) {
          var _this = this;
          if (route.path === '**') {
            if (route.loadChildren) {
              return map.call(this.configLoader.load(injector, route.loadChildren), function(r) {
                route._loadedConfig = r;
                return of(new UrlSegmentGroup(segments, {}));
              });
            } else {
              return of(new UrlSegmentGroup(segments, {}));
            }
          } else {
            var _a = match(rawSegmentGroup, route, segments),
                matched = _a.matched,
                consumedSegments_1 = _a.consumedSegments,
                lastChild = _a.lastChild;
            if (!matched)
              return noMatch(rawSegmentGroup);
            var rawSlicedSegments_1 = segments.slice(lastChild);
            var childConfig$ = this.getChildConfig(injector, route);
            return mergeMap.call(childConfig$, function(routerConfig) {
              var childInjector = routerConfig.injector;
              var childConfig = routerConfig.routes;
              var _a = split(rawSegmentGroup, consumedSegments_1, rawSlicedSegments_1, childConfig),
                  segmentGroup = _a.segmentGroup,
                  slicedSegments = _a.slicedSegments;
              if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
                var expanded$ = _this.expandChildren(childInjector, childConfig, segmentGroup);
                return map.call(expanded$, function(children) {
                  return new UrlSegmentGroup(consumedSegments_1, children);
                });
              } else if (childConfig.length === 0 && slicedSegments.length === 0) {
                return of(new UrlSegmentGroup(consumedSegments_1, {}));
              } else {
                var expanded$ = _this.expandSegment(childInjector, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);
                return map.call(expanded$, function(cs) {
                  return new UrlSegmentGroup(consumedSegments_1.concat(cs.segments), cs.children);
                });
              }
            });
          }
        };
        ApplyRedirects.prototype.getChildConfig = function(injector, route) {
          var _this = this;
          if (route.children) {
            return of(new LoadedRouterConfig(route.children, injector, null));
          } else if (route.loadChildren) {
            return mergeMap.call(runGuards(injector, route), function(shouldLoad) {
              if (shouldLoad) {
                if (route._loadedConfig) {
                  return of(route._loadedConfig);
                } else {
                  return map.call(_this.configLoader.load(injector, route.loadChildren), function(r) {
                    route._loadedConfig = r;
                    return r;
                  });
                }
              } else {
                return canLoadFails(route);
              }
            });
          } else {
            return of(new LoadedRouterConfig([], injector, null));
          }
        };
        return ApplyRedirects;
      }());
    }
  };
});

$__System.register("154", ["13b"], function($__export) {
  "use strict";
  var PRIMARY_OUTLET;
  function validateConfig(config) {
    config.forEach(validateNode);
  }
  function validateNode(route) {
    if (Array.isArray(route)) {
      throw new Error("Invalid route configuration: Array cannot be specified");
    }
    if (route.component === undefined && (route.outlet && route.outlet !== PRIMARY_OUTLET)) {
      throw new Error("Invalid route configuration of route '" + route.path + "': a componentless route cannot have a named outlet set");
    }
    if (!!route.redirectTo && !!route.children) {
      throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and children cannot be used together");
    }
    if (!!route.redirectTo && !!route.loadChildren) {
      throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and loadChildren cannot be used together");
    }
    if (!!route.children && !!route.loadChildren) {
      throw new Error("Invalid configuration of route '" + route.path + "': children and loadChildren cannot be used together");
    }
    if (!!route.redirectTo && !!route.component) {
      throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and component cannot be used together");
    }
    if (route.redirectTo === undefined && !route.component && !route.children && !route.loadChildren) {
      throw new Error("Invalid configuration of route '" + route.path + "': one of the following must be provided (component or redirectTo or children or loadChildren)");
    }
    if (route.path === undefined) {
      throw new Error("Invalid route configuration: routes must have path specified");
    }
    if (route.path.startsWith('/')) {
      throw new Error("Invalid route configuration of route '" + route.path + "': path cannot start with a slash");
    }
    if (route.path === '' && route.redirectTo !== undefined && route.pathMatch === undefined) {
      var exp = "The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.";
      throw new Error("Invalid route configuration of route '{path: \"" + route.path + "\", redirectTo: \"" + route.redirectTo + "\"}': please provide 'pathMatch'. " + exp);
    }
    if (route.pathMatch !== undefined && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {
      throw new Error("Invalid configuration of route '" + route.path + "': pathMatch can only be set to 'prefix' or 'full'");
    }
  }
  $__export("validateConfig", validateConfig);
  return {
    setters: [function($__m) {
      PRIMARY_OUTLET = $__m.PRIMARY_OUTLET;
    }],
    execute: function() {}
  };
});

$__System.register("155", ["156", "137", "157"], function($__export) {
  "use strict";
  var BehaviorSubject,
      ActivatedRoute,
      RouterState,
      TreeNode;
  function createRouterState(curr, prevState) {
    var root = createNode(curr._root, prevState ? prevState._root : undefined);
    return new RouterState(root, curr);
  }
  function createNode(curr, prevState) {
    if (prevState && equalRouteSnapshots(prevState.value.snapshot, curr.value)) {
      var value = prevState.value;
      value._futureSnapshot = curr.value;
      var children = createOrReuseChildren(curr, prevState);
      return new TreeNode(value, children);
    } else {
      var value = createActivatedRoute(curr.value);
      var children = curr.children.map(function(c) {
        return createNode(c);
      });
      return new TreeNode(value, children);
    }
  }
  function createOrReuseChildren(curr, prevState) {
    return curr.children.map(function(child) {
      for (var _i = 0,
          _a = prevState.children; _i < _a.length; _i++) {
        var p = _a[_i];
        if (equalRouteSnapshots(p.value.snapshot, child.value)) {
          return createNode(child, p);
        }
      }
      return createNode(child);
    });
  }
  function createActivatedRoute(c) {
    return new ActivatedRoute(new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams), new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);
  }
  function equalRouteSnapshots(a, b) {
    return a._routeConfig === b._routeConfig;
  }
  $__export("createRouterState", createRouterState);
  return {
    setters: [function($__m) {
      BehaviorSubject = $__m.BehaviorSubject;
    }, function($__m) {
      ActivatedRoute = $__m.ActivatedRoute;
      RouterState = $__m.RouterState;
    }, function($__m) {
      TreeNode = $__m.TreeNode;
    }],
    execute: function() {}
  };
});

$__System.register("158", ["13b", "152", "153"], function($__export) {
  "use strict";
  var PRIMARY_OUTLET,
      UrlSegment,
      UrlSegmentGroup,
      UrlTree,
      forEach,
      shallowEqual,
      NormalizedNavigationCommands,
      Position;
  function createUrlTree(route, urlTree, commands, queryParams, fragment) {
    if (commands.length === 0) {
      return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);
    }
    var normalizedCommands = normalizeCommands(commands);
    validateCommands(normalizedCommands);
    if (navigateToRoot(normalizedCommands)) {
      return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);
    }
    var startingPosition = findStartingPosition(normalizedCommands, urlTree, route);
    var segmentGroup = startingPosition.processChildren ? updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, normalizedCommands.commands) : updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, normalizedCommands.commands);
    return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);
  }
  function validateCommands(n) {
    if (n.isAbsolute && n.commands.length > 0 && isMatrixParams(n.commands[0])) {
      throw new Error('Root segment cannot have matrix parameters');
    }
    var c = n.commands.filter(function(c) {
      return (typeof c === 'undefined' ? 'undefined' : $traceurRuntime.typeof(c)) === 'object' && c.outlets !== undefined;
    });
    if (c.length > 0 && c[0] !== n.commands[n.commands.length - 1]) {
      throw new Error('{outlets:{}} has to be the last command');
    }
  }
  function isMatrixParams(command) {
    return (typeof command === 'undefined' ? 'undefined' : $traceurRuntime.typeof(command)) === 'object' && command.outlets === undefined && command.segmentPath === undefined;
  }
  function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {
    if (urlTree.root === oldSegmentGroup) {
      return new UrlTree(newSegmentGroup, stringify(queryParams), fragment);
    } else {
      return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), stringify(queryParams), fragment);
    }
  }
  function replaceSegment(current, oldSegment, newSegment) {
    var children = {};
    forEach(current.children, function(c, outletName) {
      if (c === oldSegment) {
        children[outletName] = newSegment;
      } else {
        children[outletName] = replaceSegment(c, oldSegment, newSegment);
      }
    });
    return new UrlSegmentGroup(current.segments, children);
  }
  function navigateToRoot(normalizedChange) {
    return normalizedChange.isAbsolute && normalizedChange.commands.length === 1 && normalizedChange.commands[0] == '/';
  }
  function normalizeCommands(commands) {
    if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] == '/') {
      return new NormalizedNavigationCommands(true, 0, commands);
    }
    var numberOfDoubleDots = 0;
    var isAbsolute = false;
    var res = [];
    var _loop_1 = function(i) {
      var c = commands[i];
      if ((typeof c === 'undefined' ? 'undefined' : $traceurRuntime.typeof(c)) === 'object' && c.outlets !== undefined) {
        var r_1 = {};
        forEach(c.outlets, function(commands, name) {
          if (typeof commands === 'string') {
            r_1[name] = commands.split('/');
          } else {
            r_1[name] = commands;
          }
        });
        res.push({outlets: r_1});
        return "continue";
      }
      if ((typeof c === 'undefined' ? 'undefined' : $traceurRuntime.typeof(c)) === 'object' && c.segmentPath !== undefined) {
        res.push(c.segmentPath);
        return "continue";
      }
      if (!(typeof c === 'string')) {
        res.push(c);
        return "continue";
      }
      if (i === 0) {
        var parts = c.split('/');
        for (var j = 0; j < parts.length; ++j) {
          var cc = parts[j];
          if (j == 0 && cc == '.') {} else if (j == 0 && cc == '') {
            isAbsolute = true;
          } else if (cc == '..') {
            numberOfDoubleDots++;
          } else if (cc != '') {
            res.push(cc);
          }
        }
      } else {
        res.push(c);
      }
    };
    for (var i = 0; i < commands.length; ++i) {
      _loop_1(i);
    }
    return new NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, res);
  }
  function findStartingPosition(normalizedChange, urlTree, route) {
    if (normalizedChange.isAbsolute) {
      return new Position(urlTree.root, true, 0);
    } else if (route.snapshot._lastPathIndex === -1) {
      return new Position(route.snapshot._urlSegment, true, 0);
    } else {
      var modifier = isMatrixParams(normalizedChange.commands[0]) ? 0 : 1;
      var index = route.snapshot._lastPathIndex + modifier;
      return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, normalizedChange.numberOfDoubleDots);
    }
  }
  function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {
    var g = group;
    var ci = index;
    var dd = numberOfDoubleDots;
    while (dd > ci) {
      dd -= ci;
      g = g.parent;
      if (!g) {
        throw new Error('Invalid number of \'../\'');
      }
      ci = g.segments.length;
    }
    return new Position(g, false, ci - dd);
  }
  function getPath(command) {
    if ((typeof command === 'undefined' ? 'undefined' : $traceurRuntime.typeof(command)) === 'object' && command.outlets)
      return command.outlets[PRIMARY_OUTLET];
    return "" + command;
  }
  function getOutlets(commands) {
    if (!($traceurRuntime.typeof(commands[0]) === 'object'))
      return (_a = {}, _a[PRIMARY_OUTLET] = commands, _a);
    if (commands[0].outlets === undefined)
      return (_b = {}, _b[PRIMARY_OUTLET] = commands, _b);
    return commands[0].outlets;
    var _a,
        _b;
  }
  function updateSegmentGroup(segmentGroup, startIndex, commands) {
    if (!segmentGroup) {
      segmentGroup = new UrlSegmentGroup([], {});
    }
    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
      return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
    }
    var m = prefixedWith(segmentGroup, startIndex, commands);
    var slicedCommands = commands.slice(m.commandIndex);
    if (m.match && m.pathIndex < segmentGroup.segments.length) {
      var g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});
      g.children[PRIMARY_OUTLET] = new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);
      return updateSegmentGroupChildren(g, 0, slicedCommands);
    } else if (m.match && slicedCommands.length === 0) {
      return new UrlSegmentGroup(segmentGroup.segments, {});
    } else if (m.match && !segmentGroup.hasChildren()) {
      return createNewSegmentGroup(segmentGroup, startIndex, commands);
    } else if (m.match) {
      return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
    } else {
      return createNewSegmentGroup(segmentGroup, startIndex, commands);
    }
  }
  function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
    if (commands.length === 0) {
      return new UrlSegmentGroup(segmentGroup.segments, {});
    } else {
      var outlets_1 = getOutlets(commands);
      var children_1 = {};
      forEach(outlets_1, function(commands, outlet) {
        if (commands !== null) {
          children_1[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);
        }
      });
      forEach(segmentGroup.children, function(child, childOutlet) {
        if (outlets_1[childOutlet] === undefined) {
          children_1[childOutlet] = child;
        }
      });
      return new UrlSegmentGroup(segmentGroup.segments, children_1);
    }
  }
  function prefixedWith(segmentGroup, startIndex, commands) {
    var currentCommandIndex = 0;
    var currentPathIndex = startIndex;
    var noMatch = {
      match: false,
      pathIndex: 0,
      commandIndex: 0
    };
    while (currentPathIndex < segmentGroup.segments.length) {
      if (currentCommandIndex >= commands.length)
        return noMatch;
      var path = segmentGroup.segments[currentPathIndex];
      var curr = getPath(commands[currentCommandIndex]);
      var next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
      if (currentPathIndex > 0 && curr === undefined)
        break;
      if (curr && next && ((typeof next === 'undefined' ? 'undefined' : $traceurRuntime.typeof(next)) === 'object') && next.outlets === undefined) {
        if (!compare(curr, next, path))
          return noMatch;
        currentCommandIndex += 2;
      } else {
        if (!compare(curr, {}, path))
          return noMatch;
        currentCommandIndex++;
      }
      currentPathIndex++;
    }
    return {
      match: true,
      pathIndex: currentPathIndex,
      commandIndex: currentCommandIndex
    };
  }
  function createNewSegmentGroup(segmentGroup, startIndex, commands) {
    var paths = segmentGroup.segments.slice(0, startIndex);
    var i = 0;
    while (i < commands.length) {
      if ($traceurRuntime.typeof(commands[i]) === 'object' && commands[i].outlets !== undefined) {
        var children = createNewSegmentChldren(commands[i].outlets);
        return new UrlSegmentGroup(paths, children);
      }
      if (i === 0 && isMatrixParams(commands[0])) {
        var p = segmentGroup.segments[startIndex];
        paths.push(new UrlSegment(p.path, commands[0]));
        i++;
        continue;
      }
      var curr = getPath(commands[i]);
      var next = (i < commands.length - 1) ? commands[i + 1] : null;
      if (curr && next && isMatrixParams(next)) {
        paths.push(new UrlSegment(curr, stringify(next)));
        i += 2;
      } else {
        paths.push(new UrlSegment(curr, {}));
        i++;
      }
    }
    return new UrlSegmentGroup(paths, {});
  }
  function createNewSegmentChldren(outlets) {
    var children = {};
    forEach(outlets, function(commands, outlet) {
      if (commands !== null) {
        children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);
      }
    });
    return children;
  }
  function stringify(params) {
    var res = {};
    forEach(params, function(v, k) {
      return res[k] = "" + v;
    });
    return res;
  }
  function compare(path, params, segment) {
    return path == segment.path && shallowEqual(params, segment.parameters);
  }
  $__export("createUrlTree", createUrlTree);
  return {
    setters: [function($__m) {
      PRIMARY_OUTLET = $__m.PRIMARY_OUTLET;
    }, function($__m) {
      UrlSegment = $__m.UrlSegment;
      UrlSegmentGroup = $__m.UrlSegmentGroup;
      UrlTree = $__m.UrlTree;
    }, function($__m) {
      forEach = $__m.forEach;
      shallowEqual = $__m.shallowEqual;
    }],
    execute: function() {
      NormalizedNavigationCommands = (function() {
        function NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, commands) {
          this.isAbsolute = isAbsolute;
          this.numberOfDoubleDots = numberOfDoubleDots;
          this.commands = commands;
        }
        return NormalizedNavigationCommands;
      }());
      Position = (function() {
        function Position(segmentGroup, processChildren, index) {
          this.segmentGroup = segmentGroup;
          this.processChildren = processChildren;
          this.index = index;
        }
        return Position;
      }());
    }
  };
});

$__System.register("159", ["91", "a8", "137", "13b", "152", "153", "157"], function($__export) {
  "use strict";
  var Observable,
      of,
      ActivatedRouteSnapshot,
      RouterStateSnapshot,
      inheritedParamsDataResolve,
      PRIMARY_OUTLET,
      UrlSegmentGroup,
      mapChildrenIntoArray,
      last,
      merge,
      TreeNode,
      NoMatch,
      Recognizer;
  function recognize(rootComponentType, config, urlTree, url) {
    return new Recognizer(rootComponentType, config, urlTree, url).recognize();
  }
  function sortActivatedRouteSnapshots(nodes) {
    nodes.sort(function(a, b) {
      if (a.value.outlet === PRIMARY_OUTLET)
        return -1;
      if (b.value.outlet === PRIMARY_OUTLET)
        return 1;
      return a.value.outlet.localeCompare(b.value.outlet);
    });
  }
  function getChildConfig(route) {
    if (route.children) {
      return route.children;
    } else if (route.loadChildren) {
      return route._loadedConfig.routes;
    } else {
      return [];
    }
  }
  function match(segmentGroup, route, segments) {
    if (route.path === '') {
      if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {
        throw new NoMatch();
      } else {
        return {
          consumedSegments: [],
          lastChild: 0,
          parameters: {}
        };
      }
    }
    var path = route.path;
    var parts = path.split('/');
    var posParameters = {};
    var consumedSegments = [];
    var currentIndex = 0;
    for (var i = 0; i < parts.length; ++i) {
      if (currentIndex >= segments.length)
        throw new NoMatch();
      var current = segments[currentIndex];
      var p = parts[i];
      var isPosParam = p.startsWith(':');
      if (!isPosParam && p !== current.path)
        throw new NoMatch();
      if (isPosParam) {
        posParameters[p.substring(1)] = current.path;
      }
      consumedSegments.push(current);
      currentIndex++;
    }
    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || currentIndex < segments.length)) {
      throw new NoMatch();
    }
    var parameters = merge(posParameters, consumedSegments[consumedSegments.length - 1].parameters);
    return {
      consumedSegments: consumedSegments,
      lastChild: currentIndex,
      parameters: parameters
    };
  }
  function checkOutletNameUniqueness(nodes) {
    var names = {};
    nodes.forEach(function(n) {
      var routeWithSameOutletName = names[n.value.outlet];
      if (routeWithSameOutletName) {
        var p = routeWithSameOutletName.url.map(function(s) {
          return s.toString();
        }).join('/');
        var c = n.value.url.map(function(s) {
          return s.toString();
        }).join('/');
        throw new Error("Two segments cannot have the same outlet name: '" + p + "' and '" + c + "'.");
      }
      names[n.value.outlet] = n.value;
    });
  }
  function getSourceSegmentGroup(segmentGroup) {
    var s = segmentGroup;
    while (s._sourceSegment) {
      s = s._sourceSegment;
    }
    return s;
  }
  function getPathIndexShift(segmentGroup) {
    var s = segmentGroup;
    var res = (s._segmentIndexShift ? s._segmentIndexShift : 0);
    while (s._sourceSegment) {
      s = s._sourceSegment;
      res += (s._segmentIndexShift ? s._segmentIndexShift : 0);
    }
    return res - 1;
  }
  function split(segmentGroup, consumedSegments, slicedSegments, config) {
    if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {
      var s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
      s._sourceSegment = segmentGroup;
      s._segmentIndexShift = consumedSegments.length;
      return {
        segmentGroup: s,
        slicedSegments: []
      };
    } else if (slicedSegments.length === 0 && containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {
      var s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
      s._sourceSegment = segmentGroup;
      s._segmentIndexShift = consumedSegments.length;
      return {
        segmentGroup: s,
        slicedSegments: slicedSegments
      };
    } else {
      var s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
      s._sourceSegment = segmentGroup;
      s._segmentIndexShift = consumedSegments.length;
      return {
        segmentGroup: s,
        slicedSegments: slicedSegments
      };
    }
  }
  function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
    var res = {};
    for (var _i = 0,
        routes_1 = routes; _i < routes_1.length; _i++) {
      var r = routes_1[_i];
      if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {
        var s = new UrlSegmentGroup([], {});
        s._sourceSegment = segmentGroup;
        s._segmentIndexShift = segmentGroup.segments.length;
        res[getOutlet(r)] = s;
      }
    }
    return merge(children, res);
  }
  function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {
    var res = {};
    res[PRIMARY_OUTLET] = primarySegment;
    primarySegment._sourceSegment = segmentGroup;
    primarySegment._segmentIndexShift = consumedSegments.length;
    for (var _i = 0,
        routes_2 = routes; _i < routes_2.length; _i++) {
      var r = routes_2[_i];
      if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {
        var s = new UrlSegmentGroup([], {});
        s._sourceSegment = segmentGroup;
        s._segmentIndexShift = consumedSegments.length;
        res[getOutlet(r)] = s;
      }
    }
    return res;
  }
  function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {
    return routes.filter(function(r) {
      return emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET;
    }).length > 0;
  }
  function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {
    return routes.filter(function(r) {
      return emptyPathMatch(segmentGroup, slicedSegments, r);
    }).length > 0;
  }
  function emptyPathMatch(segmentGroup, slicedSegments, r) {
    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')
      return false;
    return r.path === '' && r.redirectTo === undefined;
  }
  function getOutlet(route) {
    return route.outlet ? route.outlet : PRIMARY_OUTLET;
  }
  function getData(route) {
    return route.data ? route.data : {};
  }
  function getResolve(route) {
    return route.resolve ? route.resolve : {};
  }
  $__export("recognize", recognize);
  return {
    setters: [function($__m) {
      Observable = $__m.Observable;
    }, function($__m) {
      of = $__m.of;
    }, function($__m) {
      ActivatedRouteSnapshot = $__m.ActivatedRouteSnapshot;
      RouterStateSnapshot = $__m.RouterStateSnapshot;
      inheritedParamsDataResolve = $__m.inheritedParamsDataResolve;
    }, function($__m) {
      PRIMARY_OUTLET = $__m.PRIMARY_OUTLET;
    }, function($__m) {
      UrlSegmentGroup = $__m.UrlSegmentGroup;
      mapChildrenIntoArray = $__m.mapChildrenIntoArray;
    }, function($__m) {
      last = $__m.last;
      merge = $__m.merge;
    }, function($__m) {
      TreeNode = $__m.TreeNode;
    }],
    execute: function() {
      NoMatch = (function() {
        function NoMatch() {}
        return NoMatch;
      }());
      Recognizer = (function() {
        function Recognizer(rootComponentType, config, urlTree, url) {
          this.rootComponentType = rootComponentType;
          this.config = config;
          this.urlTree = urlTree;
          this.url = url;
        }
        Recognizer.prototype.recognize = function() {
          try {
            var rootSegmentGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;
            var children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);
            var root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});
            var rootNode = new TreeNode(root, children);
            var routeState = new RouterStateSnapshot(this.url, rootNode);
            this.inheriteParamsAndData(routeState._root);
            return of(routeState);
          } catch (e) {
            return new Observable(function(obs) {
              return obs.error(e);
            });
          }
        };
        Recognizer.prototype.inheriteParamsAndData = function(routeNode) {
          var _this = this;
          var route = routeNode.value;
          var i = inheritedParamsDataResolve(route);
          route.params = Object.freeze(i.params);
          route.data = Object.freeze(i.data);
          routeNode.children.forEach(function(n) {
            return _this.inheriteParamsAndData(n);
          });
        };
        Recognizer.prototype.processSegmentGroup = function(config, segmentGroup, outlet) {
          if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
            return this.processChildren(config, segmentGroup);
          } else {
            return this.processSegment(config, segmentGroup, 0, segmentGroup.segments, outlet);
          }
        };
        Recognizer.prototype.processChildren = function(config, segmentGroup) {
          var _this = this;
          var children = mapChildrenIntoArray(segmentGroup, function(child, childOutlet) {
            return _this.processSegmentGroup(config, child, childOutlet);
          });
          checkOutletNameUniqueness(children);
          sortActivatedRouteSnapshots(children);
          return children;
        };
        Recognizer.prototype.processSegment = function(config, segmentGroup, pathIndex, segments, outlet) {
          for (var _i = 0,
              config_1 = config; _i < config_1.length; _i++) {
            var r = config_1[_i];
            try {
              return this.processSegmentAgainstRoute(r, segmentGroup, pathIndex, segments, outlet);
            } catch (e) {
              if (!(e instanceof NoMatch))
                throw e;
            }
          }
          throw new NoMatch();
        };
        Recognizer.prototype.processSegmentAgainstRoute = function(route, rawSegment, pathIndex, segments, outlet) {
          if (route.redirectTo)
            throw new NoMatch();
          if ((route.outlet ? route.outlet : PRIMARY_OUTLET) !== outlet)
            throw new NoMatch();
          if (route.path === '**') {
            var params = segments.length > 0 ? last(segments).parameters : {};
            var snapshot_1 = new ActivatedRouteSnapshot(segments, params, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));
            return [new TreeNode(snapshot_1, [])];
          }
          var _a = match(rawSegment, route, segments),
              consumedSegments = _a.consumedSegments,
              parameters = _a.parameters,
              lastChild = _a.lastChild;
          var rawSlicedSegments = segments.slice(lastChild);
          var childConfig = getChildConfig(route);
          var _b = split(rawSegment, consumedSegments, rawSlicedSegments, childConfig),
              segmentGroup = _b.segmentGroup,
              slicedSegments = _b.slicedSegments;
          var snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));
          if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
            var children = this.processChildren(childConfig, segmentGroup);
            return [new TreeNode(snapshot, children)];
          } else if (childConfig.length === 0 && slicedSegments.length === 0) {
            return [new TreeNode(snapshot, [])];
          } else {
            var children = this.processSegment(childConfig, segmentGroup, pathIndex + lastChild, slicedSegments, PRIMARY_OUTLET);
            return [new TreeNode(snapshot, children)];
          }
        };
        return Recognizer;
      }());
    }
  };
});

$__System.register("13a", [], function($__export) {
  "use strict";
  var RouterOutletMap;
  return {
    setters: [],
    execute: function() {
      RouterOutletMap = (function() {
        function RouterOutletMap() {
          this._outlets = {};
        }
        RouterOutletMap.prototype.registerOutlet = function(name, outlet) {
          this._outlets[name] = outlet;
        };
        RouterOutletMap.prototype.removeOutlet = function(name) {
          this._outlets[name] = undefined;
        };
        return RouterOutletMap;
      }());
      $__export("RouterOutletMap", RouterOutletMap);
    }
  };
});

$__System.register("136", ["c", "90", "14c", "a8", "13c", "15a", "c1", "15b", "13d", "13e", "14f", "154", "155", "158", "159", "151", "13a", "137", "13b", "152", "153"], function($__export) {
  "use strict";
  var ComponentFactoryResolver,
      ReflectiveInjector,
      Subject,
      from,
      of,
      concatMap,
      every,
      map,
      mergeAll,
      mergeMap,
      reduce,
      applyRedirects,
      validateConfig,
      createRouterState,
      createUrlTree,
      recognize,
      RouterConfigLoader,
      RouterOutletMap,
      ActivatedRoute,
      advanceActivatedRoute,
      createEmptyState,
      inheritedParamsDataResolve,
      NavigationCancelingError,
      PRIMARY_OUTLET,
      UrlTree,
      containsTree,
      createEmptyUrlTree,
      andObservables,
      forEach,
      merge,
      shallowEqual,
      waitForMap,
      wrapIntoObservable,
      NavigationStart,
      NavigationEnd,
      NavigationCancel,
      NavigationError,
      RoutesRecognized,
      Router,
      CanActivate,
      CanDeactivate,
      PreActivation,
      ActivateRoutes;
  function defaultErrorHandler(error) {
    throw error;
  }
  function parentLoadedConfig(snapshot) {
    var s = snapshot.parent;
    while (s) {
      var c = s._routeConfig;
      if (c && c._loadedConfig)
        return c._loadedConfig;
      if (c && c.component)
        return null;
      s = s.parent;
    }
    return null;
  }
  function closestLoadedConfig(snapshot) {
    if (!snapshot)
      return null;
    var s = snapshot.parent;
    while (s) {
      var c = s._routeConfig;
      if (c && c._loadedConfig)
        return c._loadedConfig;
      s = s.parent;
    }
    return null;
  }
  function nodeChildrenAsMap(node) {
    return node ? node.children.reduce(function(m, c) {
      m[c.value.outlet] = c;
      return m;
    }, {}) : {};
  }
  function getOutlet(outletMap, route) {
    var outlet = outletMap._outlets[route.outlet];
    if (!outlet) {
      var componentName = route.component.name;
      if (route.outlet === PRIMARY_OUTLET) {
        throw new Error("Cannot find primary outlet to load '" + componentName + "'");
      } else {
        throw new Error("Cannot find the outlet " + route.outlet + " to load '" + componentName + "'");
      }
    }
    return outlet;
  }
  return {
    setters: [function($__m) {
      ComponentFactoryResolver = $__m.ComponentFactoryResolver;
      ReflectiveInjector = $__m.ReflectiveInjector;
    }, function($__m) {
      Subject = $__m.Subject;
    }, function($__m) {
      from = $__m.from;
    }, function($__m) {
      of = $__m.of;
    }, function($__m) {
      concatMap = $__m.concatMap;
    }, function($__m) {
      every = $__m.every;
    }, function($__m) {
      map = $__m.map;
    }, function($__m) {
      mergeAll = $__m.mergeAll;
    }, function($__m) {
      mergeMap = $__m.mergeMap;
    }, function($__m) {
      reduce = $__m.reduce;
    }, function($__m) {
      applyRedirects = $__m.applyRedirects;
    }, function($__m) {
      validateConfig = $__m.validateConfig;
    }, function($__m) {
      createRouterState = $__m.createRouterState;
    }, function($__m) {
      createUrlTree = $__m.createUrlTree;
    }, function($__m) {
      recognize = $__m.recognize;
    }, function($__m) {
      RouterConfigLoader = $__m.RouterConfigLoader;
    }, function($__m) {
      RouterOutletMap = $__m.RouterOutletMap;
    }, function($__m) {
      ActivatedRoute = $__m.ActivatedRoute;
      advanceActivatedRoute = $__m.advanceActivatedRoute;
      createEmptyState = $__m.createEmptyState;
      inheritedParamsDataResolve = $__m.inheritedParamsDataResolve;
    }, function($__m) {
      NavigationCancelingError = $__m.NavigationCancelingError;
      PRIMARY_OUTLET = $__m.PRIMARY_OUTLET;
    }, function($__m) {
      UrlTree = $__m.UrlTree;
      containsTree = $__m.containsTree;
      createEmptyUrlTree = $__m.createEmptyUrlTree;
    }, function($__m) {
      andObservables = $__m.andObservables;
      forEach = $__m.forEach;
      merge = $__m.merge;
      shallowEqual = $__m.shallowEqual;
      waitForMap = $__m.waitForMap;
      wrapIntoObservable = $__m.wrapIntoObservable;
    }],
    execute: function() {
      NavigationStart = (function() {
        function NavigationStart(id, url) {
          this.id = id;
          this.url = url;
        }
        NavigationStart.prototype.toString = function() {
          return "NavigationStart(id: " + this.id + ", url: '" + this.url + "')";
        };
        return NavigationStart;
      }());
      $__export("NavigationStart", NavigationStart);
      NavigationEnd = (function() {
        function NavigationEnd(id, url, urlAfterRedirects) {
          this.id = id;
          this.url = url;
          this.urlAfterRedirects = urlAfterRedirects;
        }
        NavigationEnd.prototype.toString = function() {
          return "NavigationEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "')";
        };
        return NavigationEnd;
      }());
      $__export("NavigationEnd", NavigationEnd);
      NavigationCancel = (function() {
        function NavigationCancel(id, url, reason) {
          this.id = id;
          this.url = url;
          this.reason = reason;
        }
        NavigationCancel.prototype.toString = function() {
          return "NavigationCancel(id: " + this.id + ", url: '" + this.url + "')";
        };
        return NavigationCancel;
      }());
      $__export("NavigationCancel", NavigationCancel);
      NavigationError = (function() {
        function NavigationError(id, url, error) {
          this.id = id;
          this.url = url;
          this.error = error;
        }
        NavigationError.prototype.toString = function() {
          return "NavigationError(id: " + this.id + ", url: '" + this.url + "', error: " + this.error + ")";
        };
        return NavigationError;
      }());
      $__export("NavigationError", NavigationError);
      RoutesRecognized = (function() {
        function RoutesRecognized(id, url, urlAfterRedirects, state) {
          this.id = id;
          this.url = url;
          this.urlAfterRedirects = urlAfterRedirects;
          this.state = state;
        }
        RoutesRecognized.prototype.toString = function() {
          return "RoutesRecognized(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
        };
        return RoutesRecognized;
      }());
      $__export("RoutesRecognized", RoutesRecognized);
      Router = (function() {
        function Router(rootComponentType, urlSerializer, outletMap, location, injector, loader, compiler, config) {
          this.rootComponentType = rootComponentType;
          this.urlSerializer = urlSerializer;
          this.outletMap = outletMap;
          this.location = location;
          this.injector = injector;
          this.config = config;
          this.navigationId = 0;
          this.errorHandler = defaultErrorHandler;
          this.navigated = false;
          this.resetConfig(config);
          this.routerEvents = new Subject();
          this.currentUrlTree = createEmptyUrlTree();
          this.configLoader = new RouterConfigLoader(loader, compiler);
          this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);
        }
        Router.prototype.resetRootComponentType = function(rootComponentType) {
          this.rootComponentType = rootComponentType;
          this.currentRouterState.root.component = this.rootComponentType;
        };
        Router.prototype.initialNavigation = function() {
          this.setUpLocationChangeListener();
          this.navigateByUrl(this.location.path(true), {replaceUrl: true});
        };
        Router.prototype.setUpLocationChangeListener = function() {
          var _this = this;
          this.locationSubscription = this.location.subscribe(Zone.current.wrap(function(change) {
            var tree = _this.urlSerializer.parse(change['url']);
            return _this.currentUrlTree.toString() !== tree.toString() ? _this.scheduleNavigation(tree, {
              skipLocationChange: change['pop'],
              replaceUrl: true
            }) : null;
          }));
        };
        Object.defineProperty(Router.prototype, "routerState", {
          get: function() {
            return this.currentRouterState;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Router.prototype, "url", {
          get: function() {
            return this.serializeUrl(this.currentUrlTree);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Router.prototype, "events", {
          get: function() {
            return this.routerEvents;
          },
          enumerable: true,
          configurable: true
        });
        Router.prototype.resetConfig = function(config) {
          validateConfig(config);
          this.config = config;
        };
        Router.prototype.ngOnDestroy = function() {
          this.dispose();
        };
        Router.prototype.dispose = function() {
          this.locationSubscription.unsubscribe();
        };
        Router.prototype.createUrlTree = function(commands, _a) {
          var _b = _a === void 0 ? {} : _a,
              relativeTo = _b.relativeTo,
              queryParams = _b.queryParams,
              fragment = _b.fragment,
              preserveQueryParams = _b.preserveQueryParams,
              preserveFragment = _b.preserveFragment;
          var a = relativeTo ? relativeTo : this.routerState.root;
          var q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams;
          var f = preserveFragment ? this.currentUrlTree.fragment : fragment;
          return createUrlTree(a, this.currentUrlTree, commands, q, f);
        };
        Router.prototype.navigateByUrl = function(url, extras) {
          if (extras === void 0) {
            extras = {skipLocationChange: false};
          }
          if (url instanceof UrlTree) {
            return this.scheduleNavigation(url, extras);
          } else {
            var urlTree = this.urlSerializer.parse(url);
            return this.scheduleNavigation(urlTree, extras);
          }
        };
        Router.prototype.navigate = function(commands, extras) {
          if (extras === void 0) {
            extras = {skipLocationChange: false};
          }
          return this.scheduleNavigation(this.createUrlTree(commands, extras), extras);
        };
        Router.prototype.serializeUrl = function(url) {
          return this.urlSerializer.serialize(url);
        };
        Router.prototype.parseUrl = function(url) {
          return this.urlSerializer.parse(url);
        };
        Router.prototype.isActive = function(url, exact) {
          if (url instanceof UrlTree) {
            return containsTree(this.currentUrlTree, url, exact);
          } else {
            var urlTree = this.urlSerializer.parse(url);
            return containsTree(this.currentUrlTree, urlTree, exact);
          }
        };
        Router.prototype.scheduleNavigation = function(url, extras) {
          var _this = this;
          var id = ++this.navigationId;
          this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
          return Promise.resolve().then(function(_) {
            return _this.runNavigate(url, extras.skipLocationChange, extras.replaceUrl, id);
          });
        };
        Router.prototype.runNavigate = function(url, shouldPreventPushState, shouldReplaceUrl, id) {
          var _this = this;
          if (id !== this.navigationId) {
            this.location.go(this.urlSerializer.serialize(this.currentUrlTree));
            this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), "Navigation ID " + id + " is not equal to the current navigation id " + this.navigationId));
            return Promise.resolve(false);
          }
          return new Promise(function(resolvePromise, rejectPromise) {
            var state;
            var navigationIsSuccessful;
            var preActivation;
            var appliedUrl;
            var storedState = _this.currentRouterState;
            var storedUrl = _this.currentUrlTree;
            var redirectsApplied$ = applyRedirects(_this.injector, _this.configLoader, url, _this.config);
            var snapshot$ = mergeMap.call(redirectsApplied$, function(u) {
              appliedUrl = u;
              return recognize(_this.rootComponentType, _this.config, appliedUrl, _this.serializeUrl(appliedUrl));
            });
            var emitRecognzied$ = map.call(snapshot$, function(newRouterStateSnapshot) {
              _this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl), newRouterStateSnapshot));
              return newRouterStateSnapshot;
            });
            var routerState$ = map.call(emitRecognzied$, function(routerStateSnapshot) {
              return createRouterState(routerStateSnapshot, _this.currentRouterState);
            });
            var preactivation$ = map.call(routerState$, function(newState) {
              state = newState;
              preActivation = new PreActivation(state.snapshot, _this.currentRouterState.snapshot, _this.injector);
              preActivation.traverse(_this.outletMap);
            });
            var preactivation2$ = mergeMap.call(preactivation$, function() {
              return preActivation.checkGuards();
            });
            var resolveData$ = mergeMap.call(preactivation2$, function(shouldActivate) {
              if (shouldActivate) {
                return map.call(preActivation.resolveData(), function() {
                  return shouldActivate;
                });
              } else {
                return of(shouldActivate);
              }
            });
            resolveData$.forEach(function(shouldActivate) {
              if (!shouldActivate || id !== _this.navigationId) {
                navigationIsSuccessful = false;
                return;
              }
              _this.currentUrlTree = appliedUrl;
              _this.currentRouterState = state;
              if (!shouldPreventPushState) {
                var path = _this.urlSerializer.serialize(appliedUrl);
                if (_this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {
                  _this.location.replaceState(path);
                } else {
                  _this.location.go(path);
                }
              }
              new ActivateRoutes(state, storedState).activate(_this.outletMap);
              navigationIsSuccessful = true;
            }).then(function() {
              _this.navigated = true;
              if (navigationIsSuccessful) {
                _this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl)));
                resolvePromise(true);
              } else {
                _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), ''));
                resolvePromise(false);
              }
            }, function(e) {
              if (e instanceof NavigationCancelingError) {
                _this.navigated = true;
                _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), e.message));
                resolvePromise(false);
              } else {
                _this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));
                try {
                  resolvePromise(_this.errorHandler(e));
                } catch (ee) {
                  rejectPromise(ee);
                }
              }
              if (id === _this.navigationId) {
                _this.currentRouterState = storedState;
                _this.currentUrlTree = storedUrl;
                _this.location.replaceState(_this.serializeUrl(storedUrl));
              }
            });
          });
        };
        return Router;
      }());
      $__export("Router", Router);
      CanActivate = (function() {
        function CanActivate(path) {
          this.path = path;
        }
        Object.defineProperty(CanActivate.prototype, "route", {
          get: function() {
            return this.path[this.path.length - 1];
          },
          enumerable: true,
          configurable: true
        });
        return CanActivate;
      }());
      CanDeactivate = (function() {
        function CanDeactivate(component, route) {
          this.component = component;
          this.route = route;
        }
        return CanDeactivate;
      }());
      PreActivation = (function() {
        function PreActivation(future, curr, injector) {
          this.future = future;
          this.curr = curr;
          this.injector = injector;
          this.checks = [];
        }
        PreActivation.prototype.traverse = function(parentOutletMap) {
          var futureRoot = this.future._root;
          var currRoot = this.curr ? this.curr._root : null;
          this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap, [futureRoot.value]);
        };
        PreActivation.prototype.checkGuards = function() {
          var _this = this;
          if (this.checks.length === 0)
            return of(true);
          var checks$ = from(this.checks);
          var runningChecks$ = map.call(checks$, function(s) {
            if (s instanceof CanActivate) {
              return andObservables(from([_this.runCanActivateChild(s.path), _this.runCanActivate(s.route)]));
            } else if (s instanceof CanDeactivate) {
              var s2 = s;
              return _this.runCanDeactivate(s2.component, s2.route);
            } else {
              throw new Error('Cannot be reached');
            }
          });
          var mergedChecks$ = mergeAll.call(runningChecks$);
          return every.call(mergedChecks$, function(result) {
            return result === true;
          });
        };
        PreActivation.prototype.resolveData = function() {
          var _this = this;
          if (this.checks.length === 0)
            return of(null);
          var checks$ = from(this.checks);
          var runningChecks$ = concatMap.call(checks$, function(s) {
            if (s instanceof CanActivate) {
              return _this.runResolve(s.route);
            } else {
              return of(null);
            }
          });
          return reduce.call(runningChecks$, function(_, __) {
            return _;
          });
        };
        PreActivation.prototype.traverseChildRoutes = function(futureNode, currNode, outletMap, futurePath) {
          var _this = this;
          var prevChildren = nodeChildrenAsMap(currNode);
          futureNode.children.forEach(function(c) {
            _this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap, futurePath.concat([c.value]));
            delete prevChildren[c.value.outlet];
          });
          forEach(prevChildren, function(v, k) {
            return _this.deactiveRouteAndItsChildren(v, outletMap._outlets[k]);
          });
        };
        PreActivation.prototype.traverseRoutes = function(futureNode, currNode, parentOutletMap, futurePath) {
          var future = futureNode.value;
          var curr = currNode ? currNode.value : null;
          var outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;
          if (curr && future._routeConfig === curr._routeConfig) {
            if (!shallowEqual(future.params, curr.params)) {
              this.checks.push(new CanDeactivate(outlet.component, curr), new CanActivate(futurePath));
            } else {
              future.data = curr.data;
              future._resolvedData = curr._resolvedData;
            }
            if (future.component) {
              this.traverseChildRoutes(futureNode, currNode, outlet ? outlet.outletMap : null, futurePath);
            } else {
              this.traverseChildRoutes(futureNode, currNode, parentOutletMap, futurePath);
            }
          } else {
            if (curr) {
              this.deactiveRouteAndItsChildren(currNode, outlet);
            }
            this.checks.push(new CanActivate(futurePath));
            if (future.component) {
              this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null, futurePath);
            } else {
              this.traverseChildRoutes(futureNode, null, parentOutletMap, futurePath);
            }
          }
        };
        PreActivation.prototype.deactiveRouteAndItsChildren = function(route, outlet) {
          var _this = this;
          var prevChildren = nodeChildrenAsMap(route);
          forEach(prevChildren, function(v, k) {
            var childOutlet = outlet ? outlet.outletMap._outlets[k] : null;
            _this.deactiveRouteAndItsChildren(v, childOutlet);
          });
          var component = outlet && outlet.isActivated ? outlet.component : null;
          this.checks.push(new CanDeactivate(component, route.value));
        };
        PreActivation.prototype.runCanActivate = function(future) {
          var _this = this;
          var canActivate = future._routeConfig ? future._routeConfig.canActivate : null;
          if (!canActivate || canActivate.length === 0)
            return of(true);
          var obs = map.call(from(canActivate), function(c) {
            var guard = _this.getToken(c, future);
            if (guard.canActivate) {
              return wrapIntoObservable(guard.canActivate(future, _this.future));
            } else {
              return wrapIntoObservable(guard(future, _this.future));
            }
          });
          return andObservables(obs);
        };
        PreActivation.prototype.runCanActivateChild = function(path) {
          var _this = this;
          var future = path[path.length - 1];
          var canActivateChildGuards = path.slice(0, path.length - 1).reverse().map(function(p) {
            return _this.extractCanActivateChild(p);
          }).filter(function(_) {
            return _ !== null;
          });
          return andObservables(map.call(from(canActivateChildGuards), function(d) {
            var obs = map.call(from(d.guards), function(c) {
              var guard = _this.getToken(c, c.node);
              if (guard.canActivateChild) {
                return wrapIntoObservable(guard.canActivateChild(future, _this.future));
              } else {
                return wrapIntoObservable(guard(future, _this.future));
              }
            });
            return andObservables(obs);
          }));
        };
        PreActivation.prototype.extractCanActivateChild = function(p) {
          var canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;
          if (!canActivateChild || canActivateChild.length === 0)
            return null;
          return {
            node: p,
            guards: canActivateChild
          };
        };
        PreActivation.prototype.runCanDeactivate = function(component, curr) {
          var _this = this;
          var canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;
          if (!canDeactivate || canDeactivate.length === 0)
            return of(true);
          var canDeactivate$ = map.call(from(canDeactivate), function(c) {
            var guard = _this.getToken(c, curr);
            if (guard.canDeactivate) {
              return wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr));
            } else {
              return wrapIntoObservable(guard(component, curr, _this.curr));
            }
          });
          var merged$ = mergeAll.call(canDeactivate$);
          return every.call(merged$, function(result) {
            return result === true;
          });
        };
        PreActivation.prototype.runResolve = function(future) {
          var resolve = future._resolve;
          return map.call(this.resolveNode(resolve, future), function(resolvedData) {
            future._resolvedData = resolvedData;
            future.data = merge(future.data, inheritedParamsDataResolve(future).resolve);
            return null;
          });
        };
        PreActivation.prototype.resolveNode = function(resolve, future) {
          var _this = this;
          return waitForMap(resolve, function(k, v) {
            var resolver = _this.getToken(v, future);
            return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, _this.future)) : wrapIntoObservable(resolver(future, _this.future));
          });
        };
        PreActivation.prototype.getToken = function(token, snapshot) {
          var config = closestLoadedConfig(snapshot);
          var injector = config ? config.injector : this.injector;
          return injector.get(token);
        };
        return PreActivation;
      }());
      $__export("PreActivation", PreActivation);
      ActivateRoutes = (function() {
        function ActivateRoutes(futureState, currState) {
          this.futureState = futureState;
          this.currState = currState;
        }
        ActivateRoutes.prototype.activate = function(parentOutletMap) {
          var futureRoot = this.futureState._root;
          var currRoot = this.currState ? this.currState._root : null;
          advanceActivatedRoute(this.futureState.root);
          this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);
        };
        ActivateRoutes.prototype.activateChildRoutes = function(futureNode, currNode, outletMap) {
          var _this = this;
          var prevChildren = nodeChildrenAsMap(currNode);
          futureNode.children.forEach(function(c) {
            _this.activateRoutes(c, prevChildren[c.value.outlet], outletMap);
            delete prevChildren[c.value.outlet];
          });
          forEach(prevChildren, function(v, k) {
            return _this.deactiveRouteAndItsChildren(v, outletMap);
          });
        };
        ActivateRoutes.prototype.activateRoutes = function(futureNode, currNode, parentOutletMap) {
          var future = futureNode.value;
          var curr = currNode ? currNode.value : null;
          if (future === curr) {
            advanceActivatedRoute(future);
            if (future.component) {
              var outlet = getOutlet(parentOutletMap, future);
              this.activateChildRoutes(futureNode, currNode, outlet.outletMap);
            } else {
              this.activateChildRoutes(futureNode, currNode, parentOutletMap);
            }
          } else {
            if (curr) {
              this.deactiveRouteAndItsChildren(currNode, parentOutletMap);
            }
            if (future.component) {
              advanceActivatedRoute(future);
              var outlet = getOutlet(parentOutletMap, futureNode.value);
              var outletMap = new RouterOutletMap();
              this.placeComponentIntoOutlet(outletMap, future, outlet);
              this.activateChildRoutes(futureNode, null, outletMap);
            } else {
              advanceActivatedRoute(future);
              this.activateChildRoutes(futureNode, null, parentOutletMap);
            }
          }
        };
        ActivateRoutes.prototype.placeComponentIntoOutlet = function(outletMap, future, outlet) {
          var resolved = [{
            provide: ActivatedRoute,
            useValue: future
          }, {
            provide: RouterOutletMap,
            useValue: outletMap
          }];
          var config = parentLoadedConfig(future.snapshot);
          var loadedFactoryResolver = null;
          var loadedInjector = null;
          if (config) {
            loadedFactoryResolver = config.factoryResolver;
            loadedInjector = config.injector;
            resolved.push({
              provide: ComponentFactoryResolver,
              useValue: loadedFactoryResolver
            });
          }
          outlet.activate(future, loadedFactoryResolver, loadedInjector, ReflectiveInjector.resolve(resolved), outletMap);
        };
        ActivateRoutes.prototype.deactiveRouteAndItsChildren = function(route, parentOutletMap) {
          var _this = this;
          var prevChildren = nodeChildrenAsMap(route);
          var outlet = null;
          try {
            outlet = getOutlet(parentOutletMap, route.value);
          } catch (e) {
            return;
          }
          var childOutletMap = outlet.outletMap;
          forEach(prevChildren, function(v, k) {
            if (route.value.component) {
              _this.deactiveRouteAndItsChildren(v, childOutletMap);
            } else {
              _this.deactiveRouteAndItsChildren(v, parentOutletMap);
            }
          });
          if (outlet && outlet.isActivated) {
            outlet.deactivate();
          }
        };
        return ActivateRoutes;
      }());
    }
  };
});

$__System.registerDynamic('13d', ['c4', 'c3'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var subscribeToResult_1 = $__require('c4');
    var OuterSubscriber_1 = $__require('c3');
    /**
     * Projects each source value to an Observable which is merged in the output
     * Observable.
     *
     * <span class="informal">Maps each value to an Observable, then flattens all of
     * these inner Observables using {@link mergeAll}.</span>
     *
     * <img src="./img/mergeMap.png" width="100%">
     *
     * Returns an Observable that emits items based on applying a function that you
     * supply to each item emitted by the source Observable, where that function
     * returns an Observable, and then merging those resulting Observables and
     * emitting the results of this merger.
     *
     * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
     * var letters = Rx.Observable.of('a', 'b', 'c');
     * var result = letters.mergeMap(x =>
     *   Rx.Observable.interval(1000).map(i => x+i)
     * );
     * result.subscribe(x => console.log(x));
     *
     * @see {@link concatMap}
     * @see {@link exhaustMap}
     * @see {@link merge}
     * @see {@link mergeAll}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     * @see {@link switchMap}
     *
     * @param {function(value: T, ?index: number): Observable} project A function
     * that, when applied to an item emitted by the source Observable, returns an
     * Observable.
     * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
     * A function to produce the value on the output Observable based on the values
     * and the indices of the source (outer) emission and the inner Observable
     * emission. The arguments passed to this function are:
     * - `outerValue`: the value that came from the source
     * - `innerValue`: the value that came from the projected Observable
     * - `outerIndex`: the "index" of the value that came from the source
     * - `innerIndex`: the "index" of the value from the projected Observable
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
     * Observables being subscribed to concurrently.
     * @return {Observable} An Observable that emits the result of applying the
     * projection function (and the optional `resultSelector`) to each item emitted
     * by the source Observable and merging the results of the Observables obtained
     * from this transformation.
     * @method mergeMap
     * @owner Observable
     */
    function mergeMap(project, resultSelector, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
            resultSelector = null;
        }
        return this.lift(new MergeMapOperator(project, resultSelector, concurrent));
    }
    exports.mergeMap = mergeMap;
    var MergeMapOperator = function () {
        function MergeMapOperator(project, resultSelector, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            this.project = project;
            this.resultSelector = resultSelector;
            this.concurrent = concurrent;
        }
        MergeMapOperator.prototype.call = function (observer, source) {
            return source._subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
        };
        return MergeMapOperator;
    }();
    exports.MergeMapOperator = MergeMapOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MergeMapSubscriber = function (_super) {
        __extends(MergeMapSubscriber, _super);
        function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            _super.call(this, destination);
            this.project = project;
            this.resultSelector = resultSelector;
            this.concurrent = concurrent;
            this.hasCompleted = false;
            this.buffer = [];
            this.active = 0;
            this.index = 0;
        }
        MergeMapSubscriber.prototype._next = function (value) {
            if (this.active < this.concurrent) {
                this._tryNext(value);
            } else {
                this.buffer.push(value);
            }
        };
        MergeMapSubscriber.prototype._tryNext = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.active++;
            this._innerSub(result, value, index);
        };
        MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
            this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
        };
        MergeMapSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
        };
        MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (this.resultSelector) {
                this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
            } else {
                this.destination.next(innerValue);
            }
        };
        MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
            var result;
            try {
                result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            } else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeMapSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    exports.MergeMapSubscriber = MergeMapSubscriber;
    

    return module.exports;
});
$__System.register("151", ["c", "92", "a8", "c1", "13d", "153"], function($__export) {
  "use strict";
  var Compiler,
      OpaqueToken,
      fromPromise,
      of,
      map,
      mergeMap,
      flatten,
      wrapIntoObservable,
      ROUTES,
      LoadedRouterConfig,
      RouterConfigLoader;
  return {
    setters: [function($__m) {
      Compiler = $__m.Compiler;
      OpaqueToken = $__m.OpaqueToken;
    }, function($__m) {
      fromPromise = $__m.fromPromise;
    }, function($__m) {
      of = $__m.of;
    }, function($__m) {
      map = $__m.map;
    }, function($__m) {
      mergeMap = $__m.mergeMap;
    }, function($__m) {
      flatten = $__m.flatten;
      wrapIntoObservable = $__m.wrapIntoObservable;
    }],
    execute: function() {
      ROUTES = new OpaqueToken('ROUTES');
      $__export("ROUTES", ROUTES);
      LoadedRouterConfig = (function() {
        function LoadedRouterConfig(routes, injector, factoryResolver) {
          this.routes = routes;
          this.injector = injector;
          this.factoryResolver = factoryResolver;
        }
        return LoadedRouterConfig;
      }());
      $__export("LoadedRouterConfig", LoadedRouterConfig);
      RouterConfigLoader = (function() {
        function RouterConfigLoader(loader, compiler) {
          this.loader = loader;
          this.compiler = compiler;
        }
        RouterConfigLoader.prototype.load = function(parentInjector, loadChildren) {
          return map.call(this.loadModuleFactory(loadChildren), function(r) {
            var ref = r.create(parentInjector);
            return new LoadedRouterConfig(flatten(ref.injector.get(ROUTES)), ref.injector, ref.componentFactoryResolver);
          });
        };
        RouterConfigLoader.prototype.loadModuleFactory = function(loadChildren) {
          var _this = this;
          if (typeof loadChildren === 'string') {
            return fromPromise(this.loader.load(loadChildren));
          } else {
            var offlineMode_1 = this.compiler instanceof Compiler;
            return mergeMap.call(wrapIntoObservable(loadChildren()), function(t) {
              return offlineMode_1 ? of(t) : fromPromise(_this.compiler.compileModuleAsync(t));
            });
          }
        };
        return RouterConfigLoader;
      }());
      $__export("RouterConfigLoader", RouterConfigLoader);
    }
  };
});

$__System.register("15c", ["c", "14c", "a8", "ad", "13c", "bf", "15b", "13d", "136", "151"], function($__export) {
  "use strict";
  var Compiler,
      Injectable,
      Injector,
      NgModuleFactoryLoader,
      from,
      of,
      _catch,
      concatMap,
      filter,
      mergeAll,
      mergeMap,
      NavigationEnd,
      Router,
      RouterConfigLoader,
      PreloadingStrategy,
      PreloadAllModules,
      NoPreloading,
      RouterPreloader;
  return {
    setters: [function($__m) {
      Compiler = $__m.Compiler;
      Injectable = $__m.Injectable;
      Injector = $__m.Injector;
      NgModuleFactoryLoader = $__m.NgModuleFactoryLoader;
    }, function($__m) {
      from = $__m.from;
    }, function($__m) {
      of = $__m.of;
    }, function($__m) {
      _catch = $__m._catch;
    }, function($__m) {
      concatMap = $__m.concatMap;
    }, function($__m) {
      filter = $__m.filter;
    }, function($__m) {
      mergeAll = $__m.mergeAll;
    }, function($__m) {
      mergeMap = $__m.mergeMap;
    }, function($__m) {
      NavigationEnd = $__m.NavigationEnd;
      Router = $__m.Router;
    }, function($__m) {
      RouterConfigLoader = $__m.RouterConfigLoader;
    }],
    execute: function() {
      PreloadingStrategy = (function() {
        function PreloadingStrategy() {}
        return PreloadingStrategy;
      }());
      $__export("PreloadingStrategy", PreloadingStrategy);
      PreloadAllModules = (function() {
        function PreloadAllModules() {}
        PreloadAllModules.prototype.preload = function(route, fn) {
          return _catch.call(fn(), function() {
            return of(null);
          });
        };
        return PreloadAllModules;
      }());
      $__export("PreloadAllModules", PreloadAllModules);
      NoPreloading = (function() {
        function NoPreloading() {}
        NoPreloading.prototype.preload = function(route, fn) {
          return of(null);
        };
        return NoPreloading;
      }());
      $__export("NoPreloading", NoPreloading);
      RouterPreloader = (function() {
        function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {
          this.router = router;
          this.injector = injector;
          this.preloadingStrategy = preloadingStrategy;
          this.loader = new RouterConfigLoader(moduleLoader, compiler);
        }
        ;
        RouterPreloader.prototype.setUpPreloading = function() {
          var _this = this;
          var navigations = filter.call(this.router.events, function(e) {
            return e instanceof NavigationEnd;
          });
          this.subscription = concatMap.call(navigations, function() {
            return _this.preload();
          }).subscribe(function(v) {});
        };
        RouterPreloader.prototype.preload = function() {
          return this.processRoutes(this.injector, this.router.config);
        };
        RouterPreloader.prototype.ngOnDestroy = function() {
          this.subscription.unsubscribe();
        };
        RouterPreloader.prototype.processRoutes = function(injector, routes) {
          var res = [];
          for (var _i = 0,
              routes_1 = routes; _i < routes_1.length; _i++) {
            var c = routes_1[_i];
            if (c.loadChildren && !c.canLoad && c._loadedConfig) {
              var childConfig = c._loadedConfig;
              res.push(this.processRoutes(childConfig.injector, childConfig.routes));
            } else if (c.loadChildren && !c.canLoad) {
              res.push(this.preloadConfig(injector, c));
            } else if (c.children) {
              res.push(this.processRoutes(injector, c.children));
            }
          }
          return mergeAll.call(from(res));
        };
        RouterPreloader.prototype.preloadConfig = function(injector, route) {
          var _this = this;
          return this.preloadingStrategy.preload(route, function() {
            var loaded = _this.loader.load(injector, route.loadChildren);
            return mergeMap.call(loaded, function(config) {
              var c = route;
              c._loadedConfig = config;
              return _this.processRoutes(config.injector, config.routes);
            });
          });
        };
        RouterPreloader.decorators = [{type: Injectable}];
        RouterPreloader.ctorParameters = [{type: Router}, {type: NgModuleFactoryLoader}, {type: Compiler}, {type: Injector}, {type: PreloadingStrategy}];
        return RouterPreloader;
      }());
      $__export("RouterPreloader", RouterPreloader);
    }
  };
});

$__System.registerDynamic('156', ['90', '15d'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('90');
    var ObjectUnsubscribedError_1 = $__require('15d');
    /**
     * @class BehaviorSubject<T>
     */
    var BehaviorSubject = function (_super) {
        __extends(BehaviorSubject, _super);
        function BehaviorSubject(_value) {
            _super.call(this);
            this._value = _value;
        }
        Object.defineProperty(BehaviorSubject.prototype, "value", {
            get: function () {
                return this.getValue();
            },
            enumerable: true,
            configurable: true
        });
        BehaviorSubject.prototype._subscribe = function (subscriber) {
            var subscription = _super.prototype._subscribe.call(this, subscriber);
            if (subscription && !subscription.closed) {
                subscriber.next(this._value);
            }
            return subscription;
        };
        BehaviorSubject.prototype.getValue = function () {
            if (this.hasError) {
                throw this.thrownError;
            } else if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            } else {
                return this._value;
            }
        };
        BehaviorSubject.prototype.next = function (value) {
            _super.prototype.next.call(this, this._value = value);
        };
        return BehaviorSubject;
    }(Subject_1.Subject);
    exports.BehaviorSubject = BehaviorSubject;
    

    return module.exports;
});
$__System.register("157", [], function($__export) {
  "use strict";
  var Tree,
      TreeNode;
  function findNode(expected, c) {
    if (expected === c.value)
      return c;
    for (var _i = 0,
        _a = c.children; _i < _a.length; _i++) {
      var cc = _a[_i];
      var r = findNode(expected, cc);
      if (r)
        return r;
    }
    return null;
  }
  function findPath(expected, c, collected) {
    collected.push(c);
    if (expected === c.value)
      return collected;
    for (var _i = 0,
        _a = c.children; _i < _a.length; _i++) {
      var cc = _a[_i];
      var cloned = collected.slice(0);
      var r = findPath(expected, cc, cloned);
      if (r.length > 0)
        return r;
    }
    return [];
  }
  return {
    setters: [],
    execute: function() {
      Tree = (function() {
        function Tree(root) {
          this._root = root;
        }
        Object.defineProperty(Tree.prototype, "root", {
          get: function() {
            return this._root.value;
          },
          enumerable: true,
          configurable: true
        });
        Tree.prototype.parent = function(t) {
          var p = this.pathFromRoot(t);
          return p.length > 1 ? p[p.length - 2] : null;
        };
        Tree.prototype.children = function(t) {
          var n = findNode(t, this._root);
          return n ? n.children.map(function(t) {
            return t.value;
          }) : [];
        };
        Tree.prototype.firstChild = function(t) {
          var n = findNode(t, this._root);
          return n && n.children.length > 0 ? n.children[0].value : null;
        };
        Tree.prototype.siblings = function(t) {
          var p = findPath(t, this._root, []);
          if (p.length < 2)
            return [];
          var c = p[p.length - 2].children.map(function(c) {
            return c.value;
          });
          return c.filter(function(cc) {
            return cc !== t;
          });
        };
        Tree.prototype.pathFromRoot = function(t) {
          return findPath(t, this._root, []).map(function(s) {
            return s.value;
          });
        };
        return Tree;
      }());
      $__export("Tree", Tree);
      TreeNode = (function() {
        function TreeNode(value, children) {
          this.value = value;
          this.children = children;
        }
        TreeNode.prototype.toString = function() {
          return "TreeNode(" + this.value + ")";
        };
        return TreeNode;
      }());
      $__export("TreeNode", TreeNode);
    }
  };
});

$__System.register("137", ["156", "13b", "152", "153", "157"], function($__export) {
  "use strict";
  var __extends,
      BehaviorSubject,
      PRIMARY_OUTLET,
      UrlSegment,
      merge,
      shallowEqual,
      shallowEqualArrays,
      Tree,
      TreeNode,
      RouterState,
      ActivatedRoute,
      ActivatedRouteSnapshot,
      RouterStateSnapshot;
  function createEmptyState(urlTree, rootComponent) {
    var snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
    var emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);
    var emptyParams = new BehaviorSubject({});
    var emptyData = new BehaviorSubject({});
    var emptyQueryParams = new BehaviorSubject({});
    var fragment = new BehaviorSubject('');
    var activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);
    activated.snapshot = snapshot.root;
    return new RouterState(new TreeNode(activated, []), snapshot);
  }
  function createEmptyStateSnapshot(urlTree, rootComponent) {
    var emptyParams = {};
    var emptyData = {};
    var emptyQueryParams = {};
    var fragment = '';
    var activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});
    return new RouterStateSnapshot('', new TreeNode(activated, []));
  }
  function inheritedParamsDataResolve(route) {
    var pathToRoot = route.pathFromRoot;
    var inhertingStartingFrom = pathToRoot.length - 1;
    while (inhertingStartingFrom >= 1) {
      var current = pathToRoot[inhertingStartingFrom];
      var parent_1 = pathToRoot[inhertingStartingFrom - 1];
      if (current.routeConfig && current.routeConfig.path === '') {
        inhertingStartingFrom--;
      } else if (!parent_1.component) {
        inhertingStartingFrom--;
      } else {
        break;
      }
    }
    return pathToRoot.slice(inhertingStartingFrom).reduce(function(res, curr) {
      var params = merge(res.params, curr.params);
      var data = merge(res.data, curr.data);
      var resolve = merge(res.resolve, curr._resolvedData);
      return {
        params: params,
        data: data,
        resolve: resolve
      };
    }, {
      params: {},
      data: {},
      resolve: {}
    });
  }
  function setRouterStateSnapshot(state, node) {
    node.value._routerState = state;
    node.children.forEach(function(c) {
      return setRouterStateSnapshot(state, c);
    });
  }
  function serializeNode(node) {
    var c = node.children.length > 0 ? " { " + node.children.map(serializeNode).join(", ") + " } " : '';
    return "" + node.value + c;
  }
  function advanceActivatedRoute(route) {
    if (route.snapshot) {
      if (!shallowEqual(route.snapshot.queryParams, route._futureSnapshot.queryParams)) {
        route.queryParams.next(route._futureSnapshot.queryParams);
      }
      if (route.snapshot.fragment !== route._futureSnapshot.fragment) {
        route.fragment.next(route._futureSnapshot.fragment);
      }
      if (!shallowEqual(route.snapshot.params, route._futureSnapshot.params)) {
        route.params.next(route._futureSnapshot.params);
        route.data.next(route._futureSnapshot.data);
      }
      if (!shallowEqualArrays(route.snapshot.url, route._futureSnapshot.url)) {
        route.url.next(route._futureSnapshot.url);
      }
      route.snapshot = route._futureSnapshot;
    } else {
      route.snapshot = route._futureSnapshot;
      route.data.next(route._futureSnapshot.data);
    }
  }
  $__export("createEmptyState", createEmptyState);
  $__export("createEmptyStateSnapshot", createEmptyStateSnapshot);
  $__export("inheritedParamsDataResolve", inheritedParamsDataResolve);
  $__export("advanceActivatedRoute", advanceActivatedRoute);
  return {
    setters: [function($__m) {
      BehaviorSubject = $__m.BehaviorSubject;
    }, function($__m) {
      PRIMARY_OUTLET = $__m.PRIMARY_OUTLET;
    }, function($__m) {
      UrlSegment = $__m.UrlSegment;
    }, function($__m) {
      merge = $__m.merge;
      shallowEqual = $__m.shallowEqual;
      shallowEqualArrays = $__m.shallowEqualArrays;
    }, function($__m) {
      Tree = $__m.Tree;
      TreeNode = $__m.TreeNode;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      RouterState = (function(_super) {
        __extends(RouterState, _super);
        function RouterState(root, snapshot) {
          _super.call(this, root);
          this.snapshot = snapshot;
          setRouterStateSnapshot(this, root);
        }
        RouterState.prototype.toString = function() {
          return this.snapshot.toString();
        };
        return RouterState;
      }(Tree));
      $__export("RouterState", RouterState);
      ActivatedRoute = (function() {
        function ActivatedRoute(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {
          this.url = url;
          this.params = params;
          this.queryParams = queryParams;
          this.fragment = fragment;
          this.data = data;
          this.outlet = outlet;
          this.component = component;
          this._futureSnapshot = futureSnapshot;
        }
        Object.defineProperty(ActivatedRoute.prototype, "routeConfig", {
          get: function() {
            return this._futureSnapshot.routeConfig;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "root", {
          get: function() {
            return this._routerState.root;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "parent", {
          get: function() {
            return this._routerState.parent(this);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "firstChild", {
          get: function() {
            return this._routerState.firstChild(this);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "children", {
          get: function() {
            return this._routerState.children(this);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "pathFromRoot", {
          get: function() {
            return this._routerState.pathFromRoot(this);
          },
          enumerable: true,
          configurable: true
        });
        ActivatedRoute.prototype.toString = function() {
          return this.snapshot ? this.snapshot.toString() : "Future(" + this._futureSnapshot + ")";
        };
        return ActivatedRoute;
      }());
      $__export("ActivatedRoute", ActivatedRoute);
      ActivatedRouteSnapshot = (function() {
        function ActivatedRouteSnapshot(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {
          this.url = url;
          this.params = params;
          this.queryParams = queryParams;
          this.fragment = fragment;
          this.data = data;
          this.outlet = outlet;
          this.component = component;
          this._routeConfig = routeConfig;
          this._urlSegment = urlSegment;
          this._lastPathIndex = lastPathIndex;
          this._resolve = resolve;
        }
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "routeConfig", {
          get: function() {
            return this._routeConfig;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "root", {
          get: function() {
            return this._routerState.root;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "parent", {
          get: function() {
            return this._routerState.parent(this);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "firstChild", {
          get: function() {
            return this._routerState.firstChild(this);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "children", {
          get: function() {
            return this._routerState.children(this);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "pathFromRoot", {
          get: function() {
            return this._routerState.pathFromRoot(this);
          },
          enumerable: true,
          configurable: true
        });
        ActivatedRouteSnapshot.prototype.toString = function() {
          var url = this.url.map(function(s) {
            return s.toString();
          }).join('/');
          var matched = this._routeConfig ? this._routeConfig.path : '';
          return "Route(url:'" + url + "', path:'" + matched + "')";
        };
        return ActivatedRouteSnapshot;
      }());
      $__export("ActivatedRouteSnapshot", ActivatedRouteSnapshot);
      RouterStateSnapshot = (function(_super) {
        __extends(RouterStateSnapshot, _super);
        function RouterStateSnapshot(url, root) {
          _super.call(this, root);
          this.url = url;
          setRouterStateSnapshot(this, root);
        }
        RouterStateSnapshot.prototype.toString = function() {
          return serializeNode(this._root);
        };
        return RouterStateSnapshot;
      }(Tree));
      $__export("RouterStateSnapshot", RouterStateSnapshot);
    }
  };
});

$__System.register("152", ["13b", "153"], function($__export) {
  "use strict";
  var PRIMARY_OUTLET,
      forEach,
      shallowEqual,
      UrlTree,
      UrlSegmentGroup,
      UrlSegment,
      UrlSerializer,
      DefaultUrlSerializer,
      Pair,
      SEGMENT_RE,
      QUERY_PARAM_RE,
      QUERY_PARAM_VALUE_RE,
      UrlParser;
  function createEmptyUrlTree() {
    return new UrlTree(new UrlSegmentGroup([], {}), {}, null);
  }
  function containsTree(container, containee, exact) {
    if (exact) {
      return equalSegmentGroups(container.root, containee.root);
    } else {
      return containsSegmentGroup(container.root, containee.root);
    }
  }
  function equalSegmentGroups(container, containee) {
    if (!equalPath(container.segments, containee.segments))
      return false;
    if (container.numberOfChildren !== containee.numberOfChildren)
      return false;
    for (var c in containee.children) {
      if (!container.children[c])
        return false;
      if (!equalSegmentGroups(container.children[c], containee.children[c]))
        return false;
    }
    return true;
  }
  function containsSegmentGroup(container, containee) {
    return containsSegmentGroupHelper(container, containee, containee.segments);
  }
  function containsSegmentGroupHelper(container, containee, containeePaths) {
    if (container.segments.length > containeePaths.length) {
      var current = container.segments.slice(0, containeePaths.length);
      if (!equalPath(current, containeePaths))
        return false;
      if (containee.hasChildren())
        return false;
      return true;
    } else if (container.segments.length === containeePaths.length) {
      if (!equalPath(container.segments, containeePaths))
        return false;
      for (var c in containee.children) {
        if (!container.children[c])
          return false;
        if (!containsSegmentGroup(container.children[c], containee.children[c]))
          return false;
      }
      return true;
    } else {
      var current = containeePaths.slice(0, container.segments.length);
      var next = containeePaths.slice(container.segments.length);
      if (!equalPath(container.segments, current))
        return false;
      if (!container.children[PRIMARY_OUTLET])
        return false;
      return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);
    }
  }
  function equalSegments(a, b) {
    if (a.length !== b.length)
      return false;
    for (var i = 0; i < a.length; ++i) {
      if (a[i].path !== b[i].path)
        return false;
      if (!shallowEqual(a[i].parameters, b[i].parameters))
        return false;
    }
    return true;
  }
  function equalPath(a, b) {
    if (a.length !== b.length)
      return false;
    for (var i = 0; i < a.length; ++i) {
      if (a[i].path !== b[i].path)
        return false;
    }
    return true;
  }
  function mapChildrenIntoArray(segment, fn) {
    var res = [];
    forEach(segment.children, function(child, childOutlet) {
      if (childOutlet === PRIMARY_OUTLET) {
        res = res.concat(fn(child, childOutlet));
      }
    });
    forEach(segment.children, function(child, childOutlet) {
      if (childOutlet !== PRIMARY_OUTLET) {
        res = res.concat(fn(child, childOutlet));
      }
    });
    return res;
  }
  function serializePaths(segment) {
    return segment.segments.map(function(p) {
      return serializePath(p);
    }).join('/');
  }
  function serializeSegment(segment, root) {
    if (segment.hasChildren() && root) {
      var primary = segment.children[PRIMARY_OUTLET] ? serializeSegment(segment.children[PRIMARY_OUTLET], false) : '';
      var children_1 = [];
      forEach(segment.children, function(v, k) {
        if (k !== PRIMARY_OUTLET) {
          children_1.push(k + ":" + serializeSegment(v, false));
        }
      });
      if (children_1.length > 0) {
        return primary + "(" + children_1.join('//') + ")";
      } else {
        return "" + primary;
      }
    } else if (segment.hasChildren() && !root) {
      var children = mapChildrenIntoArray(segment, function(v, k) {
        if (k === PRIMARY_OUTLET) {
          return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];
        } else {
          return [(k + ":" + serializeSegment(v, false))];
        }
      });
      return serializePaths(segment) + "/(" + children.join('//') + ")";
    } else {
      return serializePaths(segment);
    }
  }
  function encode(s) {
    return encodeURIComponent(s);
  }
  function decode(s) {
    return decodeURIComponent(s);
  }
  function serializePath(path) {
    return "" + encode(path.path) + serializeParams(path.parameters);
  }
  function serializeParams(params) {
    return pairs(params).map(function(p) {
      return (";" + encode(p.first) + "=" + encode(p.second));
    }).join('');
  }
  function serializeQueryParams(params) {
    var strs = pairs(params).map(function(p) {
      return (encode(p.first) + "=" + encode(p.second));
    });
    return strs.length > 0 ? "?" + strs.join("&") : '';
  }
  function pairs(obj) {
    var res = [];
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop)) {
        res.push(new Pair(prop, obj[prop]));
      }
    }
    return res;
  }
  function matchSegments(str) {
    SEGMENT_RE.lastIndex = 0;
    var match = str.match(SEGMENT_RE);
    return match ? match[0] : '';
  }
  function matchQueryParams(str) {
    QUERY_PARAM_RE.lastIndex = 0;
    var match = str.match(SEGMENT_RE);
    return match ? match[0] : '';
  }
  function matchUrlQueryParamValue(str) {
    QUERY_PARAM_VALUE_RE.lastIndex = 0;
    var match = str.match(QUERY_PARAM_VALUE_RE);
    return match ? match[0] : '';
  }
  $__export("createEmptyUrlTree", createEmptyUrlTree);
  $__export("containsTree", containsTree);
  $__export("equalSegments", equalSegments);
  $__export("equalPath", equalPath);
  $__export("mapChildrenIntoArray", mapChildrenIntoArray);
  $__export("serializePaths", serializePaths);
  $__export("encode", encode);
  $__export("decode", decode);
  $__export("serializePath", serializePath);
  return {
    setters: [function($__m) {
      PRIMARY_OUTLET = $__m.PRIMARY_OUTLET;
    }, function($__m) {
      forEach = $__m.forEach;
      shallowEqual = $__m.shallowEqual;
    }],
    execute: function() {
      UrlTree = (function() {
        function UrlTree(root, queryParams, fragment) {
          this.root = root;
          this.queryParams = queryParams;
          this.fragment = fragment;
        }
        UrlTree.prototype.toString = function() {
          return new DefaultUrlSerializer().serialize(this);
        };
        return UrlTree;
      }());
      $__export("UrlTree", UrlTree);
      UrlSegmentGroup = (function() {
        function UrlSegmentGroup(segments, children) {
          var _this = this;
          this.segments = segments;
          this.children = children;
          this.parent = null;
          forEach(children, function(v, k) {
            return v.parent = _this;
          });
        }
        UrlSegmentGroup.prototype.hasChildren = function() {
          return this.numberOfChildren > 0;
        };
        Object.defineProperty(UrlSegmentGroup.prototype, "numberOfChildren", {
          get: function() {
            return Object.keys(this.children).length;
          },
          enumerable: true,
          configurable: true
        });
        UrlSegmentGroup.prototype.toString = function() {
          return serializePaths(this);
        };
        return UrlSegmentGroup;
      }());
      $__export("UrlSegmentGroup", UrlSegmentGroup);
      UrlSegment = (function() {
        function UrlSegment(path, parameters) {
          this.path = path;
          this.parameters = parameters;
        }
        UrlSegment.prototype.toString = function() {
          return serializePath(this);
        };
        return UrlSegment;
      }());
      $__export("UrlSegment", UrlSegment);
      UrlSerializer = (function() {
        function UrlSerializer() {}
        return UrlSerializer;
      }());
      $__export("UrlSerializer", UrlSerializer);
      DefaultUrlSerializer = (function() {
        function DefaultUrlSerializer() {}
        DefaultUrlSerializer.prototype.parse = function(url) {
          var p = new UrlParser(url);
          return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
        };
        DefaultUrlSerializer.prototype.serialize = function(tree) {
          var segment = "/" + serializeSegment(tree.root, true);
          var query = serializeQueryParams(tree.queryParams);
          var fragment = tree.fragment !== null && tree.fragment !== undefined ? "#" + encodeURI(tree.fragment) : '';
          return "" + segment + query + fragment;
        };
        return DefaultUrlSerializer;
      }());
      $__export("DefaultUrlSerializer", DefaultUrlSerializer);
      Pair = (function() {
        function Pair(first, second) {
          this.first = first;
          this.second = second;
        }
        return Pair;
      }());
      SEGMENT_RE = /^[^\/\(\)\?;=&#]+/;
      QUERY_PARAM_RE = /^[^=\?&#]+/;
      QUERY_PARAM_VALUE_RE = /^[^\?&#]+/;
      UrlParser = (function() {
        function UrlParser(url) {
          this.url = url;
          this.remaining = url;
        }
        UrlParser.prototype.peekStartsWith = function(str) {
          return this.remaining.startsWith(str);
        };
        UrlParser.prototype.capture = function(str) {
          if (!this.remaining.startsWith(str)) {
            throw new Error("Expected \"" + str + "\".");
          }
          this.remaining = this.remaining.substring(str.length);
        };
        UrlParser.prototype.parseRootSegment = function() {
          if (this.remaining.startsWith('/')) {
            this.capture('/');
          }
          if (this.remaining === '' || this.remaining.startsWith('?') || this.remaining.startsWith('#')) {
            return new UrlSegmentGroup([], {});
          } else {
            return new UrlSegmentGroup([], this.parseChildren());
          }
        };
        UrlParser.prototype.parseChildren = function() {
          if (this.remaining.length == 0) {
            return {};
          }
          if (this.peekStartsWith('/')) {
            this.capture('/');
          }
          var paths = [];
          if (!this.peekStartsWith('(')) {
            paths.push(this.parseSegments());
          }
          while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {
            this.capture('/');
            paths.push(this.parseSegments());
          }
          var children = {};
          if (this.peekStartsWith('/(')) {
            this.capture('/');
            children = this.parseParens(true);
          }
          var res = {};
          if (this.peekStartsWith('(')) {
            res = this.parseParens(false);
          }
          if (paths.length > 0 || Object.keys(children).length > 0) {
            res[PRIMARY_OUTLET] = new UrlSegmentGroup(paths, children);
          }
          return res;
        };
        UrlParser.prototype.parseSegments = function() {
          var path = matchSegments(this.remaining);
          if (path === '' && this.peekStartsWith(';')) {
            throw new Error("Empty path url segment cannot have parameters: '" + this.remaining + "'.");
          }
          this.capture(path);
          var matrixParams = {};
          if (this.peekStartsWith(';')) {
            matrixParams = this.parseMatrixParams();
          }
          return new UrlSegment(decode(path), matrixParams);
        };
        UrlParser.prototype.parseQueryParams = function() {
          var params = {};
          if (this.peekStartsWith('?')) {
            this.capture('?');
            this.parseQueryParam(params);
            while (this.remaining.length > 0 && this.peekStartsWith('&')) {
              this.capture('&');
              this.parseQueryParam(params);
            }
          }
          return params;
        };
        UrlParser.prototype.parseFragment = function() {
          if (this.peekStartsWith('#')) {
            return decodeURI(this.remaining.substring(1));
          } else {
            return null;
          }
        };
        UrlParser.prototype.parseMatrixParams = function() {
          var params = {};
          while (this.remaining.length > 0 && this.peekStartsWith(';')) {
            this.capture(';');
            this.parseParam(params);
          }
          return params;
        };
        UrlParser.prototype.parseParam = function(params) {
          var key = matchSegments(this.remaining);
          if (!key) {
            return;
          }
          this.capture(key);
          var value = '';
          if (this.peekStartsWith('=')) {
            this.capture('=');
            var valueMatch = matchSegments(this.remaining);
            if (valueMatch) {
              value = valueMatch;
              this.capture(value);
            }
          }
          params[decode(key)] = decode(value);
        };
        UrlParser.prototype.parseQueryParam = function(params) {
          var key = matchQueryParams(this.remaining);
          if (!key) {
            return;
          }
          this.capture(key);
          var value = '';
          if (this.peekStartsWith('=')) {
            this.capture('=');
            var valueMatch = matchUrlQueryParamValue(this.remaining);
            if (valueMatch) {
              value = valueMatch;
              this.capture(value);
            }
          }
          params[decode(key)] = decode(value);
        };
        UrlParser.prototype.parseParens = function(allowPrimary) {
          var segments = {};
          this.capture('(');
          while (!this.peekStartsWith(')') && this.remaining.length > 0) {
            var path = matchSegments(this.remaining);
            var next = this.remaining[path.length];
            if (next !== '/' && next !== ')' && next !== ';') {
              throw new Error("Cannot parse url '" + this.url + "'");
            }
            var outletName = void 0;
            if (path.indexOf(':') > -1) {
              outletName = path.substr(0, path.indexOf(':'));
              this.capture(outletName);
              this.capture(':');
            } else if (allowPrimary) {
              outletName = PRIMARY_OUTLET;
            }
            var children = this.parseChildren();
            segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] : new UrlSegmentGroup([], children);
            if (this.peekStartsWith('//')) {
              this.capture('//');
            }
          }
          this.capture(')');
          return segments;
        };
        return UrlParser;
      }());
    }
  };
});

$__System.register("15e", ["a5", "c", "135", "138", "139", "136", "151", "13a", "15c", "137", "152", "153"], function($__export) {
  "use strict";
  var APP_BASE_HREF,
      HashLocationStrategy,
      Location,
      LocationStrategy,
      PathLocationStrategy,
      PlatformLocation,
      ANALYZE_FOR_ENTRY_COMPONENTS,
      APP_BOOTSTRAP_LISTENER,
      ApplicationRef,
      Compiler,
      Inject,
      Injector,
      NgModule,
      NgModuleFactoryLoader,
      OpaqueToken,
      Optional,
      SkipSelf,
      SystemJsNgModuleLoader,
      RouterLink,
      RouterLinkWithHref,
      RouterLinkActive,
      RouterOutlet,
      Router,
      ROUTES,
      RouterOutletMap,
      NoPreloading,
      PreloadAllModules,
      PreloadingStrategy,
      RouterPreloader,
      ActivatedRoute,
      DefaultUrlSerializer,
      UrlSerializer,
      flatten,
      ROUTER_DIRECTIVES,
      ROUTER_CONFIGURATION,
      ROUTER_FORROOT_GUARD,
      pathLocationStrategy,
      hashLocationStrategy,
      ROUTER_PROVIDERS,
      RouterModule;
  function provideLocationStrategy(platformLocationStrategy, baseHref, options) {
    if (options === void 0) {
      options = {};
    }
    return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) : new PathLocationStrategy(platformLocationStrategy, baseHref);
  }
  function provideForRootGuard(router) {
    if (router) {
      throw new Error("RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.");
    }
    return 'guarded';
  }
  function provideRoutes(routes) {
    return [{
      provide: ANALYZE_FOR_ENTRY_COMPONENTS,
      multi: true,
      useValue: routes
    }, {
      provide: ROUTES,
      multi: true,
      useValue: routes
    }];
  }
  function setupRouter(ref, urlSerializer, outletMap, location, injector, loader, compiler, config, opts) {
    if (opts === void 0) {
      opts = {};
    }
    var r = new Router(null, urlSerializer, outletMap, location, injector, loader, compiler, flatten(config));
    if (opts.errorHandler) {
      r.errorHandler = opts.errorHandler;
    }
    if (opts.enableTracing) {
      r.events.subscribe(function(e) {
        console.group("Router Event: " + e.constructor.name);
        console.log(e.toString());
        console.log(e);
        console.groupEnd();
      });
    }
    return r;
  }
  function rootRoute(router) {
    return router.routerState.root;
  }
  function initialRouterNavigation(router, ref, preloader, opts) {
    return function() {
      router.resetRootComponentType(ref.componentTypes[0]);
      preloader.setUpPreloading();
      if (opts.initialNavigation === false) {
        router.setUpLocationChangeListener();
      } else {
        router.initialNavigation();
      }
    };
  }
  function provideRouterInitializer() {
    return {
      provide: APP_BOOTSTRAP_LISTENER,
      multi: true,
      useFactory: initialRouterNavigation,
      deps: [Router, ApplicationRef, RouterPreloader, ROUTER_CONFIGURATION]
    };
  }
  $__export("provideLocationStrategy", provideLocationStrategy);
  $__export("provideForRootGuard", provideForRootGuard);
  $__export("provideRoutes", provideRoutes);
  $__export("setupRouter", setupRouter);
  $__export("rootRoute", rootRoute);
  $__export("initialRouterNavigation", initialRouterNavigation);
  $__export("provideRouterInitializer", provideRouterInitializer);
  return {
    setters: [function($__m) {
      APP_BASE_HREF = $__m.APP_BASE_HREF;
      HashLocationStrategy = $__m.HashLocationStrategy;
      Location = $__m.Location;
      LocationStrategy = $__m.LocationStrategy;
      PathLocationStrategy = $__m.PathLocationStrategy;
      PlatformLocation = $__m.PlatformLocation;
    }, function($__m) {
      ANALYZE_FOR_ENTRY_COMPONENTS = $__m.ANALYZE_FOR_ENTRY_COMPONENTS;
      APP_BOOTSTRAP_LISTENER = $__m.APP_BOOTSTRAP_LISTENER;
      ApplicationRef = $__m.ApplicationRef;
      Compiler = $__m.Compiler;
      Inject = $__m.Inject;
      Injector = $__m.Injector;
      NgModule = $__m.NgModule;
      NgModuleFactoryLoader = $__m.NgModuleFactoryLoader;
      OpaqueToken = $__m.OpaqueToken;
      Optional = $__m.Optional;
      SkipSelf = $__m.SkipSelf;
      SystemJsNgModuleLoader = $__m.SystemJsNgModuleLoader;
    }, function($__m) {
      RouterLink = $__m.RouterLink;
      RouterLinkWithHref = $__m.RouterLinkWithHref;
    }, function($__m) {
      RouterLinkActive = $__m.RouterLinkActive;
    }, function($__m) {
      RouterOutlet = $__m.RouterOutlet;
    }, function($__m) {
      Router = $__m.Router;
    }, function($__m) {
      ROUTES = $__m.ROUTES;
    }, function($__m) {
      RouterOutletMap = $__m.RouterOutletMap;
    }, function($__m) {
      NoPreloading = $__m.NoPreloading;
      PreloadAllModules = $__m.PreloadAllModules;
      PreloadingStrategy = $__m.PreloadingStrategy;
      RouterPreloader = $__m.RouterPreloader;
    }, function($__m) {
      ActivatedRoute = $__m.ActivatedRoute;
    }, function($__m) {
      DefaultUrlSerializer = $__m.DefaultUrlSerializer;
      UrlSerializer = $__m.UrlSerializer;
    }, function($__m) {
      flatten = $__m.flatten;
    }],
    execute: function() {
      ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];
      ROUTER_CONFIGURATION = new OpaqueToken('ROUTER_CONFIGURATION');
      $__export("ROUTER_CONFIGURATION", ROUTER_CONFIGURATION);
      ROUTER_FORROOT_GUARD = new OpaqueToken('ROUTER_FORROOT_GUARD');
      $__export("ROUTER_FORROOT_GUARD", ROUTER_FORROOT_GUARD);
      pathLocationStrategy = {
        provide: LocationStrategy,
        useClass: PathLocationStrategy
      };
      hashLocationStrategy = {
        provide: LocationStrategy,
        useClass: HashLocationStrategy
      };
      ROUTER_PROVIDERS = [Location, {
        provide: UrlSerializer,
        useClass: DefaultUrlSerializer
      }, {
        provide: Router,
        useFactory: setupRouter,
        deps: [ApplicationRef, UrlSerializer, RouterOutletMap, Location, Injector, NgModuleFactoryLoader, Compiler, ROUTES, ROUTER_CONFIGURATION]
      }, RouterOutletMap, {
        provide: ActivatedRoute,
        useFactory: rootRoute,
        deps: [Router]
      }, {
        provide: NgModuleFactoryLoader,
        useClass: SystemJsNgModuleLoader
      }, RouterPreloader, NoPreloading, PreloadAllModules, {
        provide: ROUTER_CONFIGURATION,
        useValue: {enableTracing: false}
      }];
      $__export("ROUTER_PROVIDERS", ROUTER_PROVIDERS);
      RouterModule = (function() {
        function RouterModule(guard) {}
        RouterModule.forRoot = function(routes, config) {
          return {
            ngModule: RouterModule,
            providers: [ROUTER_PROVIDERS, provideRoutes(routes), {
              provide: ROUTER_FORROOT_GUARD,
              useFactory: provideForRootGuard,
              deps: [[Router, new Optional(), new SkipSelf()]]
            }, {
              provide: ROUTER_CONFIGURATION,
              useValue: config ? config : {}
            }, {
              provide: LocationStrategy,
              useFactory: provideLocationStrategy,
              deps: [PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION]
            }, {
              provide: PreloadingStrategy,
              useExisting: config && config.preloadingStrategy ? config.preloadingStrategy : NoPreloading
            }, provideRouterInitializer()]
          };
        };
        RouterModule.forChild = function(routes) {
          return {
            ngModule: RouterModule,
            providers: [provideRoutes(routes)]
          };
        };
        RouterModule.decorators = [{
          type: NgModule,
          args: [{
            declarations: ROUTER_DIRECTIVES,
            exports: ROUTER_DIRECTIVES
          }]
        }];
        RouterModule.ctorParameters = [{
          type: undefined,
          decorators: [{type: Optional}, {
            type: Inject,
            args: [ROUTER_FORROOT_GUARD]
          }]
        }];
        return RouterModule;
      }());
      $__export("RouterModule", RouterModule);
    }
  };
});

$__System.registerDynamic('149', ['b1', '91'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1 = $__require('b1');
    var Observable_1 = $__require('91');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var PromiseObservable = function (_super) {
        __extends(PromiseObservable, _super);
        function PromiseObservable(promise, scheduler) {
            _super.call(this);
            this.promise = promise;
            this.scheduler = scheduler;
        }
        /**
         * Converts a Promise to an Observable.
         *
         * <span class="informal">Returns an Observable that just emits the Promise's
         * resolved value, then completes.</span>
         *
         * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an
         * Observable. If the Promise resolves with a value, the output Observable
         * emits that resolved value as a `next`, and then completes. If the Promise
         * is rejected, then the output Observable emits the corresponding Error.
         *
         * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>
         * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));
         * result.subscribe(x => console.log(x), e => console.error(e));
         *
         * @see {@link bindCallback}
         * @see {@link from}
         *
         * @param {Promise<T>} promise The promise to be converted.
         * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling
         * the delivery of the resolved value (or the rejection).
         * @return {Observable<T>} An Observable which wraps the Promise.
         * @static true
         * @name fromPromise
         * @owner Observable
         */
        PromiseObservable.create = function (promise, scheduler) {
            return new PromiseObservable(promise, scheduler);
        };
        PromiseObservable.prototype._subscribe = function (subscriber) {
            var _this = this;
            var promise = this.promise;
            var scheduler = this.scheduler;
            if (scheduler == null) {
                if (this._isScalar) {
                    if (!subscriber.closed) {
                        subscriber.next(this.value);
                        subscriber.complete();
                    }
                } else {
                    promise.then(function (value) {
                        _this.value = value;
                        _this._isScalar = true;
                        if (!subscriber.closed) {
                            subscriber.next(value);
                            subscriber.complete();
                        }
                    }, function (err) {
                        if (!subscriber.closed) {
                            subscriber.error(err);
                        }
                    }).then(null, function (err) {
                        // escape the promise trap, throw unhandled errors
                        root_1.root.setTimeout(function () {
                            throw err;
                        });
                    });
                }
            } else {
                if (this._isScalar) {
                    if (!subscriber.closed) {
                        return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });
                    }
                } else {
                    promise.then(function (value) {
                        _this.value = value;
                        _this._isScalar = true;
                        if (!subscriber.closed) {
                            subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
                        }
                    }, function (err) {
                        if (!subscriber.closed) {
                            subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
                        }
                    }).then(null, function (err) {
                        // escape the promise trap, throw unhandled errors
                        root_1.root.setTimeout(function () {
                            throw err;
                        });
                    });
                }
            }
        };
        return PromiseObservable;
    }(Observable_1.Observable);
    exports.PromiseObservable = PromiseObservable;
    function dispatchNext(arg) {
        var value = arg.value,
            subscriber = arg.subscriber;
        if (!subscriber.closed) {
            subscriber.next(value);
            subscriber.complete();
        }
    }
    function dispatchError(arg) {
        var err = arg.err,
            subscriber = arg.subscriber;
        if (!subscriber.closed) {
            subscriber.error(err);
        }
    }
    

    return module.exports;
});
$__System.registerDynamic("92", ["149"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var PromiseObservable_1 = $__require("149");
  exports.fromPromise = PromiseObservable_1.PromiseObservable.create;
  

  return module.exports;
});
$__System.registerDynamic("142", ["91"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require("91");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ScalarObservable = function (_super) {
        __extends(ScalarObservable, _super);
        function ScalarObservable(value, scheduler) {
            _super.call(this);
            this.value = value;
            this.scheduler = scheduler;
            this._isScalar = true;
            if (scheduler) {
                this._isScalar = false;
            }
        }
        ScalarObservable.create = function (value, scheduler) {
            return new ScalarObservable(value, scheduler);
        };
        ScalarObservable.dispatch = function (state) {
            var done = state.done,
                value = state.value,
                subscriber = state.subscriber;
            if (done) {
                subscriber.complete();
                return;
            }
            subscriber.next(value);
            if (subscriber.closed) {
                return;
            }
            state.done = true;
            this.schedule(state);
        };
        ScalarObservable.prototype._subscribe = function (subscriber) {
            var value = this.value;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(ScalarObservable.dispatch, 0, {
                    done: false, value: value, subscriber: subscriber
                });
            } else {
                subscriber.next(value);
                if (!subscriber.closed) {
                    subscriber.complete();
                }
            }
        };
        return ScalarObservable;
    }(Observable_1.Observable);
    exports.ScalarObservable = ScalarObservable;
    

    return module.exports;
});
$__System.registerDynamic("143", ["91"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require("91");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var EmptyObservable = function (_super) {
        __extends(EmptyObservable, _super);
        function EmptyObservable(scheduler) {
            _super.call(this);
            this.scheduler = scheduler;
        }
        /**
         * Creates an Observable that emits no items to the Observer and immediately
         * emits a complete notification.
         *
         * <span class="informal">Just emits 'complete', and nothing else.
         * </span>
         *
         * <img src="./img/empty.png" width="100%">
         *
         * This static operator is useful for creating a simple Observable that only
         * emits the complete notification. It can be used for composing with other
         * Observables, such as in a {@link mergeMap}.
         *
         * @example <caption>Emit the number 7, then complete.</caption>
         * var result = Rx.Observable.empty().startWith(7);
         * result.subscribe(x => console.log(x));
         *
         * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
         * var interval = Rx.Observable.interval(1000);
         * var result = interval.mergeMap(x =>
         *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
         * );
         * result.subscribe(x => console.log(x));
         *
         * @see {@link create}
         * @see {@link never}
         * @see {@link of}
         * @see {@link throw}
         *
         * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
         * the emission of the complete notification.
         * @return {Observable} An "empty" Observable: emits only the complete
         * notification.
         * @static true
         * @name empty
         * @owner Observable
         */
        EmptyObservable.create = function (scheduler) {
            return new EmptyObservable(scheduler);
        };
        EmptyObservable.dispatch = function (arg) {
            var subscriber = arg.subscriber;
            subscriber.complete();
        };
        EmptyObservable.prototype._subscribe = function (subscriber) {
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
            } else {
                subscriber.complete();
            }
        };
        return EmptyObservable;
    }(Observable_1.Observable);
    exports.EmptyObservable = EmptyObservable;
    

    return module.exports;
});
$__System.registerDynamic("15f", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isScheduler(value) {
        return value && typeof value.schedule === 'function';
    }
    exports.isScheduler = isScheduler;
    

    return module.exports;
});
$__System.registerDynamic('14a', ['91', '142', '143', '15f'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('91');
    var ScalarObservable_1 = $__require('142');
    var EmptyObservable_1 = $__require('143');
    var isScheduler_1 = $__require('15f');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ArrayObservable = function (_super) {
        __extends(ArrayObservable, _super);
        function ArrayObservable(array, scheduler) {
            _super.call(this);
            this.array = array;
            this.scheduler = scheduler;
            if (!scheduler && array.length === 1) {
                this._isScalar = true;
                this.value = array[0];
            }
        }
        ArrayObservable.create = function (array, scheduler) {
            return new ArrayObservable(array, scheduler);
        };
        /**
         * Creates an Observable that emits some values you specify as arguments,
         * immediately one after the other, and then emits a complete notification.
         *
         * <span class="informal">Emits the arguments you provide, then completes.
         * </span>
         *
         * <img src="./img/of.png" width="100%">
         *
         * This static operator is useful for creating a simple Observable that only
         * emits the arguments given, and the complete notification thereafter. It can
         * be used for composing with other Observables, such as with {@link concat}.
         * By default, it uses a `null` Scheduler, which means the `next`
         * notifications are sent synchronously, although with a different Scheduler
         * it is possible to determine when those notifications will be delivered.
         *
         * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
         * var numbers = Rx.Observable.of(10, 20, 30);
         * var letters = Rx.Observable.of('a', 'b', 'c');
         * var interval = Rx.Observable.interval(1000);
         * var result = numbers.concat(letters).concat(interval);
         * result.subscribe(x => console.log(x));
         *
         * @see {@link create}
         * @see {@link empty}
         * @see {@link never}
         * @see {@link throw}
         *
         * @param {...T} values Arguments that represent `next` values to be emitted.
         * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
         * the emissions of the `next` notifications.
         * @return {Observable<T>} An Observable that emits each given input value.
         * @static true
         * @name of
         * @owner Observable
         */
        ArrayObservable.of = function () {
            var array = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                array[_i - 0] = arguments[_i];
            }
            var scheduler = array[array.length - 1];
            if (isScheduler_1.isScheduler(scheduler)) {
                array.pop();
            } else {
                scheduler = null;
            }
            var len = array.length;
            if (len > 1) {
                return new ArrayObservable(array, scheduler);
            } else if (len === 1) {
                return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
            } else {
                return new EmptyObservable_1.EmptyObservable(scheduler);
            }
        };
        ArrayObservable.dispatch = function (state) {
            var array = state.array,
                index = state.index,
                count = state.count,
                subscriber = state.subscriber;
            if (index >= count) {
                subscriber.complete();
                return;
            }
            subscriber.next(array[index]);
            if (subscriber.closed) {
                return;
            }
            state.index = index + 1;
            this.schedule(state);
        };
        ArrayObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var array = this.array;
            var count = array.length;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(ArrayObservable.dispatch, 0, {
                    array: array, index: index, count: count, subscriber: subscriber
                });
            } else {
                for (var i = 0; i < count && !subscriber.closed; i++) {
                    subscriber.next(array[i]);
                }
                subscriber.complete();
            }
        };
        return ArrayObservable;
    }(Observable_1.Observable);
    exports.ArrayObservable = ArrayObservable;
    

    return module.exports;
});
$__System.registerDynamic("a8", ["14a"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var ArrayObservable_1 = $__require("14a");
  exports.of = ArrayObservable_1.ArrayObservable.of;
  

  return module.exports;
});
$__System.registerDynamic("150", ["15b"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var mergeAll_1 = $__require("15b");
  /**
   * Converts a higher-order Observable into a first-order Observable by
   * concatenating the inner Observables in order.
   *
   * <span class="informal">Flattens an Observable-of-Observables by putting one
   * inner Observable after the other.</span>
   *
   * <img src="./img/concatAll.png" width="100%">
   *
   * Joins every Observable emitted by the source (a higher-order Observable), in
   * a serial fashion. It subscribes to each inner Observable only after the
   * previous inner Observable has completed, and merges all of their values into
   * the returned observable.
   *
   * __Warning:__ If the source Observable emits Observables quickly and
   * endlessly, and the inner Observables it emits generally complete slower than
   * the source emits, you can run into memory issues as the incoming Observables
   * collect in an unbounded buffer.
   *
   * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
   * to `1`.
   *
   * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
   * var clicks = Rx.Observable.fromEvent(document, 'click');
   * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
   * var firstOrder = higherOrder.concatAll();
   * firstOrder.subscribe(x => console.log(x));
   *
   * @see {@link combineAll}
   * @see {@link concat}
   * @see {@link concatMap}
   * @see {@link concatMapTo}
   * @see {@link exhaust}
   * @see {@link mergeAll}
   * @see {@link switch}
   * @see {@link zipAll}
   *
   * @return {Observable} An Observable emitting values from all the inner
   * Observables concatenated.
   * @method concatAll
   * @owner Observable
   */
  function concatAll() {
    return this.lift(new mergeAll_1.MergeAllOperator(1));
  }
  exports.concatAll = concatAll;
  

  return module.exports;
});
$__System.registerDynamic("15a", ["b6"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("b6");
    /**
     * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
     * @param {function} predicate a function for determining if an item meets a specified condition.
     * @param {any} [thisArg] optional object to use for `this` in the callback
     * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.
     * @method every
     * @owner Observable
     */
    function every(predicate, thisArg) {
        return this.lift(new EveryOperator(predicate, thisArg, this));
    }
    exports.every = every;
    var EveryOperator = function () {
        function EveryOperator(predicate, thisArg, source) {
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.source = source;
        }
        EveryOperator.prototype.call = function (observer, source) {
            return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
        };
        return EveryOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var EverySubscriber = function (_super) {
        __extends(EverySubscriber, _super);
        function EverySubscriber(destination, predicate, thisArg, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.source = source;
            this.index = 0;
            this.thisArg = thisArg || this;
        }
        EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
            this.destination.next(everyValueMatch);
            this.destination.complete();
        };
        EverySubscriber.prototype._next = function (value) {
            var result = false;
            try {
                result = this.predicate.call(this.thisArg, value, this.index++, this.source);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (!result) {
                this.notifyComplete(false);
            }
        };
        EverySubscriber.prototype._complete = function () {
            this.notifyComplete(true);
        };
        return EverySubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('14e', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when an Observable or a sequence was queried but has no
     * elements.
     *
     * @see {@link first}
     * @see {@link last}
     * @see {@link single}
     *
     * @class EmptyError
     */
    var EmptyError = function (_super) {
        __extends(EmptyError, _super);
        function EmptyError() {
            var err = _super.call(this, 'no elements in sequence');
            this.name = err.name = 'EmptyError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return EmptyError;
    }(Error);
    exports.EmptyError = EmptyError;
    

    return module.exports;
});
$__System.registerDynamic('160', ['b6', '14e'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('b6');
    var EmptyError_1 = $__require('14e');
    /**
     * Returns an Observable that emits only the last item emitted by the source Observable.
     * It optionally takes a predicate function as a parameter, in which case, rather than emitting
     * the last item from the source Observable, the resulting Observable will emit the last item
     * from the source Observable that satisfies the predicate.
     *
     * <img src="./img/last.png" width="100%">
     *
     * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
     * callback if the Observable completes before any `next` notification was sent.
     * @param {function} predicate - the condition any source emitted item has to satisfy.
     * @return {Observable} an Observable that emits only the last item satisfying the given condition
     * from the source, or an NoSuchElementException if no such items are emitted.
     * @throws - Throws if no items that match the predicate are emitted by the source Observable.
     * @method last
     * @owner Observable
     */
    function last(predicate, resultSelector, defaultValue) {
        return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));
    }
    exports.last = last;
    var LastOperator = function () {
        function LastOperator(predicate, resultSelector, defaultValue, source) {
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
        }
        LastOperator.prototype.call = function (observer, source) {
            return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
        };
        return LastOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var LastSubscriber = function (_super) {
        __extends(LastSubscriber, _super);
        function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
            this.hasValue = false;
            this.index = 0;
            if (typeof defaultValue !== 'undefined') {
                this.lastValue = defaultValue;
                this.hasValue = true;
            }
        }
        LastSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this._tryPredicate(value, index);
            } else {
                if (this.resultSelector) {
                    this._tryResultSelector(value, index);
                    return;
                }
                this.lastValue = value;
                this.hasValue = true;
            }
        };
        LastSubscriber.prototype._tryPredicate = function (value, index) {
            var result;
            try {
                result = this.predicate(value, index, this.source);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                if (this.resultSelector) {
                    this._tryResultSelector(value, index);
                    return;
                }
                this.lastValue = value;
                this.hasValue = true;
            }
        };
        LastSubscriber.prototype._tryResultSelector = function (value, index) {
            var result;
            try {
                result = this.resultSelector(value, index);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.lastValue = result;
            this.hasValue = true;
        };
        LastSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (this.hasValue) {
                destination.next(this.lastValue);
                destination.complete();
            } else {
                destination.error(new EmptyError_1.EmptyError());
            }
        };
        return LastSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('c1', ['b6'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('b6');
    /**
     * Applies a given `project` function to each value emitted by the source
     * Observable, and emits the resulting values as an Observable.
     *
     * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
     * it passes each source value through a transformation function to get
     * corresponding output values.</span>
     *
     * <img src="./img/map.png" width="100%">
     *
     * Similar to the well known `Array.prototype.map` function, this operator
     * applies a projection to each value and emits that projection in the output
     * Observable.
     *
     * @example <caption>Map every every click to the clientX position of that click</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var positions = clicks.map(ev => ev.clientX);
     * positions.subscribe(x => console.log(x));
     *
     * @see {@link mapTo}
     * @see {@link pluck}
     *
     * @param {function(value: T, index: number): R} project The function to apply
     * to each `value` emitted by the source Observable. The `index` parameter is
     * the number `i` for the i-th emission that has happened since the
     * subscription, starting from the number `0`.
     * @param {any} [thisArg] An optional argument to define what `this` is in the
     * `project` function.
     * @return {Observable<R>} An Observable that emits the values from the source
     * Observable transformed by the given `project` function.
     * @method map
     * @owner Observable
     */
    function map(project, thisArg) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return this.lift(new MapOperator(project, thisArg));
    }
    exports.map = map;
    var MapOperator = function () {
        function MapOperator(project, thisArg) {
            this.project = project;
            this.thisArg = thisArg;
        }
        MapOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
        };
        return MapOperator;
    }();
    exports.MapOperator = MapOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MapSubscriber = function (_super) {
        __extends(MapSubscriber, _super);
        function MapSubscriber(destination, project, thisArg) {
            _super.call(this, destination);
            this.project = project;
            this.count = 0;
            this.thisArg = thisArg || this;
        }
        // NOTE: This looks unoptimized, but it's actually purposefully NOT
        // using try/catch optimizations.
        MapSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.project.call(this.thisArg, value, this.count++);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return MapSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic("c3", ["b6"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("b6");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var OuterSubscriber = function (_super) {
        __extends(OuterSubscriber, _super);
        function OuterSubscriber() {
            _super.apply(this, arguments);
        }
        OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
        };
        OuterSubscriber.prototype.notifyError = function (error, innerSub) {
            this.destination.error(error);
        };
        OuterSubscriber.prototype.notifyComplete = function (innerSub) {
            this.destination.complete();
        };
        return OuterSubscriber;
    }(Subscriber_1.Subscriber);
    exports.OuterSubscriber = OuterSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('148', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isPromise(value) {
        return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
    }
    exports.isPromise = isPromise;
    

    return module.exports;
});
$__System.registerDynamic('140', ['b1'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('b1');
    var Symbol = root_1.root.Symbol;
    if (typeof Symbol === 'function') {
        if (Symbol.iterator) {
            exports.$$iterator = Symbol.iterator;
        } else if (typeof Symbol.for === 'function') {
            exports.$$iterator = Symbol.for('iterator');
        }
    } else {
        if (root_1.root.Set && typeof new root_1.root.Set()['@@iterator'] === 'function') {
            // Bug for mozilla version
            exports.$$iterator = '@@iterator';
        } else if (root_1.root.Map) {
            // es6-shim specific logic
            var keys = Object.getOwnPropertyNames(root_1.root.Map.prototype);
            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                if (key !== 'entries' && key !== 'size' && root_1.root.Map.prototype[key] === root_1.root.Map.prototype['entries']) {
                    exports.$$iterator = key;
                    break;
                }
            }
        } else {
            exports.$$iterator = '@@iterator';
        }
    }
    

    return module.exports;
});
$__System.registerDynamic("161", ["b6"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("b6");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var InnerSubscriber = function (_super) {
        __extends(InnerSubscriber, _super);
        function InnerSubscriber(parent, outerValue, outerIndex) {
            _super.call(this);
            this.parent = parent;
            this.outerValue = outerValue;
            this.outerIndex = outerIndex;
            this.index = 0;
        }
        InnerSubscriber.prototype._next = function (value) {
            this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
        };
        InnerSubscriber.prototype._error = function (error) {
            this.parent.notifyError(error, this);
            this.unsubscribe();
        };
        InnerSubscriber.prototype._complete = function () {
            this.parent.notifyComplete(this);
            this.unsubscribe();
        };
        return InnerSubscriber;
    }(Subscriber_1.Subscriber);
    exports.InnerSubscriber = InnerSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('c4', ['b1', '147', '148', '91', '140', '161', '14b'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('b1');
    var isArray_1 = $__require('147');
    var isPromise_1 = $__require('148');
    var Observable_1 = $__require('91');
    var iterator_1 = $__require('140');
    var InnerSubscriber_1 = $__require('161');
    var observable_1 = $__require('14b');
    function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
        var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
        if (destination.closed) {
            return null;
        }
        if (result instanceof Observable_1.Observable) {
            if (result._isScalar) {
                destination.next(result.value);
                destination.complete();
                return null;
            } else {
                return result.subscribe(destination);
            }
        }
        if (isArray_1.isArray(result)) {
            for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
                destination.next(result[i]);
            }
            if (!destination.closed) {
                destination.complete();
            }
        } else if (isPromise_1.isPromise(result)) {
            result.then(function (value) {
                if (!destination.closed) {
                    destination.next(value);
                    destination.complete();
                }
            }, function (err) {
                return destination.error(err);
            }).then(null, function (err) {
                // Escaping the Promise trap: globally throw unhandled errors
                root_1.root.setTimeout(function () {
                    throw err;
                });
            });
            return destination;
        } else if (typeof result[iterator_1.$$iterator] === 'function') {
            var iterator = result[iterator_1.$$iterator]();
            do {
                var item = iterator.next();
                if (item.done) {
                    destination.complete();
                    break;
                }
                destination.next(item.value);
                if (destination.closed) {
                    break;
                }
            } while (true);
        } else if (typeof result[observable_1.$$observable] === 'function') {
            var obs = result[observable_1.$$observable]();
            if (typeof obs.subscribe !== 'function') {
                destination.error(new Error('invalid observable'));
            } else {
                return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
            }
        } else {
            destination.error(new TypeError('unknown type returned'));
        }
        return null;
    }
    exports.subscribeToResult = subscribeToResult;
    

    return module.exports;
});
$__System.registerDynamic('15b', ['c3', 'c4'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('c3');
    var subscribeToResult_1 = $__require('c4');
    /**
     * Converts a higher-order Observable into a first-order Observable which
     * concurrently delivers all values that are emitted on the inner Observables.
     *
     * <span class="informal">Flattens an Observable-of-Observables.</span>
     *
     * <img src="./img/mergeAll.png" width="100%">
     *
     * `mergeAll` subscribes to an Observable that emits Observables, also known as
     * a higher-order Observable. Each time it observes one of these emitted inner
     * Observables, it subscribes to that and delivers all the values from the
     * inner Observable on the output Observable. The output Observable only
     * completes once all inner Observables have completed. Any error delivered by
     * a inner Observable will be immediately emitted on the output Observable.
     *
     * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
     * var firstOrder = higherOrder.mergeAll();
     * firstOrder.subscribe(x => console.log(x));
     *
     * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
     * var firstOrder = higherOrder.mergeAll(2);
     * firstOrder.subscribe(x => console.log(x));
     *
     * @see {@link combineAll}
     * @see {@link concatAll}
     * @see {@link exhaust}
     * @see {@link merge}
     * @see {@link mergeMap}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     * @see {@link switch}
     * @see {@link zipAll}
     *
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
     * Observables being subscribed to concurrently.
     * @return {Observable} An Observable that emits values coming from all the
     * inner Observables emitted by the source Observable.
     * @method mergeAll
     * @owner Observable
     */
    function mergeAll(concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        return this.lift(new MergeAllOperator(concurrent));
    }
    exports.mergeAll = mergeAll;
    var MergeAllOperator = function () {
        function MergeAllOperator(concurrent) {
            this.concurrent = concurrent;
        }
        MergeAllOperator.prototype.call = function (observer, source) {
            return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));
        };
        return MergeAllOperator;
    }();
    exports.MergeAllOperator = MergeAllOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MergeAllSubscriber = function (_super) {
        __extends(MergeAllSubscriber, _super);
        function MergeAllSubscriber(destination, concurrent) {
            _super.call(this, destination);
            this.concurrent = concurrent;
            this.hasCompleted = false;
            this.buffer = [];
            this.active = 0;
        }
        MergeAllSubscriber.prototype._next = function (observable) {
            if (this.active < this.concurrent) {
                this.active++;
                this.add(subscribeToResult_1.subscribeToResult(this, observable));
            } else {
                this.buffer.push(observable);
            }
        };
        MergeAllSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
        };
        MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            } else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeAllSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    exports.MergeAllSubscriber = MergeAllSubscriber;
    

    return module.exports;
});
$__System.register("13b", [], function($__export) {
  "use strict";
  var __extends,
      PRIMARY_OUTLET,
      NavigationCancelingError;
  return {
    setters: [],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      PRIMARY_OUTLET = 'primary';
      $__export("PRIMARY_OUTLET", PRIMARY_OUTLET);
      NavigationCancelingError = (function(_super) {
        __extends(NavigationCancelingError, _super);
        function NavigationCancelingError(message) {
          _super.call(this, message);
          this.message = message;
          this.stack = (new Error(message)).stack;
        }
        NavigationCancelingError.prototype.toString = function() {
          return this.message;
        };
        return NavigationCancelingError;
      }(Error));
      $__export("NavigationCancelingError", NavigationCancelingError);
    }
  };
});

$__System.register("153", ["91", "92", "a8", "150", "15a", "160", "c1", "15b", "13b"], function($__export) {
  "use strict";
  var Observable,
      fromPromise,
      of,
      concatAll,
      every,
      l,
      map,
      mergeAll,
      PRIMARY_OUTLET;
  function shallowEqualArrays(a, b) {
    if (a.length !== b.length)
      return false;
    for (var i = 0; i < a.length; ++i) {
      if (!shallowEqual(a[i], b[i]))
        return false;
    }
    return true;
  }
  function shallowEqual(a, b) {
    var k1 = Object.keys(a);
    var k2 = Object.keys(b);
    if (k1.length != k2.length) {
      return false;
    }
    var key;
    for (var i = 0; i < k1.length; i++) {
      key = k1[i];
      if (a[key] !== b[key]) {
        return false;
      }
    }
    return true;
  }
  function flatten(a) {
    var target = [];
    for (var i = 0; i < a.length; ++i) {
      for (var j = 0; j < a[i].length; ++j) {
        target.push(a[i][j]);
      }
    }
    return target;
  }
  function first(a) {
    return a.length > 0 ? a[0] : null;
  }
  function last(a) {
    return a.length > 0 ? a[a.length - 1] : null;
  }
  function and(bools) {
    return bools.reduce(function(a, b) {
      return a && b;
    }, true);
  }
  function merge(m1, m2) {
    var m = {};
    for (var attr in m1) {
      if (m1.hasOwnProperty(attr)) {
        m[attr] = m1[attr];
      }
    }
    for (var attr in m2) {
      if (m2.hasOwnProperty(attr)) {
        m[attr] = m2[attr];
      }
    }
    return m;
  }
  function forEach(map, callback) {
    for (var prop in map) {
      if (map.hasOwnProperty(prop)) {
        callback(map[prop], prop);
      }
    }
  }
  function waitForMap(obj, fn) {
    var waitFor = [];
    var res = {};
    forEach(obj, function(a, k) {
      if (k === PRIMARY_OUTLET) {
        waitFor.push(map.call(fn(k, a), function(_) {
          res[k] = _;
          return _;
        }));
      }
    });
    forEach(obj, function(a, k) {
      if (k !== PRIMARY_OUTLET) {
        waitFor.push(map.call(fn(k, a), function(_) {
          res[k] = _;
          return _;
        }));
      }
    });
    if (waitFor.length > 0) {
      var concatted$ = concatAll.call(of.apply(void 0, waitFor));
      var last$ = l.last.call(concatted$);
      return map.call(last$, function() {
        return res;
      });
    } else {
      return of(res);
    }
  }
  function andObservables(observables) {
    var merged$ = mergeAll.call(observables);
    return every.call(merged$, function(result) {
      return result === true;
    });
  }
  function wrapIntoObservable(value) {
    if (value instanceof Observable) {
      return value;
    } else if (value instanceof Promise) {
      return fromPromise(value);
    } else {
      return of(value);
    }
  }
  $__export("shallowEqualArrays", shallowEqualArrays);
  $__export("shallowEqual", shallowEqual);
  $__export("flatten", flatten);
  $__export("first", first);
  $__export("last", last);
  $__export("and", and);
  $__export("merge", merge);
  $__export("forEach", forEach);
  $__export("waitForMap", waitForMap);
  $__export("andObservables", andObservables);
  $__export("wrapIntoObservable", wrapIntoObservable);
  return {
    setters: [function($__m) {
      Observable = $__m.Observable;
    }, function($__m) {
      fromPromise = $__m.fromPromise;
    }, function($__m) {
      of = $__m.of;
    }, function($__m) {
      concatAll = $__m.concatAll;
    }, function($__m) {
      every = $__m.every;
    }, function($__m) {
      l = $__m;
    }, function($__m) {
      map = $__m.map;
    }, function($__m) {
      mergeAll = $__m.mergeAll;
    }, function($__m) {
      PRIMARY_OUTLET = $__m.PRIMARY_OUTLET;
    }],
    execute: function() {}
  };
});

$__System.register("162", ["151", "15e", "153"], function($__export) {
  "use strict";
  var ROUTES,
      ROUTER_PROVIDERS,
      flatten,
      __router_private__;
  return {
    setters: [function($__m) {
      ROUTES = $__m.ROUTES;
    }, function($__m) {
      ROUTER_PROVIDERS = $__m.ROUTER_PROVIDERS;
    }, function($__m) {
      flatten = $__m.flatten;
    }],
    execute: function() {
      __router_private__ = {
        ROUTER_PROVIDERS: ROUTER_PROVIDERS,
        ROUTES: ROUTES,
        flatten: flatten
      };
      $__export("__router_private__", __router_private__);
    }
  };
});

$__System.register("163", ["135", "138", "139", "136", "15e", "13a", "15c", "137", "13b", "152", "162"], function($__export) {
  "use strict";
  var $__exportNames = {undefined: true};
  return {
    setters: [function($__m) {
      $__export({
        RouterLink: $__m.RouterLink,
        RouterLinkWithHref: $__m.RouterLinkWithHref
      });
    }, function($__m) {
      $__export({RouterLinkActive: $__m.RouterLinkActive});
    }, function($__m) {
      $__export({RouterOutlet: $__m.RouterOutlet});
    }, function($__m) {
      $__export({
        NavigationCancel: $__m.NavigationCancel,
        NavigationEnd: $__m.NavigationEnd,
        NavigationError: $__m.NavigationError,
        NavigationStart: $__m.NavigationStart,
        Router: $__m.Router,
        RoutesRecognized: $__m.RoutesRecognized
      });
    }, function($__m) {
      $__export({
        RouterModule: $__m.RouterModule,
        provideRoutes: $__m.provideRoutes
      });
    }, function($__m) {
      $__export({RouterOutletMap: $__m.RouterOutletMap});
    }, function($__m) {
      $__export({
        NoPreloading: $__m.NoPreloading,
        PreloadAllModules: $__m.PreloadAllModules,
        PreloadingStrategy: $__m.PreloadingStrategy
      });
    }, function($__m) {
      $__export({
        ActivatedRoute: $__m.ActivatedRoute,
        ActivatedRouteSnapshot: $__m.ActivatedRouteSnapshot,
        RouterState: $__m.RouterState,
        RouterStateSnapshot: $__m.RouterStateSnapshot
      });
    }, function($__m) {
      $__export({PRIMARY_OUTLET: $__m.PRIMARY_OUTLET});
    }, function($__m) {
      $__export({
        DefaultUrlSerializer: $__m.DefaultUrlSerializer,
        UrlSegment: $__m.UrlSegment,
        UrlSerializer: $__m.UrlSerializer,
        UrlTree: $__m.UrlTree
      });
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }],
    execute: function() {}
  };
});

$__System.register("98", ["163"], function($__export) {
  "use strict";
  var $__exportNames = {};
  return {
    setters: [function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }],
    execute: function() {}
  };
});

$__System.registerDynamic('8d', ['b1'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('b1');
    /**
     * @param PromiseCtor
     * @return {Promise<T>}
     * @method toPromise
     * @owner Observable
     */
    function toPromise(PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                PromiseCtor = root_1.root.Rx.config.Promise;
            } else if (root_1.root.Promise) {
                PromiseCtor = root_1.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) {
                return value = x;
            }, function (err) {
                return reject(err);
            }, function () {
                return resolve(value);
            });
        });
    }
    exports.toPromise = toPromise;
    

    return module.exports;
});
$__System.registerDynamic('dc', ['91', '8d'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('91');
  var toPromise_1 = $__require('8d');
  Observable_1.Observable.prototype.toPromise = toPromise_1.toPromise;
  

  return module.exports;
});
$__System.registerDynamic("164", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var AccountLoginModel = function () {
        function AccountLoginModel() {}
        return AccountLoginModel;
    }();
    exports.AccountLoginModel = AccountLoginModel;
    return module.exports;
});
$__System.registerDynamic("165", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var AccountRegisterModel = function () {
        function AccountRegisterModel() {}
        return AccountRegisterModel;
    }();
    exports.AccountRegisterModel = AccountRegisterModel;
    return module.exports;
});
$__System.registerDynamic("166", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var ForgotPasswordModel = function () {
        function ForgotPasswordModel() {}
        return ForgotPasswordModel;
    }();
    exports.ForgotPasswordModel = ForgotPasswordModel;
    return module.exports;
});
$__System.registerDynamic("167", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var ResetPasswordModel = function () {
        function ResetPasswordModel() {}
        return ResetPasswordModel;
    }();
    exports.ResetPasswordModel = ResetPasswordModel;
    return module.exports;
});
$__System.registerDynamic("168", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var UserInformationModel = function () {
        function UserInformationModel() {}
        return UserInformationModel;
    }();
    exports.UserInformationModel = UserInformationModel;
    return module.exports;
});
$__System.registerDynamic("169", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var NavigationModel = function () {
        function NavigationModel() {
            this.MainNavigation = new Array();
            this.SubNavigation = new Array();
        }
        return NavigationModel;
    }();
    exports.NavigationModel = NavigationModel;
    return module.exports;
});
$__System.registerDynamic("16a", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var NavigationGroupModel = function () {
        function NavigationGroupModel() {
            this.Items = new Array();
        }
        return NavigationGroupModel;
    }();
    exports.NavigationGroupModel = NavigationGroupModel;
    return module.exports;
});
$__System.registerDynamic("16b", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var NavigationItemModel = function () {
        function NavigationItemModel() {}
        return NavigationItemModel;
    }();
    exports.NavigationItemModel = NavigationItemModel;
    return module.exports;
});
$__System.registerDynamic("16c", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var SearchResultModel = function () {
        function SearchResultModel() {
            this.recipes = new Array();
        }
        return SearchResultModel;
    }();
    exports.SearchResultModel = SearchResultModel;
    return module.exports;
});
$__System.registerDynamic("16d", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var SearchResultRecipeModel = function () {
        function SearchResultRecipeModel() {}
        return SearchResultRecipeModel;
    }();
    exports.SearchResultRecipeModel = SearchResultRecipeModel;
    return module.exports;
});
$__System.registerDynamic("16e", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var AuthorModel = function () {
        function AuthorModel() {}
        return AuthorModel;
    }();
    exports.AuthorModel = AuthorModel;
    return module.exports;
});
$__System.registerDynamic("16f", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var CategoryModel = function () {
        function CategoryModel() {
            this.subCategories = new Array();
        }
        return CategoryModel;
    }();
    exports.CategoryModel = CategoryModel;
    return module.exports;
});
$__System.registerDynamic("170", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var IngredientModel = function () {
        function IngredientModel() {}
        return IngredientModel;
    }();
    exports.IngredientModel = IngredientModel;
    return module.exports;
});
$__System.registerDynamic("171", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var IngredientListModel = function () {
        function IngredientListModel() {}
        return IngredientListModel;
    }();
    exports.IngredientListModel = IngredientListModel;
    return module.exports;
});
$__System.registerDynamic("172", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var IngredientListItemModel = function () {
        function IngredientListItemModel() {}
        return IngredientListItemModel;
    }();
    exports.IngredientListItemModel = IngredientListItemModel;
    return module.exports;
});
$__System.registerDynamic("173", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var MeasurementModel = function () {
        function MeasurementModel() {}
        return MeasurementModel;
    }();
    exports.MeasurementModel = MeasurementModel;
    return module.exports;
});
$__System.registerDynamic("174", ["173"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var Measurement_model_1 = $__require("173");
    var RecipeDetailModel = function () {
        function RecipeDetailModel() {
            this.ingredients = new Array();
            this.measurement = new Measurement_model_1.MeasurementModel();
        }
        return RecipeDetailModel;
    }();
    exports.RecipeDetailModel = RecipeDetailModel;
    return module.exports;
});
$__System.registerDynamic("175", ["9d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var models_1 = $__require("9d");
    var RecipeEditModel = function () {
        function RecipeEditModel() {
            this.ingredientList = new Array();
            this.authors = new Array();
            this.seoTags = new Array();
            this.categories = new Array();
            this.measurement = new models_1.MeasurementModel();
        }
        return RecipeEditModel;
    }();
    exports.RecipeEditModel = RecipeEditModel;
    return module.exports;
});
$__System.registerDynamic("176", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var PagingModel = function () {
        function PagingModel() {
            this.pages = new Array();
        }
        return PagingModel;
    }();
    exports.PagingModel = PagingModel;
    return module.exports;
});
$__System.registerDynamic("177", ["176"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var paging_model_1 = $__require("176");
    var RecipeOverviewModel = function () {
        function RecipeOverviewModel() {
            this.paging = new paging_model_1.PagingModel();
        }
        return RecipeOverviewModel;
    }();
    exports.RecipeOverviewModel = RecipeOverviewModel;
    return module.exports;
});
$__System.registerDynamic("178", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var RecipeOverviewRecipeModel = function () {
        function RecipeOverviewRecipeModel() {}
        return RecipeOverviewRecipeModel;
    }();
    exports.RecipeOverviewRecipeModel = RecipeOverviewRecipeModel;
    return module.exports;
});
$__System.registerDynamic("179", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var SeoTagModel = function () {
        function SeoTagModel() {}
        return SeoTagModel;
    }();
    exports.SeoTagModel = SeoTagModel;
    return module.exports;
});
$__System.registerDynamic("17a", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var SubCategoryModel = function () {
        function SubCategoryModel() {}
        return SubCategoryModel;
    }();
    exports.SubCategoryModel = SubCategoryModel;
    return module.exports;
});
$__System.registerDynamic("17b", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var FormResultModel = function () {
        function FormResultModel() {}
        return FormResultModel;
    }();
    exports.FormResultModel = FormResultModel;
    return module.exports;
});
$__System.registerDynamic("17c", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var PagingModel = function () {
        function PagingModel() {
            this.pages = new Array();
        }
        return PagingModel;
    }();
    exports.PagingModel = PagingModel;
    return module.exports;
});
$__System.registerDynamic("9d", ["164", "165", "166", "167", "168", "169", "16a", "16b", "16c", "16d", "16e", "16f", "170", "171", "172", "173", "174", "175", "177", "178", "179", "17a", "17b", "17c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    __export($__require("164"));
    __export($__require("165"));
    __export($__require("166"));
    __export($__require("167"));
    __export($__require("168"));
    __export($__require("169"));
    __export($__require("16a"));
    __export($__require("16b"));
    __export($__require("16c"));
    __export($__require("16d"));
    __export($__require("16e"));
    __export($__require("16f"));
    __export($__require("170"));
    __export($__require("171"));
    __export($__require("172"));
    __export($__require("173"));
    __export($__require("174"));
    __export($__require("175"));
    __export($__require("177"));
    __export($__require("178"));
    __export($__require("179"));
    __export($__require("17a"));
    __export($__require("17b"));
    __export($__require("17c"));
    return module.exports;
});
$__System.registerDynamic("17d", ["c", "a4", "98", "dc", "9d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("c");
    var http_1 = $__require("a4");
    var router_1 = $__require("98");
    $__require("dc");
    var models_1 = $__require("9d");
    var SearchService = function () {
        function SearchService(http, router) {
            this.http = http;
            this.router = router;
            this.headers = new http_1.Headers({ 'Content-Type': 'application/json' });
            this.searchUrl = '/api/Recipe/Search';
            this.searchResult = new models_1.SearchResultModel();
        }
        SearchService.prototype.Search = function (term) {
            var myData = JSON.stringify(term);
            return this.http.post(this.searchUrl, myData, { headers: this.headers }).toPromise().then(function (response) {
                return response.json();
            }).catch(this.handleError);
        };
        SearchService.prototype.handleError = function (error) {
            console.error('An error occurred', error);
            return Promise.reject(error.message || error);
        };
        SearchService.prototype.activeMobileSearch = function () {
            $('body').addClass('active-mobile-search');
            return true;
        };
        SearchService.prototype.deactivateMobileSearch = function () {
            $('body').removeClass('active-mobile-search');
            return true;
        };
        SearchService.prototype.changeSearchTerm = function () {
            var _this = this;
            this.GetScreenWidthAndHeight();
            $('.mobile-search-result').css('max-height', window.displayHeight - 55 + 'px');
            if (this.searchTerm.length < 1) {
                this.searchResult = new models_1.SearchResultModel();
                return;
            }
            this.Search(this.searchTerm).then(function (result) {
                return _this.updateSearchResult(result);
            });
            return true;
        };
        SearchService.prototype.updateSearchResult = function (result) {
            if (result.searchTerm == this.searchTerm) {
                this.searchResult = result;
            }
        };
        SearchService.prototype.selectSearchResult = function (recipe) {
            this.router.navigate(['/Rezept/' + recipe.url + '/' + recipe.id]);
            this.searchResult = new models_1.SearchResultModel();
            this.searchTerm = "";
            $('body').removeClass('active-mobile-search');
        };
        SearchService.prototype.GetScreenWidthAndHeight = function () {
            this.displayWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
            this.displayHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
        };
        SearchService = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [http_1.Http, router_1.Router])], SearchService);
        return SearchService;
    }();
    exports.SearchService = SearchService;
    return module.exports;
});
$__System.registerDynamic("99", ["db", "dd", "de", "df", "17d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    __export($__require("db"));
    __export($__require("dd"));
    __export($__require("de"));
    __export($__require("df"));
    __export($__require("17d"));
    return module.exports;
});
$__System.registerDynamic("17e", ["a3", "c", "98", "a6", "99"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    $__require("a3");
    var core_1 = $__require("c");
    var router_1 = $__require("98");
    var components_1 = $__require("a6");
    var services_1 = $__require("99");
    var CmsModule = function () {
        function CmsModule() {}
        CmsModule = __decorate([core_1.NgModule({
            imports: [router_1.RouterModule.forChild([{
                path: 'Rezepte', component: components_1.CmsRecipeOverviewComponent,
                canActivate: [services_1.AccountService],
                data: { roles: ['author', 'admin'], cms: true }
            }, {
                path: 'CMS/Rezept/:id', component: components_1.CmsRecipeEditComponent,
                canActivate: [services_1.AccountService],
                data: { roles: ['author', 'admin'] }
            }, { path: '', redirectTo: 'Rezepte', pathMatch: 'full' }])],
            exports: [router_1.RouterModule]
        }), __metadata('design:paramtypes', [])], CmsModule);
        return CmsModule;
    }();
    exports.CmsModule = CmsModule;
    return module.exports;
});
$__System.registerDynamic("17f", ["a2", "17e"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    __export($__require("a2"));
    __export($__require("17e"));
    return module.exports;
});
$__System.register("180", ["181"], function($__export) {
  "use strict";
  return {
    setters: [function($__m) {
      $__export({Class: $__m.Class});
    }],
    execute: function() {}
  };
});

$__System.register("182", ["183"], function($__export) {
  "use strict";
  return {
    setters: [function($__m) {
      $__export({NgZone: $__m.NgZone});
    }],
    execute: function() {}
  };
});

$__System.register("184", ["185"], function($__export) {
  "use strict";
  return {
    setters: [function($__m) {
      $__export({
        RenderComponentType: $__m.RenderComponentType,
        Renderer: $__m.Renderer,
        RootRenderer: $__m.RootRenderer
      });
    }],
    execute: function() {}
  };
});

$__System.register("186", ["187", "188", "189"], function($__export) {
  "use strict";
  var EventEmitter,
      ListWrapper,
      getSymbolIterator,
      QueryList;
  return {
    setters: [function($__m) {
      EventEmitter = $__m.EventEmitter;
    }, function($__m) {
      ListWrapper = $__m.ListWrapper;
    }, function($__m) {
      getSymbolIterator = $__m.getSymbolIterator;
    }],
    execute: function() {
      QueryList = (function() {
        function QueryList() {
          this._dirty = true;
          this._results = [];
          this._emitter = new EventEmitter();
        }
        Object.defineProperty(QueryList.prototype, "changes", {
          get: function() {
            return this._emitter;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(QueryList.prototype, "length", {
          get: function() {
            return this._results.length;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(QueryList.prototype, "first", {
          get: function() {
            return this._results[0];
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(QueryList.prototype, "last", {
          get: function() {
            return this._results[this.length - 1];
          },
          enumerable: true,
          configurable: true
        });
        QueryList.prototype.map = function(fn) {
          return this._results.map(fn);
        };
        QueryList.prototype.filter = function(fn) {
          return this._results.filter(fn);
        };
        QueryList.prototype.reduce = function(fn, init) {
          return this._results.reduce(fn, init);
        };
        QueryList.prototype.forEach = function(fn) {
          this._results.forEach(fn);
        };
        QueryList.prototype.some = function(fn) {
          return this._results.some(fn);
        };
        QueryList.prototype.toArray = function() {
          return this._results.slice();
        };
        QueryList.prototype[getSymbolIterator()] = function() {
          return this._results[getSymbolIterator()]();
        };
        QueryList.prototype.toString = function() {
          return this._results.toString();
        };
        QueryList.prototype.reset = function(res) {
          this._results = ListWrapper.flatten(res);
          this._dirty = false;
        };
        QueryList.prototype.notifyOnChanges = function() {
          this._emitter.emit(this);
        };
        QueryList.prototype.setDirty = function() {
          this._dirty = true;
        };
        Object.defineProperty(QueryList.prototype, "dirty", {
          get: function() {
            return this._dirty;
          },
          enumerable: true,
          configurable: true
        });
        return QueryList;
      }());
      $__export("QueryList", QueryList);
    }
  };
});

$__System.register("18a", ["18b", "18c"], function($__export) {
  "use strict";
  var Injectable,
      Optional,
      Compiler,
      _SEPARATOR,
      FACTORY_CLASS_SUFFIX,
      SystemJsNgModuleLoaderConfig,
      DEFAULT_CONFIG,
      SystemJsNgModuleLoader;
  function checkNotEmpty(value, modulePath, exportName) {
    if (!value) {
      throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
    }
    return value;
  }
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
      Optional = $__m.Optional;
    }, function($__m) {
      Compiler = $__m.Compiler;
    }],
    execute: function() {
      _SEPARATOR = '#';
      FACTORY_CLASS_SUFFIX = 'NgFactory';
      SystemJsNgModuleLoaderConfig = (function() {
        function SystemJsNgModuleLoaderConfig() {}
        return SystemJsNgModuleLoaderConfig;
      }());
      $__export("SystemJsNgModuleLoaderConfig", SystemJsNgModuleLoaderConfig);
      DEFAULT_CONFIG = {
        factoryPathPrefix: '',
        factoryPathSuffix: '.ngfactory'
      };
      SystemJsNgModuleLoader = (function() {
        function SystemJsNgModuleLoader(_compiler, config) {
          this._compiler = _compiler;
          this._config = config || DEFAULT_CONFIG;
        }
        SystemJsNgModuleLoader.prototype.load = function(path) {
          var offlineMode = this._compiler instanceof Compiler;
          return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
        };
        SystemJsNgModuleLoader.prototype.loadAndCompile = function(path) {
          var _this = this;
          var _a = path.split(_SEPARATOR),
              module = _a[0],
              exportName = _a[1];
          if (exportName === undefined)
            exportName = 'default';
          return System.import(module).then(function(module) {
            return module[exportName];
          }).then(function(type) {
            return checkNotEmpty(type, module, exportName);
          }).then(function(type) {
            return _this._compiler.compileModuleAsync(type);
          });
        };
        SystemJsNgModuleLoader.prototype.loadFactory = function(path) {
          var _a = path.split(_SEPARATOR),
              module = _a[0],
              exportName = _a[1];
          var factoryClassSuffix = FACTORY_CLASS_SUFFIX;
          if (exportName === undefined) {
            exportName = 'default';
            factoryClassSuffix = '';
          }
          return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix).then(function(module) {
            return module[exportName + factoryClassSuffix];
          }).then(function(factory) {
            return checkNotEmpty(factory, module, exportName);
          });
        };
        SystemJsNgModuleLoader.decorators = [{type: Injectable}];
        SystemJsNgModuleLoader.ctorParameters = [{type: Compiler}, {
          type: SystemJsNgModuleLoaderConfig,
          decorators: [{type: Optional}]
        }];
        return SystemJsNgModuleLoader;
      }());
      $__export("SystemJsNgModuleLoader", SystemJsNgModuleLoader);
    }
  };
});

$__System.register("18d", ["18c", "18e", "18f", "190", "191", "192", "186", "18a", "193", "194", "195"], function($__export) {
  "use strict";
  return {
    setters: [function($__m) {
      $__export({
        COMPILER_OPTIONS: $__m.COMPILER_OPTIONS,
        Compiler: $__m.Compiler,
        CompilerFactory: $__m.CompilerFactory,
        ModuleWithComponentFactories: $__m.ModuleWithComponentFactories
      });
    }, function($__m) {
      $__export({
        ComponentFactory: $__m.ComponentFactory,
        ComponentRef: $__m.ComponentRef
      });
    }, function($__m) {
      $__export({ComponentFactoryResolver: $__m.ComponentFactoryResolver});
    }, function($__m) {
      $__export({ElementRef: $__m.ElementRef});
    }, function($__m) {
      $__export({
        NgModuleFactory: $__m.NgModuleFactory,
        NgModuleRef: $__m.NgModuleRef
      });
    }, function($__m) {
      $__export({
        NgModuleFactoryLoader: $__m.NgModuleFactoryLoader,
        getModuleFactory: $__m.getModuleFactory
      });
    }, function($__m) {
      $__export({QueryList: $__m.QueryList});
    }, function($__m) {
      $__export({
        SystemJsNgModuleLoader: $__m.SystemJsNgModuleLoader,
        SystemJsNgModuleLoaderConfig: $__m.SystemJsNgModuleLoaderConfig
      });
    }, function($__m) {
      $__export({TemplateRef: $__m.TemplateRef});
    }, function($__m) {
      $__export({ViewContainerRef: $__m.ViewContainerRef});
    }, function($__m) {
      $__export({
        EmbeddedViewRef: $__m.EmbeddedViewRef,
        ViewRef: $__m.ViewRef
      });
    }],
    execute: function() {}
  };
});

$__System.register("196", ["197"], function($__export) {
  "use strict";
  return {
    setters: [function($__m) {
      $__export({
        ChangeDetectionStrategy: $__m.ChangeDetectionStrategy,
        ChangeDetectorRef: $__m.ChangeDetectorRef,
        CollectionChangeRecord: $__m.CollectionChangeRecord,
        DefaultIterableDiffer: $__m.DefaultIterableDiffer,
        IterableDiffers: $__m.IterableDiffers,
        KeyValueChangeRecord: $__m.KeyValueChangeRecord,
        KeyValueDiffers: $__m.KeyValueDiffers,
        SimpleChange: $__m.SimpleChange,
        WrappedValue: $__m.WrappedValue
      });
    }],
    execute: function() {}
  };
});

$__System.register("198", ["199", "19a", "19b", "19c", "19d"], function($__export) {
  "use strict";
  var PlatformRef,
      PlatformRef_,
      createPlatformFactory,
      Console,
      Reflector,
      reflector,
      ReflectorReader,
      TestabilityRegistry,
      _CORE_PLATFORM_PROVIDERS,
      platformCore;
  function _reflector() {
    return reflector;
  }
  return {
    setters: [function($__m) {
      PlatformRef = $__m.PlatformRef;
      PlatformRef_ = $__m.PlatformRef_;
      createPlatformFactory = $__m.createPlatformFactory;
    }, function($__m) {
      Console = $__m.Console;
    }, function($__m) {
      Reflector = $__m.Reflector;
      reflector = $__m.reflector;
    }, function($__m) {
      ReflectorReader = $__m.ReflectorReader;
    }, function($__m) {
      TestabilityRegistry = $__m.TestabilityRegistry;
    }],
    execute: function() {
      _CORE_PLATFORM_PROVIDERS = [PlatformRef_, {
        provide: PlatformRef,
        useExisting: PlatformRef_
      }, {
        provide: Reflector,
        useFactory: _reflector,
        deps: []
      }, {
        provide: ReflectorReader,
        useExisting: Reflector
      }, TestabilityRegistry, Console];
      platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);
      $__export("platformCore", platformCore);
    }
  };
});

$__System.register("19e", ["19f", "18b"], function($__export) {
  "use strict";
  var isPromise,
      Inject,
      Injectable,
      OpaqueToken,
      Optional,
      APP_INITIALIZER,
      ApplicationInitStatus;
  return {
    setters: [function($__m) {
      isPromise = $__m.isPromise;
    }, function($__m) {
      Inject = $__m.Inject;
      Injectable = $__m.Injectable;
      OpaqueToken = $__m.OpaqueToken;
      Optional = $__m.Optional;
    }],
    execute: function() {
      APP_INITIALIZER = new OpaqueToken('Application Initializer');
      $__export("APP_INITIALIZER", APP_INITIALIZER);
      ApplicationInitStatus = (function() {
        function ApplicationInitStatus(appInits) {
          var _this = this;
          this._done = false;
          var asyncInitPromises = [];
          if (appInits) {
            for (var i = 0; i < appInits.length; i++) {
              var initResult = appInits[i]();
              if (isPromise(initResult)) {
                asyncInitPromises.push(initResult);
              }
            }
          }
          this._donePromise = Promise.all(asyncInitPromises).then(function() {
            _this._done = true;
          });
          if (asyncInitPromises.length === 0) {
            this._done = true;
          }
        }
        Object.defineProperty(ApplicationInitStatus.prototype, "done", {
          get: function() {
            return this._done;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
          get: function() {
            return this._donePromise;
          },
          enumerable: true,
          configurable: true
        });
        ApplicationInitStatus.decorators = [{type: Injectable}];
        ApplicationInitStatus.ctorParameters = [{
          type: Array,
          decorators: [{
            type: Inject,
            args: [APP_INITIALIZER]
          }, {type: Optional}]
        }];
        return ApplicationInitStatus;
      }());
      $__export("ApplicationInitStatus", ApplicationInitStatus);
    }
  };
});

$__System.register("18e", ["1a0", "1a1"], function($__export) {
  "use strict";
  var __extends,
      unimplemented,
      ViewUtils,
      ComponentRef,
      ComponentRef_,
      EMPTY_CONTEXT,
      ComponentFactory;
  return {
    setters: [function($__m) {
      unimplemented = $__m.unimplemented;
    }, function($__m) {
      ViewUtils = $__m.ViewUtils;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      ComponentRef = (function() {
        function ComponentRef() {}
        Object.defineProperty(ComponentRef.prototype, "location", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ComponentRef.prototype, "injector", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ComponentRef.prototype, "instance", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        ;
        Object.defineProperty(ComponentRef.prototype, "hostView", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        ;
        Object.defineProperty(ComponentRef.prototype, "changeDetectorRef", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ComponentRef.prototype, "componentType", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        return ComponentRef;
      }());
      $__export("ComponentRef", ComponentRef);
      ComponentRef_ = (function(_super) {
        __extends(ComponentRef_, _super);
        function ComponentRef_(_hostElement, _componentType) {
          _super.call(this);
          this._hostElement = _hostElement;
          this._componentType = _componentType;
        }
        Object.defineProperty(ComponentRef_.prototype, "location", {
          get: function() {
            return this._hostElement.elementRef;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ComponentRef_.prototype, "injector", {
          get: function() {
            return this._hostElement.injector;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ComponentRef_.prototype, "instance", {
          get: function() {
            return this._hostElement.component;
          },
          enumerable: true,
          configurable: true
        });
        ;
        Object.defineProperty(ComponentRef_.prototype, "hostView", {
          get: function() {
            return this._hostElement.parentView.ref;
          },
          enumerable: true,
          configurable: true
        });
        ;
        Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
          get: function() {
            return this._hostElement.parentView.ref;
          },
          enumerable: true,
          configurable: true
        });
        ;
        Object.defineProperty(ComponentRef_.prototype, "componentType", {
          get: function() {
            return this._componentType;
          },
          enumerable: true,
          configurable: true
        });
        ComponentRef_.prototype.destroy = function() {
          this._hostElement.parentView.destroy();
        };
        ComponentRef_.prototype.onDestroy = function(callback) {
          this.hostView.onDestroy(callback);
        };
        return ComponentRef_;
      }(ComponentRef));
      $__export("ComponentRef_", ComponentRef_);
      EMPTY_CONTEXT = new Object();
      ComponentFactory = (function() {
        function ComponentFactory(selector, _viewFactory, _componentType) {
          this.selector = selector;
          this._viewFactory = _viewFactory;
          this._componentType = _componentType;
        }
        Object.defineProperty(ComponentFactory.prototype, "componentType", {
          get: function() {
            return this._componentType;
          },
          enumerable: true,
          configurable: true
        });
        ComponentFactory.prototype.create = function(injector, projectableNodes, rootSelectorOrNode) {
          if (projectableNodes === void 0) {
            projectableNodes = null;
          }
          if (rootSelectorOrNode === void 0) {
            rootSelectorOrNode = null;
          }
          var vu = injector.get(ViewUtils);
          if (!projectableNodes) {
            projectableNodes = [];
          }
          var hostView = this._viewFactory(vu, injector, null);
          var hostElement = hostView.create(EMPTY_CONTEXT, projectableNodes, rootSelectorOrNode);
          return new ComponentRef_(hostElement, this._componentType);
        };
        return ComponentFactory;
      }());
      $__export("ComponentFactory", ComponentFactory);
    }
  };
});

$__System.register("19d", ["18b", "188", "189", "183"], function($__export) {
  "use strict";
  var Injectable,
      MapWrapper,
      scheduleMicroTask,
      NgZone,
      Testability,
      TestabilityRegistry,
      _NoopGetTestability,
      _testabilityGetter;
  function setTestabilityGetter(getter) {
    _testabilityGetter = getter;
  }
  $__export("setTestabilityGetter", setTestabilityGetter);
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
    }, function($__m) {
      MapWrapper = $__m.MapWrapper;
    }, function($__m) {
      scheduleMicroTask = $__m.scheduleMicroTask;
    }, function($__m) {
      NgZone = $__m.NgZone;
    }],
    execute: function() {
      Testability = (function() {
        function Testability(_ngZone) {
          this._ngZone = _ngZone;
          this._pendingCount = 0;
          this._isZoneStable = true;
          this._didWork = false;
          this._callbacks = [];
          this._watchAngularEvents();
        }
        Testability.prototype._watchAngularEvents = function() {
          var _this = this;
          this._ngZone.onUnstable.subscribe({next: function() {
              _this._didWork = true;
              _this._isZoneStable = false;
            }});
          this._ngZone.runOutsideAngular(function() {
            _this._ngZone.onStable.subscribe({next: function() {
                NgZone.assertNotInAngularZone();
                scheduleMicroTask(function() {
                  _this._isZoneStable = true;
                  _this._runCallbacksIfReady();
                });
              }});
          });
        };
        Testability.prototype.increasePendingRequestCount = function() {
          this._pendingCount += 1;
          this._didWork = true;
          return this._pendingCount;
        };
        Testability.prototype.decreasePendingRequestCount = function() {
          this._pendingCount -= 1;
          if (this._pendingCount < 0) {
            throw new Error('pending async requests below zero');
          }
          this._runCallbacksIfReady();
          return this._pendingCount;
        };
        Testability.prototype.isStable = function() {
          return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
        };
        Testability.prototype._runCallbacksIfReady = function() {
          var _this = this;
          if (this.isStable()) {
            scheduleMicroTask(function() {
              while (_this._callbacks.length !== 0) {
                (_this._callbacks.pop())(_this._didWork);
              }
              _this._didWork = false;
            });
          } else {
            this._didWork = true;
          }
        };
        Testability.prototype.whenStable = function(callback) {
          this._callbacks.push(callback);
          this._runCallbacksIfReady();
        };
        Testability.prototype.getPendingRequestCount = function() {
          return this._pendingCount;
        };
        Testability.prototype.findBindings = function(using, provider, exactMatch) {
          return [];
        };
        Testability.prototype.findProviders = function(using, provider, exactMatch) {
          return [];
        };
        Testability.decorators = [{type: Injectable}];
        Testability.ctorParameters = [{type: NgZone}];
        return Testability;
      }());
      $__export("Testability", Testability);
      TestabilityRegistry = (function() {
        function TestabilityRegistry() {
          this._applications = new Map();
          _testabilityGetter.addToWindow(this);
        }
        TestabilityRegistry.prototype.registerApplication = function(token, testability) {
          this._applications.set(token, testability);
        };
        TestabilityRegistry.prototype.getTestability = function(elem) {
          return this._applications.get(elem);
        };
        TestabilityRegistry.prototype.getAllTestabilities = function() {
          return MapWrapper.values(this._applications);
        };
        TestabilityRegistry.prototype.getAllRootElements = function() {
          return MapWrapper.keys(this._applications);
        };
        TestabilityRegistry.prototype.findTestabilityInTree = function(elem, findInAncestors) {
          if (findInAncestors === void 0) {
            findInAncestors = true;
          }
          return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
        };
        TestabilityRegistry.decorators = [{type: Injectable}];
        TestabilityRegistry.ctorParameters = [];
        return TestabilityRegistry;
      }());
      $__export("TestabilityRegistry", TestabilityRegistry);
      _NoopGetTestability = (function() {
        function _NoopGetTestability() {}
        _NoopGetTestability.prototype.addToWindow = function(registry) {};
        _NoopGetTestability.prototype.findTestabilityInTree = function(registry, elem, findInAncestors) {
          return null;
        };
        return _NoopGetTestability;
      }());
      _testabilityGetter = new _NoopGetTestability();
    }
  };
});

$__System.register("183", ["187"], function($__export) {
  "use strict";
  var EventEmitter,
      NgZone;
  return {
    setters: [function($__m) {
      EventEmitter = $__m.EventEmitter;
    }],
    execute: function() {
      NgZone = (function() {
        function NgZone(_a) {
          var _b = _a.enableLongStackTrace,
              enableLongStackTrace = _b === void 0 ? false : _b;
          this._hasPendingMicrotasks = false;
          this._hasPendingMacrotasks = false;
          this._isStable = true;
          this._nesting = 0;
          this._onUnstable = new EventEmitter(false);
          this._onMicrotaskEmpty = new EventEmitter(false);
          this._onStable = new EventEmitter(false);
          this._onErrorEvents = new EventEmitter(false);
          if (typeof Zone == 'undefined') {
            throw new Error('Angular requires Zone.js prolyfill.');
          }
          Zone.assertZonePatched();
          this.outer = this.inner = Zone.current;
          if (Zone['wtfZoneSpec']) {
            this.inner = this.inner.fork(Zone['wtfZoneSpec']);
          }
          if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
            this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
          }
          this.forkInnerZoneWithAngularBehavior();
        }
        NgZone.isInAngularZone = function() {
          return Zone.current.get('isAngularZone') === true;
        };
        NgZone.assertInAngularZone = function() {
          if (!NgZone.isInAngularZone()) {
            throw new Error('Expected to be in Angular Zone, but it is not!');
          }
        };
        NgZone.assertNotInAngularZone = function() {
          if (NgZone.isInAngularZone()) {
            throw new Error('Expected to not be in Angular Zone, but it is!');
          }
        };
        NgZone.prototype.run = function(fn) {
          return this.inner.run(fn);
        };
        NgZone.prototype.runGuarded = function(fn) {
          return this.inner.runGuarded(fn);
        };
        NgZone.prototype.runOutsideAngular = function(fn) {
          return this.outer.run(fn);
        };
        Object.defineProperty(NgZone.prototype, "onUnstable", {
          get: function() {
            return this._onUnstable;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
          get: function() {
            return this._onMicrotaskEmpty;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgZone.prototype, "onStable", {
          get: function() {
            return this._onStable;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgZone.prototype, "onError", {
          get: function() {
            return this._onErrorEvents;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgZone.prototype, "isStable", {
          get: function() {
            return this._isStable;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
          get: function() {
            return this._hasPendingMicrotasks;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
          get: function() {
            return this._hasPendingMacrotasks;
          },
          enumerable: true,
          configurable: true
        });
        NgZone.prototype.checkStable = function() {
          var _this = this;
          if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {
            try {
              this._nesting++;
              this._onMicrotaskEmpty.emit(null);
            } finally {
              this._nesting--;
              if (!this._hasPendingMicrotasks) {
                try {
                  this.runOutsideAngular(function() {
                    return _this._onStable.emit(null);
                  });
                } finally {
                  this._isStable = true;
                }
              }
            }
          }
        };
        NgZone.prototype.forkInnerZoneWithAngularBehavior = function() {
          var _this = this;
          this.inner = this.inner.fork({
            name: 'angular',
            properties: {'isAngularZone': true},
            onInvokeTask: function(delegate, current, target, task, applyThis, applyArgs) {
              try {
                _this.onEnter();
                return delegate.invokeTask(target, task, applyThis, applyArgs);
              } finally {
                _this.onLeave();
              }
            },
            onInvoke: function(delegate, current, target, callback, applyThis, applyArgs, source) {
              try {
                _this.onEnter();
                return delegate.invoke(target, callback, applyThis, applyArgs, source);
              } finally {
                _this.onLeave();
              }
            },
            onHasTask: function(delegate, current, target, hasTaskState) {
              delegate.hasTask(target, hasTaskState);
              if (current === target) {
                if (hasTaskState.change == 'microTask') {
                  _this.setHasMicrotask(hasTaskState.microTask);
                } else if (hasTaskState.change == 'macroTask') {
                  _this.setHasMacrotask(hasTaskState.macroTask);
                }
              }
            },
            onHandleError: function(delegate, current, target, error) {
              delegate.handleError(target, error);
              _this.triggerError(error);
              return false;
            }
          });
        };
        NgZone.prototype.onEnter = function() {
          this._nesting++;
          if (this._isStable) {
            this._isStable = false;
            this._onUnstable.emit(null);
          }
        };
        NgZone.prototype.onLeave = function() {
          this._nesting--;
          this.checkStable();
        };
        NgZone.prototype.setHasMicrotask = function(hasMicrotasks) {
          this._hasPendingMicrotasks = hasMicrotasks;
          this.checkStable();
        };
        NgZone.prototype.setHasMacrotask = function(hasMacrotasks) {
          this._hasPendingMacrotasks = hasMacrotasks;
        };
        NgZone.prototype.triggerError = function(error) {
          this._onErrorEvents.emit(error);
        };
        return NgZone;
      }());
      $__export("NgZone", NgZone);
    }
  };
});

$__System.register("199", ["1a2", "188", "1a0", "189", "19f", "19e", "1a3", "19a", "18b", "18c", "18e", "18f", "1a4", "19d", "183"], function($__export) {
  "use strict";
  var __extends,
      ErrorHandler,
      ListWrapper,
      unimplemented,
      stringify,
      isPromise,
      ApplicationInitStatus,
      APP_BOOTSTRAP_LISTENER,
      PLATFORM_INITIALIZER,
      Console,
      Injectable,
      Injector,
      OpaqueToken,
      Optional,
      ReflectiveInjector,
      CompilerFactory,
      ComponentFactory,
      ComponentFactoryResolver,
      wtfCreateScope,
      wtfLeave,
      Testability,
      TestabilityRegistry,
      NgZone,
      _devMode,
      _runModeLocked,
      _platform,
      PlatformRef,
      PlatformRef_,
      ApplicationRef,
      ApplicationRef_;
  function enableProdMode() {
    if (_runModeLocked) {
      throw new Error('Cannot enable prod mode after platform setup.');
    }
    _devMode = false;
  }
  function isDevMode() {
    _runModeLocked = true;
    return _devMode;
  }
  function createPlatform(injector) {
    if (_platform && !_platform.destroyed) {
      throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
    }
    _platform = injector.get(PlatformRef);
    var inits = injector.get(PLATFORM_INITIALIZER, null);
    if (inits)
      inits.forEach(function(init) {
        return init();
      });
    return _platform;
  }
  function createPlatformFactory(parentPlaformFactory, name, providers) {
    if (providers === void 0) {
      providers = [];
    }
    var marker = new OpaqueToken("Platform: " + name);
    return function(extraProviders) {
      if (extraProviders === void 0) {
        extraProviders = [];
      }
      if (!getPlatform()) {
        if (parentPlaformFactory) {
          parentPlaformFactory(providers.concat(extraProviders).concat({
            provide: marker,
            useValue: true
          }));
        } else {
          createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({
            provide: marker,
            useValue: true
          })));
        }
      }
      return assertPlatform(marker);
    };
  }
  function assertPlatform(requiredToken) {
    var platform = getPlatform();
    if (!platform) {
      throw new Error('No platform exists!');
    }
    if (!platform.injector.get(requiredToken, null)) {
      throw new Error('A platform with a different configuration has been created. Please destroy it first.');
    }
    return platform;
  }
  function destroyPlatform() {
    if (_platform && !_platform.destroyed) {
      _platform.destroy();
    }
  }
  function getPlatform() {
    return _platform && !_platform.destroyed ? _platform : null;
  }
  function _callAndReportToErrorHandler(errorHandler, callback) {
    try {
      var result = callback();
      if (isPromise(result)) {
        return result.catch(function(e) {
          errorHandler.handleError(e);
          throw e;
        });
      }
      return result;
    } catch (e) {
      errorHandler.handleError(e);
      throw e;
    }
  }
  $__export("enableProdMode", enableProdMode);
  $__export("isDevMode", isDevMode);
  $__export("createPlatform", createPlatform);
  $__export("createPlatformFactory", createPlatformFactory);
  $__export("assertPlatform", assertPlatform);
  $__export("destroyPlatform", destroyPlatform);
  $__export("getPlatform", getPlatform);
  return {
    setters: [function($__m) {
      ErrorHandler = $__m.ErrorHandler;
    }, function($__m) {
      ListWrapper = $__m.ListWrapper;
    }, function($__m) {
      unimplemented = $__m.unimplemented;
    }, function($__m) {
      stringify = $__m.stringify;
    }, function($__m) {
      isPromise = $__m.isPromise;
    }, function($__m) {
      ApplicationInitStatus = $__m.ApplicationInitStatus;
    }, function($__m) {
      APP_BOOTSTRAP_LISTENER = $__m.APP_BOOTSTRAP_LISTENER;
      PLATFORM_INITIALIZER = $__m.PLATFORM_INITIALIZER;
    }, function($__m) {
      Console = $__m.Console;
    }, function($__m) {
      Injectable = $__m.Injectable;
      Injector = $__m.Injector;
      OpaqueToken = $__m.OpaqueToken;
      Optional = $__m.Optional;
      ReflectiveInjector = $__m.ReflectiveInjector;
    }, function($__m) {
      CompilerFactory = $__m.CompilerFactory;
    }, function($__m) {
      ComponentFactory = $__m.ComponentFactory;
    }, function($__m) {
      ComponentFactoryResolver = $__m.ComponentFactoryResolver;
    }, function($__m) {
      wtfCreateScope = $__m.wtfCreateScope;
      wtfLeave = $__m.wtfLeave;
    }, function($__m) {
      Testability = $__m.Testability;
      TestabilityRegistry = $__m.TestabilityRegistry;
    }, function($__m) {
      NgZone = $__m.NgZone;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      _devMode = true;
      _runModeLocked = false;
      PlatformRef = (function() {
        function PlatformRef() {}
        PlatformRef.prototype.bootstrapModuleFactory = function(moduleFactory) {
          throw unimplemented();
        };
        PlatformRef.prototype.bootstrapModule = function(moduleType, compilerOptions) {
          if (compilerOptions === void 0) {
            compilerOptions = [];
          }
          throw unimplemented();
        };
        Object.defineProperty(PlatformRef.prototype, "injector", {
          get: function() {
            throw unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        ;
        Object.defineProperty(PlatformRef.prototype, "destroyed", {
          get: function() {
            throw unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        return PlatformRef;
      }());
      $__export("PlatformRef", PlatformRef);
      PlatformRef_ = (function(_super) {
        __extends(PlatformRef_, _super);
        function PlatformRef_(_injector) {
          _super.call(this);
          this._injector = _injector;
          this._modules = [];
          this._destroyListeners = [];
          this._destroyed = false;
        }
        PlatformRef_.prototype.onDestroy = function(callback) {
          this._destroyListeners.push(callback);
        };
        Object.defineProperty(PlatformRef_.prototype, "injector", {
          get: function() {
            return this._injector;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(PlatformRef_.prototype, "destroyed", {
          get: function() {
            return this._destroyed;
          },
          enumerable: true,
          configurable: true
        });
        PlatformRef_.prototype.destroy = function() {
          if (this._destroyed) {
            throw new Error('The platform has already been destroyed!');
          }
          this._modules.slice().forEach(function(module) {
            return module.destroy();
          });
          this._destroyListeners.forEach(function(listener) {
            return listener();
          });
          this._destroyed = true;
        };
        PlatformRef_.prototype.bootstrapModuleFactory = function(moduleFactory) {
          return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
        };
        PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function(moduleFactory, ngZone) {
          var _this = this;
          if (!ngZone)
            ngZone = new NgZone({enableLongStackTrace: isDevMode()});
          return ngZone.run(function() {
            var ngZoneInjector = ReflectiveInjector.resolveAndCreate([{
              provide: NgZone,
              useValue: ngZone
            }], _this.injector);
            var moduleRef = moduleFactory.create(ngZoneInjector);
            var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
            if (!exceptionHandler) {
              throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
            }
            moduleRef.onDestroy(function() {
              return ListWrapper.remove(_this._modules, moduleRef);
            });
            ngZone.onError.subscribe({next: function(error) {
                exceptionHandler.handleError(error);
              }});
            return _callAndReportToErrorHandler(exceptionHandler, function() {
              var initStatus = moduleRef.injector.get(ApplicationInitStatus);
              return initStatus.donePromise.then(function() {
                _this._moduleDoBootstrap(moduleRef);
                return moduleRef;
              });
            });
          });
        };
        PlatformRef_.prototype.bootstrapModule = function(moduleType, compilerOptions) {
          if (compilerOptions === void 0) {
            compilerOptions = [];
          }
          return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
        };
        PlatformRef_.prototype._bootstrapModuleWithZone = function(moduleType, compilerOptions, ngZone, componentFactoryCallback) {
          var _this = this;
          if (compilerOptions === void 0) {
            compilerOptions = [];
          }
          var compilerFactory = this.injector.get(CompilerFactory);
          var compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);
          if (componentFactoryCallback) {
            return compiler.compileModuleAndAllComponentsAsync(moduleType).then(function(_a) {
              var ngModuleFactory = _a.ngModuleFactory,
                  componentFactories = _a.componentFactories;
              componentFactoryCallback(componentFactories);
              return _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);
            });
          }
          return compiler.compileModuleAsync(moduleType).then(function(moduleFactory) {
            return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone);
          });
        };
        PlatformRef_.prototype._moduleDoBootstrap = function(moduleRef) {
          var appRef = moduleRef.injector.get(ApplicationRef);
          if (moduleRef.bootstrapFactories.length > 0) {
            moduleRef.bootstrapFactories.forEach(function(compFactory) {
              return appRef.bootstrap(compFactory);
            });
          } else if (moduleRef.instance.ngDoBootstrap) {
            moduleRef.instance.ngDoBootstrap(appRef);
          } else {
            throw new Error(("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ") + "Please define one of these.");
          }
        };
        PlatformRef_.decorators = [{type: Injectable}];
        PlatformRef_.ctorParameters = [{type: Injector}];
        return PlatformRef_;
      }(PlatformRef));
      $__export("PlatformRef_", PlatformRef_);
      ApplicationRef = (function() {
        function ApplicationRef() {}
        Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        ;
        Object.defineProperty(ApplicationRef.prototype, "components", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        ;
        return ApplicationRef;
      }());
      $__export("ApplicationRef", ApplicationRef);
      ApplicationRef_ = (function(_super) {
        __extends(ApplicationRef_, _super);
        function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {
          var _this = this;
          _super.call(this);
          this._zone = _zone;
          this._console = _console;
          this._injector = _injector;
          this._exceptionHandler = _exceptionHandler;
          this._componentFactoryResolver = _componentFactoryResolver;
          this._initStatus = _initStatus;
          this._testabilityRegistry = _testabilityRegistry;
          this._testability = _testability;
          this._bootstrapListeners = [];
          this._rootComponents = [];
          this._rootComponentTypes = [];
          this._changeDetectorRefs = [];
          this._runningTick = false;
          this._enforceNoNewChanges = false;
          this._enforceNoNewChanges = isDevMode();
          this._zone.onMicrotaskEmpty.subscribe({next: function() {
              _this._zone.run(function() {
                _this.tick();
              });
            }});
        }
        ApplicationRef_.prototype.registerChangeDetector = function(changeDetector) {
          this._changeDetectorRefs.push(changeDetector);
        };
        ApplicationRef_.prototype.unregisterChangeDetector = function(changeDetector) {
          ListWrapper.remove(this._changeDetectorRefs, changeDetector);
        };
        ApplicationRef_.prototype.bootstrap = function(componentOrFactory) {
          var _this = this;
          if (!this._initStatus.done) {
            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
          }
          var componentFactory;
          if (componentOrFactory instanceof ComponentFactory) {
            componentFactory = componentOrFactory;
          } else {
            componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
          }
          this._rootComponentTypes.push(componentFactory.componentType);
          var compRef = componentFactory.create(this._injector, [], componentFactory.selector);
          compRef.onDestroy(function() {
            _this._unloadComponent(compRef);
          });
          var testability = compRef.injector.get(Testability, null);
          if (testability) {
            compRef.injector.get(TestabilityRegistry).registerApplication(compRef.location.nativeElement, testability);
          }
          this._loadComponent(compRef);
          if (isDevMode()) {
            this._console.log("Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode.");
          }
          return compRef;
        };
        ApplicationRef_.prototype._loadComponent = function(componentRef) {
          this._changeDetectorRefs.push(componentRef.changeDetectorRef);
          this.tick();
          this._rootComponents.push(componentRef);
          var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
          listeners.forEach(function(listener) {
            return listener(componentRef);
          });
        };
        ApplicationRef_.prototype._unloadComponent = function(componentRef) {
          if (this._rootComponents.indexOf(componentRef) == -1) {
            return;
          }
          this.unregisterChangeDetector(componentRef.changeDetectorRef);
          ListWrapper.remove(this._rootComponents, componentRef);
        };
        ApplicationRef_.prototype.tick = function() {
          if (this._runningTick) {
            throw new Error('ApplicationRef.tick is called recursively');
          }
          var scope = ApplicationRef_._tickScope();
          try {
            this._runningTick = true;
            this._changeDetectorRefs.forEach(function(detector) {
              return detector.detectChanges();
            });
            if (this._enforceNoNewChanges) {
              this._changeDetectorRefs.forEach(function(detector) {
                return detector.checkNoChanges();
              });
            }
          } finally {
            this._runningTick = false;
            wtfLeave(scope);
          }
        };
        ApplicationRef_.prototype.ngOnDestroy = function() {
          this._rootComponents.slice().forEach(function(component) {
            return component.destroy();
          });
        };
        Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
          get: function() {
            return this._rootComponentTypes;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ApplicationRef_.prototype, "components", {
          get: function() {
            return this._rootComponents;
          },
          enumerable: true,
          configurable: true
        });
        ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
        ApplicationRef_.decorators = [{type: Injectable}];
        ApplicationRef_.ctorParameters = [{type: NgZone}, {type: Console}, {type: Injector}, {type: ErrorHandler}, {type: ComponentFactoryResolver}, {type: ApplicationInitStatus}, {
          type: TestabilityRegistry,
          decorators: [{type: Optional}]
        }, {
          type: Testability,
          decorators: [{type: Optional}]
        }];
        return ApplicationRef_;
      }(ApplicationRef));
      $__export("ApplicationRef_", ApplicationRef_);
    }
  };
});

$__System.register("1a5", ["1a6"], function($__export) {
  "use strict";
  var OpaqueToken,
      LOCALE_ID,
      TRANSLATIONS,
      TRANSLATIONS_FORMAT;
  return {
    setters: [function($__m) {
      OpaqueToken = $__m.OpaqueToken;
    }],
    execute: function() {
      LOCALE_ID = new OpaqueToken('LocaleId');
      $__export("LOCALE_ID", LOCALE_ID);
      TRANSLATIONS = new OpaqueToken('Translations');
      $__export("TRANSLATIONS", TRANSLATIONS);
      TRANSLATIONS_FORMAT = new OpaqueToken('TranslationsFormat');
      $__export("TRANSLATIONS_FORMAT", TRANSLATIONS_FORMAT);
    }
  };
});

$__System.register("1a7", ["1a6", "181"], function($__export) {
  "use strict";
  var OpaqueToken,
      makeParamDecorator,
      makePropDecorator,
      ANALYZE_FOR_ENTRY_COMPONENTS,
      Attribute,
      Query,
      ContentChildren,
      ContentChild,
      ViewChildren,
      ViewChild;
  return {
    setters: [function($__m) {
      OpaqueToken = $__m.OpaqueToken;
    }, function($__m) {
      makeParamDecorator = $__m.makeParamDecorator;
      makePropDecorator = $__m.makePropDecorator;
    }],
    execute: function() {
      ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken('AnalyzeForEntryComponents');
      $__export("ANALYZE_FOR_ENTRY_COMPONENTS", ANALYZE_FOR_ENTRY_COMPONENTS);
      Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);
      $__export("Attribute", Attribute);
      Query = (function() {
        function Query() {}
        return Query;
      }());
      $__export("Query", Query);
      ContentChildren = makePropDecorator('ContentChildren', [['selector', undefined], {
        first: false,
        isViewQuery: false,
        descendants: false,
        read: undefined
      }], Query);
      $__export("ContentChildren", ContentChildren);
      ContentChild = makePropDecorator('ContentChild', [['selector', undefined], {
        first: true,
        isViewQuery: false,
        descendants: true,
        read: undefined
      }], Query);
      $__export("ContentChild", ContentChild);
      ViewChildren = makePropDecorator('ViewChildren', [['selector', undefined], {
        first: false,
        isViewQuery: true,
        descendants: true,
        read: undefined
      }], Query);
      $__export("ViewChildren", ViewChildren);
      ViewChild = makePropDecorator('ViewChild', [['selector', undefined], {
        first: true,
        isViewQuery: true,
        descendants: true,
        read: undefined
      }], Query);
      $__export("ViewChild", ViewChild);
    }
  };
});

$__System.register("1a8", ["1a9", "181"], function($__export) {
  "use strict";
  var ChangeDetectionStrategy,
      makeDecorator,
      makePropDecorator,
      Directive,
      Component,
      Pipe,
      Input,
      Output,
      HostBinding,
      HostListener;
  return {
    setters: [function($__m) {
      ChangeDetectionStrategy = $__m.ChangeDetectionStrategy;
    }, function($__m) {
      makeDecorator = $__m.makeDecorator;
      makePropDecorator = $__m.makePropDecorator;
    }],
    execute: function() {
      Directive = makeDecorator('Directive', {
        selector: undefined,
        inputs: undefined,
        outputs: undefined,
        host: undefined,
        providers: undefined,
        exportAs: undefined,
        queries: undefined
      });
      $__export("Directive", Directive);
      Component = makeDecorator('Component', {
        selector: undefined,
        inputs: undefined,
        outputs: undefined,
        host: undefined,
        exportAs: undefined,
        moduleId: undefined,
        providers: undefined,
        viewProviders: undefined,
        changeDetection: ChangeDetectionStrategy.Default,
        queries: undefined,
        templateUrl: undefined,
        template: undefined,
        styleUrls: undefined,
        styles: undefined,
        animations: undefined,
        encapsulation: undefined,
        interpolation: undefined,
        entryComponents: undefined
      }, Directive);
      $__export("Component", Component);
      Pipe = makeDecorator('Pipe', {
        name: undefined,
        pure: true
      });
      $__export("Pipe", Pipe);
      Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);
      $__export("Input", Input);
      Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);
      $__export("Output", Output);
      HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);
      $__export("HostBinding", HostBinding);
      HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);
      $__export("HostListener", HostListener);
    }
  };
});

$__System.register("1aa", ["181"], function($__export) {
  "use strict";
  var makeDecorator,
      CUSTOM_ELEMENTS_SCHEMA,
      NO_ERRORS_SCHEMA,
      NgModule;
  return {
    setters: [function($__m) {
      makeDecorator = $__m.makeDecorator;
    }],
    execute: function() {
      CUSTOM_ELEMENTS_SCHEMA = {name: 'custom-elements'};
      $__export("CUSTOM_ELEMENTS_SCHEMA", CUSTOM_ELEMENTS_SCHEMA);
      NO_ERRORS_SCHEMA = {name: 'no-errors-schema'};
      $__export("NO_ERRORS_SCHEMA", NO_ERRORS_SCHEMA);
      NgModule = makeDecorator('NgModule', {
        providers: undefined,
        declarations: undefined,
        imports: undefined,
        exports: undefined,
        entryComponents: undefined,
        bootstrap: undefined,
        schemas: undefined,
        id: undefined
      });
      $__export("NgModule", NgModule);
    }
  };
});

$__System.register("1ab", ["1a7", "1a8", "1ac", "1aa", "1ad"], function($__export) {
  "use strict";
  return {
    setters: [function($__m) {
      $__export({
        ANALYZE_FOR_ENTRY_COMPONENTS: $__m.ANALYZE_FOR_ENTRY_COMPONENTS,
        Attribute: $__m.Attribute,
        ContentChild: $__m.ContentChild,
        ContentChildren: $__m.ContentChildren,
        Query: $__m.Query,
        ViewChild: $__m.ViewChild,
        ViewChildren: $__m.ViewChildren
      });
    }, function($__m) {
      $__export({
        Component: $__m.Component,
        Directive: $__m.Directive,
        HostBinding: $__m.HostBinding,
        HostListener: $__m.HostListener,
        Input: $__m.Input,
        Output: $__m.Output,
        Pipe: $__m.Pipe
      });
    }, function($__m) {
      $__export({
        AfterContentChecked: $__m.AfterContentChecked,
        AfterContentInit: $__m.AfterContentInit,
        AfterViewChecked: $__m.AfterViewChecked,
        AfterViewInit: $__m.AfterViewInit,
        DoCheck: $__m.DoCheck,
        OnChanges: $__m.OnChanges,
        OnDestroy: $__m.OnDestroy,
        OnInit: $__m.OnInit
      });
    }, function($__m) {
      $__export({
        CUSTOM_ELEMENTS_SCHEMA: $__m.CUSTOM_ELEMENTS_SCHEMA,
        NO_ERRORS_SCHEMA: $__m.NO_ERRORS_SCHEMA,
        NgModule: $__m.NgModule
      });
    }, function($__m) {
      $__export({ViewEncapsulation: $__m.ViewEncapsulation});
    }],
    execute: function() {}
  };
});

$__System.register("1ae", ["19e", "199", "1a3", "197", "1a5", "18c", "1a1", "1ab"], function($__export) {
  "use strict";
  var ApplicationInitStatus,
      ApplicationRef,
      ApplicationRef_,
      APP_ID_RANDOM_PROVIDER,
      IterableDiffers,
      KeyValueDiffers,
      defaultIterableDiffers,
      defaultKeyValueDiffers,
      LOCALE_ID,
      Compiler,
      ViewUtils,
      NgModule,
      ApplicationModule;
  function _iterableDiffersFactory() {
    return defaultIterableDiffers;
  }
  function _keyValueDiffersFactory() {
    return defaultKeyValueDiffers;
  }
  $__export("_iterableDiffersFactory", _iterableDiffersFactory);
  $__export("_keyValueDiffersFactory", _keyValueDiffersFactory);
  return {
    setters: [function($__m) {
      ApplicationInitStatus = $__m.ApplicationInitStatus;
    }, function($__m) {
      ApplicationRef = $__m.ApplicationRef;
      ApplicationRef_ = $__m.ApplicationRef_;
    }, function($__m) {
      APP_ID_RANDOM_PROVIDER = $__m.APP_ID_RANDOM_PROVIDER;
    }, function($__m) {
      IterableDiffers = $__m.IterableDiffers;
      KeyValueDiffers = $__m.KeyValueDiffers;
      defaultIterableDiffers = $__m.defaultIterableDiffers;
      defaultKeyValueDiffers = $__m.defaultKeyValueDiffers;
    }, function($__m) {
      LOCALE_ID = $__m.LOCALE_ID;
    }, function($__m) {
      Compiler = $__m.Compiler;
    }, function($__m) {
      ViewUtils = $__m.ViewUtils;
    }, function($__m) {
      NgModule = $__m.NgModule;
    }],
    execute: function() {
      ApplicationModule = (function() {
        function ApplicationModule() {}
        ApplicationModule.decorators = [{
          type: NgModule,
          args: [{providers: [ApplicationRef_, {
              provide: ApplicationRef,
              useExisting: ApplicationRef_
            }, ApplicationInitStatus, Compiler, APP_ID_RANDOM_PROVIDER, ViewUtils, {
              provide: IterableDiffers,
              useFactory: _iterableDiffersFactory
            }, {
              provide: KeyValueDiffers,
              useFactory: _keyValueDiffersFactory
            }, {
              provide: LOCALE_ID,
              useValue: 'en-US'
            }]}]
        }];
        ApplicationModule.ctorParameters = [];
        return ApplicationModule;
      }());
      $__export("ApplicationModule", ApplicationModule);
    }
  };
});

$__System.registerDynamic('15d', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when an action is invalid because the object has been
     * unsubscribed.
     *
     * @see {@link Subject}
     * @see {@link BehaviorSubject}
     *
     * @class ObjectUnsubscribedError
     */
    var ObjectUnsubscribedError = function (_super) {
        __extends(ObjectUnsubscribedError, _super);
        function ObjectUnsubscribedError() {
            var err = _super.call(this, 'object unsubscribed');
            this.name = err.name = 'ObjectUnsubscribedError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return ObjectUnsubscribedError;
    }(Error);
    exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
    

    return module.exports;
});
$__System.registerDynamic("1af", ["af"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscription_1 = $__require("af");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SubjectSubscription = function (_super) {
        __extends(SubjectSubscription, _super);
        function SubjectSubscription(subject, subscriber) {
            _super.call(this);
            this.subject = subject;
            this.subscriber = subscriber;
            this.closed = false;
        }
        SubjectSubscription.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.closed = true;
            var subject = this.subject;
            var observers = subject.observers;
            this.subject = null;
            if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
                return;
            }
            var subscriberIndex = observers.indexOf(this.subscriber);
            if (subscriberIndex !== -1) {
                observers.splice(subscriberIndex, 1);
            }
        };
        return SubjectSubscription;
    }(Subscription_1.Subscription);
    exports.SubjectSubscription = SubjectSubscription;
    

    return module.exports;
});
$__System.registerDynamic('90', ['91', 'b6', 'af', '15d', '1af', '1b0'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('91');
    var Subscriber_1 = $__require('b6');
    var Subscription_1 = $__require('af');
    var ObjectUnsubscribedError_1 = $__require('15d');
    var SubjectSubscription_1 = $__require('1af');
    var rxSubscriber_1 = $__require('1b0');
    /**
     * @class SubjectSubscriber<T>
     */
    var SubjectSubscriber = function (_super) {
        __extends(SubjectSubscriber, _super);
        function SubjectSubscriber(destination) {
            _super.call(this, destination);
            this.destination = destination;
        }
        return SubjectSubscriber;
    }(Subscriber_1.Subscriber);
    exports.SubjectSubscriber = SubjectSubscriber;
    /**
     * @class Subject<T>
     */
    var Subject = function (_super) {
        __extends(Subject, _super);
        function Subject() {
            _super.call(this);
            this.observers = [];
            this.closed = false;
            this.isStopped = false;
            this.hasError = false;
            this.thrownError = null;
        }
        Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
            return new SubjectSubscriber(this);
        };
        Subject.prototype.lift = function (operator) {
            var subject = new AnonymousSubject(this, this);
            subject.operator = operator;
            return subject;
        };
        Subject.prototype.next = function (value) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            if (!this.isStopped) {
                var observers = this.observers;
                var len = observers.length;
                var copy = observers.slice();
                for (var i = 0; i < len; i++) {
                    copy[i].next(value);
                }
            }
        };
        Subject.prototype.error = function (err) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            this.hasError = true;
            this.thrownError = err;
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].error(err);
            }
            this.observers.length = 0;
        };
        Subject.prototype.complete = function () {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].complete();
            }
            this.observers.length = 0;
        };
        Subject.prototype.unsubscribe = function () {
            this.isStopped = true;
            this.closed = true;
            this.observers = null;
        };
        Subject.prototype._subscribe = function (subscriber) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            } else if (this.hasError) {
                subscriber.error(this.thrownError);
                return Subscription_1.Subscription.EMPTY;
            } else if (this.isStopped) {
                subscriber.complete();
                return Subscription_1.Subscription.EMPTY;
            } else {
                this.observers.push(subscriber);
                return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
            }
        };
        Subject.prototype.asObservable = function () {
            var observable = new Observable_1.Observable();
            observable.source = this;
            return observable;
        };
        Subject.create = function (destination, source) {
            return new AnonymousSubject(destination, source);
        };
        return Subject;
    }(Observable_1.Observable);
    exports.Subject = Subject;
    /**
     * @class AnonymousSubject<T>
     */
    var AnonymousSubject = function (_super) {
        __extends(AnonymousSubject, _super);
        function AnonymousSubject(destination, source) {
            _super.call(this);
            this.destination = destination;
            this.source = source;
        }
        AnonymousSubject.prototype.next = function (value) {
            var destination = this.destination;
            if (destination && destination.next) {
                destination.next(value);
            }
        };
        AnonymousSubject.prototype.error = function (err) {
            var destination = this.destination;
            if (destination && destination.error) {
                this.destination.error(err);
            }
        };
        AnonymousSubject.prototype.complete = function () {
            var destination = this.destination;
            if (destination && destination.complete) {
                this.destination.complete();
            }
        };
        AnonymousSubject.prototype._subscribe = function (subscriber) {
            var source = this.source;
            if (source) {
                return this.source.subscribe(subscriber);
            } else {
                return Subscription_1.Subscription.EMPTY;
            }
        };
        return AnonymousSubject;
    }(Subject);
    exports.AnonymousSubject = AnonymousSubject;
    

    return module.exports;
});
$__System.registerDynamic("147", [], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  exports.isArray = Array.isArray || function (x) {
    return x && typeof x.length === 'number';
  };
  

  return module.exports;
});
$__System.registerDynamic("1b1", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isObject(x) {
        return x != null && typeof x === 'object';
    }
    exports.isObject = isObject;
    

    return module.exports;
});
$__System.registerDynamic("1b2", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isFunction(x) {
        return typeof x === 'function';
    }
    exports.isFunction = isFunction;
    

    return module.exports;
});
$__System.registerDynamic("b9", ["ba"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var errorObject_1 = $__require("ba");
    var tryCatchTarget;
    function tryCatcher() {
        try {
            return tryCatchTarget.apply(this, arguments);
        } catch (e) {
            errorObject_1.errorObject.e = e;
            return errorObject_1.errorObject;
        }
    }
    function tryCatch(fn) {
        tryCatchTarget = fn;
        return tryCatcher;
    }
    exports.tryCatch = tryCatch;
    ;
    

    return module.exports;
});
$__System.registerDynamic("ba", [], true, function ($__require, exports, module) {
  "use strict";
  // typeof any so that it we don't have to cast when comparing a result to the error object

  var define,
      global = this || self,
      GLOBAL = global;
  exports.errorObject = { e: {} };
  

  return module.exports;
});
$__System.registerDynamic("1b3", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when one or more errors have occurred during the
     * `unsubscribe` of a {@link Subscription}.
     */
    var UnsubscriptionError = function (_super) {
        __extends(UnsubscriptionError, _super);
        function UnsubscriptionError(errors) {
            _super.call(this);
            this.errors = errors;
            var err = Error.call(this, errors ? errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) {
                return i + 1 + ") " + err.toString();
            }).join('\n  ') : '');
            this.name = err.name = 'UnsubscriptionError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return UnsubscriptionError;
    }(Error);
    exports.UnsubscriptionError = UnsubscriptionError;
    

    return module.exports;
});
$__System.registerDynamic('af', ['147', '1b1', '1b2', 'b9', 'ba', '1b3'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var isArray_1 = $__require('147');
    var isObject_1 = $__require('1b1');
    var isFunction_1 = $__require('1b2');
    var tryCatch_1 = $__require('b9');
    var errorObject_1 = $__require('ba');
    var UnsubscriptionError_1 = $__require('1b3');
    /**
     * Represents a disposable resource, such as the execution of an Observable. A
     * Subscription has one important method, `unsubscribe`, that takes no argument
     * and just disposes the resource held by the subscription.
     *
     * Additionally, subscriptions may be grouped together through the `add()`
     * method, which will attach a child Subscription to the current Subscription.
     * When a Subscription is unsubscribed, all its children (and its grandchildren)
     * will be unsubscribed as well.
     *
     * @class Subscription
     */
    var Subscription = function () {
        /**
         * @param {function(): void} [unsubscribe] A function describing how to
         * perform the disposal of resources when the `unsubscribe` method is called.
         */
        function Subscription(unsubscribe) {
            /**
             * A flag to indicate whether this Subscription has already been unsubscribed.
             * @type {boolean}
             */
            this.closed = false;
            if (unsubscribe) {
                this._unsubscribe = unsubscribe;
            }
        }
        /**
         * Disposes the resources held by the subscription. May, for instance, cancel
         * an ongoing Observable execution or cancel any other type of work that
         * started when the Subscription was created.
         * @return {void}
         */
        Subscription.prototype.unsubscribe = function () {
            var hasErrors = false;
            var errors;
            if (this.closed) {
                return;
            }
            this.closed = true;
            var _a = this,
                _unsubscribe = _a._unsubscribe,
                _subscriptions = _a._subscriptions;
            this._subscriptions = null;
            if (isFunction_1.isFunction(_unsubscribe)) {
                var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
                if (trial === errorObject_1.errorObject) {
                    hasErrors = true;
                    (errors = errors || []).push(errorObject_1.errorObject.e);
                }
            }
            if (isArray_1.isArray(_subscriptions)) {
                var index = -1;
                var len = _subscriptions.length;
                while (++index < len) {
                    var sub = _subscriptions[index];
                    if (isObject_1.isObject(sub)) {
                        var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                        if (trial === errorObject_1.errorObject) {
                            hasErrors = true;
                            errors = errors || [];
                            var err = errorObject_1.errorObject.e;
                            if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                                errors = errors.concat(err.errors);
                            } else {
                                errors.push(err);
                            }
                        }
                    }
                }
            }
            if (hasErrors) {
                throw new UnsubscriptionError_1.UnsubscriptionError(errors);
            }
        };
        /**
         * Adds a tear down to be called during the unsubscribe() of this
         * Subscription.
         *
         * If the tear down being added is a subscription that is already
         * unsubscribed, is the same reference `add` is being called on, or is
         * `Subscription.EMPTY`, it will not be added.
         *
         * If this subscription is already in an `closed` state, the passed
         * tear down logic will be executed immediately.
         *
         * @param {TeardownLogic} teardown The additional logic to execute on
         * teardown.
         * @return {Subscription} Returns the Subscription used or created to be
         * added to the inner subscriptions list. This Subscription can be used with
         * `remove()` to remove the passed teardown logic from the inner subscriptions
         * list.
         */
        Subscription.prototype.add = function (teardown) {
            if (!teardown || teardown === Subscription.EMPTY) {
                return Subscription.EMPTY;
            }
            if (teardown === this) {
                return this;
            }
            var sub = teardown;
            switch (typeof teardown) {
                case 'function':
                    sub = new Subscription(teardown);
                case 'object':
                    if (sub.closed || typeof sub.unsubscribe !== 'function') {
                        break;
                    } else if (this.closed) {
                        sub.unsubscribe();
                    } else {
                        (this._subscriptions || (this._subscriptions = [])).push(sub);
                    }
                    break;
                default:
                    throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
            }
            return sub;
        };
        /**
         * Removes a Subscription from the internal list of subscriptions that will
         * unsubscribe during the unsubscribe process of this Subscription.
         * @param {Subscription} subscription The subscription to remove.
         * @return {void}
         */
        Subscription.prototype.remove = function (subscription) {
            // HACK: This might be redundant because of the logic in `add()`
            if (subscription == null || subscription === this || subscription === Subscription.EMPTY) {
                return;
            }
            var subscriptions = this._subscriptions;
            if (subscriptions) {
                var subscriptionIndex = subscriptions.indexOf(subscription);
                if (subscriptionIndex !== -1) {
                    subscriptions.splice(subscriptionIndex, 1);
                }
            }
        };
        Subscription.EMPTY = function (empty) {
            empty.closed = true;
            return empty;
        }(new Subscription());
        return Subscription;
    }();
    exports.Subscription = Subscription;
    

    return module.exports;
});
$__System.registerDynamic("1b4", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    exports.empty = {
        closed: true,
        next: function (value) {},
        error: function (err) {
            throw err;
        },
        complete: function () {}
    };
    

    return module.exports;
});
$__System.registerDynamic('b6', ['1b2', 'af', '1b4', '1b0'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var isFunction_1 = $__require('1b2');
    var Subscription_1 = $__require('af');
    var Observer_1 = $__require('1b4');
    var rxSubscriber_1 = $__require('1b0');
    /**
     * Implements the {@link Observer} interface and extends the
     * {@link Subscription} class. While the {@link Observer} is the public API for
     * consuming the values of an {@link Observable}, all Observers get converted to
     * a Subscriber, in order to provide Subscription-like capabilities such as
     * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
     * implementing operators, but it is rarely used as a public API.
     *
     * @class Subscriber<T>
     */
    var Subscriber = function (_super) {
        __extends(Subscriber, _super);
        /**
         * @param {Observer|function(value: T): void} [destinationOrNext] A partially
         * defined Observer or a `next` callback function.
         * @param {function(e: ?any): void} [error] The `error` callback of an
         * Observer.
         * @param {function(): void} [complete] The `complete` callback of an
         * Observer.
         */
        function Subscriber(destinationOrNext, error, complete) {
            _super.call(this);
            this.syncErrorValue = null;
            this.syncErrorThrown = false;
            this.syncErrorThrowable = false;
            this.isStopped = false;
            switch (arguments.length) {
                case 0:
                    this.destination = Observer_1.empty;
                    break;
                case 1:
                    if (!destinationOrNext) {
                        this.destination = Observer_1.empty;
                        break;
                    }
                    if (typeof destinationOrNext === 'object') {
                        if (destinationOrNext instanceof Subscriber) {
                            this.destination = destinationOrNext;
                            this.destination.add(this);
                        } else {
                            this.syncErrorThrowable = true;
                            this.destination = new SafeSubscriber(this, destinationOrNext);
                        }
                        break;
                    }
                default:
                    this.syncErrorThrowable = true;
                    this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                    break;
            }
        }
        Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
            return this;
        };
        /**
         * A static factory for a Subscriber, given a (potentially partial) definition
         * of an Observer.
         * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
         * @param {function(e: ?any): void} [error] The `error` callback of an
         * Observer.
         * @param {function(): void} [complete] The `complete` callback of an
         * Observer.
         * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
         * Observer represented by the given arguments.
         */
        Subscriber.create = function (next, error, complete) {
            var subscriber = new Subscriber(next, error, complete);
            subscriber.syncErrorThrowable = false;
            return subscriber;
        };
        /**
         * The {@link Observer} callback to receive notifications of type `next` from
         * the Observable, with a value. The Observable may call this method 0 or more
         * times.
         * @param {T} [value] The `next` value.
         * @return {void}
         */
        Subscriber.prototype.next = function (value) {
            if (!this.isStopped) {
                this._next(value);
            }
        };
        /**
         * The {@link Observer} callback to receive notifications of type `error` from
         * the Observable, with an attached {@link Error}. Notifies the Observer that
         * the Observable has experienced an error condition.
         * @param {any} [err] The `error` exception.
         * @return {void}
         */
        Subscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                this.isStopped = true;
                this._error(err);
            }
        };
        /**
         * The {@link Observer} callback to receive a valueless notification of type
         * `complete` from the Observable. Notifies the Observer that the Observable
         * has finished sending push-based notifications.
         * @return {void}
         */
        Subscriber.prototype.complete = function () {
            if (!this.isStopped) {
                this.isStopped = true;
                this._complete();
            }
        };
        Subscriber.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
        };
        Subscriber.prototype._next = function (value) {
            this.destination.next(value);
        };
        Subscriber.prototype._error = function (err) {
            this.destination.error(err);
            this.unsubscribe();
        };
        Subscriber.prototype._complete = function () {
            this.destination.complete();
            this.unsubscribe();
        };
        return Subscriber;
    }(Subscription_1.Subscription);
    exports.Subscriber = Subscriber;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SafeSubscriber = function (_super) {
        __extends(SafeSubscriber, _super);
        function SafeSubscriber(_parent, observerOrNext, error, complete) {
            _super.call(this);
            this._parent = _parent;
            var next;
            var context = this;
            if (isFunction_1.isFunction(observerOrNext)) {
                next = observerOrNext;
            } else if (observerOrNext) {
                context = observerOrNext;
                next = observerOrNext.next;
                error = observerOrNext.error;
                complete = observerOrNext.complete;
                if (isFunction_1.isFunction(context.unsubscribe)) {
                    this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = this.unsubscribe.bind(this);
            }
            this._context = context;
            this._next = next;
            this._error = error;
            this._complete = complete;
        }
        SafeSubscriber.prototype.next = function (value) {
            if (!this.isStopped && this._next) {
                var _parent = this._parent;
                if (!_parent.syncErrorThrowable) {
                    this.__tryOrUnsub(this._next, value);
                } else if (this.__tryOrSetError(_parent, this._next, value)) {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var _parent = this._parent;
                if (this._error) {
                    if (!_parent.syncErrorThrowable) {
                        this.__tryOrUnsub(this._error, err);
                        this.unsubscribe();
                    } else {
                        this.__tryOrSetError(_parent, this._error, err);
                        this.unsubscribe();
                    }
                } else if (!_parent.syncErrorThrowable) {
                    this.unsubscribe();
                    throw err;
                } else {
                    _parent.syncErrorValue = err;
                    _parent.syncErrorThrown = true;
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.complete = function () {
            if (!this.isStopped) {
                var _parent = this._parent;
                if (this._complete) {
                    if (!_parent.syncErrorThrowable) {
                        this.__tryOrUnsub(this._complete);
                        this.unsubscribe();
                    } else {
                        this.__tryOrSetError(_parent, this._complete);
                        this.unsubscribe();
                    }
                } else {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
            try {
                fn.call(this._context, value);
            } catch (err) {
                this.unsubscribe();
                throw err;
            }
        };
        SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
            try {
                fn.call(this._context, value);
            } catch (err) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            return false;
        };
        SafeSubscriber.prototype._unsubscribe = function () {
            var _parent = this._parent;
            this._context = null;
            this._parent = null;
            _parent.unsubscribe();
        };
        return SafeSubscriber;
    }(Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('1b0', ['b1'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('b1');
    var Symbol = root_1.root.Symbol;
    exports.$$rxSubscriber = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('rxSubscriber') : '@@rxSubscriber';
    

    return module.exports;
});
$__System.registerDynamic('1b5', ['b6', '1b0'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var Subscriber_1 = $__require('b6');
    var rxSubscriber_1 = $__require('1b0');
    function toSubscriber(nextOrObserver, error, complete) {
        if (nextOrObserver) {
            if (nextOrObserver instanceof Subscriber_1.Subscriber) {
                return nextOrObserver;
            }
            if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {
                return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
            }
        }
        if (!nextOrObserver && !error && !complete) {
            return new Subscriber_1.Subscriber();
        }
        return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
    }
    exports.toSubscriber = toSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('b1', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var objectTypes = {
        'boolean': false,
        'function': true,
        'object': true,
        'number': false,
        'string': false,
        'undefined': false
    };
    exports.root = objectTypes[typeof self] && self || objectTypes[typeof window] && window;
    var freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
        exports.root = freeGlobal;
    }
    

    return module.exports;
});
$__System.registerDynamic('14b', ['b1'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('b1');
    function getSymbolObservable(context) {
        var $$observable;
        var Symbol = context.Symbol;
        if (typeof Symbol === 'function') {
            if (Symbol.observable) {
                $$observable = Symbol.observable;
            } else {
                $$observable = Symbol('observable');
                Symbol.observable = $$observable;
            }
        } else {
            $$observable = '@@observable';
        }
        return $$observable;
    }
    exports.getSymbolObservable = getSymbolObservable;
    exports.$$observable = getSymbolObservable(root_1.root);
    

    return module.exports;
});
$__System.registerDynamic('91', ['b1', '1b5', '14b'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('b1');
    var toSubscriber_1 = $__require('1b5');
    var observable_1 = $__require('14b');
    /**
     * A representation of any set of values over any amount of time. This the most basic building block
     * of RxJS.
     *
     * @class Observable<T>
     */
    var Observable = function () {
        /**
         * @constructor
         * @param {Function} subscribe the function that is  called when the Observable is
         * initially subscribed to. This function is given a Subscriber, to which new values
         * can be `next`ed, or an `error` method can be called to raise an error, or
         * `complete` can be called to notify of a successful completion.
         */
        function Observable(subscribe) {
            this._isScalar = false;
            if (subscribe) {
                this._subscribe = subscribe;
            }
        }
        /**
         * Creates a new Observable, with this Observable as the source, and the passed
         * operator defined as the new observable's operator.
         * @method lift
         * @param {Operator} operator the operator defining the operation to take on the observable
         * @return {Observable} a new observable with the Operator applied
         */
        Observable.prototype.lift = function (operator) {
            var observable = new Observable();
            observable.source = this;
            observable.operator = operator;
            return observable;
        };
        /**
         * Registers handlers for handling emitted values, error and completions from the observable, and
         *  executes the observable's subscriber function, which will take action to set up the underlying data stream
         * @method subscribe
         * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,
         *  or the first of three possible handlers, which is the handler for each value emitted from the observable.
         * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,
         *  the error will be thrown as unhandled
         * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.
         * @return {ISubscription} a subscription reference to the registered handlers
         */
        Observable.prototype.subscribe = function (observerOrNext, error, complete) {
            var operator = this.operator;
            var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
            if (operator) {
                operator.call(sink, this);
            } else {
                sink.add(this._subscribe(sink));
            }
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
            return sink;
        };
        /**
         * @method forEach
         * @param {Function} next a handler for each value emitted by the observable
         * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
         * @return {Promise} a promise that either resolves on observable completion or
         *  rejects with the handled error
         */
        Observable.prototype.forEach = function (next, PromiseCtor) {
            var _this = this;
            if (!PromiseCtor) {
                if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                    PromiseCtor = root_1.root.Rx.config.Promise;
                } else if (root_1.root.Promise) {
                    PromiseCtor = root_1.root.Promise;
                }
            }
            if (!PromiseCtor) {
                throw new Error('no Promise impl found');
            }
            return new PromiseCtor(function (resolve, reject) {
                var subscription = _this.subscribe(function (value) {
                    if (subscription) {
                        // if there is a subscription, then we can surmise
                        // the next handling is asynchronous. Any errors thrown
                        // need to be rejected explicitly and unsubscribe must be
                        // called manually
                        try {
                            next(value);
                        } catch (err) {
                            reject(err);
                            subscription.unsubscribe();
                        }
                    } else {
                        // if there is NO subscription, then we're getting a nexted
                        // value synchronously during subscription. We can just call it.
                        // If it errors, Observable's `subscribe` will ensure the
                        // unsubscription logic is called, then synchronously rethrow the error.
                        // After that, Promise will trap the error and send it
                        // down the rejection path.
                        next(value);
                    }
                }, reject, resolve);
            });
        };
        Observable.prototype._subscribe = function (subscriber) {
            return this.source.subscribe(subscriber);
        };
        /**
         * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
         * @method Symbol.observable
         * @return {Observable} this instance of the observable
         */
        Observable.prototype[observable_1.$$observable] = function () {
            return this;
        };
        // HACK: Since TypeScript inherits static properties too, we have to
        // fight against TypeScript here so Subject can have a different static create signature
        /**
         * Creates a new cold Observable by calling the Observable constructor
         * @static true
         * @owner Observable
         * @method create
         * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
         * @return {Observable} a new cold observable
         */
        Observable.create = function (subscribe) {
            return new Observable(subscribe);
        };
        return Observable;
    }();
    exports.Observable = Observable;
    

    return module.exports;
});
$__System.register("187", ["90", "91"], function($__export) {
  "use strict";
  var __extends,
      Subject,
      EventEmitter;
  return {
    setters: [function($__m) {
      Subject = $__m.Subject;
      $__export({Subject: $__m.Subject});
    }, function($__m) {
      $__export({Observable: $__m.Observable});
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      EventEmitter = (function(_super) {
        __extends(EventEmitter, _super);
        function EventEmitter(isAsync) {
          if (isAsync === void 0) {
            isAsync = false;
          }
          _super.call(this);
          this.__isAsync = isAsync;
        }
        EventEmitter.prototype.emit = function(value) {
          _super.prototype.next.call(this, value);
        };
        EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
          var schedulerFn;
          var errorFn = function(err) {
            return null;
          };
          var completeFn = function() {
            return null;
          };
          if (generatorOrNext && (typeof generatorOrNext === 'undefined' ? 'undefined' : $traceurRuntime.typeof(generatorOrNext)) === 'object') {
            schedulerFn = this.__isAsync ? function(value) {
              setTimeout(function() {
                return generatorOrNext.next(value);
              });
            } : function(value) {
              generatorOrNext.next(value);
            };
            if (generatorOrNext.error) {
              errorFn = this.__isAsync ? function(err) {
                setTimeout(function() {
                  return generatorOrNext.error(err);
                });
              } : function(err) {
                generatorOrNext.error(err);
              };
            }
            if (generatorOrNext.complete) {
              completeFn = this.__isAsync ? function() {
                setTimeout(function() {
                  return generatorOrNext.complete();
                });
              } : function() {
                generatorOrNext.complete();
              };
            }
          } else {
            schedulerFn = this.__isAsync ? function(value) {
              setTimeout(function() {
                return generatorOrNext(value);
              });
            } : function(value) {
              generatorOrNext(value);
            };
            if (error) {
              errorFn = this.__isAsync ? function(err) {
                setTimeout(function() {
                  return error(err);
                });
              } : function(err) {
                error(err);
              };
            }
            if (complete) {
              completeFn = this.__isAsync ? function() {
                setTimeout(function() {
                  return complete();
                });
              } : function() {
                complete();
              };
            }
          }
          return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
        };
        return EventEmitter;
      }(Subject));
      $__export("EventEmitter", EventEmitter);
    }
  };
});

$__System.register("1a2", [], function($__export) {
  "use strict";
  var ErrorHandler;
  return {
    setters: [],
    execute: function() {
      ErrorHandler = (function() {
        function ErrorHandler(rethrowError) {
          if (rethrowError === void 0) {
            rethrowError = true;
          }
          this._console = console;
          this.rethrowError = rethrowError;
        }
        ErrorHandler.prototype.handleError = function(error) {
          var originalError = this._findOriginalError(error);
          var originalStack = this._findOriginalStack(error);
          var context = this._findContext(error);
          this._console.error("EXCEPTION: " + this._extractMessage(error));
          if (originalError) {
            this._console.error("ORIGINAL EXCEPTION: " + this._extractMessage(originalError));
          }
          if (originalStack) {
            this._console.error('ORIGINAL STACKTRACE:');
            this._console.error(originalStack);
          }
          if (context) {
            this._console.error('ERROR CONTEXT:');
            this._console.error(context);
          }
          if (this.rethrowError)
            throw error;
        };
        ErrorHandler.prototype._extractMessage = function(error) {
          return error instanceof Error ? error.message : error.toString();
        };
        ErrorHandler.prototype._findContext = function(error) {
          if (error) {
            return error.context ? error.context : this._findContext(error.originalError);
          }
          return null;
        };
        ErrorHandler.prototype._findOriginalError = function(error) {
          var e = error.originalError;
          while (e && e.originalError) {
            e = e.originalError;
          }
          return e;
        };
        ErrorHandler.prototype._findOriginalStack = function(error) {
          if (!(error instanceof Error))
            return null;
          var e = error;
          var stack = e.stack;
          while (e instanceof Error && e.originalError) {
            e = e.originalError;
            if (e instanceof Error && e.stack) {
              stack = e.stack;
            }
          }
          return stack;
        };
        return ErrorHandler;
      }());
      $__export("ErrorHandler", ErrorHandler);
    }
  };
});

$__System.register("1b6", [], function($__export) {
  "use strict";
  var AnimationKeyframe;
  return {
    setters: [],
    execute: function() {
      AnimationKeyframe = (function() {
        function AnimationKeyframe(offset, styles) {
          this.offset = offset;
          this.styles = styles;
        }
        return AnimationKeyframe;
      }());
      $__export("AnimationKeyframe", AnimationKeyframe);
    }
  };
});

$__System.register("1b7", ["189", "1b8"], function($__export) {
  "use strict";
  var isPresent,
      scheduleMicroTask,
      NoOpAnimationPlayer,
      AnimationSequencePlayer;
  return {
    setters: [function($__m) {
      isPresent = $__m.isPresent;
      scheduleMicroTask = $__m.scheduleMicroTask;
    }, function($__m) {
      NoOpAnimationPlayer = $__m.NoOpAnimationPlayer;
    }],
    execute: function() {
      AnimationSequencePlayer = (function() {
        function AnimationSequencePlayer(_players) {
          var _this = this;
          this._players = _players;
          this._currentIndex = 0;
          this._onDoneFns = [];
          this._onStartFns = [];
          this._finished = false;
          this._started = false;
          this.parentPlayer = null;
          this._players.forEach(function(player) {
            player.parentPlayer = _this;
          });
          this._onNext(false);
        }
        AnimationSequencePlayer.prototype._onNext = function(start) {
          var _this = this;
          if (this._finished)
            return;
          if (this._players.length == 0) {
            this._activePlayer = new NoOpAnimationPlayer();
            scheduleMicroTask(function() {
              return _this._onFinish();
            });
          } else if (this._currentIndex >= this._players.length) {
            this._activePlayer = new NoOpAnimationPlayer();
            this._onFinish();
          } else {
            var player = this._players[this._currentIndex++];
            player.onDone(function() {
              return _this._onNext(true);
            });
            this._activePlayer = player;
            if (start) {
              player.play();
            }
          }
        };
        AnimationSequencePlayer.prototype._onFinish = function() {
          if (!this._finished) {
            this._finished = true;
            if (!isPresent(this.parentPlayer)) {
              this.destroy();
            }
            this._onDoneFns.forEach(function(fn) {
              return fn();
            });
            this._onDoneFns = [];
          }
        };
        AnimationSequencePlayer.prototype.init = function() {
          this._players.forEach(function(player) {
            return player.init();
          });
        };
        AnimationSequencePlayer.prototype.onStart = function(fn) {
          this._onStartFns.push(fn);
        };
        AnimationSequencePlayer.prototype.onDone = function(fn) {
          this._onDoneFns.push(fn);
        };
        AnimationSequencePlayer.prototype.hasStarted = function() {
          return this._started;
        };
        AnimationSequencePlayer.prototype.play = function() {
          if (!isPresent(this.parentPlayer)) {
            this.init();
          }
          if (!this.hasStarted()) {
            this._onStartFns.forEach(function(fn) {
              return fn();
            });
            this._onStartFns = [];
            this._started = true;
          }
          this._activePlayer.play();
        };
        AnimationSequencePlayer.prototype.pause = function() {
          this._activePlayer.pause();
        };
        AnimationSequencePlayer.prototype.restart = function() {
          if (this._players.length > 0) {
            this.reset();
            this._players[0].restart();
          }
        };
        AnimationSequencePlayer.prototype.reset = function() {
          this._players.forEach(function(player) {
            return player.reset();
          });
        };
        AnimationSequencePlayer.prototype.finish = function() {
          this._onFinish();
          this._players.forEach(function(player) {
            return player.finish();
          });
        };
        AnimationSequencePlayer.prototype.destroy = function() {
          this._onFinish();
          this._players.forEach(function(player) {
            return player.destroy();
          });
        };
        AnimationSequencePlayer.prototype.setPosition = function(p) {
          this._players[0].setPosition(p);
        };
        AnimationSequencePlayer.prototype.getPosition = function() {
          return this._players[0].getPosition();
        };
        return AnimationSequencePlayer;
      }());
      $__export("AnimationSequencePlayer", AnimationSequencePlayer);
    }
  };
});

$__System.register("1b9", [], function($__export) {
  "use strict";
  var FILL_STYLE_FLAG,
      ANY_STATE,
      DEFAULT_STATE,
      EMPTY_STATE;
  return {
    setters: [],
    execute: function() {
      FILL_STYLE_FLAG = 'true';
      $__export("FILL_STYLE_FLAG", FILL_STYLE_FLAG);
      ANY_STATE = '*';
      $__export("ANY_STATE", ANY_STATE);
      DEFAULT_STATE = '*';
      $__export("DEFAULT_STATE", DEFAULT_STATE);
      EMPTY_STATE = 'void';
      $__export("EMPTY_STATE", EMPTY_STATE);
    }
  };
});

$__System.register("1ba", ["188", "189", "1b9", "1bb"], function($__export) {
  "use strict";
  var StringMapWrapper,
      isPresent,
      FILL_STYLE_FLAG,
      AUTO_STYLE;
  function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {
    if (nullValue === void 0) {
      nullValue = null;
    }
    var finalStyles = {};
    Object.keys(newStyles).forEach(function(prop) {
      var value = newStyles[prop];
      finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();
    });
    Object.keys(previousStyles).forEach(function(prop) {
      if (!isPresent(finalStyles[prop])) {
        finalStyles[prop] = nullValue;
      }
    });
    return finalStyles;
  }
  function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {
    var limit = keyframes.length - 1;
    var firstKeyframe = keyframes[0];
    var flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);
    var extraFirstKeyframeStyles = {};
    var hasExtraFirstStyles = false;
    Object.keys(collectedStyles).forEach(function(prop) {
      var value = collectedStyles[prop];
      if (!flatenedFirstKeyframeStyles[prop]) {
        flatenedFirstKeyframeStyles[prop] = value;
        extraFirstKeyframeStyles[prop] = value;
        hasExtraFirstStyles = true;
      }
    });
    var keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);
    var finalKeyframe = keyframes[limit];
    finalKeyframe.styles.styles.unshift(finalStateStyles);
    var flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);
    var extraFinalKeyframeStyles = {};
    var hasExtraFinalStyles = false;
    Object.keys(keyframeCollectedStyles).forEach(function(prop) {
      if (!isPresent(flatenedFinalKeyframeStyles[prop])) {
        extraFinalKeyframeStyles[prop] = AUTO_STYLE;
        hasExtraFinalStyles = true;
      }
    });
    if (hasExtraFinalStyles) {
      finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);
    }
    Object.keys(flatenedFinalKeyframeStyles).forEach(function(prop) {
      if (!isPresent(flatenedFirstKeyframeStyles[prop])) {
        extraFirstKeyframeStyles[prop] = AUTO_STYLE;
        hasExtraFirstStyles = true;
      }
    });
    if (hasExtraFirstStyles) {
      firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);
    }
    return keyframes;
  }
  function clearStyles(styles) {
    var finalStyles = {};
    Object.keys(styles).forEach(function(key) {
      finalStyles[key] = null;
    });
    return finalStyles;
  }
  function collectAndResolveStyles(collection, styles) {
    return styles.map(function(entry) {
      var stylesObj = {};
      Object.keys(entry).forEach(function(prop) {
        var value = entry[prop];
        if (value == FILL_STYLE_FLAG) {
          value = collection[prop];
          if (!isPresent(value)) {
            value = AUTO_STYLE;
          }
        }
        collection[prop] = value;
        stylesObj[prop] = value;
      });
      return stylesObj;
    });
  }
  function renderStyles(element, renderer, styles) {
    Object.keys(styles).forEach(function(prop) {
      renderer.setElementStyle(element, prop, styles[prop]);
    });
  }
  function flattenStyles(styles) {
    var finalStyles = {};
    styles.forEach(function(entry) {
      Object.keys(entry).forEach(function(prop) {
        finalStyles[prop] = entry[prop];
      });
    });
    return finalStyles;
  }
  $__export("prepareFinalAnimationStyles", prepareFinalAnimationStyles);
  $__export("balanceAnimationKeyframes", balanceAnimationKeyframes);
  $__export("clearStyles", clearStyles);
  $__export("collectAndResolveStyles", collectAndResolveStyles);
  $__export("renderStyles", renderStyles);
  $__export("flattenStyles", flattenStyles);
  return {
    setters: [function($__m) {
      StringMapWrapper = $__m.StringMapWrapper;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      FILL_STYLE_FLAG = $__m.FILL_STYLE_FLAG;
    }, function($__m) {
      AUTO_STYLE = $__m.AUTO_STYLE;
    }],
    execute: function() {}
  };
});

$__System.register("1bc", [], function($__export) {
  "use strict";
  var AnimationStyles;
  return {
    setters: [],
    execute: function() {
      AnimationStyles = (function() {
        function AnimationStyles(styles) {
          this.styles = styles;
        }
        return AnimationStyles;
      }());
      $__export("AnimationStyles", AnimationStyles);
    }
  };
});

$__System.register("1bd", ["1be"], function($__export) {
  "use strict";
  var AnimationTransitionEvent,
      AnimationTransition;
  return {
    setters: [function($__m) {
      AnimationTransitionEvent = $__m.AnimationTransitionEvent;
    }],
    execute: function() {
      AnimationTransition = (function() {
        function AnimationTransition(_player, _fromState, _toState, _totalTime) {
          this._player = _player;
          this._fromState = _fromState;
          this._toState = _toState;
          this._totalTime = _totalTime;
        }
        AnimationTransition.prototype._createEvent = function(phaseName) {
          return new AnimationTransitionEvent({
            fromState: this._fromState,
            toState: this._toState,
            totalTime: this._totalTime,
            phaseName: phaseName
          });
        };
        AnimationTransition.prototype.onStart = function(callback) {
          var event = this._createEvent('start');
          this._player.onStart(function() {
            return callback(event);
          });
        };
        AnimationTransition.prototype.onDone = function(callback) {
          var event = this._createEvent('done');
          this._player.onDone(function() {
            return callback(event);
          });
        };
        return AnimationTransition;
      }());
      $__export("AnimationTransition", AnimationTransition);
    }
  };
});

$__System.register("19a", ["18b", "189"], function($__export) {
  "use strict";
  var Injectable,
      print,
      warn,
      Console;
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
    }, function($__m) {
      print = $__m.print;
      warn = $__m.warn;
    }],
    execute: function() {
      Console = (function() {
        function Console() {}
        Console.prototype.log = function(message) {
          print(message);
        };
        Console.prototype.warn = function(message) {
          warn(message);
        };
        Console.decorators = [{type: Injectable}];
        Console.ctorParameters = [];
        return Console;
      }());
      $__export("Console", Console);
    }
  };
});

$__System.register("1bf", ["188", "189"], function($__export) {
  "use strict";
  var __extends,
      MapWrapper,
      isPresent,
      EventListener,
      DebugNode,
      DebugElement,
      _nativeNodeToDebugNode;
  function asNativeElements(debugEls) {
    return debugEls.map(function(el) {
      return el.nativeElement;
    });
  }
  function _queryElementChildren(element, predicate, matches) {
    element.childNodes.forEach(function(node) {
      if (node instanceof DebugElement) {
        if (predicate(node)) {
          matches.push(node);
        }
        _queryElementChildren(node, predicate, matches);
      }
    });
  }
  function _queryNodeChildren(parentNode, predicate, matches) {
    if (parentNode instanceof DebugElement) {
      parentNode.childNodes.forEach(function(node) {
        if (predicate(node)) {
          matches.push(node);
        }
        if (node instanceof DebugElement) {
          _queryNodeChildren(node, predicate, matches);
        }
      });
    }
  }
  function getDebugNode(nativeNode) {
    return _nativeNodeToDebugNode.get(nativeNode);
  }
  function getAllDebugNodes() {
    return MapWrapper.values(_nativeNodeToDebugNode);
  }
  function indexDebugNode(node) {
    _nativeNodeToDebugNode.set(node.nativeNode, node);
  }
  function removeDebugNodeFromIndex(node) {
    _nativeNodeToDebugNode.delete(node.nativeNode);
  }
  $__export("asNativeElements", asNativeElements);
  $__export("getDebugNode", getDebugNode);
  $__export("getAllDebugNodes", getAllDebugNodes);
  $__export("indexDebugNode", indexDebugNode);
  $__export("removeDebugNodeFromIndex", removeDebugNodeFromIndex);
  return {
    setters: [function($__m) {
      MapWrapper = $__m.MapWrapper;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      EventListener = (function() {
        function EventListener(name, callback) {
          this.name = name;
          this.callback = callback;
        }
        ;
        return EventListener;
      }());
      $__export("EventListener", EventListener);
      DebugNode = (function() {
        function DebugNode(nativeNode, parent, _debugInfo) {
          this._debugInfo = _debugInfo;
          this.nativeNode = nativeNode;
          if (isPresent(parent) && parent instanceof DebugElement) {
            parent.addChild(this);
          } else {
            this.parent = null;
          }
          this.listeners = [];
        }
        Object.defineProperty(DebugNode.prototype, "injector", {
          get: function() {
            return isPresent(this._debugInfo) ? this._debugInfo.injector : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "componentInstance", {
          get: function() {
            return isPresent(this._debugInfo) ? this._debugInfo.component : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "context", {
          get: function() {
            return isPresent(this._debugInfo) ? this._debugInfo.context : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "references", {
          get: function() {
            return isPresent(this._debugInfo) ? this._debugInfo.references : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "providerTokens", {
          get: function() {
            return isPresent(this._debugInfo) ? this._debugInfo.providerTokens : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "source", {
          get: function() {
            return isPresent(this._debugInfo) ? this._debugInfo.source : null;
          },
          enumerable: true,
          configurable: true
        });
        return DebugNode;
      }());
      $__export("DebugNode", DebugNode);
      DebugElement = (function(_super) {
        __extends(DebugElement, _super);
        function DebugElement(nativeNode, parent, _debugInfo) {
          _super.call(this, nativeNode, parent, _debugInfo);
          this.properties = {};
          this.attributes = {};
          this.classes = {};
          this.styles = {};
          this.childNodes = [];
          this.nativeElement = nativeNode;
        }
        DebugElement.prototype.addChild = function(child) {
          if (isPresent(child)) {
            this.childNodes.push(child);
            child.parent = this;
          }
        };
        DebugElement.prototype.removeChild = function(child) {
          var childIndex = this.childNodes.indexOf(child);
          if (childIndex !== -1) {
            child.parent = null;
            this.childNodes.splice(childIndex, 1);
          }
        };
        DebugElement.prototype.insertChildrenAfter = function(child, newChildren) {
          var siblingIndex = this.childNodes.indexOf(child);
          if (siblingIndex !== -1) {
            var previousChildren = this.childNodes.slice(0, siblingIndex + 1);
            var nextChildren = this.childNodes.slice(siblingIndex + 1);
            this.childNodes = previousChildren.concat(newChildren, nextChildren);
            for (var i = 0; i < newChildren.length; ++i) {
              var newChild = newChildren[i];
              if (isPresent(newChild.parent)) {
                newChild.parent.removeChild(newChild);
              }
              newChild.parent = this;
            }
          }
        };
        DebugElement.prototype.query = function(predicate) {
          var results = this.queryAll(predicate);
          return results.length > 0 ? results[0] : null;
        };
        DebugElement.prototype.queryAll = function(predicate) {
          var matches = [];
          _queryElementChildren(this, predicate, matches);
          return matches;
        };
        DebugElement.prototype.queryAllNodes = function(predicate) {
          var matches = [];
          _queryNodeChildren(this, predicate, matches);
          return matches;
        };
        Object.defineProperty(DebugElement.prototype, "children", {
          get: function() {
            var children = [];
            this.childNodes.forEach(function(node) {
              if (node instanceof DebugElement) {
                children.push(node);
              }
            });
            return children;
          },
          enumerable: true,
          configurable: true
        });
        DebugElement.prototype.triggerEventHandler = function(eventName, eventObj) {
          this.listeners.forEach(function(listener) {
            if (listener.name == eventName) {
              listener.callback(eventObj);
            }
          });
        };
        return DebugElement;
      }(DebugNode));
      $__export("DebugElement", DebugElement);
      _nativeNodeToDebugNode = new Map();
    }
  };
});

$__System.register("1c0", ["189", "1bf"], function($__export) {
  "use strict";
  var isPresent,
      DebugElement,
      DebugNode,
      EventListener,
      getDebugNode,
      indexDebugNode,
      removeDebugNodeFromIndex,
      DebugDomRootRenderer,
      DebugDomRenderer;
  return {
    setters: [function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      DebugElement = $__m.DebugElement;
      DebugNode = $__m.DebugNode;
      EventListener = $__m.EventListener;
      getDebugNode = $__m.getDebugNode;
      indexDebugNode = $__m.indexDebugNode;
      removeDebugNodeFromIndex = $__m.removeDebugNodeFromIndex;
    }],
    execute: function() {
      DebugDomRootRenderer = (function() {
        function DebugDomRootRenderer(_delegate) {
          this._delegate = _delegate;
        }
        DebugDomRootRenderer.prototype.renderComponent = function(componentProto) {
          return new DebugDomRenderer(this._delegate.renderComponent(componentProto));
        };
        return DebugDomRootRenderer;
      }());
      $__export("DebugDomRootRenderer", DebugDomRootRenderer);
      DebugDomRenderer = (function() {
        function DebugDomRenderer(_delegate) {
          this._delegate = _delegate;
        }
        DebugDomRenderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {
          var nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);
          var debugEl = new DebugElement(nativeEl, null, debugInfo);
          indexDebugNode(debugEl);
          return nativeEl;
        };
        DebugDomRenderer.prototype.createElement = function(parentElement, name, debugInfo) {
          var nativeEl = this._delegate.createElement(parentElement, name, debugInfo);
          var debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);
          debugEl.name = name;
          indexDebugNode(debugEl);
          return nativeEl;
        };
        DebugDomRenderer.prototype.createViewRoot = function(hostElement) {
          return this._delegate.createViewRoot(hostElement);
        };
        DebugDomRenderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {
          var comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);
          var debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);
          indexDebugNode(debugEl);
          return comment;
        };
        DebugDomRenderer.prototype.createText = function(parentElement, value, debugInfo) {
          var text = this._delegate.createText(parentElement, value, debugInfo);
          var debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);
          indexDebugNode(debugEl);
          return text;
        };
        DebugDomRenderer.prototype.projectNodes = function(parentElement, nodes) {
          var debugParent = getDebugNode(parentElement);
          if (isPresent(debugParent) && debugParent instanceof DebugElement) {
            var debugElement_1 = debugParent;
            nodes.forEach(function(node) {
              debugElement_1.addChild(getDebugNode(node));
            });
          }
          this._delegate.projectNodes(parentElement, nodes);
        };
        DebugDomRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
          var debugNode = getDebugNode(node);
          if (isPresent(debugNode)) {
            var debugParent = debugNode.parent;
            if (viewRootNodes.length > 0 && isPresent(debugParent)) {
              var debugViewRootNodes = [];
              viewRootNodes.forEach(function(rootNode) {
                return debugViewRootNodes.push(getDebugNode(rootNode));
              });
              debugParent.insertChildrenAfter(debugNode, debugViewRootNodes);
            }
          }
          this._delegate.attachViewAfter(node, viewRootNodes);
        };
        DebugDomRenderer.prototype.detachView = function(viewRootNodes) {
          viewRootNodes.forEach(function(node) {
            var debugNode = getDebugNode(node);
            if (isPresent(debugNode) && isPresent(debugNode.parent)) {
              debugNode.parent.removeChild(debugNode);
            }
          });
          this._delegate.detachView(viewRootNodes);
        };
        DebugDomRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
          viewAllNodes.forEach(function(node) {
            removeDebugNodeFromIndex(getDebugNode(node));
          });
          this._delegate.destroyView(hostElement, viewAllNodes);
        };
        DebugDomRenderer.prototype.listen = function(renderElement, name, callback) {
          var debugEl = getDebugNode(renderElement);
          if (isPresent(debugEl)) {
            debugEl.listeners.push(new EventListener(name, callback));
          }
          return this._delegate.listen(renderElement, name, callback);
        };
        DebugDomRenderer.prototype.listenGlobal = function(target, name, callback) {
          return this._delegate.listenGlobal(target, name, callback);
        };
        DebugDomRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
          var debugEl = getDebugNode(renderElement);
          if (isPresent(debugEl) && debugEl instanceof DebugElement) {
            debugEl.properties[propertyName] = propertyValue;
          }
          this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
        };
        DebugDomRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
          var debugEl = getDebugNode(renderElement);
          if (isPresent(debugEl) && debugEl instanceof DebugElement) {
            debugEl.attributes[attributeName] = attributeValue;
          }
          this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
        };
        DebugDomRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
          this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
        };
        DebugDomRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
          var debugEl = getDebugNode(renderElement);
          if (isPresent(debugEl) && debugEl instanceof DebugElement) {
            debugEl.classes[className] = isAdd;
          }
          this._delegate.setElementClass(renderElement, className, isAdd);
        };
        DebugDomRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
          var debugEl = getDebugNode(renderElement);
          if (isPresent(debugEl) && debugEl instanceof DebugElement) {
            debugEl.styles[styleName] = styleValue;
          }
          this._delegate.setElementStyle(renderElement, styleName, styleValue);
        };
        DebugDomRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
          this._delegate.invokeElementMethod(renderElement, methodName, args);
        };
        DebugDomRenderer.prototype.setText = function(renderNode, text) {
          this._delegate.setText(renderNode, text);
        };
        DebugDomRenderer.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing) {
          return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing);
        };
        return DebugDomRenderer;
      }());
      $__export("DebugDomRenderer", DebugDomRenderer);
    }
  };
});

$__System.register("18c", ["18b", "1a0", "189"], function($__export) {
  "use strict";
  var __extends,
      OpaqueToken,
      BaseError,
      stringify,
      ComponentStillLoadingError,
      ModuleWithComponentFactories,
      Compiler,
      COMPILER_OPTIONS,
      CompilerFactory;
  function _throwError() {
    throw new Error("Runtime compiler is not loaded");
  }
  return {
    setters: [function($__m) {
      OpaqueToken = $__m.OpaqueToken;
    }, function($__m) {
      BaseError = $__m.BaseError;
    }, function($__m) {
      stringify = $__m.stringify;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      ComponentStillLoadingError = (function(_super) {
        __extends(ComponentStillLoadingError, _super);
        function ComponentStillLoadingError(compType) {
          _super.call(this, "Can't compile synchronously as " + stringify(compType) + " is still being loaded!");
          this.compType = compType;
        }
        return ComponentStillLoadingError;
      }(BaseError));
      $__export("ComponentStillLoadingError", ComponentStillLoadingError);
      ModuleWithComponentFactories = (function() {
        function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
          this.ngModuleFactory = ngModuleFactory;
          this.componentFactories = componentFactories;
        }
        return ModuleWithComponentFactories;
      }());
      $__export("ModuleWithComponentFactories", ModuleWithComponentFactories);
      Compiler = (function() {
        function Compiler() {}
        Compiler.prototype.compileModuleSync = function(moduleType) {
          throw _throwError();
        };
        Compiler.prototype.compileModuleAsync = function(moduleType) {
          throw _throwError();
        };
        Compiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
          throw _throwError();
        };
        Compiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
          throw _throwError();
        };
        Compiler.prototype.clearCache = function() {};
        Compiler.prototype.clearCacheFor = function(type) {};
        return Compiler;
      }());
      $__export("Compiler", Compiler);
      COMPILER_OPTIONS = new OpaqueToken('compilerOptions');
      $__export("COMPILER_OPTIONS", COMPILER_OPTIONS);
      CompilerFactory = (function() {
        function CompilerFactory() {}
        return CompilerFactory;
      }());
      $__export("CompilerFactory", CompilerFactory);
    }
  };
});

$__System.register("18f", ["1a0", "189"], function($__export) {
  "use strict";
  var __extends,
      BaseError,
      stringify,
      NoComponentFactoryError,
      _NullComponentFactoryResolver,
      ComponentFactoryResolver,
      CodegenComponentFactoryResolver;
  return {
    setters: [function($__m) {
      BaseError = $__m.BaseError;
    }, function($__m) {
      stringify = $__m.stringify;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      NoComponentFactoryError = (function(_super) {
        __extends(NoComponentFactoryError, _super);
        function NoComponentFactoryError(component) {
          _super.call(this, "No component factory found for " + stringify(component));
          this.component = component;
        }
        return NoComponentFactoryError;
      }(BaseError));
      $__export("NoComponentFactoryError", NoComponentFactoryError);
      _NullComponentFactoryResolver = (function() {
        function _NullComponentFactoryResolver() {}
        _NullComponentFactoryResolver.prototype.resolveComponentFactory = function(component) {
          throw new NoComponentFactoryError(component);
        };
        return _NullComponentFactoryResolver;
      }());
      ComponentFactoryResolver = (function() {
        function ComponentFactoryResolver() {}
        ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
        return ComponentFactoryResolver;
      }());
      $__export("ComponentFactoryResolver", ComponentFactoryResolver);
      CodegenComponentFactoryResolver = (function() {
        function CodegenComponentFactoryResolver(factories, _parent) {
          this._parent = _parent;
          this._factories = new Map();
          for (var i = 0; i < factories.length; i++) {
            var factory = factories[i];
            this._factories.set(factory.componentType, factory);
          }
        }
        CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function(component) {
          var result = this._factories.get(component);
          if (!result) {
            result = this._parent.resolveComponentFactory(component);
          }
          return result;
        };
        return CodegenComponentFactoryResolver;
      }());
      $__export("CodegenComponentFactoryResolver", CodegenComponentFactoryResolver);
    }
  };
});

$__System.register("191", ["1c1", "1a0", "189", "18f"], function($__export) {
  "use strict";
  var __extends,
      Injector,
      THROW_IF_NOT_FOUND,
      unimplemented,
      stringify,
      CodegenComponentFactoryResolver,
      ComponentFactoryResolver,
      NgModuleRef,
      NgModuleFactory,
      _UNDEFINED,
      NgModuleInjector;
  return {
    setters: [function($__m) {
      Injector = $__m.Injector;
      THROW_IF_NOT_FOUND = $__m.THROW_IF_NOT_FOUND;
    }, function($__m) {
      unimplemented = $__m.unimplemented;
    }, function($__m) {
      stringify = $__m.stringify;
    }, function($__m) {
      CodegenComponentFactoryResolver = $__m.CodegenComponentFactoryResolver;
      ComponentFactoryResolver = $__m.ComponentFactoryResolver;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      NgModuleRef = (function() {
        function NgModuleRef() {}
        Object.defineProperty(NgModuleRef.prototype, "injector", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgModuleRef.prototype, "componentFactoryResolver", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgModuleRef.prototype, "instance", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        return NgModuleRef;
      }());
      $__export("NgModuleRef", NgModuleRef);
      NgModuleFactory = (function() {
        function NgModuleFactory(_injectorClass, _moduleType) {
          this._injectorClass = _injectorClass;
          this._moduleType = _moduleType;
        }
        Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
          get: function() {
            return this._moduleType;
          },
          enumerable: true,
          configurable: true
        });
        NgModuleFactory.prototype.create = function(parentInjector) {
          if (!parentInjector) {
            parentInjector = Injector.NULL;
          }
          var instance = new this._injectorClass(parentInjector);
          instance.create();
          return instance;
        };
        return NgModuleFactory;
      }());
      $__export("NgModuleFactory", NgModuleFactory);
      _UNDEFINED = new Object();
      NgModuleInjector = (function(_super) {
        __extends(NgModuleInjector, _super);
        function NgModuleInjector(parent, factories, bootstrapFactories) {
          _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));
          this.parent = parent;
          this.bootstrapFactories = bootstrapFactories;
          this._destroyListeners = [];
          this._destroyed = false;
        }
        NgModuleInjector.prototype.create = function() {
          this.instance = this.createInternal();
        };
        NgModuleInjector.prototype.get = function(token, notFoundValue) {
          if (notFoundValue === void 0) {
            notFoundValue = THROW_IF_NOT_FOUND;
          }
          if (token === Injector || token === ComponentFactoryResolver) {
            return this;
          }
          var result = this.getInternal(token, _UNDEFINED);
          return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
        };
        Object.defineProperty(NgModuleInjector.prototype, "injector", {
          get: function() {
            return this;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
          get: function() {
            return this;
          },
          enumerable: true,
          configurable: true
        });
        NgModuleInjector.prototype.destroy = function() {
          if (this._destroyed) {
            throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
          }
          this._destroyed = true;
          this.destroyInternal();
          this._destroyListeners.forEach(function(listener) {
            return listener();
          });
        };
        NgModuleInjector.prototype.onDestroy = function(callback) {
          this._destroyListeners.push(callback);
        };
        return NgModuleInjector;
      }(CodegenComponentFactoryResolver));
      $__export("NgModuleInjector", NgModuleInjector);
    }
  };
});

$__System.register("192", [], function($__export) {
  "use strict";
  var NgModuleFactoryLoader,
      moduleFactories;
  function registerModuleFactory(id, factory) {
    var existing = moduleFactories.get(id);
    if (existing) {
      throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);
    }
    moduleFactories.set(id, factory);
  }
  function clearModulesForTest() {
    moduleFactories = new Map();
  }
  function getModuleFactory(id) {
    var factory = moduleFactories.get(id);
    if (!factory)
      throw new Error("No module with ID " + id + " loaded");
    return factory;
  }
  $__export("registerModuleFactory", registerModuleFactory);
  $__export("clearModulesForTest", clearModulesForTest);
  $__export("getModuleFactory", getModuleFactory);
  return {
    setters: [],
    execute: function() {
      NgModuleFactoryLoader = (function() {
        function NgModuleFactoryLoader() {}
        return NgModuleFactoryLoader;
      }());
      $__export("NgModuleFactoryLoader", NgModuleFactoryLoader);
      moduleFactories = new Map();
    }
  };
});

$__System.register("193", [], function($__export) {
  "use strict";
  var __extends,
      TemplateRef,
      TemplateRef_;
  return {
    setters: [],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      TemplateRef = (function() {
        function TemplateRef() {}
        Object.defineProperty(TemplateRef.prototype, "elementRef", {
          get: function() {
            return null;
          },
          enumerable: true,
          configurable: true
        });
        return TemplateRef;
      }());
      $__export("TemplateRef", TemplateRef);
      TemplateRef_ = (function(_super) {
        __extends(TemplateRef_, _super);
        function TemplateRef_(_appElement, _viewFactory) {
          _super.call(this);
          this._appElement = _appElement;
          this._viewFactory = _viewFactory;
        }
        TemplateRef_.prototype.createEmbeddedView = function(context) {
          var view = this._viewFactory(this._appElement.parentView.viewUtils, this._appElement.parentInjector, this._appElement);
          view.create(context || {}, null, null);
          return view.ref;
        };
        Object.defineProperty(TemplateRef_.prototype, "elementRef", {
          get: function() {
            return this._appElement.elementRef;
          },
          enumerable: true,
          configurable: true
        });
        return TemplateRef_;
      }(TemplateRef));
      $__export("TemplateRef_", TemplateRef_);
    }
  };
});

$__System.register("1c2", ["189"], function($__export) {
  "use strict";
  var isPresent,
      scheduleMicroTask,
      AnimationGroupPlayer;
  return {
    setters: [function($__m) {
      isPresent = $__m.isPresent;
      scheduleMicroTask = $__m.scheduleMicroTask;
    }],
    execute: function() {
      AnimationGroupPlayer = (function() {
        function AnimationGroupPlayer(_players) {
          var _this = this;
          this._players = _players;
          this._onDoneFns = [];
          this._onStartFns = [];
          this._finished = false;
          this._started = false;
          this.parentPlayer = null;
          var count = 0;
          var total = this._players.length;
          if (total == 0) {
            scheduleMicroTask(function() {
              return _this._onFinish();
            });
          } else {
            this._players.forEach(function(player) {
              player.parentPlayer = _this;
              player.onDone(function() {
                if (++count >= total) {
                  _this._onFinish();
                }
              });
            });
          }
        }
        AnimationGroupPlayer.prototype._onFinish = function() {
          if (!this._finished) {
            this._finished = true;
            if (!isPresent(this.parentPlayer)) {
              this.destroy();
            }
            this._onDoneFns.forEach(function(fn) {
              return fn();
            });
            this._onDoneFns = [];
          }
        };
        AnimationGroupPlayer.prototype.init = function() {
          this._players.forEach(function(player) {
            return player.init();
          });
        };
        AnimationGroupPlayer.prototype.onStart = function(fn) {
          this._onStartFns.push(fn);
        };
        AnimationGroupPlayer.prototype.onDone = function(fn) {
          this._onDoneFns.push(fn);
        };
        AnimationGroupPlayer.prototype.hasStarted = function() {
          return this._started;
        };
        AnimationGroupPlayer.prototype.play = function() {
          if (!isPresent(this.parentPlayer)) {
            this.init();
          }
          if (!this.hasStarted()) {
            this._onStartFns.forEach(function(fn) {
              return fn();
            });
            this._onStartFns = [];
            this._started = true;
          }
          this._players.forEach(function(player) {
            return player.play();
          });
        };
        AnimationGroupPlayer.prototype.pause = function() {
          this._players.forEach(function(player) {
            return player.pause();
          });
        };
        AnimationGroupPlayer.prototype.restart = function() {
          this._players.forEach(function(player) {
            return player.restart();
          });
        };
        AnimationGroupPlayer.prototype.finish = function() {
          this._onFinish();
          this._players.forEach(function(player) {
            return player.finish();
          });
        };
        AnimationGroupPlayer.prototype.destroy = function() {
          this._onFinish();
          this._players.forEach(function(player) {
            return player.destroy();
          });
        };
        AnimationGroupPlayer.prototype.reset = function() {
          this._players.forEach(function(player) {
            return player.reset();
          });
        };
        AnimationGroupPlayer.prototype.setPosition = function(p) {
          this._players.forEach(function(player) {
            player.setPosition(p);
          });
        };
        AnimationGroupPlayer.prototype.getPosition = function() {
          var min = 0;
          this._players.forEach(function(player) {
            var p = player.getPosition();
            min = Math.min(p, min);
          });
          return min;
        };
        return AnimationGroupPlayer;
      }());
      $__export("AnimationGroupPlayer", AnimationGroupPlayer);
    }
  };
});

$__System.register("1c3", ["189"], function($__export) {
  "use strict";
  var isPresent,
      ViewAnimationMap;
  return {
    setters: [function($__m) {
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      ViewAnimationMap = (function() {
        function ViewAnimationMap() {
          this._map = new Map();
          this._allPlayers = [];
        }
        ViewAnimationMap.prototype.find = function(element, animationName) {
          var playersByAnimation = this._map.get(element);
          if (isPresent(playersByAnimation)) {
            return playersByAnimation[animationName];
          }
        };
        ViewAnimationMap.prototype.findAllPlayersByElement = function(element) {
          var el = this._map.get(element);
          return el ? Object.keys(el).map(function(k) {
            return el[k];
          }) : [];
        };
        ViewAnimationMap.prototype.set = function(element, animationName, player) {
          var playersByAnimation = this._map.get(element);
          if (!isPresent(playersByAnimation)) {
            playersByAnimation = {};
          }
          var existingEntry = playersByAnimation[animationName];
          if (isPresent(existingEntry)) {
            this.remove(element, animationName);
          }
          playersByAnimation[animationName] = player;
          this._allPlayers.push(player);
          this._map.set(element, playersByAnimation);
        };
        ViewAnimationMap.prototype.getAllPlayers = function() {
          return this._allPlayers;
        };
        ViewAnimationMap.prototype.remove = function(element, animationName) {
          var playersByAnimation = this._map.get(element);
          if (playersByAnimation) {
            var player = playersByAnimation[animationName];
            delete playersByAnimation[animationName];
            var index = this._allPlayers.indexOf(player);
            this._allPlayers.splice(index, 1);
            if (Object.keys(playersByAnimation).length === 0) {
              this._map.delete(element);
            }
          }
        };
        return ViewAnimationMap;
      }());
      $__export("ViewAnimationMap", ViewAnimationMap);
    }
  };
});

$__System.register("1c4", ["1c2", "1c5", "1c3"], function($__export) {
  "use strict";
  var AnimationGroupPlayer,
      queueAnimationGlobally,
      ViewAnimationMap,
      AnimationViewContext;
  return {
    setters: [function($__m) {
      AnimationGroupPlayer = $__m.AnimationGroupPlayer;
    }, function($__m) {
      queueAnimationGlobally = $__m.queueAnimation;
    }, function($__m) {
      ViewAnimationMap = $__m.ViewAnimationMap;
    }],
    execute: function() {
      AnimationViewContext = (function() {
        function AnimationViewContext() {
          this._players = new ViewAnimationMap();
        }
        AnimationViewContext.prototype.onAllActiveAnimationsDone = function(callback) {
          var activeAnimationPlayers = this._players.getAllPlayers();
          if (activeAnimationPlayers.length) {
            new AnimationGroupPlayer(activeAnimationPlayers).onDone(function() {
              return callback();
            });
          } else {
            callback();
          }
        };
        AnimationViewContext.prototype.queueAnimation = function(element, animationName, player) {
          queueAnimationGlobally(player);
          this._players.set(element, animationName, player);
        };
        AnimationViewContext.prototype.cancelActiveAnimation = function(element, animationName, removeAllAnimations) {
          if (removeAllAnimations === void 0) {
            removeAllAnimations = false;
          }
          if (removeAllAnimations) {
            this._players.findAllPlayersByElement(element).forEach(function(player) {
              return player.destroy();
            });
          } else {
            var player = this._players.find(element, animationName);
            if (player) {
              player.destroy();
            }
          }
        };
        return AnimationViewContext;
      }());
      $__export("AnimationViewContext", AnimationViewContext);
    }
  };
});

$__System.register("1c6", ["189", "1c7"], function($__export) {
  "use strict";
  var isBlank,
      isPresent,
      ViewType,
      StaticNodeDebugInfo,
      DebugContext;
  return {
    setters: [function($__m) {
      isBlank = $__m.isBlank;
      isPresent = $__m.isPresent;
    }, function($__m) {
      ViewType = $__m.ViewType;
    }],
    execute: function() {
      StaticNodeDebugInfo = (function() {
        function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {
          this.providerTokens = providerTokens;
          this.componentToken = componentToken;
          this.refTokens = refTokens;
        }
        return StaticNodeDebugInfo;
      }());
      $__export("StaticNodeDebugInfo", StaticNodeDebugInfo);
      DebugContext = (function() {
        function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {
          this._view = _view;
          this._nodeIndex = _nodeIndex;
          this._tplRow = _tplRow;
          this._tplCol = _tplCol;
        }
        Object.defineProperty(DebugContext.prototype, "_staticNodeInfo", {
          get: function() {
            return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "context", {
          get: function() {
            return this._view.context;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "component", {
          get: function() {
            var staticNodeInfo = this._staticNodeInfo;
            if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {
              return this.injector.get(staticNodeInfo.componentToken);
            }
            return null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "componentRenderElement", {
          get: function() {
            var componentView = this._view;
            while (isPresent(componentView.declarationAppElement) && componentView.type !== ViewType.COMPONENT) {
              componentView = componentView.declarationAppElement.parentView;
            }
            return isPresent(componentView.declarationAppElement) ? componentView.declarationAppElement.nativeElement : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "injector", {
          get: function() {
            return this._view.injector(this._nodeIndex);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "renderNode", {
          get: function() {
            if (isPresent(this._nodeIndex) && this._view.allNodes) {
              return this._view.allNodes[this._nodeIndex];
            } else {
              return null;
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "providerTokens", {
          get: function() {
            var staticNodeInfo = this._staticNodeInfo;
            return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "source", {
          get: function() {
            return this._view.componentType.templateUrl + ":" + this._tplRow + ":" + this._tplCol;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DebugContext.prototype, "references", {
          get: function() {
            var _this = this;
            var varValues = {};
            var staticNodeInfo = this._staticNodeInfo;
            if (isPresent(staticNodeInfo)) {
              var refs = staticNodeInfo.refTokens;
              Object.keys(refs).forEach(function(refName) {
                var refToken = refs[refName];
                var varValue;
                if (isBlank(refToken)) {
                  varValue = _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null;
                } else {
                  varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);
                }
                varValues[refName] = varValue;
              });
            }
            return varValues;
          },
          enumerable: true,
          configurable: true
        });
        return DebugContext;
      }());
      $__export("DebugContext", DebugContext);
    }
  };
});

$__System.register("1c8", ["1c1"], function($__export) {
  "use strict";
  var __extends,
      Injector,
      THROW_IF_NOT_FOUND,
      _UNDEFINED,
      ElementInjector;
  return {
    setters: [function($__m) {
      Injector = $__m.Injector;
      THROW_IF_NOT_FOUND = $__m.THROW_IF_NOT_FOUND;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      _UNDEFINED = new Object();
      ElementInjector = (function(_super) {
        __extends(ElementInjector, _super);
        function ElementInjector(_view, _nodeIndex) {
          _super.call(this);
          this._view = _view;
          this._nodeIndex = _nodeIndex;
        }
        ElementInjector.prototype.get = function(token, notFoundValue) {
          if (notFoundValue === void 0) {
            notFoundValue = THROW_IF_NOT_FOUND;
          }
          var result = _UNDEFINED;
          if (result === _UNDEFINED) {
            result = this._view.injectorGet(token, this._nodeIndex, _UNDEFINED);
          }
          if (result === _UNDEFINED) {
            result = this._view.parentInjector.get(token, notFoundValue);
          }
          return result;
        };
        return ElementInjector;
      }(Injector));
      $__export("ElementInjector", ElementInjector);
    }
  };
});

$__System.register("1c5", [], function($__export) {
  "use strict";
  var _queuedAnimations;
  function queueAnimation(player) {
    _queuedAnimations.push(player);
  }
  function triggerQueuedAnimations() {
    for (var i = 0; i < _queuedAnimations.length; i++) {
      var player = _queuedAnimations[i];
      player.play();
    }
    _queuedAnimations = [];
  }
  $__export("queueAnimation", queueAnimation);
  $__export("triggerQueuedAnimations", triggerQueuedAnimations);
  return {
    setters: [],
    execute: function() {
      _queuedAnimations = [];
    }
  };
});

$__System.register("195", ["1c5", "1a9", "1a0"], function($__export) {
  "use strict";
  var __extends,
      triggerQueuedAnimations,
      ChangeDetectorStatus,
      unimplemented,
      ViewRef,
      EmbeddedViewRef,
      ViewRef_;
  return {
    setters: [function($__m) {
      triggerQueuedAnimations = $__m.triggerQueuedAnimations;
    }, function($__m) {
      ChangeDetectorStatus = $__m.ChangeDetectorStatus;
    }, function($__m) {
      unimplemented = $__m.unimplemented;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      ViewRef = (function() {
        function ViewRef() {}
        Object.defineProperty(ViewRef.prototype, "destroyed", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        return ViewRef;
      }());
      $__export("ViewRef", ViewRef);
      EmbeddedViewRef = (function(_super) {
        __extends(EmbeddedViewRef, _super);
        function EmbeddedViewRef() {
          _super.apply(this, arguments);
        }
        Object.defineProperty(EmbeddedViewRef.prototype, "context", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        ;
        return EmbeddedViewRef;
      }(ViewRef));
      $__export("EmbeddedViewRef", EmbeddedViewRef);
      ViewRef_ = (function() {
        function ViewRef_(_view) {
          this._view = _view;
          this._view = _view;
          this._originalMode = this._view.cdMode;
        }
        Object.defineProperty(ViewRef_.prototype, "internalView", {
          get: function() {
            return this._view;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewRef_.prototype, "rootNodes", {
          get: function() {
            return this._view.flatRootNodes;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewRef_.prototype, "context", {
          get: function() {
            return this._view.context;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewRef_.prototype, "destroyed", {
          get: function() {
            return this._view.destroyed;
          },
          enumerable: true,
          configurable: true
        });
        ViewRef_.prototype.markForCheck = function() {
          this._view.markPathToRootAsCheckOnce();
        };
        ViewRef_.prototype.detach = function() {
          this._view.cdMode = ChangeDetectorStatus.Detached;
        };
        ViewRef_.prototype.detectChanges = function() {
          this._view.detectChanges(false);
          triggerQueuedAnimations();
        };
        ViewRef_.prototype.checkNoChanges = function() {
          this._view.detectChanges(true);
        };
        ViewRef_.prototype.reattach = function() {
          this._view.cdMode = this._originalMode;
          this.markForCheck();
        };
        ViewRef_.prototype.onDestroy = function(callback) {
          this._view.disposables.push(callback);
        };
        ViewRef_.prototype.destroy = function() {
          this._view.destroy();
        };
        return ViewRef_;
      }());
      $__export("ViewRef_", ViewRef_);
    }
  };
});

$__System.register("1c9", ["197", "188", "189", "1a4", "1c4", "1c6", "1ca", "1c8", "1cb", "195", "1c7", "1a1"], function($__export) {
  "use strict";
  var __extends,
      ChangeDetectorStatus,
      ListWrapper,
      isPresent,
      wtfCreateScope,
      wtfLeave,
      AnimationViewContext,
      DebugContext,
      AppElement,
      ElementInjector,
      ExpressionChangedAfterItHasBeenCheckedError,
      ViewDestroyedError,
      ViewWrappedError,
      ViewRef_,
      ViewType,
      ensureSlotCount,
      flattenNestedViewRenderNodes,
      _scope_check,
      AppView,
      DebugAppView;
  function _findLastRenderNode(node) {
    var lastNode;
    if (node instanceof AppElement) {
      var appEl = node;
      lastNode = appEl.nativeElement;
      if (isPresent(appEl.nestedViews)) {
        for (var i = appEl.nestedViews.length - 1; i >= 0; i--) {
          var nestedView = appEl.nestedViews[i];
          if (nestedView.rootNodesOrAppElements.length > 0) {
            lastNode = _findLastRenderNode(nestedView.rootNodesOrAppElements[nestedView.rootNodesOrAppElements.length - 1]);
          }
        }
      }
    } else {
      lastNode = node;
    }
    return lastNode;
  }
  return {
    setters: [function($__m) {
      ChangeDetectorStatus = $__m.ChangeDetectorStatus;
    }, function($__m) {
      ListWrapper = $__m.ListWrapper;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      wtfCreateScope = $__m.wtfCreateScope;
      wtfLeave = $__m.wtfLeave;
    }, function($__m) {
      AnimationViewContext = $__m.AnimationViewContext;
    }, function($__m) {
      DebugContext = $__m.DebugContext;
    }, function($__m) {
      AppElement = $__m.AppElement;
    }, function($__m) {
      ElementInjector = $__m.ElementInjector;
    }, function($__m) {
      ExpressionChangedAfterItHasBeenCheckedError = $__m.ExpressionChangedAfterItHasBeenCheckedError;
      ViewDestroyedError = $__m.ViewDestroyedError;
      ViewWrappedError = $__m.ViewWrappedError;
    }, function($__m) {
      ViewRef_ = $__m.ViewRef_;
    }, function($__m) {
      ViewType = $__m.ViewType;
    }, function($__m) {
      ensureSlotCount = $__m.ensureSlotCount;
      flattenNestedViewRenderNodes = $__m.flattenNestedViewRenderNodes;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      _scope_check = wtfCreateScope("AppView#check(ascii id)");
      AppView = (function() {
        function AppView(clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode) {
          this.clazz = clazz;
          this.componentType = componentType;
          this.type = type;
          this.viewUtils = viewUtils;
          this.parentInjector = parentInjector;
          this.declarationAppElement = declarationAppElement;
          this.cdMode = cdMode;
          this.contentChildren = [];
          this.viewChildren = [];
          this.viewContainerElement = null;
          this.numberOfChecks = 0;
          this.ref = new ViewRef_(this);
          if (type === ViewType.COMPONENT || type === ViewType.HOST) {
            this.renderer = viewUtils.renderComponent(componentType);
          } else {
            this.renderer = declarationAppElement.parentView.renderer;
          }
        }
        Object.defineProperty(AppView.prototype, "animationContext", {
          get: function() {
            if (!this._animationContext) {
              this._animationContext = new AnimationViewContext();
            }
            return this._animationContext;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AppView.prototype, "destroyed", {
          get: function() {
            return this.cdMode === ChangeDetectorStatus.Destroyed;
          },
          enumerable: true,
          configurable: true
        });
        AppView.prototype.create = function(context, givenProjectableNodes, rootSelectorOrNode) {
          this.context = context;
          var projectableNodes;
          switch (this.type) {
            case ViewType.COMPONENT:
              projectableNodes = ensureSlotCount(givenProjectableNodes, this.componentType.slotCount);
              break;
            case ViewType.EMBEDDED:
              projectableNodes = this.declarationAppElement.parentView.projectableNodes;
              break;
            case ViewType.HOST:
              projectableNodes = givenProjectableNodes;
              break;
          }
          this._hasExternalHostElement = isPresent(rootSelectorOrNode);
          this.projectableNodes = projectableNodes;
          return this.createInternal(rootSelectorOrNode);
        };
        AppView.prototype.createInternal = function(rootSelectorOrNode) {
          return null;
        };
        AppView.prototype.init = function(rootNodesOrAppElements, allNodes, disposables, subscriptions) {
          this.rootNodesOrAppElements = rootNodesOrAppElements;
          this.allNodes = allNodes;
          this.disposables = disposables;
          this.subscriptions = subscriptions;
          if (this.type === ViewType.COMPONENT) {
            this.declarationAppElement.parentView.viewChildren.push(this);
            this.dirtyParentQueriesInternal();
          }
        };
        AppView.prototype.injectorGet = function(token, nodeIndex, notFoundResult) {
          return this.injectorGetInternal(token, nodeIndex, notFoundResult);
        };
        AppView.prototype.injectorGetInternal = function(token, nodeIndex, notFoundResult) {
          return notFoundResult;
        };
        AppView.prototype.injector = function(nodeIndex) {
          if (isPresent(nodeIndex)) {
            return new ElementInjector(this, nodeIndex);
          } else {
            return this.parentInjector;
          }
        };
        AppView.prototype.destroy = function() {
          if (this._hasExternalHostElement) {
            this.renderer.detachView(this.flatRootNodes);
          } else if (isPresent(this.viewContainerElement)) {
            this.viewContainerElement.detachView(this.viewContainerElement.nestedViews.indexOf(this));
          }
          this._destroyRecurse();
        };
        AppView.prototype._destroyRecurse = function() {
          if (this.cdMode === ChangeDetectorStatus.Destroyed) {
            return;
          }
          var children = this.contentChildren;
          for (var i = 0; i < children.length; i++) {
            children[i]._destroyRecurse();
          }
          children = this.viewChildren;
          for (var i = 0; i < children.length; i++) {
            children[i]._destroyRecurse();
          }
          this.destroyLocal();
          this.cdMode = ChangeDetectorStatus.Destroyed;
        };
        AppView.prototype.destroyLocal = function() {
          var _this = this;
          var hostElement = this.type === ViewType.COMPONENT ? this.declarationAppElement.nativeElement : null;
          for (var i = 0; i < this.disposables.length; i++) {
            this.disposables[i]();
          }
          for (var i = 0; i < this.subscriptions.length; i++) {
            this.subscriptions[i].unsubscribe();
          }
          this.destroyInternal();
          this.dirtyParentQueriesInternal();
          if (this._animationContext) {
            this._animationContext.onAllActiveAnimationsDone(function() {
              return _this.renderer.destroyView(hostElement, _this.allNodes);
            });
          } else {
            this.renderer.destroyView(hostElement, this.allNodes);
          }
        };
        AppView.prototype.destroyInternal = function() {};
        AppView.prototype.detachInternal = function() {};
        AppView.prototype.detach = function() {
          var _this = this;
          this.detachInternal();
          if (this._animationContext) {
            this._animationContext.onAllActiveAnimationsDone(function() {
              return _this.renderer.detachView(_this.flatRootNodes);
            });
          } else {
            this.renderer.detachView(this.flatRootNodes);
          }
        };
        Object.defineProperty(AppView.prototype, "changeDetectorRef", {
          get: function() {
            return this.ref;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AppView.prototype, "parent", {
          get: function() {
            return isPresent(this.declarationAppElement) ? this.declarationAppElement.parentView : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AppView.prototype, "flatRootNodes", {
          get: function() {
            return flattenNestedViewRenderNodes(this.rootNodesOrAppElements);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AppView.prototype, "lastRootNode", {
          get: function() {
            var lastNode = this.rootNodesOrAppElements.length > 0 ? this.rootNodesOrAppElements[this.rootNodesOrAppElements.length - 1] : null;
            return _findLastRenderNode(lastNode);
          },
          enumerable: true,
          configurable: true
        });
        AppView.prototype.dirtyParentQueriesInternal = function() {};
        AppView.prototype.detectChanges = function(throwOnChange) {
          var s = _scope_check(this.clazz);
          if (this.cdMode === ChangeDetectorStatus.Checked || this.cdMode === ChangeDetectorStatus.Errored)
            return;
          if (this.cdMode === ChangeDetectorStatus.Destroyed) {
            this.throwDestroyedError('detectChanges');
          }
          this.detectChangesInternal(throwOnChange);
          if (this.cdMode === ChangeDetectorStatus.CheckOnce)
            this.cdMode = ChangeDetectorStatus.Checked;
          this.numberOfChecks++;
          wtfLeave(s);
        };
        AppView.prototype.detectChangesInternal = function(throwOnChange) {
          this.detectContentChildrenChanges(throwOnChange);
          this.detectViewChildrenChanges(throwOnChange);
        };
        AppView.prototype.detectContentChildrenChanges = function(throwOnChange) {
          for (var i = 0; i < this.contentChildren.length; ++i) {
            var child = this.contentChildren[i];
            if (child.cdMode === ChangeDetectorStatus.Detached)
              continue;
            child.detectChanges(throwOnChange);
          }
        };
        AppView.prototype.detectViewChildrenChanges = function(throwOnChange) {
          for (var i = 0; i < this.viewChildren.length; ++i) {
            var child = this.viewChildren[i];
            if (child.cdMode === ChangeDetectorStatus.Detached)
              continue;
            child.detectChanges(throwOnChange);
          }
        };
        AppView.prototype.markContentChildAsMoved = function(renderAppElement) {
          this.dirtyParentQueriesInternal();
        };
        AppView.prototype.addToContentChildren = function(renderAppElement) {
          renderAppElement.parentView.contentChildren.push(this);
          this.viewContainerElement = renderAppElement;
          this.dirtyParentQueriesInternal();
        };
        AppView.prototype.removeFromContentChildren = function(renderAppElement) {
          ListWrapper.remove(renderAppElement.parentView.contentChildren, this);
          this.dirtyParentQueriesInternal();
          this.viewContainerElement = null;
        };
        AppView.prototype.markAsCheckOnce = function() {
          this.cdMode = ChangeDetectorStatus.CheckOnce;
        };
        AppView.prototype.markPathToRootAsCheckOnce = function() {
          var c = this;
          while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {
            if (c.cdMode === ChangeDetectorStatus.Checked) {
              c.cdMode = ChangeDetectorStatus.CheckOnce;
            }
            var parentEl = c.type === ViewType.COMPONENT ? c.declarationAppElement : c.viewContainerElement;
            c = isPresent(parentEl) ? parentEl.parentView : null;
          }
        };
        AppView.prototype.eventHandler = function(cb) {
          return cb;
        };
        AppView.prototype.throwDestroyedError = function(details) {
          throw new ViewDestroyedError(details);
        };
        return AppView;
      }());
      $__export("AppView", AppView);
      DebugAppView = (function(_super) {
        __extends(DebugAppView, _super);
        function DebugAppView(clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode, staticNodeDebugInfos) {
          _super.call(this, clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode);
          this.staticNodeDebugInfos = staticNodeDebugInfos;
          this._currentDebugContext = null;
        }
        DebugAppView.prototype.create = function(context, givenProjectableNodes, rootSelectorOrNode) {
          this._resetDebug();
          try {
            return _super.prototype.create.call(this, context, givenProjectableNodes, rootSelectorOrNode);
          } catch (e) {
            this._rethrowWithContext(e);
            throw e;
          }
        };
        DebugAppView.prototype.injectorGet = function(token, nodeIndex, notFoundResult) {
          this._resetDebug();
          try {
            return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
          } catch (e) {
            this._rethrowWithContext(e);
            throw e;
          }
        };
        DebugAppView.prototype.detach = function() {
          this._resetDebug();
          try {
            _super.prototype.detach.call(this);
          } catch (e) {
            this._rethrowWithContext(e);
            throw e;
          }
        };
        DebugAppView.prototype.destroyLocal = function() {
          this._resetDebug();
          try {
            _super.prototype.destroyLocal.call(this);
          } catch (e) {
            this._rethrowWithContext(e);
            throw e;
          }
        };
        DebugAppView.prototype.detectChanges = function(throwOnChange) {
          this._resetDebug();
          try {
            _super.prototype.detectChanges.call(this, throwOnChange);
          } catch (e) {
            this._rethrowWithContext(e);
            throw e;
          }
        };
        DebugAppView.prototype._resetDebug = function() {
          this._currentDebugContext = null;
        };
        DebugAppView.prototype.debug = function(nodeIndex, rowNum, colNum) {
          return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);
        };
        DebugAppView.prototype._rethrowWithContext = function(e) {
          if (!(e instanceof ViewWrappedError)) {
            if (!(e instanceof ExpressionChangedAfterItHasBeenCheckedError)) {
              this.cdMode = ChangeDetectorStatus.Errored;
            }
            if (isPresent(this._currentDebugContext)) {
              throw new ViewWrappedError(e, this._currentDebugContext);
            }
          }
        };
        DebugAppView.prototype.eventHandler = function(cb) {
          var _this = this;
          var superHandler = _super.prototype.eventHandler.call(this, cb);
          return function(event) {
            _this._resetDebug();
            try {
              return superHandler(event);
            } catch (e) {
              _this._rethrowWithContext(e);
              throw e;
            }
          };
        };
        return DebugAppView;
      }(AppView));
      $__export("DebugAppView", DebugAppView);
    }
  };
});

$__System.register("1a3", ["18b"], function($__export) {
  "use strict";
  var OpaqueToken,
      APP_ID,
      APP_ID_RANDOM_PROVIDER,
      PLATFORM_INITIALIZER,
      APP_BOOTSTRAP_LISTENER,
      PACKAGE_ROOT_URL;
  function _appIdRandomProviderFactory() {
    return "" + _randomChar() + _randomChar() + _randomChar();
  }
  function _randomChar() {
    return String.fromCharCode(97 + Math.floor(Math.random() * 25));
  }
  $__export("_appIdRandomProviderFactory", _appIdRandomProviderFactory);
  return {
    setters: [function($__m) {
      OpaqueToken = $__m.OpaqueToken;
    }],
    execute: function() {
      APP_ID = new OpaqueToken('AppId');
      $__export("APP_ID", APP_ID);
      APP_ID_RANDOM_PROVIDER = {
        provide: APP_ID,
        useFactory: _appIdRandomProviderFactory,
        deps: []
      };
      $__export("APP_ID_RANDOM_PROVIDER", APP_ID_RANDOM_PROVIDER);
      PLATFORM_INITIALIZER = new OpaqueToken('Platform Initializer');
      $__export("PLATFORM_INITIALIZER", PLATFORM_INITIALIZER);
      APP_BOOTSTRAP_LISTENER = new OpaqueToken('appBootstrapListener');
      $__export("APP_BOOTSTRAP_LISTENER", APP_BOOTSTRAP_LISTENER);
      PACKAGE_ROOT_URL = new OpaqueToken('Application Packages Root URL');
      $__export("PACKAGE_ROOT_URL", PACKAGE_ROOT_URL);
    }
  };
});

$__System.register("1cc", ["188", "189"], function($__export) {
  "use strict";
  var isListLikeIterable,
      iterateListLike,
      isBlank,
      looseIdentical,
      stringify,
      DefaultIterableDifferFactory,
      trackByIdentity,
      DefaultIterableDiffer,
      CollectionChangeRecord,
      _DuplicateItemRecordList,
      _DuplicateMap;
  function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
    var previousIndex = item.previousIndex;
    if (previousIndex === null)
      return previousIndex;
    var moveOffset = 0;
    if (moveOffsets && previousIndex < moveOffsets.length) {
      moveOffset = moveOffsets[previousIndex];
    }
    return previousIndex + addRemoveOffset + moveOffset;
  }
  return {
    setters: [function($__m) {
      isListLikeIterable = $__m.isListLikeIterable;
      iterateListLike = $__m.iterateListLike;
    }, function($__m) {
      isBlank = $__m.isBlank;
      looseIdentical = $__m.looseIdentical;
      stringify = $__m.stringify;
    }],
    execute: function() {
      DefaultIterableDifferFactory = (function() {
        function DefaultIterableDifferFactory() {}
        DefaultIterableDifferFactory.prototype.supports = function(obj) {
          return isListLikeIterable(obj);
        };
        DefaultIterableDifferFactory.prototype.create = function(cdRef, trackByFn) {
          return new DefaultIterableDiffer(trackByFn);
        };
        return DefaultIterableDifferFactory;
      }());
      $__export("DefaultIterableDifferFactory", DefaultIterableDifferFactory);
      trackByIdentity = function(index, item) {
        return item;
      };
      DefaultIterableDiffer = (function() {
        function DefaultIterableDiffer(_trackByFn) {
          this._trackByFn = _trackByFn;
          this._length = null;
          this._collection = null;
          this._linkedRecords = null;
          this._unlinkedRecords = null;
          this._previousItHead = null;
          this._itHead = null;
          this._itTail = null;
          this._additionsHead = null;
          this._additionsTail = null;
          this._movesHead = null;
          this._movesTail = null;
          this._removalsHead = null;
          this._removalsTail = null;
          this._identityChangesHead = null;
          this._identityChangesTail = null;
          this._trackByFn = this._trackByFn || trackByIdentity;
        }
        Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
          get: function() {
            return this._collection;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
          get: function() {
            return this._length;
          },
          enumerable: true,
          configurable: true
        });
        DefaultIterableDiffer.prototype.forEachItem = function(fn) {
          var record;
          for (record = this._itHead; record !== null; record = record._next) {
            fn(record);
          }
        };
        DefaultIterableDiffer.prototype.forEachOperation = function(fn) {
          var nextIt = this._itHead;
          var nextRemove = this._removalsHead;
          var addRemoveOffset = 0;
          var moveOffsets = null;
          while (nextIt || nextRemove) {
            var record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;
            var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
            var currentIndex = record.currentIndex;
            if (record === nextRemove) {
              addRemoveOffset--;
              nextRemove = nextRemove._nextRemoved;
            } else {
              nextIt = nextIt._next;
              if (record.previousIndex == null) {
                addRemoveOffset++;
              } else {
                if (!moveOffsets)
                  moveOffsets = [];
                var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
                var localCurrentIndex = currentIndex - addRemoveOffset;
                if (localMovePreviousIndex != localCurrentIndex) {
                  for (var i = 0; i < localMovePreviousIndex; i++) {
                    var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
                    var index = offset + i;
                    if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                      moveOffsets[i] = offset + 1;
                    }
                  }
                  var previousIndex = record.previousIndex;
                  moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
                }
              }
            }
            if (adjPreviousIndex !== currentIndex) {
              fn(record, adjPreviousIndex, currentIndex);
            }
          }
        };
        DefaultIterableDiffer.prototype.forEachPreviousItem = function(fn) {
          var record;
          for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
            fn(record);
          }
        };
        DefaultIterableDiffer.prototype.forEachAddedItem = function(fn) {
          var record;
          for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
          }
        };
        DefaultIterableDiffer.prototype.forEachMovedItem = function(fn) {
          var record;
          for (record = this._movesHead; record !== null; record = record._nextMoved) {
            fn(record);
          }
        };
        DefaultIterableDiffer.prototype.forEachRemovedItem = function(fn) {
          var record;
          for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
          }
        };
        DefaultIterableDiffer.prototype.forEachIdentityChange = function(fn) {
          var record;
          for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
            fn(record);
          }
        };
        DefaultIterableDiffer.prototype.diff = function(collection) {
          if (isBlank(collection))
            collection = [];
          if (!isListLikeIterable(collection)) {
            throw new Error("Error trying to diff '" + collection + "'");
          }
          if (this.check(collection)) {
            return this;
          } else {
            return null;
          }
        };
        DefaultIterableDiffer.prototype.onDestroy = function() {};
        DefaultIterableDiffer.prototype.check = function(collection) {
          var _this = this;
          this._reset();
          var record = this._itHead;
          var mayBeDirty = false;
          var index;
          var item;
          var itemTrackBy;
          if (Array.isArray(collection)) {
            var list = collection;
            this._length = collection.length;
            for (var index_1 = 0; index_1 < this._length; index_1++) {
              item = list[index_1];
              itemTrackBy = this._trackByFn(index_1, item);
              if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                record = this._mismatch(record, item, itemTrackBy, index_1);
                mayBeDirty = true;
              } else {
                if (mayBeDirty) {
                  record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
                }
                if (!looseIdentical(record.item, item))
                  this._addIdentityChange(record, item);
              }
              record = record._next;
            }
          } else {
            index = 0;
            iterateListLike(collection, function(item) {
              itemTrackBy = _this._trackByFn(index, item);
              if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                record = _this._mismatch(record, item, itemTrackBy, index);
                mayBeDirty = true;
              } else {
                if (mayBeDirty) {
                  record = _this._verifyReinsertion(record, item, itemTrackBy, index);
                }
                if (!looseIdentical(record.item, item))
                  _this._addIdentityChange(record, item);
              }
              record = record._next;
              index++;
            });
            this._length = index;
          }
          this._truncate(record);
          this._collection = collection;
          return this.isDirty;
        };
        Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
          get: function() {
            return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
          },
          enumerable: true,
          configurable: true
        });
        DefaultIterableDiffer.prototype._reset = function() {
          if (this.isDirty) {
            var record;
            var nextRecord;
            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
              record._nextPrevious = record._next;
            }
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
              record.previousIndex = record.currentIndex;
            }
            this._additionsHead = this._additionsTail = null;
            for (record = this._movesHead; record !== null; record = nextRecord) {
              record.previousIndex = record.currentIndex;
              nextRecord = record._nextMoved;
            }
            this._movesHead = this._movesTail = null;
            this._removalsHead = this._removalsTail = null;
            this._identityChangesHead = this._identityChangesTail = null;
          }
        };
        DefaultIterableDiffer.prototype._mismatch = function(record, item, itemTrackBy, index) {
          var previousRecord;
          if (record === null) {
            previousRecord = this._itTail;
          } else {
            previousRecord = record._prev;
            this._remove(record);
          }
          record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
          if (record !== null) {
            if (!looseIdentical(record.item, item))
              this._addIdentityChange(record, item);
            this._moveAfter(record, previousRecord, index);
          } else {
            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
            if (record !== null) {
              if (!looseIdentical(record.item, item))
                this._addIdentityChange(record, item);
              this._reinsertAfter(record, previousRecord, index);
            } else {
              record = this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);
            }
          }
          return record;
        };
        DefaultIterableDiffer.prototype._verifyReinsertion = function(record, item, itemTrackBy, index) {
          var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
          if (reinsertRecord !== null) {
            record = this._reinsertAfter(reinsertRecord, record._prev, index);
          } else if (record.currentIndex != index) {
            record.currentIndex = index;
            this._addToMoves(record, index);
          }
          return record;
        };
        DefaultIterableDiffer.prototype._truncate = function(record) {
          while (record !== null) {
            var nextRecord = record._next;
            this._addToRemovals(this._unlink(record));
            record = nextRecord;
          }
          if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.clear();
          }
          if (this._additionsTail !== null) {
            this._additionsTail._nextAdded = null;
          }
          if (this._movesTail !== null) {
            this._movesTail._nextMoved = null;
          }
          if (this._itTail !== null) {
            this._itTail._next = null;
          }
          if (this._removalsTail !== null) {
            this._removalsTail._nextRemoved = null;
          }
          if (this._identityChangesTail !== null) {
            this._identityChangesTail._nextIdentityChange = null;
          }
        };
        DefaultIterableDiffer.prototype._reinsertAfter = function(record, prevRecord, index) {
          if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.remove(record);
          }
          var prev = record._prevRemoved;
          var next = record._nextRemoved;
          if (prev === null) {
            this._removalsHead = next;
          } else {
            prev._nextRemoved = next;
          }
          if (next === null) {
            this._removalsTail = prev;
          } else {
            next._prevRemoved = prev;
          }
          this._insertAfter(record, prevRecord, index);
          this._addToMoves(record, index);
          return record;
        };
        DefaultIterableDiffer.prototype._moveAfter = function(record, prevRecord, index) {
          this._unlink(record);
          this._insertAfter(record, prevRecord, index);
          this._addToMoves(record, index);
          return record;
        };
        DefaultIterableDiffer.prototype._addAfter = function(record, prevRecord, index) {
          this._insertAfter(record, prevRecord, index);
          if (this._additionsTail === null) {
            this._additionsTail = this._additionsHead = record;
          } else {
            this._additionsTail = this._additionsTail._nextAdded = record;
          }
          return record;
        };
        DefaultIterableDiffer.prototype._insertAfter = function(record, prevRecord, index) {
          var next = prevRecord === null ? this._itHead : prevRecord._next;
          record._next = next;
          record._prev = prevRecord;
          if (next === null) {
            this._itTail = record;
          } else {
            next._prev = record;
          }
          if (prevRecord === null) {
            this._itHead = record;
          } else {
            prevRecord._next = record;
          }
          if (this._linkedRecords === null) {
            this._linkedRecords = new _DuplicateMap();
          }
          this._linkedRecords.put(record);
          record.currentIndex = index;
          return record;
        };
        DefaultIterableDiffer.prototype._remove = function(record) {
          return this._addToRemovals(this._unlink(record));
        };
        DefaultIterableDiffer.prototype._unlink = function(record) {
          if (this._linkedRecords !== null) {
            this._linkedRecords.remove(record);
          }
          var prev = record._prev;
          var next = record._next;
          if (prev === null) {
            this._itHead = next;
          } else {
            prev._next = next;
          }
          if (next === null) {
            this._itTail = prev;
          } else {
            next._prev = prev;
          }
          return record;
        };
        DefaultIterableDiffer.prototype._addToMoves = function(record, toIndex) {
          if (record.previousIndex === toIndex) {
            return record;
          }
          if (this._movesTail === null) {
            this._movesTail = this._movesHead = record;
          } else {
            this._movesTail = this._movesTail._nextMoved = record;
          }
          return record;
        };
        DefaultIterableDiffer.prototype._addToRemovals = function(record) {
          if (this._unlinkedRecords === null) {
            this._unlinkedRecords = new _DuplicateMap();
          }
          this._unlinkedRecords.put(record);
          record.currentIndex = null;
          record._nextRemoved = null;
          if (this._removalsTail === null) {
            this._removalsTail = this._removalsHead = record;
            record._prevRemoved = null;
          } else {
            record._prevRemoved = this._removalsTail;
            this._removalsTail = this._removalsTail._nextRemoved = record;
          }
          return record;
        };
        DefaultIterableDiffer.prototype._addIdentityChange = function(record, item) {
          record.item = item;
          if (this._identityChangesTail === null) {
            this._identityChangesTail = this._identityChangesHead = record;
          } else {
            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
          }
          return record;
        };
        DefaultIterableDiffer.prototype.toString = function() {
          var list = [];
          this.forEachItem(function(record) {
            return list.push(record);
          });
          var previous = [];
          this.forEachPreviousItem(function(record) {
            return previous.push(record);
          });
          var additions = [];
          this.forEachAddedItem(function(record) {
            return additions.push(record);
          });
          var moves = [];
          this.forEachMovedItem(function(record) {
            return moves.push(record);
          });
          var removals = [];
          this.forEachRemovedItem(function(record) {
            return removals.push(record);
          });
          var identityChanges = [];
          this.forEachIdentityChange(function(record) {
            return identityChanges.push(record);
          });
          return 'collection: ' + list.join(', ') + '\n' + 'previous: ' + previous.join(', ') + '\n' + 'additions: ' + additions.join(', ') + '\n' + 'moves: ' + moves.join(', ') + '\n' + 'removals: ' + removals.join(', ') + '\n' + 'identityChanges: ' + identityChanges.join(', ') + '\n';
        };
        return DefaultIterableDiffer;
      }());
      $__export("DefaultIterableDiffer", DefaultIterableDiffer);
      CollectionChangeRecord = (function() {
        function CollectionChangeRecord(item, trackById) {
          this.item = item;
          this.trackById = trackById;
          this.currentIndex = null;
          this.previousIndex = null;
          this._nextPrevious = null;
          this._prev = null;
          this._next = null;
          this._prevDup = null;
          this._nextDup = null;
          this._prevRemoved = null;
          this._nextRemoved = null;
          this._nextAdded = null;
          this._nextMoved = null;
          this._nextIdentityChange = null;
        }
        CollectionChangeRecord.prototype.toString = function() {
          return this.previousIndex === this.currentIndex ? stringify(this.item) : stringify(this.item) + '[' + stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
        };
        return CollectionChangeRecord;
      }());
      $__export("CollectionChangeRecord", CollectionChangeRecord);
      _DuplicateItemRecordList = (function() {
        function _DuplicateItemRecordList() {
          this._head = null;
          this._tail = null;
        }
        _DuplicateItemRecordList.prototype.add = function(record) {
          if (this._head === null) {
            this._head = this._tail = record;
            record._nextDup = null;
            record._prevDup = null;
          } else {
            this._tail._nextDup = record;
            record._prevDup = this._tail;
            record._nextDup = null;
            this._tail = record;
          }
        };
        _DuplicateItemRecordList.prototype.get = function(trackById, afterIndex) {
          var record;
          for (record = this._head; record !== null; record = record._nextDup) {
            if ((afterIndex === null || afterIndex < record.currentIndex) && looseIdentical(record.trackById, trackById)) {
              return record;
            }
          }
          return null;
        };
        _DuplicateItemRecordList.prototype.remove = function(record) {
          var prev = record._prevDup;
          var next = record._nextDup;
          if (prev === null) {
            this._head = next;
          } else {
            prev._nextDup = next;
          }
          if (next === null) {
            this._tail = prev;
          } else {
            next._prevDup = prev;
          }
          return this._head === null;
        };
        return _DuplicateItemRecordList;
      }());
      _DuplicateMap = (function() {
        function _DuplicateMap() {
          this.map = new Map();
        }
        _DuplicateMap.prototype.put = function(record) {
          var key = record.trackById;
          var duplicates = this.map.get(key);
          if (!duplicates) {
            duplicates = new _DuplicateItemRecordList();
            this.map.set(key, duplicates);
          }
          duplicates.add(record);
        };
        _DuplicateMap.prototype.get = function(trackById, afterIndex) {
          if (afterIndex === void 0) {
            afterIndex = null;
          }
          var key = trackById;
          var recordList = this.map.get(key);
          return recordList ? recordList.get(trackById, afterIndex) : null;
        };
        _DuplicateMap.prototype.remove = function(record) {
          var key = record.trackById;
          var recordList = this.map.get(key);
          if (recordList.remove(record)) {
            this.map.delete(key);
          }
          return record;
        };
        Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
          get: function() {
            return this.map.size === 0;
          },
          enumerable: true,
          configurable: true
        });
        _DuplicateMap.prototype.clear = function() {
          this.map.clear();
        };
        _DuplicateMap.prototype.toString = function() {
          return '_DuplicateMap(' + stringify(this.map) + ')';
        };
        return _DuplicateMap;
      }());
    }
  };
});

$__System.register("1cd", ["189"], function($__export) {
  "use strict";
  var isJsObject,
      looseIdentical,
      stringify,
      DefaultKeyValueDifferFactory,
      DefaultKeyValueDiffer,
      KeyValueChangeRecord;
  return {
    setters: [function($__m) {
      isJsObject = $__m.isJsObject;
      looseIdentical = $__m.looseIdentical;
      stringify = $__m.stringify;
    }],
    execute: function() {
      DefaultKeyValueDifferFactory = (function() {
        function DefaultKeyValueDifferFactory() {}
        DefaultKeyValueDifferFactory.prototype.supports = function(obj) {
          return obj instanceof Map || isJsObject(obj);
        };
        DefaultKeyValueDifferFactory.prototype.create = function(cdRef) {
          return new DefaultKeyValueDiffer();
        };
        return DefaultKeyValueDifferFactory;
      }());
      $__export("DefaultKeyValueDifferFactory", DefaultKeyValueDifferFactory);
      DefaultKeyValueDiffer = (function() {
        function DefaultKeyValueDiffer() {
          this._records = new Map();
          this._mapHead = null;
          this._previousMapHead = null;
          this._changesHead = null;
          this._changesTail = null;
          this._additionsHead = null;
          this._additionsTail = null;
          this._removalsHead = null;
          this._removalsTail = null;
        }
        Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
          get: function() {
            return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
          },
          enumerable: true,
          configurable: true
        });
        DefaultKeyValueDiffer.prototype.forEachItem = function(fn) {
          var record;
          for (record = this._mapHead; record !== null; record = record._next) {
            fn(record);
          }
        };
        DefaultKeyValueDiffer.prototype.forEachPreviousItem = function(fn) {
          var record;
          for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
            fn(record);
          }
        };
        DefaultKeyValueDiffer.prototype.forEachChangedItem = function(fn) {
          var record;
          for (record = this._changesHead; record !== null; record = record._nextChanged) {
            fn(record);
          }
        };
        DefaultKeyValueDiffer.prototype.forEachAddedItem = function(fn) {
          var record;
          for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
          }
        };
        DefaultKeyValueDiffer.prototype.forEachRemovedItem = function(fn) {
          var record;
          for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
          }
        };
        DefaultKeyValueDiffer.prototype.diff = function(map) {
          if (!map) {
            map = new Map();
          } else if (!(map instanceof Map || isJsObject(map))) {
            throw new Error("Error trying to diff '" + map + "'");
          }
          return this.check(map) ? this : null;
        };
        DefaultKeyValueDiffer.prototype.onDestroy = function() {};
        DefaultKeyValueDiffer.prototype.check = function(map) {
          var _this = this;
          this._reset();
          var records = this._records;
          var oldSeqRecord = this._mapHead;
          var lastOldSeqRecord = null;
          var lastNewSeqRecord = null;
          var seqChanged = false;
          this._forEach(map, function(value, key) {
            var newSeqRecord;
            if (oldSeqRecord && key === oldSeqRecord.key) {
              newSeqRecord = oldSeqRecord;
              _this._maybeAddToChanges(newSeqRecord, value);
            } else {
              seqChanged = true;
              if (oldSeqRecord !== null) {
                _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
                _this._addToRemovals(oldSeqRecord);
              }
              if (records.has(key)) {
                newSeqRecord = records.get(key);
                _this._maybeAddToChanges(newSeqRecord, value);
              } else {
                newSeqRecord = new KeyValueChangeRecord(key);
                records.set(key, newSeqRecord);
                newSeqRecord.currentValue = value;
                _this._addToAdditions(newSeqRecord);
              }
            }
            if (seqChanged) {
              if (_this._isInRemovals(newSeqRecord)) {
                _this._removeFromRemovals(newSeqRecord);
              }
              if (lastNewSeqRecord == null) {
                _this._mapHead = newSeqRecord;
              } else {
                lastNewSeqRecord._next = newSeqRecord;
              }
            }
            lastOldSeqRecord = oldSeqRecord;
            lastNewSeqRecord = newSeqRecord;
            oldSeqRecord = oldSeqRecord && oldSeqRecord._next;
          });
          this._truncate(lastOldSeqRecord, oldSeqRecord);
          return this.isDirty;
        };
        DefaultKeyValueDiffer.prototype._reset = function() {
          if (this.isDirty) {
            var record = void 0;
            for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
              record._nextPrevious = record._next;
            }
            for (record = this._changesHead; record !== null; record = record._nextChanged) {
              record.previousValue = record.currentValue;
            }
            for (record = this._additionsHead; record != null; record = record._nextAdded) {
              record.previousValue = record.currentValue;
            }
            this._changesHead = this._changesTail = null;
            this._additionsHead = this._additionsTail = null;
            this._removalsHead = this._removalsTail = null;
          }
        };
        DefaultKeyValueDiffer.prototype._truncate = function(lastRecord, record) {
          while (record !== null) {
            if (lastRecord === null) {
              this._mapHead = null;
            } else {
              lastRecord._next = null;
            }
            var nextRecord = record._next;
            this._addToRemovals(record);
            lastRecord = record;
            record = nextRecord;
          }
          for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
            rec.previousValue = rec.currentValue;
            rec.currentValue = null;
            this._records.delete(rec.key);
          }
        };
        DefaultKeyValueDiffer.prototype._maybeAddToChanges = function(record, newValue) {
          if (!looseIdentical(newValue, record.currentValue)) {
            record.previousValue = record.currentValue;
            record.currentValue = newValue;
            this._addToChanges(record);
          }
        };
        DefaultKeyValueDiffer.prototype._isInRemovals = function(record) {
          return record === this._removalsHead || record._nextRemoved !== null || record._prevRemoved !== null;
        };
        DefaultKeyValueDiffer.prototype._addToRemovals = function(record) {
          if (this._removalsHead === null) {
            this._removalsHead = this._removalsTail = record;
          } else {
            this._removalsTail._nextRemoved = record;
            record._prevRemoved = this._removalsTail;
            this._removalsTail = record;
          }
        };
        DefaultKeyValueDiffer.prototype._removeFromSeq = function(prev, record) {
          var next = record._next;
          if (prev === null) {
            this._mapHead = next;
          } else {
            prev._next = next;
          }
          record._next = null;
        };
        DefaultKeyValueDiffer.prototype._removeFromRemovals = function(record) {
          var prev = record._prevRemoved;
          var next = record._nextRemoved;
          if (prev === null) {
            this._removalsHead = next;
          } else {
            prev._nextRemoved = next;
          }
          if (next === null) {
            this._removalsTail = prev;
          } else {
            next._prevRemoved = prev;
          }
          record._prevRemoved = record._nextRemoved = null;
        };
        DefaultKeyValueDiffer.prototype._addToAdditions = function(record) {
          if (this._additionsHead === null) {
            this._additionsHead = this._additionsTail = record;
          } else {
            this._additionsTail._nextAdded = record;
            this._additionsTail = record;
          }
        };
        DefaultKeyValueDiffer.prototype._addToChanges = function(record) {
          if (this._changesHead === null) {
            this._changesHead = this._changesTail = record;
          } else {
            this._changesTail._nextChanged = record;
            this._changesTail = record;
          }
        };
        DefaultKeyValueDiffer.prototype.toString = function() {
          var items = [];
          var previous = [];
          var changes = [];
          var additions = [];
          var removals = [];
          var record;
          for (record = this._mapHead; record !== null; record = record._next) {
            items.push(stringify(record));
          }
          for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
            previous.push(stringify(record));
          }
          for (record = this._changesHead; record !== null; record = record._nextChanged) {
            changes.push(stringify(record));
          }
          for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            additions.push(stringify(record));
          }
          for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            removals.push(stringify(record));
          }
          return 'map: ' + items.join(', ') + '\n' + 'previous: ' + previous.join(', ') + '\n' + 'additions: ' + additions.join(', ') + '\n' + 'changes: ' + changes.join(', ') + '\n' + 'removals: ' + removals.join(', ') + '\n';
        };
        DefaultKeyValueDiffer.prototype._forEach = function(obj, fn) {
          if (obj instanceof Map) {
            obj.forEach(fn);
          } else {
            Object.keys(obj).forEach(function(k) {
              return fn(obj[k], k);
            });
          }
        };
        return DefaultKeyValueDiffer;
      }());
      $__export("DefaultKeyValueDiffer", DefaultKeyValueDiffer);
      KeyValueChangeRecord = (function() {
        function KeyValueChangeRecord(key) {
          this.key = key;
          this.previousValue = null;
          this.currentValue = null;
          this._nextPrevious = null;
          this._next = null;
          this._nextAdded = null;
          this._nextRemoved = null;
          this._prevRemoved = null;
          this._nextChanged = null;
        }
        KeyValueChangeRecord.prototype.toString = function() {
          return looseIdentical(this.previousValue, this.currentValue) ? stringify(this.key) : (stringify(this.key) + '[' + stringify(this.previousValue) + '->' + stringify(this.currentValue) + ']');
        };
        return KeyValueChangeRecord;
      }());
      $__export("KeyValueChangeRecord", KeyValueChangeRecord);
    }
  };
});

$__System.register("1ce", ["18b", "189"], function($__export) {
  "use strict";
  var Optional,
      SkipSelf,
      getTypeNameForDebugging,
      isPresent,
      IterableDiffers;
  return {
    setters: [function($__m) {
      Optional = $__m.Optional;
      SkipSelf = $__m.SkipSelf;
    }, function($__m) {
      getTypeNameForDebugging = $__m.getTypeNameForDebugging;
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      IterableDiffers = (function() {
        function IterableDiffers(factories) {
          this.factories = factories;
        }
        IterableDiffers.create = function(factories, parent) {
          if (isPresent(parent)) {
            var copied = parent.factories.slice();
            factories = factories.concat(copied);
            return new IterableDiffers(factories);
          } else {
            return new IterableDiffers(factories);
          }
        };
        IterableDiffers.extend = function(factories) {
          return {
            provide: IterableDiffers,
            useFactory: function(parent) {
              if (!parent) {
                throw new Error('Cannot extend IterableDiffers without a parent injector');
              }
              return IterableDiffers.create(factories, parent);
            },
            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
          };
        };
        IterableDiffers.prototype.find = function(iterable) {
          var factory = this.factories.find(function(f) {
            return f.supports(iterable);
          });
          if (isPresent(factory)) {
            return factory;
          } else {
            throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
          }
        };
        return IterableDiffers;
      }());
      $__export("IterableDiffers", IterableDiffers);
    }
  };
});

$__System.register("1cf", ["18b", "189"], function($__export) {
  "use strict";
  var Optional,
      SkipSelf,
      isPresent,
      KeyValueDiffers;
  return {
    setters: [function($__m) {
      Optional = $__m.Optional;
      SkipSelf = $__m.SkipSelf;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      KeyValueDiffers = (function() {
        function KeyValueDiffers(factories) {
          this.factories = factories;
        }
        KeyValueDiffers.create = function(factories, parent) {
          if (isPresent(parent)) {
            var copied = parent.factories.slice();
            factories = factories.concat(copied);
            return new KeyValueDiffers(factories);
          } else {
            return new KeyValueDiffers(factories);
          }
        };
        KeyValueDiffers.extend = function(factories) {
          return {
            provide: KeyValueDiffers,
            useFactory: function(parent) {
              if (!parent) {
                throw new Error('Cannot extend KeyValueDiffers without a parent injector');
              }
              return KeyValueDiffers.create(factories, parent);
            },
            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
          };
        };
        KeyValueDiffers.prototype.find = function(kv) {
          var factory = this.factories.find(function(f) {
            return f.supports(kv);
          });
          if (isPresent(factory)) {
            return factory;
          } else {
            throw new Error("Cannot find a differ supporting object '" + kv + "'");
          }
        };
        return KeyValueDiffers;
      }());
      $__export("KeyValueDiffers", KeyValueDiffers);
    }
  };
});

$__System.register("1d0", [], function($__export) {
  "use strict";
  var ChangeDetectorRef;
  return {
    setters: [],
    execute: function() {
      ChangeDetectorRef = (function() {
        function ChangeDetectorRef() {}
        return ChangeDetectorRef;
      }());
      $__export("ChangeDetectorRef", ChangeDetectorRef);
    }
  };
});

$__System.register("1a9", ["189"], function($__export) {
  "use strict";
  var isBlank,
      ChangeDetectionStrategy,
      ChangeDetectorStatus;
  function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
    return isBlank(changeDetectionStrategy) || changeDetectionStrategy === ChangeDetectionStrategy.Default;
  }
  $__export("isDefaultChangeDetectionStrategy", isDefaultChangeDetectionStrategy);
  return {
    setters: [function($__m) {
      isBlank = $__m.isBlank;
    }],
    execute: function() {
      $__export("ChangeDetectionStrategy", ChangeDetectionStrategy);
      (function(ChangeDetectionStrategy) {
        ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
        ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
      })(ChangeDetectionStrategy || ($__export("ChangeDetectionStrategy", ChangeDetectionStrategy = {})));
      $__export("ChangeDetectorStatus", ChangeDetectorStatus);
      (function(ChangeDetectorStatus) {
        ChangeDetectorStatus[ChangeDetectorStatus["CheckOnce"] = 0] = "CheckOnce";
        ChangeDetectorStatus[ChangeDetectorStatus["Checked"] = 1] = "Checked";
        ChangeDetectorStatus[ChangeDetectorStatus["CheckAlways"] = 2] = "CheckAlways";
        ChangeDetectorStatus[ChangeDetectorStatus["Detached"] = 3] = "Detached";
        ChangeDetectorStatus[ChangeDetectorStatus["Errored"] = 4] = "Errored";
        ChangeDetectorStatus[ChangeDetectorStatus["Destroyed"] = 5] = "Destroyed";
      })(ChangeDetectorStatus || ($__export("ChangeDetectorStatus", ChangeDetectorStatus = {})));
    }
  };
});

$__System.register("197", ["1cc", "1cd", "1ce", "1cf", "1d1", "1d0", "1a9"], function($__export) {
  "use strict";
  var DefaultIterableDifferFactory,
      DefaultKeyValueDifferFactory,
      IterableDiffers,
      KeyValueDiffers,
      keyValDiff,
      iterableDiff,
      defaultIterableDiffers,
      defaultKeyValueDiffers;
  return {
    setters: [function($__m) {
      DefaultIterableDifferFactory = $__m.DefaultIterableDifferFactory;
      $__export({
        CollectionChangeRecord: $__m.CollectionChangeRecord,
        DefaultIterableDifferFactory: $__m.DefaultIterableDifferFactory,
        DefaultIterableDiffer: $__m.DefaultIterableDiffer
      });
    }, function($__m) {
      DefaultKeyValueDifferFactory = $__m.DefaultKeyValueDifferFactory;
      $__export({
        DefaultKeyValueDifferFactory: $__m.DefaultKeyValueDifferFactory,
        KeyValueChangeRecord: $__m.KeyValueChangeRecord
      });
    }, function($__m) {
      IterableDiffers = $__m.IterableDiffers;
      $__export({IterableDiffers: $__m.IterableDiffers});
    }, function($__m) {
      KeyValueDiffers = $__m.KeyValueDiffers;
      $__export({KeyValueDiffers: $__m.KeyValueDiffers});
    }, function($__m) {
      $__export({
        SimpleChange: $__m.SimpleChange,
        UNINITIALIZED: $__m.UNINITIALIZED,
        ValueUnwrapper: $__m.ValueUnwrapper,
        WrappedValue: $__m.WrappedValue,
        devModeEqual: $__m.devModeEqual,
        looseIdentical: $__m.looseIdentical
      });
    }, function($__m) {
      $__export({ChangeDetectorRef: $__m.ChangeDetectorRef});
    }, function($__m) {
      $__export({
        ChangeDetectionStrategy: $__m.ChangeDetectionStrategy,
        ChangeDetectorStatus: $__m.ChangeDetectorStatus,
        isDefaultChangeDetectionStrategy: $__m.isDefaultChangeDetectionStrategy
      });
    }],
    execute: function() {
      keyValDiff = [new DefaultKeyValueDifferFactory()];
      $__export("keyValDiff", keyValDiff);
      iterableDiff = [new DefaultIterableDifferFactory()];
      $__export("iterableDiff", iterableDiff);
      defaultIterableDiffers = new IterableDiffers(iterableDiff);
      $__export("defaultIterableDiffers", defaultIterableDiffers);
      defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
      $__export("defaultKeyValueDiffers", defaultKeyValueDiffers);
    }
  };
});

$__System.register("1c1", ["1a0", "189"], function($__export) {
  "use strict";
  var unimplemented,
      stringify,
      _THROW_IF_NOT_FOUND,
      THROW_IF_NOT_FOUND,
      _NullInjector,
      Injector;
  return {
    setters: [function($__m) {
      unimplemented = $__m.unimplemented;
    }, function($__m) {
      stringify = $__m.stringify;
    }],
    execute: function() {
      _THROW_IF_NOT_FOUND = new Object();
      THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
      $__export("THROW_IF_NOT_FOUND", THROW_IF_NOT_FOUND);
      _NullInjector = (function() {
        function _NullInjector() {}
        _NullInjector.prototype.get = function(token, notFoundValue) {
          if (notFoundValue === void 0) {
            notFoundValue = _THROW_IF_NOT_FOUND;
          }
          if (notFoundValue === _THROW_IF_NOT_FOUND) {
            throw new Error("No provider for " + stringify(token) + "!");
          }
          return notFoundValue;
        };
        return _NullInjector;
      }());
      Injector = (function() {
        function Injector() {}
        Injector.prototype.get = function(token, notFoundValue) {
          return unimplemented();
        };
        Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
        Injector.NULL = new _NullInjector();
        return Injector;
      }());
      $__export("Injector", Injector);
    }
  };
});

$__System.register("1d2", ["1a0", "1c1", "1d3", "1d4", "1d5", "1d6"], function($__export) {
  "use strict";
  var unimplemented,
      Injector,
      THROW_IF_NOT_FOUND,
      Self,
      SkipSelf,
      AbstractProviderError,
      CyclicDependencyError,
      InstantiationError,
      NoProviderError,
      OutOfBoundsError,
      ReflectiveKey,
      resolveReflectiveProviders,
      _MAX_CONSTRUCTION_COUNTER,
      UNDEFINED,
      ReflectiveProtoInjectorInlineStrategy,
      ReflectiveProtoInjectorDynamicStrategy,
      ReflectiveProtoInjector,
      ReflectiveInjectorInlineStrategy,
      ReflectiveInjectorDynamicStrategy,
      ReflectiveInjector,
      ReflectiveInjector_,
      INJECTOR_KEY;
  function _mapProviders(injector, fn) {
    var res = new Array(injector._proto.numberOfProviders);
    for (var i = 0; i < injector._proto.numberOfProviders; ++i) {
      res[i] = fn(injector._proto.getProviderAtIndex(i));
    }
    return res;
  }
  return {
    setters: [function($__m) {
      unimplemented = $__m.unimplemented;
    }, function($__m) {
      Injector = $__m.Injector;
      THROW_IF_NOT_FOUND = $__m.THROW_IF_NOT_FOUND;
    }, function($__m) {
      Self = $__m.Self;
      SkipSelf = $__m.SkipSelf;
    }, function($__m) {
      AbstractProviderError = $__m.AbstractProviderError;
      CyclicDependencyError = $__m.CyclicDependencyError;
      InstantiationError = $__m.InstantiationError;
      NoProviderError = $__m.NoProviderError;
      OutOfBoundsError = $__m.OutOfBoundsError;
    }, function($__m) {
      ReflectiveKey = $__m.ReflectiveKey;
    }, function($__m) {
      resolveReflectiveProviders = $__m.resolveReflectiveProviders;
    }],
    execute: function() {
      _MAX_CONSTRUCTION_COUNTER = 10;
      UNDEFINED = new Object();
      ReflectiveProtoInjectorInlineStrategy = (function() {
        function ReflectiveProtoInjectorInlineStrategy(protoEI, providers) {
          this.provider0 = null;
          this.provider1 = null;
          this.provider2 = null;
          this.provider3 = null;
          this.provider4 = null;
          this.provider5 = null;
          this.provider6 = null;
          this.provider7 = null;
          this.provider8 = null;
          this.provider9 = null;
          this.keyId0 = null;
          this.keyId1 = null;
          this.keyId2 = null;
          this.keyId3 = null;
          this.keyId4 = null;
          this.keyId5 = null;
          this.keyId6 = null;
          this.keyId7 = null;
          this.keyId8 = null;
          this.keyId9 = null;
          var length = providers.length;
          if (length > 0) {
            this.provider0 = providers[0];
            this.keyId0 = providers[0].key.id;
          }
          if (length > 1) {
            this.provider1 = providers[1];
            this.keyId1 = providers[1].key.id;
          }
          if (length > 2) {
            this.provider2 = providers[2];
            this.keyId2 = providers[2].key.id;
          }
          if (length > 3) {
            this.provider3 = providers[3];
            this.keyId3 = providers[3].key.id;
          }
          if (length > 4) {
            this.provider4 = providers[4];
            this.keyId4 = providers[4].key.id;
          }
          if (length > 5) {
            this.provider5 = providers[5];
            this.keyId5 = providers[5].key.id;
          }
          if (length > 6) {
            this.provider6 = providers[6];
            this.keyId6 = providers[6].key.id;
          }
          if (length > 7) {
            this.provider7 = providers[7];
            this.keyId7 = providers[7].key.id;
          }
          if (length > 8) {
            this.provider8 = providers[8];
            this.keyId8 = providers[8].key.id;
          }
          if (length > 9) {
            this.provider9 = providers[9];
            this.keyId9 = providers[9].key.id;
          }
        }
        ReflectiveProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function(index) {
          if (index == 0)
            return this.provider0;
          if (index == 1)
            return this.provider1;
          if (index == 2)
            return this.provider2;
          if (index == 3)
            return this.provider3;
          if (index == 4)
            return this.provider4;
          if (index == 5)
            return this.provider5;
          if (index == 6)
            return this.provider6;
          if (index == 7)
            return this.provider7;
          if (index == 8)
            return this.provider8;
          if (index == 9)
            return this.provider9;
          throw new OutOfBoundsError(index);
        };
        ReflectiveProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function(injector) {
          return new ReflectiveInjectorInlineStrategy(injector, this);
        };
        return ReflectiveProtoInjectorInlineStrategy;
      }());
      $__export("ReflectiveProtoInjectorInlineStrategy", ReflectiveProtoInjectorInlineStrategy);
      ReflectiveProtoInjectorDynamicStrategy = (function() {
        function ReflectiveProtoInjectorDynamicStrategy(protoInj, providers) {
          this.providers = providers;
          var len = providers.length;
          this.keyIds = new Array(len);
          for (var i = 0; i < len; i++) {
            this.keyIds[i] = providers[i].key.id;
          }
        }
        ReflectiveProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function(index) {
          if (index < 0 || index >= this.providers.length) {
            throw new OutOfBoundsError(index);
          }
          return this.providers[index];
        };
        ReflectiveProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function(ei) {
          return new ReflectiveInjectorDynamicStrategy(this, ei);
        };
        return ReflectiveProtoInjectorDynamicStrategy;
      }());
      $__export("ReflectiveProtoInjectorDynamicStrategy", ReflectiveProtoInjectorDynamicStrategy);
      ReflectiveProtoInjector = (function() {
        function ReflectiveProtoInjector(providers) {
          this.numberOfProviders = providers.length;
          this._strategy = providers.length > _MAX_CONSTRUCTION_COUNTER ? new ReflectiveProtoInjectorDynamicStrategy(this, providers) : new ReflectiveProtoInjectorInlineStrategy(this, providers);
        }
        ReflectiveProtoInjector.fromResolvedProviders = function(providers) {
          return new ReflectiveProtoInjector(providers);
        };
        ReflectiveProtoInjector.prototype.getProviderAtIndex = function(index) {
          return this._strategy.getProviderAtIndex(index);
        };
        return ReflectiveProtoInjector;
      }());
      $__export("ReflectiveProtoInjector", ReflectiveProtoInjector);
      ReflectiveInjectorInlineStrategy = (function() {
        function ReflectiveInjectorInlineStrategy(injector, protoStrategy) {
          this.injector = injector;
          this.protoStrategy = protoStrategy;
          this.obj0 = UNDEFINED;
          this.obj1 = UNDEFINED;
          this.obj2 = UNDEFINED;
          this.obj3 = UNDEFINED;
          this.obj4 = UNDEFINED;
          this.obj5 = UNDEFINED;
          this.obj6 = UNDEFINED;
          this.obj7 = UNDEFINED;
          this.obj8 = UNDEFINED;
          this.obj9 = UNDEFINED;
        }
        ReflectiveInjectorInlineStrategy.prototype.resetConstructionCounter = function() {
          this.injector._constructionCounter = 0;
        };
        ReflectiveInjectorInlineStrategy.prototype.instantiateProvider = function(provider) {
          return this.injector._new(provider);
        };
        ReflectiveInjectorInlineStrategy.prototype.getObjByKeyId = function(keyId) {
          var p = this.protoStrategy;
          var inj = this.injector;
          if (p.keyId0 === keyId) {
            if (this.obj0 === UNDEFINED) {
              this.obj0 = inj._new(p.provider0);
            }
            return this.obj0;
          }
          if (p.keyId1 === keyId) {
            if (this.obj1 === UNDEFINED) {
              this.obj1 = inj._new(p.provider1);
            }
            return this.obj1;
          }
          if (p.keyId2 === keyId) {
            if (this.obj2 === UNDEFINED) {
              this.obj2 = inj._new(p.provider2);
            }
            return this.obj2;
          }
          if (p.keyId3 === keyId) {
            if (this.obj3 === UNDEFINED) {
              this.obj3 = inj._new(p.provider3);
            }
            return this.obj3;
          }
          if (p.keyId4 === keyId) {
            if (this.obj4 === UNDEFINED) {
              this.obj4 = inj._new(p.provider4);
            }
            return this.obj4;
          }
          if (p.keyId5 === keyId) {
            if (this.obj5 === UNDEFINED) {
              this.obj5 = inj._new(p.provider5);
            }
            return this.obj5;
          }
          if (p.keyId6 === keyId) {
            if (this.obj6 === UNDEFINED) {
              this.obj6 = inj._new(p.provider6);
            }
            return this.obj6;
          }
          if (p.keyId7 === keyId) {
            if (this.obj7 === UNDEFINED) {
              this.obj7 = inj._new(p.provider7);
            }
            return this.obj7;
          }
          if (p.keyId8 === keyId) {
            if (this.obj8 === UNDEFINED) {
              this.obj8 = inj._new(p.provider8);
            }
            return this.obj8;
          }
          if (p.keyId9 === keyId) {
            if (this.obj9 === UNDEFINED) {
              this.obj9 = inj._new(p.provider9);
            }
            return this.obj9;
          }
          return UNDEFINED;
        };
        ReflectiveInjectorInlineStrategy.prototype.getObjAtIndex = function(index) {
          if (index == 0)
            return this.obj0;
          if (index == 1)
            return this.obj1;
          if (index == 2)
            return this.obj2;
          if (index == 3)
            return this.obj3;
          if (index == 4)
            return this.obj4;
          if (index == 5)
            return this.obj5;
          if (index == 6)
            return this.obj6;
          if (index == 7)
            return this.obj7;
          if (index == 8)
            return this.obj8;
          if (index == 9)
            return this.obj9;
          throw new OutOfBoundsError(index);
        };
        ReflectiveInjectorInlineStrategy.prototype.getMaxNumberOfObjects = function() {
          return _MAX_CONSTRUCTION_COUNTER;
        };
        return ReflectiveInjectorInlineStrategy;
      }());
      $__export("ReflectiveInjectorInlineStrategy", ReflectiveInjectorInlineStrategy);
      ReflectiveInjectorDynamicStrategy = (function() {
        function ReflectiveInjectorDynamicStrategy(protoStrategy, injector) {
          this.protoStrategy = protoStrategy;
          this.injector = injector;
          this.objs = new Array(protoStrategy.providers.length).fill(UNDEFINED);
        }
        ReflectiveInjectorDynamicStrategy.prototype.resetConstructionCounter = function() {
          this.injector._constructionCounter = 0;
        };
        ReflectiveInjectorDynamicStrategy.prototype.instantiateProvider = function(provider) {
          return this.injector._new(provider);
        };
        ReflectiveInjectorDynamicStrategy.prototype.getObjByKeyId = function(keyId) {
          var p = this.protoStrategy;
          for (var i = 0; i < p.keyIds.length; i++) {
            if (p.keyIds[i] === keyId) {
              if (this.objs[i] === UNDEFINED) {
                this.objs[i] = this.injector._new(p.providers[i]);
              }
              return this.objs[i];
            }
          }
          return UNDEFINED;
        };
        ReflectiveInjectorDynamicStrategy.prototype.getObjAtIndex = function(index) {
          if (index < 0 || index >= this.objs.length) {
            throw new OutOfBoundsError(index);
          }
          return this.objs[index];
        };
        ReflectiveInjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function() {
          return this.objs.length;
        };
        return ReflectiveInjectorDynamicStrategy;
      }());
      $__export("ReflectiveInjectorDynamicStrategy", ReflectiveInjectorDynamicStrategy);
      ReflectiveInjector = (function() {
        function ReflectiveInjector() {}
        ReflectiveInjector.resolve = function(providers) {
          return resolveReflectiveProviders(providers);
        };
        ReflectiveInjector.resolveAndCreate = function(providers, parent) {
          if (parent === void 0) {
            parent = null;
          }
          var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
          return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
        };
        ReflectiveInjector.fromResolvedProviders = function(providers, parent) {
          if (parent === void 0) {
            parent = null;
          }
          return new ReflectiveInjector_(ReflectiveProtoInjector.fromResolvedProviders(providers), parent);
        };
        Object.defineProperty(ReflectiveInjector.prototype, "parent", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        ReflectiveInjector.prototype.resolveAndCreateChild = function(providers) {
          return unimplemented();
        };
        ReflectiveInjector.prototype.createChildFromResolved = function(providers) {
          return unimplemented();
        };
        ReflectiveInjector.prototype.resolveAndInstantiate = function(provider) {
          return unimplemented();
        };
        ReflectiveInjector.prototype.instantiateResolved = function(provider) {
          return unimplemented();
        };
        return ReflectiveInjector;
      }());
      $__export("ReflectiveInjector", ReflectiveInjector);
      ReflectiveInjector_ = (function() {
        function ReflectiveInjector_(_proto, _parent) {
          if (_parent === void 0) {
            _parent = null;
          }
          this._constructionCounter = 0;
          this._proto = _proto;
          this._parent = _parent;
          this._strategy = _proto._strategy.createInjectorStrategy(this);
        }
        ReflectiveInjector_.prototype.get = function(token, notFoundValue) {
          if (notFoundValue === void 0) {
            notFoundValue = THROW_IF_NOT_FOUND;
          }
          return this._getByKey(ReflectiveKey.get(token), null, null, notFoundValue);
        };
        ReflectiveInjector_.prototype.getAt = function(index) {
          return this._strategy.getObjAtIndex(index);
        };
        Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
          get: function() {
            return this._parent;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ReflectiveInjector_.prototype, "internalStrategy", {
          get: function() {
            return this._strategy;
          },
          enumerable: true,
          configurable: true
        });
        ReflectiveInjector_.prototype.resolveAndCreateChild = function(providers) {
          var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
          return this.createChildFromResolved(ResolvedReflectiveProviders);
        };
        ReflectiveInjector_.prototype.createChildFromResolved = function(providers) {
          var proto = new ReflectiveProtoInjector(providers);
          var inj = new ReflectiveInjector_(proto);
          inj._parent = this;
          return inj;
        };
        ReflectiveInjector_.prototype.resolveAndInstantiate = function(provider) {
          return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
        };
        ReflectiveInjector_.prototype.instantiateResolved = function(provider) {
          return this._instantiateProvider(provider);
        };
        ReflectiveInjector_.prototype._new = function(provider) {
          if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
            throw new CyclicDependencyError(this, provider.key);
          }
          return this._instantiateProvider(provider);
        };
        ReflectiveInjector_.prototype._instantiateProvider = function(provider) {
          if (provider.multiProvider) {
            var res = new Array(provider.resolvedFactories.length);
            for (var i = 0; i < provider.resolvedFactories.length; ++i) {
              res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
            }
            return res;
          } else {
            return this._instantiate(provider, provider.resolvedFactories[0]);
          }
        };
        ReflectiveInjector_.prototype._instantiate = function(provider, ResolvedReflectiveFactory) {
          var factory = ResolvedReflectiveFactory.factory;
          var deps = ResolvedReflectiveFactory.dependencies;
          var length = deps.length;
          var d0;
          var d1;
          var d2;
          var d3;
          var d4;
          var d5;
          var d6;
          var d7;
          var d8;
          var d9;
          var d10;
          var d11;
          var d12;
          var d13;
          var d14;
          var d15;
          var d16;
          var d17;
          var d18;
          var d19;
          try {
            d0 = length > 0 ? this._getByReflectiveDependency(provider, deps[0]) : null;
            d1 = length > 1 ? this._getByReflectiveDependency(provider, deps[1]) : null;
            d2 = length > 2 ? this._getByReflectiveDependency(provider, deps[2]) : null;
            d3 = length > 3 ? this._getByReflectiveDependency(provider, deps[3]) : null;
            d4 = length > 4 ? this._getByReflectiveDependency(provider, deps[4]) : null;
            d5 = length > 5 ? this._getByReflectiveDependency(provider, deps[5]) : null;
            d6 = length > 6 ? this._getByReflectiveDependency(provider, deps[6]) : null;
            d7 = length > 7 ? this._getByReflectiveDependency(provider, deps[7]) : null;
            d8 = length > 8 ? this._getByReflectiveDependency(provider, deps[8]) : null;
            d9 = length > 9 ? this._getByReflectiveDependency(provider, deps[9]) : null;
            d10 = length > 10 ? this._getByReflectiveDependency(provider, deps[10]) : null;
            d11 = length > 11 ? this._getByReflectiveDependency(provider, deps[11]) : null;
            d12 = length > 12 ? this._getByReflectiveDependency(provider, deps[12]) : null;
            d13 = length > 13 ? this._getByReflectiveDependency(provider, deps[13]) : null;
            d14 = length > 14 ? this._getByReflectiveDependency(provider, deps[14]) : null;
            d15 = length > 15 ? this._getByReflectiveDependency(provider, deps[15]) : null;
            d16 = length > 16 ? this._getByReflectiveDependency(provider, deps[16]) : null;
            d17 = length > 17 ? this._getByReflectiveDependency(provider, deps[17]) : null;
            d18 = length > 18 ? this._getByReflectiveDependency(provider, deps[18]) : null;
            d19 = length > 19 ? this._getByReflectiveDependency(provider, deps[19]) : null;
          } catch (e) {
            if (e instanceof AbstractProviderError || e instanceof InstantiationError) {
              e.addKey(this, provider.key);
            }
            throw e;
          }
          var obj;
          try {
            switch (length) {
              case 0:
                obj = factory();
                break;
              case 1:
                obj = factory(d0);
                break;
              case 2:
                obj = factory(d0, d1);
                break;
              case 3:
                obj = factory(d0, d1, d2);
                break;
              case 4:
                obj = factory(d0, d1, d2, d3);
                break;
              case 5:
                obj = factory(d0, d1, d2, d3, d4);
                break;
              case 6:
                obj = factory(d0, d1, d2, d3, d4, d5);
                break;
              case 7:
                obj = factory(d0, d1, d2, d3, d4, d5, d6);
                break;
              case 8:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
                break;
              case 9:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
                break;
              case 10:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
                break;
              case 11:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
                break;
              case 12:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
                break;
              case 13:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
                break;
              case 14:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
                break;
              case 15:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
                break;
              case 16:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
                break;
              case 17:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
                break;
              case 18:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
                break;
              case 19:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
                break;
              case 20:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
                break;
              default:
                throw new Error("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies");
            }
          } catch (e) {
            throw new InstantiationError(this, e, e.stack, provider.key);
          }
          return obj;
        };
        ReflectiveInjector_.prototype._getByReflectiveDependency = function(provider, dep) {
          return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional ? null : THROW_IF_NOT_FOUND);
        };
        ReflectiveInjector_.prototype._getByKey = function(key, lowerBoundVisibility, upperBoundVisibility, notFoundValue) {
          if (key === INJECTOR_KEY) {
            return this;
          }
          if (upperBoundVisibility instanceof Self) {
            return this._getByKeySelf(key, notFoundValue);
          } else {
            return this._getByKeyDefault(key, notFoundValue, lowerBoundVisibility);
          }
        };
        ReflectiveInjector_.prototype._throwOrNull = function(key, notFoundValue) {
          if (notFoundValue !== THROW_IF_NOT_FOUND) {
            return notFoundValue;
          } else {
            throw new NoProviderError(this, key);
          }
        };
        ReflectiveInjector_.prototype._getByKeySelf = function(key, notFoundValue) {
          var obj = this._strategy.getObjByKeyId(key.id);
          return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
        };
        ReflectiveInjector_.prototype._getByKeyDefault = function(key, notFoundValue, lowerBoundVisibility) {
          var inj;
          if (lowerBoundVisibility instanceof SkipSelf) {
            inj = this._parent;
          } else {
            inj = this;
          }
          while (inj instanceof ReflectiveInjector_) {
            var inj_ = inj;
            var obj = inj_._strategy.getObjByKeyId(key.id);
            if (obj !== UNDEFINED)
              return obj;
            inj = inj_._parent;
          }
          if (inj !== null) {
            return inj.get(key.token, notFoundValue);
          } else {
            return this._throwOrNull(key, notFoundValue);
          }
        };
        Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
          get: function() {
            var providers = _mapProviders(this, function(b) {
              return ' "' + b.key.displayName + '" ';
            }).join(', ');
            return "ReflectiveInjector(providers: [" + providers + "])";
          },
          enumerable: true,
          configurable: true
        });
        ReflectiveInjector_.prototype.toString = function() {
          return this.displayName;
        };
        return ReflectiveInjector_;
      }());
      $__export("ReflectiveInjector_", ReflectiveInjector_);
      INJECTOR_KEY = ReflectiveKey.get(Injector);
    }
  };
});

$__System.register("1d4", ["1a0", "189"], function($__export) {
  "use strict";
  var __extends,
      BaseError,
      WrappedError,
      stringify,
      AbstractProviderError,
      NoProviderError,
      CyclicDependencyError,
      InstantiationError,
      InvalidProviderError,
      NoAnnotationError,
      OutOfBoundsError,
      MixingMultiProvidersWithRegularProvidersError;
  function findFirstClosedCycle(keys) {
    var res = [];
    for (var i = 0; i < keys.length; ++i) {
      if (res.indexOf(keys[i]) > -1) {
        res.push(keys[i]);
        return res;
      }
      res.push(keys[i]);
    }
    return res;
  }
  function constructResolvingPath(keys) {
    if (keys.length > 1) {
      var reversed = findFirstClosedCycle(keys.slice().reverse());
      var tokenStrs = reversed.map(function(k) {
        return stringify(k.token);
      });
      return ' (' + tokenStrs.join(' -> ') + ')';
    }
    return '';
  }
  return {
    setters: [function($__m) {
      BaseError = $__m.BaseError;
      WrappedError = $__m.WrappedError;
    }, function($__m) {
      stringify = $__m.stringify;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      AbstractProviderError = (function(_super) {
        __extends(AbstractProviderError, _super);
        function AbstractProviderError(injector, key, constructResolvingMessage) {
          _super.call(this, 'DI Error');
          this.keys = [key];
          this.injectors = [injector];
          this.constructResolvingMessage = constructResolvingMessage;
          this.message = this.constructResolvingMessage(this.keys);
        }
        AbstractProviderError.prototype.addKey = function(injector, key) {
          this.injectors.push(injector);
          this.keys.push(key);
          this.message = this.constructResolvingMessage(this.keys);
        };
        return AbstractProviderError;
      }(BaseError));
      $__export("AbstractProviderError", AbstractProviderError);
      NoProviderError = (function(_super) {
        __extends(NoProviderError, _super);
        function NoProviderError(injector, key) {
          _super.call(this, injector, key, function(keys) {
            var first = stringify(keys[0].token);
            return "No provider for " + first + "!" + constructResolvingPath(keys);
          });
        }
        return NoProviderError;
      }(AbstractProviderError));
      $__export("NoProviderError", NoProviderError);
      CyclicDependencyError = (function(_super) {
        __extends(CyclicDependencyError, _super);
        function CyclicDependencyError(injector, key) {
          _super.call(this, injector, key, function(keys) {
            return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
          });
        }
        return CyclicDependencyError;
      }(AbstractProviderError));
      $__export("CyclicDependencyError", CyclicDependencyError);
      InstantiationError = (function(_super) {
        __extends(InstantiationError, _super);
        function InstantiationError(injector, originalException, originalStack, key) {
          _super.call(this, 'DI Error', originalException);
          this.keys = [key];
          this.injectors = [injector];
        }
        InstantiationError.prototype.addKey = function(injector, key) {
          this.injectors.push(injector);
          this.keys.push(key);
        };
        Object.defineProperty(InstantiationError.prototype, "message", {
          get: function() {
            var first = stringify(this.keys[0].token);
            return this.originalError.message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(InstantiationError.prototype, "causeKey", {
          get: function() {
            return this.keys[0];
          },
          enumerable: true,
          configurable: true
        });
        return InstantiationError;
      }(WrappedError));
      $__export("InstantiationError", InstantiationError);
      InvalidProviderError = (function(_super) {
        __extends(InvalidProviderError, _super);
        function InvalidProviderError(provider) {
          _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
        }
        return InvalidProviderError;
      }(BaseError));
      $__export("InvalidProviderError", InvalidProviderError);
      NoAnnotationError = (function(_super) {
        __extends(NoAnnotationError, _super);
        function NoAnnotationError(typeOrFunc, params) {
          _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
        }
        NoAnnotationError._genMessage = function(typeOrFunc, params) {
          var signature = [];
          for (var i = 0,
              ii = params.length; i < ii; i++) {
            var parameter = params[i];
            if (!parameter || parameter.length == 0) {
              signature.push('?');
            } else {
              signature.push(parameter.map(stringify).join(' '));
            }
          }
          return 'Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' + signature.join(', ') + '). ' + 'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' + stringify(typeOrFunc) + '\' is decorated with Injectable.';
        };
        return NoAnnotationError;
      }(BaseError));
      $__export("NoAnnotationError", NoAnnotationError);
      OutOfBoundsError = (function(_super) {
        __extends(OutOfBoundsError, _super);
        function OutOfBoundsError(index) {
          _super.call(this, "Index " + index + " is out-of-bounds.");
        }
        return OutOfBoundsError;
      }(BaseError));
      $__export("OutOfBoundsError", OutOfBoundsError);
      MixingMultiProvidersWithRegularProvidersError = (function(_super) {
        __extends(MixingMultiProvidersWithRegularProvidersError, _super);
        function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
          _super.call(this, 'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' + provider2.toString());
        }
        return MixingMultiProvidersWithRegularProvidersError;
      }(BaseError));
      $__export("MixingMultiProvidersWithRegularProvidersError", MixingMultiProvidersWithRegularProvidersError);
    }
  };
});

$__System.register("1d6", ["188", "189", "19b", "1d7", "1d8", "1d3", "1d4", "1d5"], function($__export) {
  "use strict";
  var MapWrapper,
      isBlank,
      isPresent,
      reflector,
      Type,
      resolveForwardRef,
      Host,
      Inject,
      Optional,
      Self,
      SkipSelf,
      InvalidProviderError,
      MixingMultiProvidersWithRegularProvidersError,
      NoAnnotationError,
      ReflectiveKey,
      ReflectiveDependency,
      _EMPTY_LIST,
      ResolvedReflectiveProvider_,
      ResolvedReflectiveFactory;
  function resolveReflectiveFactory(provider) {
    var factoryFn;
    var resolvedDeps;
    if (isPresent(provider.useClass)) {
      var useClass = resolveForwardRef(provider.useClass);
      factoryFn = reflector.factory(useClass);
      resolvedDeps = _dependenciesFor(useClass);
    } else if (isPresent(provider.useExisting)) {
      factoryFn = function(aliasInstance) {
        return aliasInstance;
      };
      resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
    } else if (isPresent(provider.useFactory)) {
      factoryFn = provider.useFactory;
      resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
    } else {
      factoryFn = function() {
        return provider.useValue;
      };
      resolvedDeps = _EMPTY_LIST;
    }
    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
  }
  function resolveReflectiveProvider(provider) {
    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);
  }
  function resolveReflectiveProviders(providers) {
    var normalized = _normalizeProviders(providers, []);
    var resolved = normalized.map(resolveReflectiveProvider);
    return MapWrapper.values(mergeResolvedReflectiveProviders(resolved, new Map()));
  }
  function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
    for (var i = 0; i < providers.length; i++) {
      var provider = providers[i];
      var existing = normalizedProvidersMap.get(provider.key.id);
      if (isPresent(existing)) {
        if (provider.multiProvider !== existing.multiProvider) {
          throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);
        }
        if (provider.multiProvider) {
          for (var j = 0; j < provider.resolvedFactories.length; j++) {
            existing.resolvedFactories.push(provider.resolvedFactories[j]);
          }
        } else {
          normalizedProvidersMap.set(provider.key.id, provider);
        }
      } else {
        var resolvedProvider = void 0;
        if (provider.multiProvider) {
          resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
        } else {
          resolvedProvider = provider;
        }
        normalizedProvidersMap.set(provider.key.id, resolvedProvider);
      }
    }
    return normalizedProvidersMap;
  }
  function _normalizeProviders(providers, res) {
    providers.forEach(function(b) {
      if (b instanceof Type) {
        res.push({
          provide: b,
          useClass: b
        });
      } else if (b && (typeof b === 'undefined' ? 'undefined' : $traceurRuntime.typeof(b)) == 'object' && b.provide !== undefined) {
        res.push(b);
      } else if (b instanceof Array) {
        _normalizeProviders(b, res);
      } else {
        throw new InvalidProviderError(b);
      }
    });
    return res;
  }
  function constructDependencies(typeOrFunc, dependencies) {
    if (!dependencies) {
      return _dependenciesFor(typeOrFunc);
    } else {
      var params = dependencies.map(function(t) {
        return [t];
      });
      return dependencies.map(function(t) {
        return _extractToken(typeOrFunc, t, params);
      });
    }
  }
  function _dependenciesFor(typeOrFunc) {
    var params = reflector.parameters(typeOrFunc);
    if (!params)
      return [];
    if (params.some(isBlank)) {
      throw new NoAnnotationError(typeOrFunc, params);
    }
    return params.map(function(p) {
      return _extractToken(typeOrFunc, p, params);
    });
  }
  function _extractToken(typeOrFunc, metadata, params) {
    var depProps = [];
    var token = null;
    var optional = false;
    if (!Array.isArray(metadata)) {
      if (metadata instanceof Inject) {
        return _createDependency(metadata.token, optional, null, null, depProps);
      } else {
        return _createDependency(metadata, optional, null, null, depProps);
      }
    }
    var lowerBoundVisibility = null;
    var upperBoundVisibility = null;
    for (var i = 0; i < metadata.length; ++i) {
      var paramMetadata = metadata[i];
      if (paramMetadata instanceof Type) {
        token = paramMetadata;
      } else if (paramMetadata instanceof Inject) {
        token = paramMetadata.token;
      } else if (paramMetadata instanceof Optional) {
        optional = true;
      } else if (paramMetadata instanceof Self) {
        upperBoundVisibility = paramMetadata;
      } else if (paramMetadata instanceof Host) {
        upperBoundVisibility = paramMetadata;
      } else if (paramMetadata instanceof SkipSelf) {
        lowerBoundVisibility = paramMetadata;
      }
    }
    token = resolveForwardRef(token);
    if (isPresent(token)) {
      return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
    } else {
      throw new NoAnnotationError(typeOrFunc, params);
    }
  }
  function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) {
    return new ReflectiveDependency(ReflectiveKey.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
  }
  $__export("resolveReflectiveProviders", resolveReflectiveProviders);
  $__export("mergeResolvedReflectiveProviders", mergeResolvedReflectiveProviders);
  $__export("constructDependencies", constructDependencies);
  return {
    setters: [function($__m) {
      MapWrapper = $__m.MapWrapper;
    }, function($__m) {
      isBlank = $__m.isBlank;
      isPresent = $__m.isPresent;
    }, function($__m) {
      reflector = $__m.reflector;
    }, function($__m) {
      Type = $__m.Type;
    }, function($__m) {
      resolveForwardRef = $__m.resolveForwardRef;
    }, function($__m) {
      Host = $__m.Host;
      Inject = $__m.Inject;
      Optional = $__m.Optional;
      Self = $__m.Self;
      SkipSelf = $__m.SkipSelf;
    }, function($__m) {
      InvalidProviderError = $__m.InvalidProviderError;
      MixingMultiProvidersWithRegularProvidersError = $__m.MixingMultiProvidersWithRegularProvidersError;
      NoAnnotationError = $__m.NoAnnotationError;
    }, function($__m) {
      ReflectiveKey = $__m.ReflectiveKey;
    }],
    execute: function() {
      ReflectiveDependency = (function() {
        function ReflectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
          this.key = key;
          this.optional = optional;
          this.lowerBoundVisibility = lowerBoundVisibility;
          this.upperBoundVisibility = upperBoundVisibility;
          this.properties = properties;
        }
        ReflectiveDependency.fromKey = function(key) {
          return new ReflectiveDependency(key, false, null, null, []);
        };
        return ReflectiveDependency;
      }());
      $__export("ReflectiveDependency", ReflectiveDependency);
      _EMPTY_LIST = [];
      ResolvedReflectiveProvider_ = (function() {
        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
          this.key = key;
          this.resolvedFactories = resolvedFactories;
          this.multiProvider = multiProvider;
        }
        Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
          get: function() {
            return this.resolvedFactories[0];
          },
          enumerable: true,
          configurable: true
        });
        return ResolvedReflectiveProvider_;
      }());
      $__export("ResolvedReflectiveProvider_", ResolvedReflectiveProvider_);
      ResolvedReflectiveFactory = (function() {
        function ResolvedReflectiveFactory(factory, dependencies) {
          this.factory = factory;
          this.dependencies = dependencies;
        }
        return ResolvedReflectiveFactory;
      }());
      $__export("ResolvedReflectiveFactory", ResolvedReflectiveFactory);
    }
  };
});

$__System.register("1d8", ["189"], function($__export) {
  "use strict";
  var stringify;
  function forwardRef(forwardRefFn) {
    forwardRefFn.__forward_ref__ = forwardRef;
    forwardRefFn.toString = function() {
      return stringify(this());
    };
    return forwardRefFn;
  }
  function resolveForwardRef(type) {
    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') && type.__forward_ref__ === forwardRef) {
      return type();
    } else {
      return type;
    }
  }
  $__export("forwardRef", forwardRef);
  $__export("resolveForwardRef", resolveForwardRef);
  return {
    setters: [function($__m) {
      stringify = $__m.stringify;
    }],
    execute: function() {}
  };
});

$__System.register("1d5", ["189", "1d8"], function($__export) {
  "use strict";
  var stringify,
      resolveForwardRef,
      ReflectiveKey,
      KeyRegistry,
      _globalKeyRegistry;
  return {
    setters: [function($__m) {
      stringify = $__m.stringify;
    }, function($__m) {
      resolveForwardRef = $__m.resolveForwardRef;
    }],
    execute: function() {
      ReflectiveKey = (function() {
        function ReflectiveKey(token, id) {
          this.token = token;
          this.id = id;
          if (!token) {
            throw new Error('Token must be defined!');
          }
        }
        Object.defineProperty(ReflectiveKey.prototype, "displayName", {
          get: function() {
            return stringify(this.token);
          },
          enumerable: true,
          configurable: true
        });
        ReflectiveKey.get = function(token) {
          return _globalKeyRegistry.get(resolveForwardRef(token));
        };
        Object.defineProperty(ReflectiveKey, "numberOfKeys", {
          get: function() {
            return _globalKeyRegistry.numberOfKeys;
          },
          enumerable: true,
          configurable: true
        });
        return ReflectiveKey;
      }());
      $__export("ReflectiveKey", ReflectiveKey);
      KeyRegistry = (function() {
        function KeyRegistry() {
          this._allKeys = new Map();
        }
        KeyRegistry.prototype.get = function(token) {
          if (token instanceof ReflectiveKey)
            return token;
          if (this._allKeys.has(token)) {
            return this._allKeys.get(token);
          }
          var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
          this._allKeys.set(token, newKey);
          return newKey;
        };
        Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
          get: function() {
            return this._allKeys.size;
          },
          enumerable: true,
          configurable: true
        });
        return KeyRegistry;
      }());
      $__export("KeyRegistry", KeyRegistry);
      _globalKeyRegistry = new KeyRegistry();
    }
  };
});

$__System.register("1d3", ["181"], function($__export) {
  "use strict";
  var makeParamDecorator,
      Inject,
      Optional,
      Injectable,
      Self,
      SkipSelf,
      Host;
  return {
    setters: [function($__m) {
      makeParamDecorator = $__m.makeParamDecorator;
    }],
    execute: function() {
      Inject = makeParamDecorator('Inject', [['token', undefined]]);
      $__export("Inject", Inject);
      Optional = makeParamDecorator('Optional', []);
      $__export("Optional", Optional);
      Injectable = makeParamDecorator('Injectable', []);
      $__export("Injectable", Injectable);
      Self = makeParamDecorator('Self', []);
      $__export("Self", Self);
      SkipSelf = makeParamDecorator('SkipSelf', []);
      $__export("SkipSelf", SkipSelf);
      Host = makeParamDecorator('Host', []);
      $__export("Host", Host);
    }
  };
});

$__System.register("1a6", ["1d3"], function($__export) {
  "use strict";
  var Injectable,
      OpaqueToken;
  return {
    setters: [function($__m) {
      Injectable = $__m.Injectable;
    }],
    execute: function() {
      OpaqueToken = (function() {
        function OpaqueToken(_desc) {
          this._desc = _desc;
        }
        OpaqueToken.prototype.toString = function() {
          return "Token " + this._desc;
        };
        OpaqueToken.decorators = [{type: Injectable}];
        OpaqueToken.ctorParameters = [null];
        return OpaqueToken;
      }());
      $__export("OpaqueToken", OpaqueToken);
    }
  };
});

$__System.register("18b", ["1d3", "1d8", "1c1", "1d2", "1d6", "1d5", "1a6"], function($__export) {
  "use strict";
  var $__exportNames = {undefined: true};
  return {
    setters: [function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      $__export({
        forwardRef: $__m.forwardRef,
        resolveForwardRef: $__m.resolveForwardRef
      });
    }, function($__m) {
      $__export({Injector: $__m.Injector});
    }, function($__m) {
      $__export({ReflectiveInjector: $__m.ReflectiveInjector});
    }, function($__m) {
      $__export({ResolvedReflectiveFactory: $__m.ResolvedReflectiveFactory});
    }, function($__m) {
      $__export({ReflectiveKey: $__m.ReflectiveKey});
    }, function($__m) {
      $__export({OpaqueToken: $__m.OpaqueToken});
    }],
    execute: function() {}
  };
});

$__System.register("190", [], function($__export) {
  "use strict";
  var ElementRef;
  return {
    setters: [],
    execute: function() {
      ElementRef = (function() {
        function ElementRef(nativeElement) {
          this.nativeElement = nativeElement;
        }
        return ElementRef;
      }());
      $__export("ElementRef", ElementRef);
    }
  };
});

$__System.register("1d9", ["189"], function($__export) {
  "use strict";
  var global,
      trace,
      events;
  function detectWTF() {
    var wtf = global['wtf'];
    if (wtf) {
      trace = wtf['trace'];
      if (trace) {
        events = trace['events'];
        return true;
      }
    }
    return false;
  }
  function createScope(signature, flags) {
    if (flags === void 0) {
      flags = null;
    }
    return events.createScope(signature, flags);
  }
  function leave(scope, returnValue) {
    trace.leaveScope(scope, returnValue);
    return returnValue;
  }
  function startTimeRange(rangeType, action) {
    return trace.beginTimeRange(rangeType, action);
  }
  function endTimeRange(range) {
    trace.endTimeRange(range);
  }
  $__export("detectWTF", detectWTF);
  $__export("createScope", createScope);
  $__export("leave", leave);
  $__export("startTimeRange", startTimeRange);
  $__export("endTimeRange", endTimeRange);
  return {
    setters: [function($__m) {
      global = $__m.global;
    }],
    execute: function() {}
  };
});

$__System.register("1a4", ["1d9"], function($__export) {
  "use strict";
  var createScope,
      detectWTF,
      endTimeRange,
      leave,
      startTimeRange,
      wtfEnabled,
      wtfCreateScope,
      wtfLeave,
      wtfStartTimeRange,
      wtfEndTimeRange;
  function noopScope(arg0, arg1) {
    return null;
  }
  return {
    setters: [function($__m) {
      createScope = $__m.createScope;
      detectWTF = $__m.detectWTF;
      endTimeRange = $__m.endTimeRange;
      leave = $__m.leave;
      startTimeRange = $__m.startTimeRange;
    }],
    execute: function() {
      wtfEnabled = detectWTF();
      $__export("wtfEnabled", wtfEnabled);
      wtfCreateScope = wtfEnabled ? createScope : function(signature, flags) {
        return noopScope;
      };
      $__export("wtfCreateScope", wtfCreateScope);
      wtfLeave = wtfEnabled ? leave : function(s, r) {
        return r;
      };
      $__export("wtfLeave", wtfLeave);
      wtfStartTimeRange = wtfEnabled ? startTimeRange : function(rangeType, action) {
        return null;
      };
      $__export("wtfStartTimeRange", wtfStartTimeRange);
      wtfEndTimeRange = wtfEnabled ? endTimeRange : function(r) {
        return null;
      };
      $__export("wtfEndTimeRange", wtfEndTimeRange);
    }
  };
});

$__System.register("194", ["1a0", "189", "1a4"], function($__export) {
  "use strict";
  var unimplemented,
      isPresent,
      wtfCreateScope,
      wtfLeave,
      ViewContainerRef,
      ViewContainerRef_;
  return {
    setters: [function($__m) {
      unimplemented = $__m.unimplemented;
    }, function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      wtfCreateScope = $__m.wtfCreateScope;
      wtfLeave = $__m.wtfLeave;
    }],
    execute: function() {
      ViewContainerRef = (function() {
        function ViewContainerRef() {}
        Object.defineProperty(ViewContainerRef.prototype, "element", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewContainerRef.prototype, "injector", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewContainerRef.prototype, "parentInjector", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewContainerRef.prototype, "length", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        ;
        return ViewContainerRef;
      }());
      $__export("ViewContainerRef", ViewContainerRef);
      ViewContainerRef_ = (function() {
        function ViewContainerRef_(_element) {
          this._element = _element;
          this._createComponentInContainerScope = wtfCreateScope('ViewContainerRef#createComponent()');
          this._insertScope = wtfCreateScope('ViewContainerRef#insert()');
          this._removeScope = wtfCreateScope('ViewContainerRef#remove()');
          this._detachScope = wtfCreateScope('ViewContainerRef#detach()');
        }
        ViewContainerRef_.prototype.get = function(index) {
          return this._element.nestedViews[index].ref;
        };
        Object.defineProperty(ViewContainerRef_.prototype, "length", {
          get: function() {
            var views = this._element.nestedViews;
            return isPresent(views) ? views.length : 0;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewContainerRef_.prototype, "element", {
          get: function() {
            return this._element.elementRef;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewContainerRef_.prototype, "injector", {
          get: function() {
            return this._element.injector;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
          get: function() {
            return this._element.parentInjector;
          },
          enumerable: true,
          configurable: true
        });
        ViewContainerRef_.prototype.createEmbeddedView = function(templateRef, context, index) {
          if (context === void 0) {
            context = null;
          }
          if (index === void 0) {
            index = -1;
          }
          var viewRef = templateRef.createEmbeddedView(context);
          this.insert(viewRef, index);
          return viewRef;
        };
        ViewContainerRef_.prototype.createComponent = function(componentFactory, index, injector, projectableNodes) {
          if (index === void 0) {
            index = -1;
          }
          if (injector === void 0) {
            injector = null;
          }
          if (projectableNodes === void 0) {
            projectableNodes = null;
          }
          var s = this._createComponentInContainerScope();
          var contextInjector = injector || this._element.parentInjector;
          var componentRef = componentFactory.create(contextInjector, projectableNodes);
          this.insert(componentRef.hostView, index);
          return wtfLeave(s, componentRef);
        };
        ViewContainerRef_.prototype.insert = function(viewRef, index) {
          if (index === void 0) {
            index = -1;
          }
          var s = this._insertScope();
          if (index == -1)
            index = this.length;
          var viewRef_ = viewRef;
          this._element.attachView(viewRef_.internalView, index);
          return wtfLeave(s, viewRef_);
        };
        ViewContainerRef_.prototype.move = function(viewRef, currentIndex) {
          var s = this._insertScope();
          if (currentIndex == -1)
            return;
          var viewRef_ = viewRef;
          this._element.moveView(viewRef_.internalView, currentIndex);
          return wtfLeave(s, viewRef_);
        };
        ViewContainerRef_.prototype.indexOf = function(viewRef) {
          return this._element.nestedViews.indexOf(viewRef.internalView);
        };
        ViewContainerRef_.prototype.remove = function(index) {
          if (index === void 0) {
            index = -1;
          }
          var s = this._removeScope();
          if (index == -1)
            index = this.length - 1;
          var view = this._element.detachView(index);
          view.destroy();
          wtfLeave(s);
        };
        ViewContainerRef_.prototype.detach = function(index) {
          if (index === void 0) {
            index = -1;
          }
          var s = this._detachScope();
          if (index == -1)
            index = this.length - 1;
          var view = this._element.detachView(index);
          return wtfLeave(s, view.ref);
        };
        ViewContainerRef_.prototype.clear = function() {
          for (var i = this.length - 1; i >= 0; i--) {
            this.remove(i);
          }
        };
        return ViewContainerRef_;
      }());
      $__export("ViewContainerRef_", ViewContainerRef_);
    }
  };
});

$__System.register("1c7", [], function($__export) {
  "use strict";
  var ViewType;
  return {
    setters: [],
    execute: function() {
      $__export("ViewType", ViewType);
      (function(ViewType) {
        ViewType[ViewType["HOST"] = 0] = "HOST";
        ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
        ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
      })(ViewType || ($__export("ViewType", ViewType = {})));
    }
  };
});

$__System.register("1ca", ["189", "190", "194", "1c7"], function($__export) {
  "use strict";
  var isPresent,
      ElementRef,
      ViewContainerRef_,
      ViewType,
      AppElement;
  return {
    setters: [function($__m) {
      isPresent = $__m.isPresent;
    }, function($__m) {
      ElementRef = $__m.ElementRef;
    }, function($__m) {
      ViewContainerRef_ = $__m.ViewContainerRef_;
    }, function($__m) {
      ViewType = $__m.ViewType;
    }],
    execute: function() {
      AppElement = (function() {
        function AppElement(index, parentIndex, parentView, nativeElement) {
          this.index = index;
          this.parentIndex = parentIndex;
          this.parentView = parentView;
          this.nativeElement = nativeElement;
          this.nestedViews = null;
          this.componentView = null;
        }
        Object.defineProperty(AppElement.prototype, "elementRef", {
          get: function() {
            return new ElementRef(this.nativeElement);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AppElement.prototype, "vcRef", {
          get: function() {
            return new ViewContainerRef_(this);
          },
          enumerable: true,
          configurable: true
        });
        AppElement.prototype.initComponent = function(component, componentConstructorViewQueries, view) {
          this.component = component;
          this.componentConstructorViewQueries = componentConstructorViewQueries;
          this.componentView = view;
        };
        Object.defineProperty(AppElement.prototype, "parentInjector", {
          get: function() {
            return this.parentView.injector(this.parentIndex);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(AppElement.prototype, "injector", {
          get: function() {
            return this.parentView.injector(this.index);
          },
          enumerable: true,
          configurable: true
        });
        AppElement.prototype.mapNestedViews = function(nestedViewClass, callback) {
          var result = [];
          if (isPresent(this.nestedViews)) {
            this.nestedViews.forEach(function(nestedView) {
              if (nestedView.clazz === nestedViewClass) {
                result.push(callback(nestedView));
              }
            });
          }
          return result;
        };
        AppElement.prototype.moveView = function(view, currentIndex) {
          var previousIndex = this.nestedViews.indexOf(view);
          if (view.type === ViewType.COMPONENT) {
            throw new Error("Component views can't be moved!");
          }
          var nestedViews = this.nestedViews;
          if (nestedViews == null) {
            nestedViews = [];
            this.nestedViews = nestedViews;
          }
          nestedViews.splice(previousIndex, 1);
          nestedViews.splice(currentIndex, 0, view);
          var refRenderNode;
          if (currentIndex > 0) {
            var prevView = nestedViews[currentIndex - 1];
            refRenderNode = prevView.lastRootNode;
          } else {
            refRenderNode = this.nativeElement;
          }
          if (isPresent(refRenderNode)) {
            view.renderer.attachViewAfter(refRenderNode, view.flatRootNodes);
          }
          view.markContentChildAsMoved(this);
        };
        AppElement.prototype.attachView = function(view, viewIndex) {
          if (view.type === ViewType.COMPONENT) {
            throw new Error("Component views can't be moved!");
          }
          var nestedViews = this.nestedViews;
          if (nestedViews == null) {
            nestedViews = [];
            this.nestedViews = nestedViews;
          }
          nestedViews.splice(viewIndex, 0, view);
          var refRenderNode;
          if (viewIndex > 0) {
            var prevView = nestedViews[viewIndex - 1];
            refRenderNode = prevView.lastRootNode;
          } else {
            refRenderNode = this.nativeElement;
          }
          if (isPresent(refRenderNode)) {
            view.renderer.attachViewAfter(refRenderNode, view.flatRootNodes);
          }
          view.addToContentChildren(this);
        };
        AppElement.prototype.detachView = function(viewIndex) {
          var view = this.nestedViews.splice(viewIndex, 1)[0];
          if (view.type === ViewType.COMPONENT) {
            throw new Error("Component views can't be moved!");
          }
          view.detach();
          view.removeFromContentChildren(this);
          return view;
        };
        return AppElement;
      }());
      $__export("AppElement", AppElement);
    }
  };
});

$__System.register("188", ["189"], function($__export) {
  "use strict";
  var getSymbolIterator,
      isJsObject,
      isPresent,
      _arrayFromMap,
      MapWrapper,
      StringMapWrapper,
      ListWrapper;
  function _flattenArray(source, target) {
    if (isPresent(source)) {
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        if (Array.isArray(item)) {
          _flattenArray(item, target);
        } else {
          target.push(item);
        }
      }
    }
    return target;
  }
  function isListLikeIterable(obj) {
    if (!isJsObject(obj))
      return false;
    return Array.isArray(obj) || (!(obj instanceof Map) && getSymbolIterator() in obj);
  }
  function areIterablesEqual(a, b, comparator) {
    var iterator1 = a[getSymbolIterator()]();
    var iterator2 = b[getSymbolIterator()]();
    while (true) {
      var item1 = iterator1.next();
      var item2 = iterator2.next();
      if (item1.done && item2.done)
        return true;
      if (item1.done || item2.done)
        return false;
      if (!comparator(item1.value, item2.value))
        return false;
    }
  }
  function iterateListLike(obj, fn) {
    if (Array.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        fn(obj[i]);
      }
    } else {
      var iterator = obj[getSymbolIterator()]();
      var item = void 0;
      while (!((item = iterator.next()).done)) {
        fn(item.value);
      }
    }
  }
  $__export("isListLikeIterable", isListLikeIterable);
  $__export("areIterablesEqual", areIterablesEqual);
  $__export("iterateListLike", iterateListLike);
  return {
    setters: [function($__m) {
      getSymbolIterator = $__m.getSymbolIterator;
      isJsObject = $__m.isJsObject;
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      _arrayFromMap = (function() {
        try {
          if ((new Map()).values().next) {
            return function createArrayFromMap(m, getValues) {
              return getValues ? Array.from(m.values()) : Array.from(m.keys());
            };
          }
        } catch (e) {}
        return function createArrayFromMapWithForeach(m, getValues) {
          var res = new Array(m.size),
              i = 0;
          m.forEach(function(v, k) {
            res[i] = getValues ? v : k;
            i++;
          });
          return res;
        };
      })();
      MapWrapper = (function() {
        function MapWrapper() {}
        MapWrapper.createFromStringMap = function(stringMap) {
          var result = new Map();
          for (var prop in stringMap) {
            result.set(prop, stringMap[prop]);
          }
          return result;
        };
        MapWrapper.keys = function(m) {
          return _arrayFromMap(m, false);
        };
        MapWrapper.values = function(m) {
          return _arrayFromMap(m, true);
        };
        return MapWrapper;
      }());
      $__export("MapWrapper", MapWrapper);
      StringMapWrapper = (function() {
        function StringMapWrapper() {}
        StringMapWrapper.merge = function(m1, m2) {
          var m = {};
          for (var _i = 0,
              _a = Object.keys(m1); _i < _a.length; _i++) {
            var k = _a[_i];
            m[k] = m1[k];
          }
          for (var _b = 0,
              _c = Object.keys(m2); _b < _c.length; _b++) {
            var k = _c[_b];
            m[k] = m2[k];
          }
          return m;
        };
        StringMapWrapper.equals = function(m1, m2) {
          var k1 = Object.keys(m1);
          var k2 = Object.keys(m2);
          if (k1.length != k2.length) {
            return false;
          }
          for (var i = 0; i < k1.length; i++) {
            var key = k1[i];
            if (m1[key] !== m2[key]) {
              return false;
            }
          }
          return true;
        };
        return StringMapWrapper;
      }());
      $__export("StringMapWrapper", StringMapWrapper);
      ListWrapper = (function() {
        function ListWrapper() {}
        ListWrapper.removeAll = function(list, items) {
          for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            list.splice(index, 1);
          }
        };
        ListWrapper.remove = function(list, el) {
          var index = list.indexOf(el);
          if (index > -1) {
            list.splice(index, 1);
            return true;
          }
          return false;
        };
        ListWrapper.equals = function(a, b) {
          if (a.length != b.length)
            return false;
          for (var i = 0; i < a.length; ++i) {
            if (a[i] !== b[i])
              return false;
          }
          return true;
        };
        ListWrapper.maximum = function(list, predicate) {
          if (list.length == 0) {
            return null;
          }
          var solution = null;
          var maxValue = -Infinity;
          for (var index = 0; index < list.length; index++) {
            var candidate = list[index];
            if (candidate == null) {
              continue;
            }
            var candidateValue = predicate(candidate);
            if (candidateValue > maxValue) {
              solution = candidate;
              maxValue = candidateValue;
            }
          }
          return solution;
        };
        ListWrapper.flatten = function(list) {
          var target = [];
          _flattenArray(list, target);
          return target;
        };
        return ListWrapper;
      }());
      $__export("ListWrapper", ListWrapper);
    }
  };
});

$__System.register("1d1", ["188", "189"], function($__export) {
  "use strict";
  var areIterablesEqual,
      isListLikeIterable,
      isPrimitive,
      looseIdentical,
      UNINITIALIZED,
      WrappedValue,
      ValueUnwrapper,
      SimpleChange;
  function devModeEqual(a, b) {
    if (isListLikeIterable(a) && isListLikeIterable(b)) {
      return areIterablesEqual(a, b, devModeEqual);
    } else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {
      return true;
    } else {
      return looseIdentical(a, b);
    }
  }
  $__export("devModeEqual", devModeEqual);
  return {
    setters: [function($__m) {
      areIterablesEqual = $__m.areIterablesEqual;
      isListLikeIterable = $__m.isListLikeIterable;
    }, function($__m) {
      isPrimitive = $__m.isPrimitive;
      looseIdentical = $__m.looseIdentical;
      $__export({looseIdentical: $__m.looseIdentical});
    }],
    execute: function() {
      UNINITIALIZED = {toString: function() {
          return 'CD_INIT_VALUE';
        }};
      $__export("UNINITIALIZED", UNINITIALIZED);
      WrappedValue = (function() {
        function WrappedValue(wrapped) {
          this.wrapped = wrapped;
        }
        WrappedValue.wrap = function(value) {
          return new WrappedValue(value);
        };
        return WrappedValue;
      }());
      $__export("WrappedValue", WrappedValue);
      ValueUnwrapper = (function() {
        function ValueUnwrapper() {
          this.hasWrappedValue = false;
        }
        ValueUnwrapper.prototype.unwrap = function(value) {
          if (value instanceof WrappedValue) {
            this.hasWrappedValue = true;
            return value.wrapped;
          }
          return value;
        };
        ValueUnwrapper.prototype.reset = function() {
          this.hasWrappedValue = false;
        };
        return ValueUnwrapper;
      }());
      $__export("ValueUnwrapper", ValueUnwrapper);
      SimpleChange = (function() {
        function SimpleChange(previousValue, currentValue) {
          this.previousValue = previousValue;
          this.currentValue = currentValue;
        }
        SimpleChange.prototype.isFirstChange = function() {
          return this.previousValue === UNINITIALIZED;
        };
        return SimpleChange;
      }());
      $__export("SimpleChange", SimpleChange);
    }
  };
});

$__System.register("1cb", ["1d1", "1a0"], function($__export) {
  "use strict";
  var __extends,
      UNINITIALIZED,
      BaseError,
      WrappedError,
      ExpressionChangedAfterItHasBeenCheckedError,
      ViewWrappedError,
      ViewDestroyedError;
  return {
    setters: [function($__m) {
      UNINITIALIZED = $__m.UNINITIALIZED;
    }, function($__m) {
      BaseError = $__m.BaseError;
      WrappedError = $__m.WrappedError;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      ExpressionChangedAfterItHasBeenCheckedError = (function(_super) {
        __extends(ExpressionChangedAfterItHasBeenCheckedError, _super);
        function ExpressionChangedAfterItHasBeenCheckedError(oldValue, currValue) {
          var msg = "Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
          if (oldValue === UNINITIALIZED) {
            msg += " It seems like the view has been created after its parent and its children have been dirty checked." + " Has it been created in a change detection hook ?";
          }
          _super.call(this, msg);
        }
        return ExpressionChangedAfterItHasBeenCheckedError;
      }(BaseError));
      $__export("ExpressionChangedAfterItHasBeenCheckedError", ExpressionChangedAfterItHasBeenCheckedError);
      ViewWrappedError = (function(_super) {
        __extends(ViewWrappedError, _super);
        function ViewWrappedError(originalError, context) {
          _super.call(this, "Error in " + context.source, originalError);
          this.context = context;
        }
        return ViewWrappedError;
      }(WrappedError));
      $__export("ViewWrappedError", ViewWrappedError);
      ViewDestroyedError = (function(_super) {
        __extends(ViewDestroyedError, _super);
        function ViewDestroyedError(details) {
          _super.call(this, "Attempt to use a destroyed view: " + details);
        }
        return ViewDestroyedError;
      }(BaseError));
      $__export("ViewDestroyedError", ViewDestroyedError);
    }
  };
});

$__System.register("1a1", ["1a3", "197", "1d1", "18b", "189", "185", "1da", "1ca", "1cb"], function($__export) {
  "use strict";
  var APP_ID,
      devModeEqual,
      UNINITIALIZED,
      Inject,
      Injectable,
      isPresent,
      looseIdentical,
      RenderComponentType,
      RootRenderer,
      Sanitizer,
      AppElement,
      ExpressionChangedAfterItHasBeenCheckedError,
      ViewUtils,
      EMPTY_ARR,
      MAX_INTERPOLATION_VALUES,
      EMPTY_ARRAY,
      EMPTY_MAP,
      CAMEL_CASE_REGEXP,
      InlineArray0,
      InlineArray2,
      InlineArray4,
      InlineArray8,
      InlineArray16,
      InlineArrayDynamic,
      EMPTY_INLINE_ARRAY;
  function flattenNestedViewRenderNodes(nodes) {
    return _flattenNestedViewRenderNodes(nodes, []);
  }
  function _flattenNestedViewRenderNodes(nodes, renderNodes) {
    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      if (node instanceof AppElement) {
        var appEl = node;
        renderNodes.push(appEl.nativeElement);
        if (isPresent(appEl.nestedViews)) {
          for (var k = 0; k < appEl.nestedViews.length; k++) {
            _flattenNestedViewRenderNodes(appEl.nestedViews[k].rootNodesOrAppElements, renderNodes);
          }
        }
      } else {
        renderNodes.push(node);
      }
    }
    return renderNodes;
  }
  function ensureSlotCount(projectableNodes, expectedSlotCount) {
    var res;
    if (!projectableNodes) {
      res = EMPTY_ARR;
    } else if (projectableNodes.length < expectedSlotCount) {
      var givenSlotCount = projectableNodes.length;
      res = new Array(expectedSlotCount);
      for (var i = 0; i < expectedSlotCount; i++) {
        res[i] = (i < givenSlotCount) ? projectableNodes[i] : EMPTY_ARR;
      }
    } else {
      res = projectableNodes;
    }
    return res;
  }
  function interpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
    switch (valueCount) {
      case 1:
        return c0 + _toStringWithNull(a1) + c1;
      case 2:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
      case 3:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;
      case 4:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;
      case 5:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
      case 6:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
      case 7:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;
      case 8:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
      case 9:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
      default:
        throw new Error("Does not support more than 9 expressions");
    }
  }
  function _toStringWithNull(v) {
    return v != null ? v.toString() : '';
  }
  function checkBinding(throwOnChange, oldValue, newValue) {
    if (throwOnChange) {
      if (!devModeEqual(oldValue, newValue)) {
        throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue);
      }
      return false;
    } else {
      return !looseIdentical(oldValue, newValue);
    }
  }
  function castByValue(input, value) {
    return input;
  }
  function pureProxy1(fn) {
    var result;
    var v0 = UNINITIALIZED;
    return function(p0) {
      if (!looseIdentical(v0, p0)) {
        v0 = p0;
        result = fn(p0);
      }
      return result;
    };
  }
  function pureProxy2(fn) {
    var result;
    var v0 = UNINITIALIZED;
    var v1 = UNINITIALIZED;
    return function(p0, p1) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {
        v0 = p0;
        v1 = p1;
        result = fn(p0, p1);
      }
      return result;
    };
  }
  function pureProxy3(fn) {
    var result;
    var v0 = UNINITIALIZED;
    var v1 = UNINITIALIZED;
    var v2 = UNINITIALIZED;
    return function(p0, p1, p2) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        result = fn(p0, p1, p2);
      }
      return result;
    };
  }
  function pureProxy4(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3;
    v0 = v1 = v2 = v3 = UNINITIALIZED;
    return function(p0, p1, p2, p3) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        result = fn(p0, p1, p2, p3);
      }
      return result;
    };
  }
  function pureProxy5(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4;
    v0 = v1 = v2 = v3 = v4 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        result = fn(p0, p1, p2, p3, p4);
      }
      return result;
    };
  }
  function pureProxy6(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5;
    v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        result = fn(p0, p1, p2, p3, p4, p5);
      }
      return result;
    };
  }
  function pureProxy7(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5, p6) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        v6 = p6;
        result = fn(p0, p1, p2, p3, p4, p5, p6);
      }
      return result;
    };
  }
  function pureProxy8(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5, p6, p7) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        v6 = p6;
        v7 = p7;
        result = fn(p0, p1, p2, p3, p4, p5, p6, p7);
      }
      return result;
    };
  }
  function pureProxy9(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7,
        v8;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        v6 = p6;
        v7 = p7;
        v8 = p8;
        result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);
      }
      return result;
    };
  }
  function pureProxy10(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7,
        v8,
        v9;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) || !looseIdentical(v9, p9)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        v6 = p6;
        v7 = p7;
        v8 = p8;
        v9 = p9;
        result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
      }
      return result;
    };
  }
  function setBindingDebugInfoForChanges(renderer, el, changes) {
    Object.keys(changes).forEach(function(propName) {
      setBindingDebugInfo(renderer, el, propName, changes[propName].currentValue);
    });
  }
  function setBindingDebugInfo(renderer, el, propName, value) {
    try {
      renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), value ? value.toString() : null);
    } catch (e) {
      renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), '[ERROR] Exception while trying to serialize the value');
    }
  }
  function camelCaseToDashCase(input) {
    return input.replace(CAMEL_CASE_REGEXP, function() {
      var m = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        m[_i - 0] = arguments[_i];
      }
      return '-' + m[1].toLowerCase();
    });
  }
  function createRenderElement(renderer, parentElement, name, attrs, debugInfo) {
    var el = renderer.createElement(parentElement, name, debugInfo);
    for (var i = 0; i < attrs.length; i += 2) {
      renderer.setElementAttribute(el, attrs.get(i), attrs.get(i + 1));
    }
    return el;
  }
  function selectOrCreateRenderHostElement(renderer, elementName, attrs, rootSelectorOrNode, debugInfo) {
    var hostElement;
    if (isPresent(rootSelectorOrNode)) {
      hostElement = renderer.selectRootElement(rootSelectorOrNode, debugInfo);
    } else {
      hostElement = createRenderElement(renderer, null, elementName, attrs, debugInfo);
    }
    return hostElement;
  }
  $__export("flattenNestedViewRenderNodes", flattenNestedViewRenderNodes);
  $__export("ensureSlotCount", ensureSlotCount);
  $__export("interpolate", interpolate);
  $__export("checkBinding", checkBinding);
  $__export("castByValue", castByValue);
  $__export("pureProxy1", pureProxy1);
  $__export("pureProxy2", pureProxy2);
  $__export("pureProxy3", pureProxy3);
  $__export("pureProxy4", pureProxy4);
  $__export("pureProxy5", pureProxy5);
  $__export("pureProxy6", pureProxy6);
  $__export("pureProxy7", pureProxy7);
  $__export("pureProxy8", pureProxy8);
  $__export("pureProxy9", pureProxy9);
  $__export("pureProxy10", pureProxy10);
  $__export("setBindingDebugInfoForChanges", setBindingDebugInfoForChanges);
  $__export("setBindingDebugInfo", setBindingDebugInfo);
  $__export("createRenderElement", createRenderElement);
  $__export("selectOrCreateRenderHostElement", selectOrCreateRenderHostElement);
  return {
    setters: [function($__m) {
      APP_ID = $__m.APP_ID;
    }, function($__m) {
      devModeEqual = $__m.devModeEqual;
    }, function($__m) {
      UNINITIALIZED = $__m.UNINITIALIZED;
    }, function($__m) {
      Inject = $__m.Inject;
      Injectable = $__m.Injectable;
    }, function($__m) {
      isPresent = $__m.isPresent;
      looseIdentical = $__m.looseIdentical;
    }, function($__m) {
      RenderComponentType = $__m.RenderComponentType;
      RootRenderer = $__m.RootRenderer;
    }, function($__m) {
      Sanitizer = $__m.Sanitizer;
    }, function($__m) {
      AppElement = $__m.AppElement;
    }, function($__m) {
      ExpressionChangedAfterItHasBeenCheckedError = $__m.ExpressionChangedAfterItHasBeenCheckedError;
    }],
    execute: function() {
      ViewUtils = (function() {
        function ViewUtils(_renderer, _appId, sanitizer) {
          this._renderer = _renderer;
          this._appId = _appId;
          this._nextCompTypeId = 0;
          this.sanitizer = sanitizer;
        }
        ViewUtils.prototype.createRenderComponentType = function(templateUrl, slotCount, encapsulation, styles, animations) {
          return new RenderComponentType(this._appId + "-" + this._nextCompTypeId++, templateUrl, slotCount, encapsulation, styles, animations);
        };
        ViewUtils.prototype.renderComponent = function(renderComponentType) {
          return this._renderer.renderComponent(renderComponentType);
        };
        ViewUtils.decorators = [{type: Injectable}];
        ViewUtils.ctorParameters = [{type: RootRenderer}, {
          type: undefined,
          decorators: [{
            type: Inject,
            args: [APP_ID]
          }]
        }, {type: Sanitizer}];
        return ViewUtils;
      }());
      $__export("ViewUtils", ViewUtils);
      EMPTY_ARR = [];
      MAX_INTERPOLATION_VALUES = 9;
      $__export("MAX_INTERPOLATION_VALUES", MAX_INTERPOLATION_VALUES);
      EMPTY_ARRAY = [];
      $__export("EMPTY_ARRAY", EMPTY_ARRAY);
      EMPTY_MAP = {};
      $__export("EMPTY_MAP", EMPTY_MAP);
      CAMEL_CASE_REGEXP = /([A-Z])/g;
      InlineArray0 = (function() {
        function InlineArray0() {
          this.length = 0;
        }
        InlineArray0.prototype.get = function(index) {
          return undefined;
        };
        return InlineArray0;
      }());
      InlineArray2 = (function() {
        function InlineArray2(length, _v0, _v1) {
          this.length = length;
          this._v0 = _v0;
          this._v1 = _v1;
        }
        InlineArray2.prototype.get = function(index) {
          switch (index) {
            case 0:
              return this._v0;
            case 1:
              return this._v1;
            default:
              return undefined;
          }
        };
        return InlineArray2;
      }());
      $__export("InlineArray2", InlineArray2);
      InlineArray4 = (function() {
        function InlineArray4(length, _v0, _v1, _v2, _v3) {
          this.length = length;
          this._v0 = _v0;
          this._v1 = _v1;
          this._v2 = _v2;
          this._v3 = _v3;
        }
        InlineArray4.prototype.get = function(index) {
          switch (index) {
            case 0:
              return this._v0;
            case 1:
              return this._v1;
            case 2:
              return this._v2;
            case 3:
              return this._v3;
            default:
              return undefined;
          }
        };
        return InlineArray4;
      }());
      $__export("InlineArray4", InlineArray4);
      InlineArray8 = (function() {
        function InlineArray8(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {
          this.length = length;
          this._v0 = _v0;
          this._v1 = _v1;
          this._v2 = _v2;
          this._v3 = _v3;
          this._v4 = _v4;
          this._v5 = _v5;
          this._v6 = _v6;
          this._v7 = _v7;
        }
        InlineArray8.prototype.get = function(index) {
          switch (index) {
            case 0:
              return this._v0;
            case 1:
              return this._v1;
            case 2:
              return this._v2;
            case 3:
              return this._v3;
            case 4:
              return this._v4;
            case 5:
              return this._v5;
            case 6:
              return this._v6;
            case 7:
              return this._v7;
            default:
              return undefined;
          }
        };
        return InlineArray8;
      }());
      $__export("InlineArray8", InlineArray8);
      InlineArray16 = (function() {
        function InlineArray16(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8, _v9, _v10, _v11, _v12, _v13, _v14, _v15) {
          this.length = length;
          this._v0 = _v0;
          this._v1 = _v1;
          this._v2 = _v2;
          this._v3 = _v3;
          this._v4 = _v4;
          this._v5 = _v5;
          this._v6 = _v6;
          this._v7 = _v7;
          this._v8 = _v8;
          this._v9 = _v9;
          this._v10 = _v10;
          this._v11 = _v11;
          this._v12 = _v12;
          this._v13 = _v13;
          this._v14 = _v14;
          this._v15 = _v15;
        }
        InlineArray16.prototype.get = function(index) {
          switch (index) {
            case 0:
              return this._v0;
            case 1:
              return this._v1;
            case 2:
              return this._v2;
            case 3:
              return this._v3;
            case 4:
              return this._v4;
            case 5:
              return this._v5;
            case 6:
              return this._v6;
            case 7:
              return this._v7;
            case 8:
              return this._v8;
            case 9:
              return this._v9;
            case 10:
              return this._v10;
            case 11:
              return this._v11;
            case 12:
              return this._v12;
            case 13:
              return this._v13;
            case 14:
              return this._v14;
            case 15:
              return this._v15;
            default:
              return undefined;
          }
        };
        return InlineArray16;
      }());
      $__export("InlineArray16", InlineArray16);
      InlineArrayDynamic = (function() {
        function InlineArrayDynamic(length) {
          var values = [];
          for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
          }
          this.length = length;
          this._values = values;
        }
        InlineArrayDynamic.prototype.get = function(index) {
          return this._values[index];
        };
        return InlineArrayDynamic;
      }());
      $__export("InlineArrayDynamic", InlineArrayDynamic);
      EMPTY_INLINE_ARRAY = new InlineArray0();
      $__export("EMPTY_INLINE_ARRAY", EMPTY_INLINE_ARRAY);
    }
  };
});

$__System.register("1ac", [], function($__export) {
  "use strict";
  var LifecycleHooks,
      LIFECYCLE_HOOKS_VALUES,
      OnChanges,
      OnInit,
      DoCheck,
      OnDestroy,
      AfterContentInit,
      AfterContentChecked,
      AfterViewInit,
      AfterViewChecked;
  return {
    setters: [],
    execute: function() {
      $__export("LifecycleHooks", LifecycleHooks);
      (function(LifecycleHooks) {
        LifecycleHooks[LifecycleHooks["OnInit"] = 0] = "OnInit";
        LifecycleHooks[LifecycleHooks["OnDestroy"] = 1] = "OnDestroy";
        LifecycleHooks[LifecycleHooks["DoCheck"] = 2] = "DoCheck";
        LifecycleHooks[LifecycleHooks["OnChanges"] = 3] = "OnChanges";
        LifecycleHooks[LifecycleHooks["AfterContentInit"] = 4] = "AfterContentInit";
        LifecycleHooks[LifecycleHooks["AfterContentChecked"] = 5] = "AfterContentChecked";
        LifecycleHooks[LifecycleHooks["AfterViewInit"] = 6] = "AfterViewInit";
        LifecycleHooks[LifecycleHooks["AfterViewChecked"] = 7] = "AfterViewChecked";
      })(LifecycleHooks || ($__export("LifecycleHooks", LifecycleHooks = {})));
      LIFECYCLE_HOOKS_VALUES = [LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges, LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit, LifecycleHooks.AfterViewChecked];
      $__export("LIFECYCLE_HOOKS_VALUES", LIFECYCLE_HOOKS_VALUES);
      OnChanges = (function() {
        function OnChanges() {}
        return OnChanges;
      }());
      $__export("OnChanges", OnChanges);
      OnInit = (function() {
        function OnInit() {}
        return OnInit;
      }());
      $__export("OnInit", OnInit);
      DoCheck = (function() {
        function DoCheck() {}
        return DoCheck;
      }());
      $__export("DoCheck", DoCheck);
      OnDestroy = (function() {
        function OnDestroy() {}
        return OnDestroy;
      }());
      $__export("OnDestroy", OnDestroy);
      AfterContentInit = (function() {
        function AfterContentInit() {}
        return AfterContentInit;
      }());
      $__export("AfterContentInit", AfterContentInit);
      AfterContentChecked = (function() {
        function AfterContentChecked() {}
        return AfterContentChecked;
      }());
      $__export("AfterContentChecked", AfterContentChecked);
      AfterViewInit = (function() {
        function AfterViewInit() {}
        return AfterViewInit;
      }());
      $__export("AfterViewInit", AfterViewInit);
      AfterViewChecked = (function() {
        function AfterViewChecked() {}
        return AfterViewChecked;
      }());
      $__export("AfterViewChecked", AfterViewChecked);
    }
  };
});

$__System.register("1ad", [], function($__export) {
  "use strict";
  var ViewEncapsulation,
      ViewMetadata;
  return {
    setters: [],
    execute: function() {
      $__export("ViewEncapsulation", ViewEncapsulation);
      (function(ViewEncapsulation) {
        ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
        ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
        ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
      })(ViewEncapsulation || ($__export("ViewEncapsulation", ViewEncapsulation = {})));
      ViewMetadata = (function() {
        function ViewMetadata(_a) {
          var _b = _a === void 0 ? {} : _a,
              templateUrl = _b.templateUrl,
              template = _b.template,
              encapsulation = _b.encapsulation,
              styles = _b.styles,
              styleUrls = _b.styleUrls,
              animations = _b.animations,
              interpolation = _b.interpolation;
          this.templateUrl = templateUrl;
          this.template = template;
          this.styleUrls = styleUrls;
          this.styles = styles;
          this.encapsulation = encapsulation;
          this.animations = animations;
          this.interpolation = interpolation;
        }
        return ViewMetadata;
      }());
      $__export("ViewMetadata", ViewMetadata);
    }
  };
});

$__System.register("1db", ["19c"], function($__export) {
  "use strict";
  var __extends,
      ReflectorReader,
      Reflector;
  return {
    setters: [function($__m) {
      ReflectorReader = $__m.ReflectorReader;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      Reflector = (function(_super) {
        __extends(Reflector, _super);
        function Reflector(reflectionCapabilities) {
          _super.call(this);
          this.reflectionCapabilities = reflectionCapabilities;
        }
        Reflector.prototype.updateCapabilities = function(caps) {
          this.reflectionCapabilities = caps;
        };
        Reflector.prototype.factory = function(type) {
          return this.reflectionCapabilities.factory(type);
        };
        Reflector.prototype.parameters = function(typeOrFunc) {
          return this.reflectionCapabilities.parameters(typeOrFunc);
        };
        Reflector.prototype.annotations = function(typeOrFunc) {
          return this.reflectionCapabilities.annotations(typeOrFunc);
        };
        Reflector.prototype.propMetadata = function(typeOrFunc) {
          return this.reflectionCapabilities.propMetadata(typeOrFunc);
        };
        Reflector.prototype.hasLifecycleHook = function(type, lcProperty) {
          return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
        };
        Reflector.prototype.getter = function(name) {
          return this.reflectionCapabilities.getter(name);
        };
        Reflector.prototype.setter = function(name) {
          return this.reflectionCapabilities.setter(name);
        };
        Reflector.prototype.method = function(name) {
          return this.reflectionCapabilities.method(name);
        };
        Reflector.prototype.importUri = function(type) {
          return this.reflectionCapabilities.importUri(type);
        };
        Reflector.prototype.resolveIdentifier = function(name, moduleUrl, runtime) {
          return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, runtime);
        };
        Reflector.prototype.resolveEnum = function(identifier, name) {
          return this.reflectionCapabilities.resolveEnum(identifier, name);
        };
        return Reflector;
      }(ReflectorReader));
      $__export("Reflector", Reflector);
    }
  };
});

$__System.register("19b", ["1dc", "1db"], function($__export) {
  "use strict";
  var ReflectionCapabilities,
      Reflector,
      reflector;
  return {
    setters: [function($__m) {
      ReflectionCapabilities = $__m.ReflectionCapabilities;
    }, function($__m) {
      Reflector = $__m.Reflector;
      $__export({Reflector: $__m.Reflector});
    }],
    execute: function() {
      reflector = new Reflector(new ReflectionCapabilities());
      $__export("reflector", reflector);
    }
  };
});

$__System.register("1d7", [], function($__export) {
  "use strict";
  var Type;
  return {
    setters: [],
    execute: function() {
      Type = Function;
      $__export("Type", Type);
    }
  };
});

$__System.register("1dc", ["189", "1d7"], function($__export) {
  "use strict";
  var global,
      isPresent,
      stringify,
      Type,
      ReflectionCapabilities;
  function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
    if (!decoratorInvocations) {
      return [];
    }
    return decoratorInvocations.map(function(decoratorInvocation) {
      var decoratorType = decoratorInvocation.type;
      var annotationCls = decoratorType.annotationCls;
      var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
      return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();
    });
  }
  return {
    setters: [function($__m) {
      global = $__m.global;
      isPresent = $__m.isPresent;
      stringify = $__m.stringify;
    }, function($__m) {
      Type = $__m.Type;
    }],
    execute: function() {
      ReflectionCapabilities = (function() {
        function ReflectionCapabilities(reflect) {
          this._reflect = reflect || global.Reflect;
        }
        ReflectionCapabilities.prototype.isReflectionEnabled = function() {
          return true;
        };
        ReflectionCapabilities.prototype.factory = function(t) {
          return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i - 0] = arguments[_i];
            }
            return new (t.bind.apply(t, [void 0].concat(args)))();
          };
        };
        ReflectionCapabilities.prototype._zipTypesAndAnnotations = function(paramTypes, paramAnnotations) {
          var result;
          if (typeof paramTypes === 'undefined') {
            result = new Array(paramAnnotations.length);
          } else {
            result = new Array(paramTypes.length);
          }
          for (var i = 0; i < result.length; i++) {
            if (typeof paramTypes === 'undefined') {
              result[i] = [];
            } else if (paramTypes[i] != Object) {
              result[i] = [paramTypes[i]];
            } else {
              result[i] = [];
            }
            if (paramAnnotations && isPresent(paramAnnotations[i])) {
              result[i] = result[i].concat(paramAnnotations[i]);
            }
          }
          return result;
        };
        ReflectionCapabilities.prototype.parameters = function(type) {
          if (type.parameters) {
            return type.parameters;
          }
          if (type.ctorParameters) {
            var ctorParameters = type.ctorParameters;
            var paramTypes = ctorParameters.map(function(ctorParam) {
              return ctorParam && ctorParam.type;
            });
            var paramAnnotations = ctorParameters.map(function(ctorParam) {
              return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
            });
            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
          }
          if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {
            var paramAnnotations = this._reflect.getMetadata('parameters', type);
            var paramTypes = this._reflect.getMetadata('design:paramtypes', type);
            if (paramTypes || paramAnnotations) {
              return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
            }
          }
          return new Array(type.length).fill(undefined);
        };
        ReflectionCapabilities.prototype.annotations = function(typeOrFunc) {
          if (typeOrFunc.annotations) {
            var annotations = typeOrFunc.annotations;
            if (typeof annotations === 'function' && annotations.annotations) {
              annotations = annotations.annotations;
            }
            return annotations;
          }
          if (typeOrFunc.decorators) {
            return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
          }
          if (this._reflect && this._reflect.getMetadata) {
            var annotations = this._reflect.getMetadata('annotations', typeOrFunc);
            if (annotations)
              return annotations;
          }
          return [];
        };
        ReflectionCapabilities.prototype.propMetadata = function(typeOrFunc) {
          if (typeOrFunc.propMetadata) {
            var propMetadata = typeOrFunc.propMetadata;
            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
              propMetadata = propMetadata.propMetadata;
            }
            return propMetadata;
          }
          if (typeOrFunc.propDecorators) {
            var propDecorators_1 = typeOrFunc.propDecorators;
            var propMetadata_1 = {};
            Object.keys(propDecorators_1).forEach(function(prop) {
              propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
            });
            return propMetadata_1;
          }
          if (this._reflect && this._reflect.getMetadata) {
            var propMetadata = this._reflect.getMetadata('propMetadata', typeOrFunc);
            if (propMetadata)
              return propMetadata;
          }
          return {};
        };
        ReflectionCapabilities.prototype.hasLifecycleHook = function(type, lcProperty) {
          return type instanceof Type && lcProperty in type.prototype;
        };
        ReflectionCapabilities.prototype.getter = function(name) {
          return new Function('o', 'return o.' + name + ';');
        };
        ReflectionCapabilities.prototype.setter = function(name) {
          return new Function('o', 'v', 'return o.' + name + ' = v;');
        };
        ReflectionCapabilities.prototype.method = function(name) {
          var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
          return new Function('o', 'args', functionBody);
        };
        ReflectionCapabilities.prototype.importUri = function(type) {
          if ((typeof type === 'undefined' ? 'undefined' : $traceurRuntime.typeof(type)) === 'object' && type['filePath']) {
            return type['filePath'];
          }
          return "./" + stringify(type);
        };
        ReflectionCapabilities.prototype.resolveIdentifier = function(name, moduleUrl, runtime) {
          return runtime;
        };
        ReflectionCapabilities.prototype.resolveEnum = function(enumIdentifier, name) {
          return enumIdentifier[name];
        };
        return ReflectionCapabilities;
      }());
      $__export("ReflectionCapabilities", ReflectionCapabilities);
    }
  };
});

$__System.register("19c", [], function($__export) {
  "use strict";
  var ReflectorReader;
  return {
    setters: [],
    execute: function() {
      ReflectorReader = (function() {
        function ReflectorReader() {}
        return ReflectorReader;
      }());
      $__export("ReflectorReader", ReflectorReader);
    }
  };
});

$__System.register("1a0", [], function($__export) {
  "use strict";
  var __extends,
      BaseError,
      WrappedError;
  function unimplemented() {
    throw new Error('unimplemented');
  }
  $__export("unimplemented", unimplemented);
  return {
    setters: [],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      BaseError = (function(_super) {
        __extends(BaseError, _super);
        function BaseError(message) {
          var nativeError = _super.call(this, message);
          this._nativeError = nativeError;
        }
        Object.defineProperty(BaseError.prototype, "message", {
          get: function() {
            return this._nativeError.message;
          },
          set: function(message) {
            this._nativeError.message = message;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(BaseError.prototype, "name", {
          get: function() {
            return this._nativeError.name;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(BaseError.prototype, "stack", {
          get: function() {
            return this._nativeError.stack;
          },
          set: function(value) {
            this._nativeError.stack = value;
          },
          enumerable: true,
          configurable: true
        });
        BaseError.prototype.toString = function() {
          return this._nativeError.toString();
        };
        return BaseError;
      }(Error));
      $__export("BaseError", BaseError);
      WrappedError = (function(_super) {
        __extends(WrappedError, _super);
        function WrappedError(message, error) {
          _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
          this.originalError = error;
        }
        Object.defineProperty(WrappedError.prototype, "stack", {
          get: function() {
            return (this.originalError instanceof Error ? this.originalError : this._nativeError).stack;
          },
          enumerable: true,
          configurable: true
        });
        return WrappedError;
      }(BaseError));
      $__export("WrappedError", WrappedError);
    }
  };
});

$__System.register("185", ["1a0"], function($__export) {
  "use strict";
  var unimplemented,
      RenderComponentType,
      RenderDebugInfo,
      Renderer,
      RootRenderer;
  return {
    setters: [function($__m) {
      unimplemented = $__m.unimplemented;
    }],
    execute: function() {
      RenderComponentType = (function() {
        function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
          this.id = id;
          this.templateUrl = templateUrl;
          this.slotCount = slotCount;
          this.encapsulation = encapsulation;
          this.styles = styles;
          this.animations = animations;
        }
        return RenderComponentType;
      }());
      $__export("RenderComponentType", RenderComponentType);
      RenderDebugInfo = (function() {
        function RenderDebugInfo() {}
        Object.defineProperty(RenderDebugInfo.prototype, "injector", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderDebugInfo.prototype, "component", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderDebugInfo.prototype, "providerTokens", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderDebugInfo.prototype, "references", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderDebugInfo.prototype, "context", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(RenderDebugInfo.prototype, "source", {
          get: function() {
            return unimplemented();
          },
          enumerable: true,
          configurable: true
        });
        return RenderDebugInfo;
      }());
      $__export("RenderDebugInfo", RenderDebugInfo);
      Renderer = (function() {
        function Renderer() {}
        return Renderer;
      }());
      $__export("Renderer", Renderer);
      RootRenderer = (function() {
        function RootRenderer() {}
        return RootRenderer;
      }());
      $__export("RootRenderer", RootRenderer);
    }
  };
});

$__System.register("181", ["189"], function($__export) {
  "use strict";
  var global,
      stringify,
      _nextClassId,
      Reflect;
  function extractAnnotation(annotation) {
    if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {
      annotation = annotation.annotation;
    }
    return annotation;
  }
  function applyParams(fnOrArray, key) {
    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function || fnOrArray === Number || fnOrArray === Array) {
      throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
    }
    if (typeof fnOrArray === 'function') {
      return fnOrArray;
    }
    if (Array.isArray(fnOrArray)) {
      var annotations = fnOrArray;
      var annoLength = annotations.length - 1;
      var fn = fnOrArray[annoLength];
      if (typeof fn !== 'function') {
        throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
      }
      if (annoLength != fn.length) {
        throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
      }
      var paramsAnnotations = [];
      for (var i = 0,
          ii = annotations.length - 1; i < ii; i++) {
        var paramAnnotations = [];
        paramsAnnotations.push(paramAnnotations);
        var annotation = annotations[i];
        if (Array.isArray(annotation)) {
          for (var j = 0; j < annotation.length; j++) {
            paramAnnotations.push(extractAnnotation(annotation[j]));
          }
        } else if (typeof annotation === 'function') {
          paramAnnotations.push(extractAnnotation(annotation));
        } else {
          paramAnnotations.push(annotation);
        }
      }
      Reflect.defineMetadata('parameters', paramsAnnotations, fn);
      return fn;
    }
    throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
  }
  function Class(clsDef) {
    var constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
    var proto = constructor.prototype;
    if (clsDef.hasOwnProperty('extends')) {
      if (typeof clsDef.extends === 'function') {
        constructor.prototype = proto = Object.create(clsDef.extends.prototype);
      } else {
        throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
      }
    }
    for (var key in clsDef) {
      if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {
        proto[key] = applyParams(clsDef[key], key);
      }
    }
    if (this && this.annotations instanceof Array) {
      Reflect.defineMetadata('annotations', this.annotations, constructor);
    }
    var constructorName = constructor['name'];
    if (!constructorName || constructorName === 'constructor') {
      constructor['overriddenName'] = "class" + _nextClassId++;
    }
    return constructor;
  }
  function makeDecorator(name, props, parentClass, chainFn) {
    if (chainFn === void 0) {
      chainFn = null;
    }
    var metaCtor = makeMetadataCtor([props]);
    function DecoratorFactory(objOrType) {
      if (!(Reflect && Reflect.getMetadata)) {
        throw 'reflect-metadata shim is required when using class decorators';
      }
      if (this instanceof DecoratorFactory) {
        metaCtor.call(this, objOrType);
        return this;
      }
      var annotationInstance = new DecoratorFactory(objOrType);
      var chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];
      chainAnnotation.push(annotationInstance);
      var TypeDecorator = function TypeDecorator(cls) {
        var annotations = Reflect.getOwnMetadata('annotations', cls) || [];
        annotations.push(annotationInstance);
        Reflect.defineMetadata('annotations', annotations, cls);
        return cls;
      };
      TypeDecorator.annotations = chainAnnotation;
      TypeDecorator.Class = Class;
      if (chainFn)
        chainFn(TypeDecorator);
      return TypeDecorator;
    }
    if (parentClass) {
      DecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    DecoratorFactory.prototype.toString = function() {
      return ("@" + name);
    };
    DecoratorFactory.annotationCls = DecoratorFactory;
    return DecoratorFactory;
  }
  function makeMetadataCtor(props) {
    return function ctor() {
      var _this = this;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      props.forEach(function(prop, i) {
        var argVal = args[i];
        if (Array.isArray(prop)) {
          _this[prop[0]] = argVal === undefined ? prop[1] : argVal;
        } else {
          for (var propName in prop) {
            _this[propName] = argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];
          }
        }
      });
    };
  }
  function makeParamDecorator(name, props, parentClass) {
    var metaCtor = makeMetadataCtor(props);
    function ParamDecoratorFactory() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      if (this instanceof ParamDecoratorFactory) {
        metaCtor.apply(this, args);
        return this;
      }
      var annotationInstance = new ((_a = ParamDecoratorFactory).bind.apply(_a, [void 0].concat(args)))();
      ParamDecorator.annotation = annotationInstance;
      return ParamDecorator;
      function ParamDecorator(cls, unusedKey, index) {
        var parameters = Reflect.getMetadata('parameters', cls) || [];
        while (parameters.length <= index) {
          parameters.push(null);
        }
        parameters[index] = parameters[index] || [];
        parameters[index].push(annotationInstance);
        Reflect.defineMetadata('parameters', parameters, cls);
        return cls;
      }
      var _a;
    }
    if (parentClass) {
      ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    ParamDecoratorFactory.prototype.toString = function() {
      return ("@" + name);
    };
    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
    return ParamDecoratorFactory;
  }
  function makePropDecorator(name, props, parentClass) {
    var metaCtor = makeMetadataCtor(props);
    function PropDecoratorFactory() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      if (this instanceof PropDecoratorFactory) {
        metaCtor.apply(this, args);
        return this;
      }
      var decoratorInstance = new ((_a = PropDecoratorFactory).bind.apply(_a, [void 0].concat(args)))();
      return function PropDecorator(target, name) {
        var meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};
        meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
        meta[name].unshift(decoratorInstance);
        Reflect.defineMetadata('propMetadata', meta, target.constructor);
      };
      var _a;
    }
    if (parentClass) {
      PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    PropDecoratorFactory.prototype.toString = function() {
      return ("@" + name);
    };
    PropDecoratorFactory.annotationCls = PropDecoratorFactory;
    return PropDecoratorFactory;
  }
  $__export("Class", Class);
  $__export("makeDecorator", makeDecorator);
  $__export("makeParamDecorator", makeParamDecorator);
  $__export("makePropDecorator", makePropDecorator);
  return {
    setters: [function($__m) {
      global = $__m.global;
      stringify = $__m.stringify;
    }],
    execute: function() {
      _nextClassId = 0;
      Reflect = global.Reflect;
    }
  };
});

$__System.register("19f", [], function($__export) {
  "use strict";
  function isPromise(obj) {
    return !!obj && typeof obj.then === 'function';
  }
  $__export("isPromise", isPromise);
  return {
    setters: [],
    execute: function() {}
  };
});

$__System.register("1dd", ["1b9", "1c2", "1b6", "1b8", "1b7", "1ba", "1bc", "1bd", "1d1", "1a9", "19a", "1c0", "1d6", "18c", "18f", "1c6", "1ca", "191", "192", "193", "1c9", "1c7", "1a1", "1ac", "1ad", "19b", "1dc", "19c", "185", "181", "19f"], function($__export) {
  "use strict";
  var ANY_STATE_,
      DEFAULT_STATE_,
      EMPTY_STATE_,
      FILL_STYLE_FLAG_,
      AnimationGroupPlayer_,
      AnimationKeyframe_,
      AnimationPlayer_,
      NoOpAnimationPlayer_,
      AnimationSequencePlayer_,
      animationUtils,
      AnimationStyles_,
      AnimationTransition,
      change_detection_util,
      constants,
      console,
      debug,
      reflective_provider,
      ComponentStillLoadingError,
      component_factory_resolver,
      debug_context,
      element,
      ng_module_factory,
      ng_module_factory_loader,
      template_ref,
      view,
      view_type,
      view_utils,
      lifecycle_hooks,
      metadata_view,
      reflection,
      reflection_capabilities,
      reflector_reader,
      api,
      decorators,
      isPromise,
      __core_private__;
  return {
    setters: [function($__m) {
      ANY_STATE_ = $__m.ANY_STATE;
      DEFAULT_STATE_ = $__m.DEFAULT_STATE;
      EMPTY_STATE_ = $__m.EMPTY_STATE;
      FILL_STYLE_FLAG_ = $__m.FILL_STYLE_FLAG;
    }, function($__m) {
      AnimationGroupPlayer_ = $__m.AnimationGroupPlayer;
    }, function($__m) {
      AnimationKeyframe_ = $__m.AnimationKeyframe;
    }, function($__m) {
      AnimationPlayer_ = $__m.AnimationPlayer;
      NoOpAnimationPlayer_ = $__m.NoOpAnimationPlayer;
    }, function($__m) {
      AnimationSequencePlayer_ = $__m.AnimationSequencePlayer;
    }, function($__m) {
      animationUtils = $__m;
    }, function($__m) {
      AnimationStyles_ = $__m.AnimationStyles;
    }, function($__m) {
      AnimationTransition = $__m.AnimationTransition;
    }, function($__m) {
      change_detection_util = $__m;
    }, function($__m) {
      constants = $__m;
    }, function($__m) {
      console = $__m;
    }, function($__m) {
      debug = $__m;
    }, function($__m) {
      reflective_provider = $__m;
    }, function($__m) {
      ComponentStillLoadingError = $__m.ComponentStillLoadingError;
    }, function($__m) {
      component_factory_resolver = $__m;
    }, function($__m) {
      debug_context = $__m;
    }, function($__m) {
      element = $__m;
    }, function($__m) {
      ng_module_factory = $__m;
    }, function($__m) {
      ng_module_factory_loader = $__m;
    }, function($__m) {
      template_ref = $__m;
    }, function($__m) {
      view = $__m;
    }, function($__m) {
      view_type = $__m;
    }, function($__m) {
      view_utils = $__m;
    }, function($__m) {
      lifecycle_hooks = $__m;
    }, function($__m) {
      metadata_view = $__m;
    }, function($__m) {
      reflection = $__m;
    }, function($__m) {
      reflection_capabilities = $__m;
    }, function($__m) {
      reflector_reader = $__m;
    }, function($__m) {
      api = $__m;
    }, function($__m) {
      decorators = $__m;
    }, function($__m) {
      isPromise = $__m.isPromise;
    }],
    execute: function() {
      __core_private__ = {
        isDefaultChangeDetectionStrategy: constants.isDefaultChangeDetectionStrategy,
        ChangeDetectorStatus: constants.ChangeDetectorStatus,
        constructDependencies: reflective_provider.constructDependencies,
        LifecycleHooks: lifecycle_hooks.LifecycleHooks,
        LIFECYCLE_HOOKS_VALUES: lifecycle_hooks.LIFECYCLE_HOOKS_VALUES,
        ReflectorReader: reflector_reader.ReflectorReader,
        CodegenComponentFactoryResolver: component_factory_resolver.CodegenComponentFactoryResolver,
        AppElement: element.AppElement,
        AppView: view.AppView,
        DebugAppView: view.DebugAppView,
        NgModuleInjector: ng_module_factory.NgModuleInjector,
        registerModuleFactory: ng_module_factory_loader.registerModuleFactory,
        ViewType: view_type.ViewType,
        view_utils: view_utils,
        ViewMetadata: metadata_view.ViewMetadata,
        DebugContext: debug_context.DebugContext,
        StaticNodeDebugInfo: debug_context.StaticNodeDebugInfo,
        devModeEqual: change_detection_util.devModeEqual,
        UNINITIALIZED: change_detection_util.UNINITIALIZED,
        ValueUnwrapper: change_detection_util.ValueUnwrapper,
        RenderDebugInfo: api.RenderDebugInfo,
        TemplateRef_: template_ref.TemplateRef_,
        ReflectionCapabilities: reflection_capabilities.ReflectionCapabilities,
        makeDecorator: decorators.makeDecorator,
        DebugDomRootRenderer: debug.DebugDomRootRenderer,
        Console: console.Console,
        reflector: reflection.reflector,
        Reflector: reflection.Reflector,
        NoOpAnimationPlayer: NoOpAnimationPlayer_,
        AnimationPlayer: AnimationPlayer_,
        AnimationSequencePlayer: AnimationSequencePlayer_,
        AnimationGroupPlayer: AnimationGroupPlayer_,
        AnimationKeyframe: AnimationKeyframe_,
        prepareFinalAnimationStyles: animationUtils.prepareFinalAnimationStyles,
        balanceAnimationKeyframes: animationUtils.balanceAnimationKeyframes,
        flattenStyles: animationUtils.flattenStyles,
        clearStyles: animationUtils.clearStyles,
        renderStyles: animationUtils.renderStyles,
        collectAndResolveStyles: animationUtils.collectAndResolveStyles,
        AnimationStyles: AnimationStyles_,
        ANY_STATE: ANY_STATE_,
        DEFAULT_STATE: DEFAULT_STATE_,
        EMPTY_STATE: EMPTY_STATE_,
        FILL_STYLE_FLAG: FILL_STYLE_FLAG_,
        ComponentStillLoadingError: ComponentStillLoadingError,
        isPromise: isPromise,
        AnimationTransition: AnimationTransition
      };
      $__export("__core_private__", __core_private__);
    }
  };
});

$__System.register("1bb", ["189"], function($__export) {
  "use strict";
  var __extends,
      isPresent,
      AUTO_STYLE,
      AnimationEntryMetadata,
      AnimationStateMetadata,
      AnimationStateDeclarationMetadata,
      AnimationStateTransitionMetadata,
      AnimationMetadata,
      AnimationKeyframesSequenceMetadata,
      AnimationStyleMetadata,
      AnimationAnimateMetadata,
      AnimationWithStepsMetadata,
      AnimationSequenceMetadata,
      AnimationGroupMetadata;
  function animate(timing, styles) {
    if (styles === void 0) {
      styles = null;
    }
    var stylesEntry = styles;
    if (!isPresent(stylesEntry)) {
      var EMPTY_STYLE = {};
      stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);
    }
    return new AnimationAnimateMetadata(timing, stylesEntry);
  }
  function group(steps) {
    return new AnimationGroupMetadata(steps);
  }
  function sequence(steps) {
    return new AnimationSequenceMetadata(steps);
  }
  function style(tokens) {
    var input;
    var offset = null;
    if (typeof tokens === 'string') {
      input = [tokens];
    } else {
      if (Array.isArray(tokens)) {
        input = tokens;
      } else {
        input = [tokens];
      }
      input.forEach(function(entry) {
        var entryOffset = entry['offset'];
        if (isPresent(entryOffset)) {
          offset = offset == null ? parseFloat(entryOffset) : offset;
        }
      });
    }
    return new AnimationStyleMetadata(input, offset);
  }
  function state(stateNameExpr, styles) {
    return new AnimationStateDeclarationMetadata(stateNameExpr, styles);
  }
  function keyframes(steps) {
    return new AnimationKeyframesSequenceMetadata(steps);
  }
  function transition(stateChangeExpr, steps) {
    var animationData = Array.isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;
    return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);
  }
  function trigger(name, animation) {
    return new AnimationEntryMetadata(name, animation);
  }
  $__export("animate", animate);
  $__export("group", group);
  $__export("sequence", sequence);
  $__export("style", style);
  $__export("state", state);
  $__export("keyframes", keyframes);
  $__export("transition", transition);
  $__export("trigger", trigger);
  return {
    setters: [function($__m) {
      isPresent = $__m.isPresent;
    }],
    execute: function() {
      __extends = (this && this.__extends) || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      AUTO_STYLE = '*';
      $__export("AUTO_STYLE", AUTO_STYLE);
      AnimationEntryMetadata = (function() {
        function AnimationEntryMetadata(name, definitions) {
          this.name = name;
          this.definitions = definitions;
        }
        return AnimationEntryMetadata;
      }());
      $__export("AnimationEntryMetadata", AnimationEntryMetadata);
      AnimationStateMetadata = (function() {
        function AnimationStateMetadata() {}
        return AnimationStateMetadata;
      }());
      $__export("AnimationStateMetadata", AnimationStateMetadata);
      AnimationStateDeclarationMetadata = (function(_super) {
        __extends(AnimationStateDeclarationMetadata, _super);
        function AnimationStateDeclarationMetadata(stateNameExpr, styles) {
          _super.call(this);
          this.stateNameExpr = stateNameExpr;
          this.styles = styles;
        }
        return AnimationStateDeclarationMetadata;
      }(AnimationStateMetadata));
      $__export("AnimationStateDeclarationMetadata", AnimationStateDeclarationMetadata);
      AnimationStateTransitionMetadata = (function(_super) {
        __extends(AnimationStateTransitionMetadata, _super);
        function AnimationStateTransitionMetadata(stateChangeExpr, steps) {
          _super.call(this);
          this.stateChangeExpr = stateChangeExpr;
          this.steps = steps;
        }
        return AnimationStateTransitionMetadata;
      }(AnimationStateMetadata));
      $__export("AnimationStateTransitionMetadata", AnimationStateTransitionMetadata);
      AnimationMetadata = (function() {
        function AnimationMetadata() {}
        return AnimationMetadata;
      }());
      $__export("AnimationMetadata", AnimationMetadata);
      AnimationKeyframesSequenceMetadata = (function(_super) {
        __extends(AnimationKeyframesSequenceMetadata, _super);
        function AnimationKeyframesSequenceMetadata(steps) {
          _super.call(this);
          this.steps = steps;
        }
        return AnimationKeyframesSequenceMetadata;
      }(AnimationMetadata));
      $__export("AnimationKeyframesSequenceMetadata", AnimationKeyframesSequenceMetadata);
      AnimationStyleMetadata = (function(_super) {
        __extends(AnimationStyleMetadata, _super);
        function AnimationStyleMetadata(styles, offset) {
          if (offset === void 0) {
            offset = null;
          }
          _super.call(this);
          this.styles = styles;
          this.offset = offset;
        }
        return AnimationStyleMetadata;
      }(AnimationMetadata));
      $__export("AnimationStyleMetadata", AnimationStyleMetadata);
      AnimationAnimateMetadata = (function(_super) {
        __extends(AnimationAnimateMetadata, _super);
        function AnimationAnimateMetadata(timings, styles) {
          _super.call(this);
          this.timings = timings;
          this.styles = styles;
        }
        return AnimationAnimateMetadata;
      }(AnimationMetadata));
      $__export("AnimationAnimateMetadata", AnimationAnimateMetadata);
      AnimationWithStepsMetadata = (function(_super) {
        __extends(AnimationWithStepsMetadata, _super);
        function AnimationWithStepsMetadata() {
          _super.call(this);
        }
        Object.defineProperty(AnimationWithStepsMetadata.prototype, "steps", {
          get: function() {
            throw new Error('NOT IMPLEMENTED: Base Class');
          },
          enumerable: true,
          configurable: true
        });
        return AnimationWithStepsMetadata;
      }(AnimationMetadata));
      $__export("AnimationWithStepsMetadata", AnimationWithStepsMetadata);
      AnimationSequenceMetadata = (function(_super) {
        __extends(AnimationSequenceMetadata, _super);
        function AnimationSequenceMetadata(_steps) {
          _super.call(this);
          this._steps = _steps;
        }
        Object.defineProperty(AnimationSequenceMetadata.prototype, "steps", {
          get: function() {
            return this._steps;
          },
          enumerable: true,
          configurable: true
        });
        return AnimationSequenceMetadata;
      }(AnimationWithStepsMetadata));
      $__export("AnimationSequenceMetadata", AnimationSequenceMetadata);
      AnimationGroupMetadata = (function(_super) {
        __extends(AnimationGroupMetadata, _super);
        function AnimationGroupMetadata(_steps) {
          _super.call(this);
          this._steps = _steps;
        }
        Object.defineProperty(AnimationGroupMetadata.prototype, "steps", {
          get: function() {
            return this._steps;
          },
          enumerable: true,
          configurable: true
        });
        return AnimationGroupMetadata;
      }(AnimationWithStepsMetadata));
      $__export("AnimationGroupMetadata", AnimationGroupMetadata);
    }
  };
});

$__System.register("1be", [], function($__export) {
  "use strict";
  var AnimationTransitionEvent;
  return {
    setters: [],
    execute: function() {
      AnimationTransitionEvent = (function() {
        function AnimationTransitionEvent(_a) {
          var fromState = _a.fromState,
              toState = _a.toState,
              totalTime = _a.totalTime,
              phaseName = _a.phaseName;
          this.fromState = fromState;
          this.toState = toState;
          this.totalTime = totalTime;
          this.phaseName = phaseName;
        }
        return AnimationTransitionEvent;
      }());
      $__export("AnimationTransitionEvent", AnimationTransitionEvent);
    }
  };
});

$__System.register("189", [], function($__export) {
  "use strict";
  var globalScope,
      _global,
      STRING_MAP_PROTO,
      NumberWrapper,
      _symbolIterator;
  function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
  }
  function getTypeNameForDebugging(type) {
    return type['name'] || (typeof type === 'undefined' ? 'undefined' : $traceurRuntime.typeof(type));
  }
  function isPresent(obj) {
    return obj != null;
  }
  function isBlank(obj) {
    return obj == null;
  }
  function isStrictStringMap(obj) {
    return (typeof obj === 'undefined' ? 'undefined' : $traceurRuntime.typeof(obj)) === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
  }
  function isDate(obj) {
    return obj instanceof Date && !isNaN(obj.valueOf());
  }
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token === undefined || token === null) {
      return '' + token;
    }
    if (token.overriddenName) {
      return token.overriddenName;
    }
    if (token.name) {
      return token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
  }
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || (typeof o === 'undefined' ? 'undefined' : $traceurRuntime.typeof(o)) === 'object');
  }
  function print(obj) {
    console.log(obj);
  }
  function warn(obj) {
    console.warn(obj);
  }
  function setValueOnPath(global, path, value) {
    var parts = path.split('.');
    var obj = global;
    while (parts.length > 1) {
      var name = parts.shift();
      if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
        obj = obj[name];
      } else {
        obj = obj[name] = {};
      }
    }
    if (obj === undefined || obj === null) {
      obj = {};
    }
    obj[parts.shift()] = value;
  }
  function getSymbolIterator() {
    if (!_symbolIterator) {
      if (globalScope.Symbol && Symbol.iterator) {
        _symbolIterator = Symbol.iterator;
      } else {
        var keys = Object.getOwnPropertyNames(Map.prototype);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
            _symbolIterator = key;
          }
        }
      }
    }
    return _symbolIterator;
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  function escapeRegExp(s) {
    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }
  $__export("scheduleMicroTask", scheduleMicroTask);
  $__export("getTypeNameForDebugging", getTypeNameForDebugging);
  $__export("isPresent", isPresent);
  $__export("isBlank", isBlank);
  $__export("isStrictStringMap", isStrictStringMap);
  $__export("isDate", isDate);
  $__export("stringify", stringify);
  $__export("looseIdentical", looseIdentical);
  $__export("isJsObject", isJsObject);
  $__export("print", print);
  $__export("warn", warn);
  $__export("setValueOnPath", setValueOnPath);
  $__export("getSymbolIterator", getSymbolIterator);
  $__export("isPrimitive", isPrimitive);
  $__export("escapeRegExp", escapeRegExp);
  return {
    setters: [],
    execute: function() {
      if (typeof window === 'undefined') {
        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
          globalScope = self;
        } else {
          globalScope = global;
        }
      } else {
        globalScope = window;
      }
      _global = globalScope;
      $__export("global", _global);
      _global.assert = function assert(condition) {};
      STRING_MAP_PROTO = Object.getPrototypeOf({});
      NumberWrapper = (function() {
        function NumberWrapper() {}
        NumberWrapper.parseIntAutoRadix = function(text) {
          var result = parseInt(text);
          if (isNaN(result)) {
            throw new Error('Invalid integer literal when parsing ' + text);
          }
          return result;
        };
        NumberWrapper.parseInt = function(text, radix) {
          if (radix == 10) {
            if (/^(\-|\+)?[0-9]+$/.test(text)) {
              return parseInt(text, radix);
            }
          } else if (radix == 16) {
            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
              return parseInt(text, radix);
            }
          } else {
            var result = parseInt(text, radix);
            if (!isNaN(result)) {
              return result;
            }
          }
          throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
        };
        NumberWrapper.isNumeric = function(value) {
          return !isNaN(value - parseFloat(value));
        };
        return NumberWrapper;
      }());
      $__export("NumberWrapper", NumberWrapper);
      _symbolIterator = null;
    }
  };
});

$__System.register("1b8", ["189"], function($__export) {
  "use strict";
  var scheduleMicroTask,
      AnimationPlayer,
      NoOpAnimationPlayer;
  return {
    setters: [function($__m) {
      scheduleMicroTask = $__m.scheduleMicroTask;
    }],
    execute: function() {
      AnimationPlayer = (function() {
        function AnimationPlayer() {}
        Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", {
          get: function() {
            throw new Error('NOT IMPLEMENTED: Base Class');
          },
          set: function(player) {
            throw new Error('NOT IMPLEMENTED: Base Class');
          },
          enumerable: true,
          configurable: true
        });
        return AnimationPlayer;
      }());
      $__export("AnimationPlayer", AnimationPlayer);
      NoOpAnimationPlayer = (function() {
        function NoOpAnimationPlayer() {
          var _this = this;
          this._onDoneFns = [];
          this._onStartFns = [];
          this._started = false;
          this.parentPlayer = null;
          scheduleMicroTask(function() {
            return _this._onFinish();
          });
        }
        NoOpAnimationPlayer.prototype._onFinish = function() {
          this._onDoneFns.forEach(function(fn) {
            return fn();
          });
          this._onDoneFns = [];
        };
        NoOpAnimationPlayer.prototype.onStart = function(fn) {
          this._onStartFns.push(fn);
        };
        NoOpAnimationPlayer.prototype.onDone = function(fn) {
          this._onDoneFns.push(fn);
        };
        NoOpAnimationPlayer.prototype.hasStarted = function() {
          return this._started;
        };
        NoOpAnimationPlayer.prototype.init = function() {};
        NoOpAnimationPlayer.prototype.play = function() {
          if (!this.hasStarted()) {
            this._onStartFns.forEach(function(fn) {
              return fn();
            });
            this._onStartFns = [];
          }
          this._started = true;
        };
        NoOpAnimationPlayer.prototype.pause = function() {};
        NoOpAnimationPlayer.prototype.restart = function() {};
        NoOpAnimationPlayer.prototype.finish = function() {
          this._onFinish();
        };
        NoOpAnimationPlayer.prototype.destroy = function() {};
        NoOpAnimationPlayer.prototype.reset = function() {};
        NoOpAnimationPlayer.prototype.setPosition = function(p) {};
        NoOpAnimationPlayer.prototype.getPosition = function() {
          return 0;
        };
        return NoOpAnimationPlayer;
      }());
      $__export("NoOpAnimationPlayer", NoOpAnimationPlayer);
    }
  };
});

$__System.register("1da", [], function($__export) {
  "use strict";
  var SecurityContext,
      Sanitizer;
  return {
    setters: [],
    execute: function() {
      $__export("SecurityContext", SecurityContext);
      (function(SecurityContext) {
        SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
        SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
        SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
        SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
        SecurityContext[SecurityContext["URL"] = 4] = "URL";
        SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
      })(SecurityContext || ($__export("SecurityContext", SecurityContext = {})));
      Sanitizer = (function() {
        function Sanitizer() {}
        return Sanitizer;
      }());
      $__export("Sanitizer", Sanitizer);
    }
  };
});

$__System.register("1de", ["1ab", "180", "18b", "199", "1a3", "19e", "182", "184", "18d", "1bf", "19d", "196", "198", "1a5", "1ae", "1a4", "1d7", "187", "1a2", "1dd", "1bb", "1be", "1b8", "1da"], function($__export) {
  "use strict";
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  var $__exportNames = {undefined: true};
  return {
    setters: [function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      $__export({
        createPlatform: $__m.createPlatform,
        assertPlatform: $__m.assertPlatform,
        destroyPlatform: $__m.destroyPlatform,
        getPlatform: $__m.getPlatform,
        PlatformRef: $__m.PlatformRef,
        ApplicationRef: $__m.ApplicationRef,
        enableProdMode: $__m.enableProdMode,
        isDevMode: $__m.isDevMode,
        createPlatformFactory: $__m.createPlatformFactory
      });
    }, function($__m) {
      $__export({
        APP_ID: $__m.APP_ID,
        PACKAGE_ROOT_URL: $__m.PACKAGE_ROOT_URL,
        PLATFORM_INITIALIZER: $__m.PLATFORM_INITIALIZER,
        APP_BOOTSTRAP_LISTENER: $__m.APP_BOOTSTRAP_LISTENER
      });
    }, function($__m) {
      $__export({
        APP_INITIALIZER: $__m.APP_INITIALIZER,
        ApplicationInitStatus: $__m.ApplicationInitStatus
      });
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      $__export({
        DebugElement: $__m.DebugElement,
        DebugNode: $__m.DebugNode,
        asNativeElements: $__m.asNativeElements,
        getDebugNode: $__m.getDebugNode
      });
    }, function($__m) {
      $__export({
        Testability: $__m.Testability,
        TestabilityRegistry: $__m.TestabilityRegistry,
        setTestabilityGetter: $__m.setTestabilityGetter
      });
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      $__export({
        TRANSLATIONS: $__m.TRANSLATIONS,
        TRANSLATIONS_FORMAT: $__m.TRANSLATIONS_FORMAT,
        LOCALE_ID: $__m.LOCALE_ID
      });
    }, function($__m) {
      $__export({ApplicationModule: $__m.ApplicationModule});
    }, function($__m) {
      $__export({
        wtfCreateScope: $__m.wtfCreateScope,
        wtfLeave: $__m.wtfLeave,
        wtfStartTimeRange: $__m.wtfStartTimeRange,
        wtfEndTimeRange: $__m.wtfEndTimeRange
      });
    }, function($__m) {
      $__export({Type: $__m.Type});
    }, function($__m) {
      $__export({EventEmitter: $__m.EventEmitter});
    }, function($__m) {
      $__export({ErrorHandler: $__m.ErrorHandler});
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }, function($__m) {
      $__export({AnimationTransitionEvent: $__m.AnimationTransitionEvent});
    }, function($__m) {
      $__export({AnimationPlayer: $__m.AnimationPlayer});
    }, function($__m) {
      $__export({
        Sanitizer: $__m.Sanitizer,
        SecurityContext: $__m.SecurityContext
      });
    }],
    execute: function() {}
  };
});

$__System.register("c", ["1de"], function($__export) {
  "use strict";
  var $__exportNames = {};
  return {
    setters: [function($__m) {
      var exportObj = Object.create(null);
      Object.keys($__m).forEach(function(p) {
        if (p !== 'default' && !$__exportNames[p])
          exportObj[p] = $__m[p];
      });
      $__export(exportObj);
    }],
    execute: function() {}
  };
});

$__System.registerDynamic('1', ['2', '3', '4', '5', '6e', '17f', 'c'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  $__require('2');
  $__require('3');
  $__require('4');
  $__require('5');
  var platform_browser_dynamic_1 = $__require('6e');
  var module_1 = $__require('17f');
  var core_1 = $__require('c');
  core_1.enableProdMode();
  platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(module_1.AppModule);
  return module.exports;
});
})
(function(factory) {
  if (typeof define == 'function' && define.amd)
    define([], factory);
  else if (typeof module == 'object' && module.exports && typeof require == 'function')
    module.exports = factory();
  else
    factory();
});